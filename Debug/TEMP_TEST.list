
TEMP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08005e78  08005e78  00015e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c4  080063c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080063c4  080063c4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063c4  080063c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001dc  080065a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080065a8  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a082  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bb  00000000  00000000  0002a287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  0002c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018643  00000000  00000000  0002d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2f1  00000000  00000000  00045a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7a3  00000000  00000000  00051d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  000dd558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e5c 	.word	0x08005e5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005e5c 	.word	0x08005e5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <delay>:
int Search_ROM();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <delay+0x2c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay) {
 8000f54:	bf00      	nop
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <delay+0x2c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f9      	bhi.n	8000f56 <delay+0x12>

	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001f8 	.word	0x200001f8

08000f74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f7a:	f000 fe01 	bl	8001b80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f7e:	f000 f8c1 	bl	8001104 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f82:	f000 f97f 	bl	8001284 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f86:	f000 f953 	bl	8001230 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000f8a:	f000 f901 	bl	8001190 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000f8e:	484b      	ldr	r0, [pc, #300]	; (80010bc <main+0x148>)
 8000f90:	f001 fd7e 	bl	8002a90 <HAL_TIM_Base_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	printf("\n\n\n\n\n\nFrom TEMP Sensor Test\r\n");
 8000f94:	484a      	ldr	r0, [pc, #296]	; (80010c0 <main+0x14c>)
 8000f96:	f002 feaf 	bl	8003cf8 <puts>
	last_discrepancy = 0;
 8000f9a:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <main+0x150>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	while (!Search_ROM()) {
 8000fa0:	e003      	b.n	8000faa <main+0x36>
		if (FLAG_DONE == 1) {
 8000fa2:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <main+0x154>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <main+0x42>
	while (!Search_ROM()) {
 8000faa:	f000 fab1 	bl	8001510 <Search_ROM>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f6      	beq.n	8000fa2 <main+0x2e>
 8000fb4:	e000      	b.n	8000fb8 <main+0x44>
			break;
 8000fb6:	bf00      	nop
		}
	}

	printf("Number of devices on bus = %d\n", count);
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <main+0x158>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4844      	ldr	r0, [pc, #272]	; (80010d0 <main+0x15c>)
 8000fc0:	f002 fe14 	bl	8003bec <iprintf>
	printf("rom id == { ");
 8000fc4:	4843      	ldr	r0, [pc, #268]	; (80010d4 <main+0x160>)
 8000fc6:	f002 fe11 	bl	8003bec <iprintf>
	for (int i = 0; i < 8; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e00a      	b.n	8000fe6 <main+0x72>
		printf("0x%x ", new_rom_id[i]);
 8000fd0:	4a41      	ldr	r2, [pc, #260]	; (80010d8 <main+0x164>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4840      	ldr	r0, [pc, #256]	; (80010dc <main+0x168>)
 8000fdc:	f002 fe06 	bl	8003bec <iprintf>
	for (int i = 0; i < 8; i++) {
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	ddf1      	ble.n	8000fd0 <main+0x5c>
	}
	printf("}\n");
 8000fec:	483c      	ldr	r0, [pc, #240]	; (80010e0 <main+0x16c>)
 8000fee:	f002 fe83 	bl	8003cf8 <puts>

	Presence = DS18B20_Start();
 8000ff2:	f000 f9bd 	bl	8001370 <DS18B20_Start>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a3a      	ldr	r2, [pc, #232]	; (80010e4 <main+0x170>)
 8000ffa:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <main+0x170>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d004      	beq.n	800100e <main+0x9a>
		printf("Presence not detected\n");
 8001004:	4838      	ldr	r0, [pc, #224]	; (80010e8 <main+0x174>)
 8001006:	f002 fe77 	bl	8003cf8 <puts>
		return 0;
 800100a:	2300      	movs	r3, #0
 800100c:	e052      	b.n	80010b4 <main+0x140>
	}
	printf("Presence = %d\n", Presence);
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <main+0x170>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4619      	mov	r1, r3
 8001014:	4835      	ldr	r0, [pc, #212]	; (80010ec <main+0x178>)
 8001016:	f002 fde9 	bl	8003bec <iprintf>

	Match_ROM(0);
 800101a:	2000      	movs	r0, #0
 800101c:	f000 fb8c 	bl	8001738 <Match_ROM>

//	DS18B20_Write(0x44, 0);  // convert t

	DS18B20_Write(0xBE, 0);
 8001020:	2100      	movs	r1, #0
 8001022:	20be      	movs	r0, #190	; 0xbe
 8001024:	f000 f9d6 	bl	80013d4 <DS18B20_Write>
	uint8_t data[9] = { 0 };
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	711a      	strb	r2, [r3, #4]

	for (int i = 0; i < 9; i++) {
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	e00c      	b.n	8001056 <main+0xe2>
		data[i] = DS18B20_Read(0);
 800103c:	2000      	movs	r0, #0
 800103e:	f000 fa1d 	bl	800147c <DS18B20_Read>
 8001042:	4603      	mov	r3, r0
 8001044:	4619      	mov	r1, r3
 8001046:	1d3a      	adds	r2, r7, #4
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4413      	add	r3, r2
 800104c:	460a      	mov	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3301      	adds	r3, #1
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b08      	cmp	r3, #8
 800105a:	ddef      	ble.n	800103c <main+0xc8>
	}

//	Temp_byte1 = DS18B20_Read(0);
//	Temp_byte2 = DS18B20_Read(0);

	Temp_byte1 = data[0];
 800105c:	793a      	ldrb	r2, [r7, #4]
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <main+0x17c>)
 8001060:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = data[1];
 8001062:	797a      	ldrb	r2, [r7, #5]
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <main+0x180>)
 8001066:	701a      	strb	r2, [r3, #0]

	TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <main+0x180>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <main+0x17c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <main+0x184>)
 800107e:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP / 16;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <main+0x184>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fdb5 	bl	8000bf4 <__aeabi_ui2f>
 800108a:	4603      	mov	r3, r0
 800108c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff febb 	bl	8000e0c <__aeabi_fdiv>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <main+0x188>)
 800109c:	601a      	str	r2, [r3, #0]

	printf("Temperature = %f \n", Temperature);
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <main+0x188>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f9c0 	bl	8000428 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4814      	ldr	r0, [pc, #80]	; (8001100 <main+0x18c>)
 80010ae:	f002 fd9d 	bl	8003bec <iprintf>

	while (1) {
 80010b2:	e7fe      	b.n	80010b2 <main+0x13e>
//			Temperature = (float) TEMP / 16;
//
//			printf("Temperature = %f \n", Temperature);
	}
	/* USER CODE END 3 */
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200001f8 	.word	0x200001f8
 80010c0:	08005e78 	.word	0x08005e78
 80010c4:	200002a1 	.word	0x200002a1
 80010c8:	200002a2 	.word	0x200002a2
 80010cc:	200002a3 	.word	0x200002a3
 80010d0:	08005e98 	.word	0x08005e98
 80010d4:	08005eb8 	.word	0x08005eb8
 80010d8:	20000294 	.word	0x20000294
 80010dc:	08005ec8 	.word	0x08005ec8
 80010e0:	08005ed0 	.word	0x08005ed0
 80010e4:	20000288 	.word	0x20000288
 80010e8:	08005ed4 	.word	0x08005ed4
 80010ec:	08005eec 	.word	0x08005eec
 80010f0:	20000284 	.word	0x20000284
 80010f4:	20000285 	.word	0x20000285
 80010f8:	20000290 	.word	0x20000290
 80010fc:	2000028c 	.word	0x2000028c
 8001100:	08005efc 	.word	0x08005efc

08001104 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2228      	movs	r2, #40	; 0x28
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f002 f902 	bl	800331c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001142:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f835 	bl	80021bc <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x58>
		Error_Handler();
 8001158:	f000 fb4a 	bl	80017f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2302      	movs	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f001 faa2 	bl	80026c0 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x82>
		Error_Handler();
 8001182:	f000 fb35 	bl	80017f0 <Error_Handler>
	}
}
 8001186:	bf00      	nop
 8001188:	3740      	adds	r7, #64	; 0x40
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <MX_TIM1_Init+0x98>)
 80011ae:	4a1f      	ldr	r2, [pc, #124]	; (800122c <MX_TIM1_Init+0x9c>)
 80011b0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_TIM1_Init+0x98>)
 80011b4:	2247      	movs	r2, #71	; 0x47
 80011b6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_TIM1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_TIM1_Init+0x98>)
 80011c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_TIM1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_TIM1_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_TIM1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <MX_TIM1_Init+0x98>)
 80011da:	f001 fc09 	bl	80029f0 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80011e4:	f000 fb04 	bl	80017f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_TIM1_Init+0x98>)
 80011f6:	f001 fc95 	bl	8002b24 <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x74>
		Error_Handler();
 8001200:	f000 faf6 	bl	80017f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_TIM1_Init+0x98>)
 8001212:	f001 fe43 	bl	8002e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800121c:	f000 fae8 	bl	80017f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001f8 	.word	0x200001f8
 800122c:	40012c00 	.word	0x40012c00

08001230 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_USART1_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001268:	f001 fe76 	bl	8002f58 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001272:	f000 fabd 	bl	80017f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000240 	.word	0x20000240
 8001280:	40013800 	.word	0x40013800

08001284 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_GPIO_Init+0xbc>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a28      	ldr	r2, [pc, #160]	; (8001340 <MX_GPIO_Init+0xbc>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fe:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_GPIO_Init+0xc0>)
 8001300:	f000 ff43 	bl	800218a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001308:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2302      	movs	r3, #2
 8001314:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <MX_GPIO_Init+0xc0>)
 800131e:	f000 fd99 	bl	8001e54 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001322:	2302      	movs	r3, #2
 8001324:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_GPIO_Init+0xc4>)
 8001332:	f000 fd8f 	bl	8001e54 <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40011000 	.word	0x40011000
 8001348:	40010c00 	.word	0x40010c00

0800134c <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	2201      	movs	r2, #1
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <__io_putchar+0x20>)
 800135e:	f001 fe48 	bl	8002ff2 <HAL_UART_Transmit>
	return ch;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000240 	.word	0x20000240

08001370 <DS18B20_Start>:

int DS18B20_Start(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	int Response = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800137a:	2102      	movs	r1, #2
 800137c:	4814      	ldr	r0, [pc, #80]	; (80013d0 <DS18B20_Start+0x60>)
 800137e:	f000 f9fd 	bl	800177c <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin low
 8001382:	2200      	movs	r2, #0
 8001384:	2102      	movs	r1, #2
 8001386:	4812      	ldr	r0, [pc, #72]	; (80013d0 <DS18B20_Start+0x60>)
 8001388:	f000 feff 	bl	800218a <HAL_GPIO_WritePin>
	delay(480);   // delay according to data sheet
 800138c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001390:	f7ff fdd8 	bl	8000f44 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001394:	2102      	movs	r1, #2
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <DS18B20_Start+0x60>)
 8001398:	f000 fa0d 	bl	80017b6 <Set_Pin_Input>
	delay(80);    // delay according to data sheet
 800139c:	2050      	movs	r0, #80	; 0x50
 800139e:	f7ff fdd1 	bl	8000f44 <delay>

	if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 80013a2:	2102      	movs	r1, #2
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <DS18B20_Start+0x60>)
 80013a6:	f000 fed9 	bl	800215c <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <DS18B20_Start+0x46>
		Response = 1; // if the pin is low i.e the presence pulse is detected
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	e002      	b.n	80013bc <DS18B20_Start+0x4c>
	else
		Response = -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	607b      	str	r3, [r7, #4]

	delay(400); // Waiting to complete the response cycle
 80013bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013c0:	f7ff fdc0 	bl	8000f44 <delay>

	return Response;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40010c00 	.word	0x40010c00

080013d4 <DS18B20_Write>:

void DS18B20_Write(uint8_t data, uint8_t bit) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
	int loop = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
	if (bit == 1) {
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d102      	bne.n	80013f4 <DS18B20_Write+0x20>
		loop = 1; // Bit write
 80013ee:	2301      	movs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e001      	b.n	80013f8 <DS18B20_Write+0x24>
	} else {
		loop = 8; // Byte write
 80013f4:	2308      	movs	r3, #8
 80013f6:	60fb      	str	r3, [r7, #12]
	}
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80013f8:	2102      	movs	r1, #2
 80013fa:	481f      	ldr	r0, [pc, #124]	; (8001478 <DS18B20_Write+0xa4>)
 80013fc:	f000 f9be 	bl	800177c <Set_Pin_Output>

	for (int i = 0; i < loop; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	e02e      	b.n	8001464 <DS18B20_Write+0x90>

		if ((data & (1 << i)) != 0)  // if the bit is high
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	fa42 f303 	asr.w	r3, r2, r3
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d013      	beq.n	800143e <DS18B20_Write+0x6a>
				{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001416:	2102      	movs	r1, #2
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <DS18B20_Write+0xa4>)
 800141a:	f000 f9af 	bl	800177c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 800141e:	2200      	movs	r2, #0
 8001420:	2102      	movs	r1, #2
 8001422:	4815      	ldr	r0, [pc, #84]	; (8001478 <DS18B20_Write+0xa4>)
 8001424:	f000 feb1 	bl	800218a <HAL_GPIO_WritePin>
			delay(1);  // wait for 1 us
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fd8b 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800142e:	2102      	movs	r1, #2
 8001430:	4811      	ldr	r0, [pc, #68]	; (8001478 <DS18B20_Write+0xa4>)
 8001432:	f000 f9c0 	bl	80017b6 <Set_Pin_Input>
			delay(60);  // wait for 60 us
 8001436:	203c      	movs	r0, #60	; 0x3c
 8001438:	f7ff fd84 	bl	8000f44 <delay>
 800143c:	e00f      	b.n	800145e <DS18B20_Write+0x8a>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800143e:	2102      	movs	r1, #2
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <DS18B20_Write+0xa4>)
 8001442:	f000 f99b 	bl	800177c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 8001446:	2200      	movs	r2, #0
 8001448:	2102      	movs	r1, #2
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <DS18B20_Write+0xa4>)
 800144c:	f000 fe9d 	bl	800218a <HAL_GPIO_WritePin>
			delay(60);  // wait for 60 us
 8001450:	203c      	movs	r0, #60	; 0x3c
 8001452:	f7ff fd77 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001456:	2102      	movs	r1, #2
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <DS18B20_Write+0xa4>)
 800145a:	f000 f9ac 	bl	80017b6 <Set_Pin_Input>
	for (int i = 0; i < loop; i++) {
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbcc      	blt.n	8001406 <DS18B20_Write+0x32>
		}
	}
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010c00 	.word	0x40010c00

0800147c <DS18B20_Read>:

uint8_t DS18B20_Read(uint8_t bit) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	int loop = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
	if (bit == 1) {  // Bit read
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <DS18B20_Read+0x1a>
		loop = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e001      	b.n	800149a <DS18B20_Read+0x1e>
	} else {
		loop = 8; // Byte read
 8001496:	2308      	movs	r3, #8
 8001498:	617b      	str	r3, [r7, #20]
	}

	uint8_t value = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	74fb      	strb	r3, [r7, #19]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800149e:	2102      	movs	r1, #2
 80014a0:	481a      	ldr	r0, [pc, #104]	; (800150c <DS18B20_Read+0x90>)
 80014a2:	f000 f988 	bl	80017b6 <Set_Pin_Input>

	for (int i = 0; i < loop; i++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	e026      	b.n	80014fa <DS18B20_Read+0x7e>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80014ac:	2102      	movs	r1, #2
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <DS18B20_Read+0x90>)
 80014b0:	f000 f964 	bl	800177c <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the data pin LOW
 80014b4:	2200      	movs	r2, #0
 80014b6:	2102      	movs	r1, #2
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <DS18B20_Read+0x90>)
 80014ba:	f000 fe66 	bl	800218a <HAL_GPIO_WritePin>
		delay(5);  // wait for 5 us
 80014be:	2005      	movs	r0, #5
 80014c0:	f7ff fd40 	bl	8000f44 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80014c4:	2102      	movs	r1, #2
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <DS18B20_Read+0x90>)
 80014c8:	f000 f975 	bl	80017b6 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80014cc:	2102      	movs	r1, #2
 80014ce:	480f      	ldr	r0, [pc, #60]	; (800150c <DS18B20_Read+0x90>)
 80014d0:	f000 fe44 	bl	800215c <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <DS18B20_Read+0x72>
				{
			value |= 1 << i;  // read = 1
 80014da:	2201      	movs	r2, #1
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	74fb      	strb	r3, [r7, #19]
		}
		delay(60);  // wait for 60 us
 80014ee:	203c      	movs	r0, #60	; 0x3c
 80014f0:	f7ff fd28 	bl	8000f44 <delay>
	for (int i = 0; i < loop; i++) {
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbd4      	blt.n	80014ac <DS18B20_Read+0x30>
	}
	return value;
 8001502:	7cfb      	ldrb	r3, [r7, #19]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40010c00 	.word	0x40010c00

08001510 <Search_ROM>:

int Search_ROM() {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

	Presence = DS18B20_Start();
 8001514:	f7ff ff2c 	bl	8001370 <DS18B20_Start>
 8001518:	4603      	mov	r3, r0
 800151a:	4a71      	ldr	r2, [pc, #452]	; (80016e0 <Search_ROM+0x1d0>)
 800151c:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 800151e:	4b70      	ldr	r3, [pc, #448]	; (80016e0 <Search_ROM+0x1d0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d004      	beq.n	8001530 <Search_ROM+0x20>
		printf("Presence not detected\n");
 8001526:	486f      	ldr	r0, [pc, #444]	; (80016e4 <Search_ROM+0x1d4>)
 8001528:	f002 fbe6 	bl	8003cf8 <puts>
		return 0;
 800152c:	2300      	movs	r3, #0
 800152e:	e0d5      	b.n	80016dc <Search_ROM+0x1cc>
	}
	printf("Presence = %d\n", Presence);
 8001530:	4b6b      	ldr	r3, [pc, #428]	; (80016e0 <Search_ROM+0x1d0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	486c      	ldr	r0, [pc, #432]	; (80016e8 <Search_ROM+0x1d8>)
 8001538:	f002 fb58 	bl	8003bec <iprintf>

	if (FLAG_DONE == SET) {
 800153c:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <Search_ROM+0x1dc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <Search_ROM+0x38>
		return 0;
 8001544:	2300      	movs	r3, #0
 8001546:	e0c9      	b.n	80016dc <Search_ROM+0x1cc>
	}
	HAL_Delay(1);
 8001548:	2001      	movs	r0, #1
 800154a:	f000 fb7b 	bl	8001c44 <HAL_Delay>
	bit_number = 1;
 800154e:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <Search_ROM+0x1e0>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
	last_zero = 0;
 8001554:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <Search_ROM+0x1e4>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

	DS18B20_Write(0xF0, 0);  // Send Search ROM command
 800155a:	2100      	movs	r1, #0
 800155c:	20f0      	movs	r0, #240	; 0xf0
 800155e:	f7ff ff39 	bl	80013d4 <DS18B20_Write>
	bit_counter = 0;
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <Search_ROM+0x1e8>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]

	do {

		bit_id = DS18B20_Read(1);				// read LSB bit value
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff ff87 	bl	800147c <DS18B20_Read>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b62      	ldr	r3, [pc, #392]	; (80016fc <Search_ROM+0x1ec>)
 8001574:	701a      	strb	r2, [r3, #0]
		bit_id_comp = DS18B20_Read(1);  // read LSB bit value complement
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff ff80 	bl	800147c <DS18B20_Read>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <Search_ROM+0x1f0>)
 8001582:	701a      	strb	r2, [r3, #0]

		if (bit_id && bit_id_comp) { // 11 is the case for false value indicating no more devices
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <Search_ROM+0x1ec>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <Search_ROM+0x8e>
 800158c:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <Search_ROM+0x1f0>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <Search_ROM+0x8e>
			printf("No more devices\n");
 8001594:	485b      	ldr	r0, [pc, #364]	; (8001704 <Search_ROM+0x1f4>)
 8001596:	f002 fbaf 	bl	8003cf8 <puts>
			return 0;
 800159a:	2300      	movs	r3, #0
 800159c:	e09e      	b.n	80016dc <Search_ROM+0x1cc>
		} else {
			if (bit_id == bit_id_comp) // 00 indicates both 0 and 1 bit value at LSB of available devices
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <Search_ROM+0x1ec>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <Search_ROM+0x1f0>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d11c      	bne.n	80015e4 <Search_ROM+0xd4>
					{
				if (bit_number == last_discrepancy) {
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <Search_ROM+0x1e0>)
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <Search_ROM+0x1f8>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d103      	bne.n	80015be <Search_ROM+0xae>
					search_value = 1;
 80015b6:	4b55      	ldr	r3, [pc, #340]	; (800170c <Search_ROM+0x1fc>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e016      	b.n	80015ec <Search_ROM+0xdc>
				} else {
					if (bit_number > last_discrepancy) {
 80015be:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <Search_ROM+0x1e0>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <Search_ROM+0x1f8>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d903      	bls.n	80015d2 <Search_ROM+0xc2>
						search_value = 0;
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <Search_ROM+0x1fc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e00c      	b.n	80015ec <Search_ROM+0xdc>
//						if(last_zero < 9)
//						{
//
//						}
					} else {
						if (bit_number == 0) {
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <Search_ROM+0x1e0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <Search_ROM+0xdc>
							discrepancy_marker = bit_number;
 80015da:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <Search_ROM+0x1e0>)
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <Search_ROM+0x200>)
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e003      	b.n	80015ec <Search_ROM+0xdc>
						}
					}
				}

			} else { // this indicates same 0 or 1 value at LSB of available devices
				search_value = bit_id;   // setting either 0 or 1 search
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <Search_ROM+0x1ec>)
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	4b48      	ldr	r3, [pc, #288]	; (800170c <Search_ROM+0x1fc>)
 80015ea:	701a      	strb	r2, [r3, #0]
			}

			DS18B20_Write(search_value, 1);	// Selecting the devices having ongoing-LSB value as search value (0 or 1)
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <Search_ROM+0x1fc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff feee 	bl	80013d4 <DS18B20_Write>

			printf("bit counter = %d\n", bit_counter);
 80015f8:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <Search_ROM+0x1e8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4845      	ldr	r0, [pc, #276]	; (8001714 <Search_ROM+0x204>)
 8001600:	f002 faf4 	bl	8003bec <iprintf>
			printf("counts = %d\n", counts);
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <Search_ROM+0x208>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	4844      	ldr	r0, [pc, #272]	; (800171c <Search_ROM+0x20c>)
 800160c:	f002 faee 	bl	8003bec <iprintf>
			printf("bit number = %d\n", bit_number);
 8001610:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <Search_ROM+0x1e0>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4842      	ldr	r0, [pc, #264]	; (8001720 <Search_ROM+0x210>)
 8001618:	f002 fae8 	bl	8003bec <iprintf>

			new_rom_id[counts] |= search_value << bit_counter;
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <Search_ROM+0x208>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <Search_ROM+0x214>)
 8001624:	5c9b      	ldrb	r3, [r3, r2]
 8001626:	b25a      	sxtb	r2, r3
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <Search_ROM+0x1fc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <Search_ROM+0x1e8>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	b25b      	sxtb	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b259      	sxtb	r1, r3
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <Search_ROM+0x208>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	b2c9      	uxtb	r1, r1
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <Search_ROM+0x214>)
 8001646:	5499      	strb	r1, [r3, r2]

			if (bit_number % 8 == 0) {
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <Search_ROM+0x1e0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d114      	bne.n	8001680 <Search_ROM+0x170>
				printf("\n\n");
 8001656:	4834      	ldr	r0, [pc, #208]	; (8001728 <Search_ROM+0x218>)
 8001658:	f002 fb4e 	bl	8003cf8 <puts>
				printf("0x%x\n", new_rom_id[counts]);
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <Search_ROM+0x208>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b30      	ldr	r3, [pc, #192]	; (8001724 <Search_ROM+0x214>)
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	4619      	mov	r1, r3
 8001668:	4830      	ldr	r0, [pc, #192]	; (800172c <Search_ROM+0x21c>)
 800166a:	f002 fabf 	bl	8003bec <iprintf>
				printf("\n\n");
 800166e:	482e      	ldr	r0, [pc, #184]	; (8001728 <Search_ROM+0x218>)
 8001670:	f002 fb42 	bl	8003cf8 <puts>
				counts++;
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <Search_ROM+0x208>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <Search_ROM+0x208>)
 800167e:	701a      	strb	r2, [r3, #0]

			}
			bit_counter++;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <Search_ROM+0x1e8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <Search_ROM+0x1e8>)
 800168a:	701a      	strb	r2, [r3, #0]
			if (bit_counter >= 8) {
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <Search_ROM+0x1e8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b07      	cmp	r3, #7
 8001692:	d902      	bls.n	800169a <Search_ROM+0x18a>
				bit_counter = 0;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <Search_ROM+0x1e8>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
//		if (counts == 8)
//			(*uint8_t)(&ROM_id)[count] |= new_rom_id; // Shift up to the current bit index to id array
//		counts = 0;

//		printf("bit_number = %d\n", bit_number);
		bit_number++;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <Search_ROM+0x1e0>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <Search_ROM+0x1e0>)
 80016a4:	701a      	strb	r2, [r3, #0]
	} while (bit_number < 65);
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <Search_ROM+0x1e0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b40      	cmp	r3, #64	; 0x40
 80016ac:	f67f af5c 	bls.w	8001568 <Search_ROM+0x58>

	last_discrepancy = discrepancy_marker;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <Search_ROM+0x200>)
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <Search_ROM+0x1f8>)
 80016b6:	701a      	strb	r2, [r3, #0]
	if (last_discrepancy == 0) {
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <Search_ROM+0x1f8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <Search_ROM+0x1b8>
		FLAG_DONE = SET;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <Search_ROM+0x1dc>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e002      	b.n	80016ce <Search_ROM+0x1be>
	} else {
		printf("Next cycle\n");
 80016c8:	4819      	ldr	r0, [pc, #100]	; (8001730 <Search_ROM+0x220>)
 80016ca:	f002 fb15 	bl	8003cf8 <puts>
	}
	count++;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <Search_ROM+0x224>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <Search_ROM+0x224>)
 80016d8:	701a      	strb	r2, [r3, #0]
	return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000288 	.word	0x20000288
 80016e4:	08005ed4 	.word	0x08005ed4
 80016e8:	08005eec 	.word	0x08005eec
 80016ec:	200002a2 	.word	0x200002a2
 80016f0:	2000029f 	.word	0x2000029f
 80016f4:	200002a8 	.word	0x200002a8
 80016f8:	200002a5 	.word	0x200002a5
 80016fc:	2000029c 	.word	0x2000029c
 8001700:	2000029d 	.word	0x2000029d
 8001704:	08005f10 	.word	0x08005f10
 8001708:	200002a1 	.word	0x200002a1
 800170c:	2000029e 	.word	0x2000029e
 8001710:	200002a0 	.word	0x200002a0
 8001714:	08005f20 	.word	0x08005f20
 8001718:	200002a4 	.word	0x200002a4
 800171c:	08005f34 	.word	0x08005f34
 8001720:	08005f44 	.word	0x08005f44
 8001724:	20000294 	.word	0x20000294
 8001728:	08005f58 	.word	0x08005f58
 800172c:	08005f5c 	.word	0x08005f5c
 8001730:	08005f64 	.word	0x08005f64
 8001734:	200002a3 	.word	0x200002a3

08001738 <Match_ROM>:

void Match_ROM(int device) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

	DS18B20_Write(0x55, 0);
 8001740:	2100      	movs	r1, #0
 8001742:	2055      	movs	r0, #85	; 0x55
 8001744:	f7ff fe46 	bl	80013d4 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e00c      	b.n	8001768 <Match_ROM+0x30>
		DS18B20_Write((new_rom_id)[i + device * 8], 0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	00da      	lsls	r2, r3, #3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <Match_ROM+0x40>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe39 	bl	80013d4 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b07      	cmp	r3, #7
 800176c:	ddef      	ble.n	800174e <Match_ROM+0x16>
	}

}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000294 	.word	0x20000294

0800177c <Set_Pin_Output>:
//	value = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
//	printf("value = %d\n", value);
//
//	return value;
//}
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	4619      	mov	r1, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fb53 	bl	8001e54 <HAL_GPIO_Init>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fb36 	bl	8001e54 <HAL_GPIO_Init>
}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("From the error handler\n");
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <Error_Handler+0x10>)
 80017f6:	f002 fa7f 	bl	8003cf8 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fa:	b672      	cpsid	i
}
 80017fc:	bf00      	nop
	__disable_irq();
	while (1) {
 80017fe:	e7fe      	b.n	80017fe <Error_Handler+0xe>
 8001800:	08005f70 	.word	0x08005f70

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_MspInit+0x5c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6193      	str	r3, [r2, #24]
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_MspInit+0x5c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x5c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x5c>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_MspInit+0x60>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_MspInit+0x60>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_TIM_Base_MspInit+0x34>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10b      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_Base_MspInit+0x38>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_TIM_Base_MspInit+0x38>)
 8001880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001884:	6193      	str	r3, [r2, #24]
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_TIM_Base_MspInit+0x38>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_UART_MspInit+0x8c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d131      	bne.n	8001928 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_UART_MspInit+0x90>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_UART_MspInit+0x90>)
 80018ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_UART_MspInit+0x90>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0x90>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_UART_MspInit+0x90>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_UART_MspInit+0x90>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4619      	mov	r1, r3
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <HAL_UART_MspInit+0x94>)
 800190a:	f000 faa3 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_UART_MspInit+0x94>)
 8001924:	f000 fa96 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40013800 	.word	0x40013800
 8001934:	40021000 	.word	0x40021000
 8001938:	40010800 	.word	0x40010800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	printf("From NMI Handler\n");
 8001940:	4801      	ldr	r0, [pc, #4]	; (8001948 <NMI_Handler+0xc>)
 8001942:	f002 f9d9 	bl	8003cf8 <puts>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001946:	e7fe      	b.n	8001946 <NMI_Handler+0xa>
 8001948:	08005f88 	.word	0x08005f88

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault handler\n");
 8001950:	4801      	ldr	r0, [pc, #4]	; (8001958 <HardFault_Handler+0xc>)
 8001952:	f002 f9d1 	bl	8003cf8 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0xa>
 8001958:	08005f9c 	.word	0x08005f9c

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemMange Handler\n");
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <MemManage_Handler+0xc>)
 8001962:	f002 f9c9 	bl	8003cf8 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <MemManage_Handler+0xa>
 8001968:	08005fb0 	.word	0x08005fb0

0800196c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <BusFault_Handler+0x4>

08001972 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <UsageFault_Handler+0x4>

08001978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f000 f934 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
	return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <_kill>:

int _kill(int pid, int sig)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019c0:	f001 fc82 	bl	80032c8 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2216      	movs	r2, #22
 80019c8:	601a      	str	r2, [r3, #0]
	return -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_exit>:

void _exit (int status)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019de:	f04f 31ff 	mov.w	r1, #4294967295
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ffe7 	bl	80019b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019e8:	e7fe      	b.n	80019e8 <_exit+0x12>

080019ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e00a      	b.n	8001a12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019fc:	f3af 8000 	nop.w
 8001a00:	4601      	mov	r1, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	60ba      	str	r2, [r7, #8]
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbf0      	blt.n	80019fc <_read+0x12>
	}

return len;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e009      	b.n	8001a4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fc84 	bl	800134c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf1      	blt.n	8001a36 <_write+0x12>
	}
	return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_close>:

int _close(int file)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a82:	605a      	str	r2, [r3, #4]
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <_isatty>:

int _isatty(int file)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f001 fbec 	bl	80032c8 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20005000 	.word	0x20005000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	200002ac 	.word	0x200002ac
 8001b24:	200002c8 	.word	0x200002c8

08001b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b36:	490d      	ldr	r1, [pc, #52]	; (8001b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	; (8001b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b5a:	f7ff ffe5 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f001 fbb9 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b62:	f7ff fa07 	bl	8000f74 <main>
  bx lr
 8001b66:	4770      	bx	lr
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b70:	080063cc 	.word	0x080063cc
  ldr r2, =_sbss
 8001b74:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b78:	200002c4 	.word	0x200002c4

08001b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_2_IRQHandler>
	...

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x28>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x28>)
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f92b 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fe32 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f935 	bl	8001e3a <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f90b 	bl	8001e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_IncTick+0x1c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x20>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_IncTick+0x20>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	200002b0 	.word	0x200002b0

08001c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <HAL_GetTick+0x10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	200002b0 	.word	0x200002b0

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffe0 	bl	8001c30 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f7ff ff90 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff49 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff5e 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff90 	bl	8001d44 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5f 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb0 	bl	8001da8 <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b08b      	sub	sp, #44	; 0x2c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e66:	e169      	b.n	800213c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f040 8158 	bne.w	8002136 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a9a      	ldr	r2, [pc, #616]	; (80020f4 <HAL_GPIO_Init+0x2a0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d05e      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001e90:	4a98      	ldr	r2, [pc, #608]	; (80020f4 <HAL_GPIO_Init+0x2a0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d875      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001e96:	4a98      	ldr	r2, [pc, #608]	; (80020f8 <HAL_GPIO_Init+0x2a4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d058      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001e9c:	4a96      	ldr	r2, [pc, #600]	; (80020f8 <HAL_GPIO_Init+0x2a4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d86f      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a96      	ldr	r2, [pc, #600]	; (80020fc <HAL_GPIO_Init+0x2a8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d052      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001ea8:	4a94      	ldr	r2, [pc, #592]	; (80020fc <HAL_GPIO_Init+0x2a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d869      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001eae:	4a94      	ldr	r2, [pc, #592]	; (8002100 <HAL_GPIO_Init+0x2ac>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04c      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001eb4:	4a92      	ldr	r2, [pc, #584]	; (8002100 <HAL_GPIO_Init+0x2ac>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d863      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001eba:	4a92      	ldr	r2, [pc, #584]	; (8002104 <HAL_GPIO_Init+0x2b0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d046      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001ec0:	4a90      	ldr	r2, [pc, #576]	; (8002104 <HAL_GPIO_Init+0x2b0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d85d      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ec6:	2b12      	cmp	r3, #18
 8001ec8:	d82a      	bhi.n	8001f20 <HAL_GPIO_Init+0xcc>
 8001eca:	2b12      	cmp	r3, #18
 8001ecc:	d859      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_GPIO_Init+0x80>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001f4f 	.word	0x08001f4f
 8001ed8:	08001f29 	.word	0x08001f29
 8001edc:	08001f3b 	.word	0x08001f3b
 8001ee0:	08001f7d 	.word	0x08001f7d
 8001ee4:	08001f83 	.word	0x08001f83
 8001ee8:	08001f83 	.word	0x08001f83
 8001eec:	08001f83 	.word	0x08001f83
 8001ef0:	08001f83 	.word	0x08001f83
 8001ef4:	08001f83 	.word	0x08001f83
 8001ef8:	08001f83 	.word	0x08001f83
 8001efc:	08001f83 	.word	0x08001f83
 8001f00:	08001f83 	.word	0x08001f83
 8001f04:	08001f83 	.word	0x08001f83
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f83 	.word	0x08001f83
 8001f10:	08001f83 	.word	0x08001f83
 8001f14:	08001f83 	.word	0x08001f83
 8001f18:	08001f31 	.word	0x08001f31
 8001f1c:	08001f45 	.word	0x08001f45
 8001f20:	4a79      	ldr	r2, [pc, #484]	; (8002108 <HAL_GPIO_Init+0x2b4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f26:	e02c      	b.n	8001f82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	623b      	str	r3, [r7, #32]
          break;
 8001f2e:	e029      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	3304      	adds	r3, #4
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e024      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e01f      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e01a      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f56:	2304      	movs	r3, #4
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e013      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	611a      	str	r2, [r3, #16]
          break;
 8001f6e:	e009      	b.n	8001f84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f70:	2308      	movs	r3, #8
 8001f72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	615a      	str	r2, [r3, #20]
          break;
 8001f7a:	e003      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          break;
 8001f82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2bff      	cmp	r3, #255	; 0xff
 8001f88:	d801      	bhi.n	8001f8e <HAL_GPIO_Init+0x13a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	e001      	b.n	8001f92 <HAL_GPIO_Init+0x13e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d802      	bhi.n	8001fa0 <HAL_GPIO_Init+0x14c>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x152>
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3b08      	subs	r3, #8
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	210f      	movs	r1, #15
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	6a39      	ldr	r1, [r7, #32]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80b1 	beq.w	8002136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	; (800210c <HAL_GPIO_Init+0x2b8>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x2b8>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_GPIO_Init+0x2b8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fec:	4a48      	ldr	r2, [pc, #288]	; (8002110 <HAL_GPIO_Init+0x2bc>)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a40      	ldr	r2, [pc, #256]	; (8002114 <HAL_GPIO_Init+0x2c0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_GPIO_Init+0x1ec>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <HAL_GPIO_Init+0x2c4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00d      	beq.n	800203c <HAL_GPIO_Init+0x1e8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3e      	ldr	r2, [pc, #248]	; (800211c <HAL_GPIO_Init+0x2c8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <HAL_GPIO_Init+0x1e4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3d      	ldr	r2, [pc, #244]	; (8002120 <HAL_GPIO_Init+0x2cc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_GPIO_Init+0x1e0>
 8002030:	2303      	movs	r3, #3
 8002032:	e006      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002034:	2304      	movs	r3, #4
 8002036:	e004      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002038:	2302      	movs	r3, #2
 800203a:	e002      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002040:	2300      	movs	r3, #0
 8002042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002044:	f002 0203 	and.w	r2, r2, #3
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	4093      	lsls	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002052:	492f      	ldr	r1, [pc, #188]	; (8002110 <HAL_GPIO_Init+0x2bc>)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	492c      	ldr	r1, [pc, #176]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4928      	ldr	r1, [pc, #160]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8002084:	4013      	ands	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	491e      	ldr	r1, [pc, #120]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4918      	ldr	r1, [pc, #96]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4914      	ldr	r1, [pc, #80]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d021      	beq.n	8002128 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	490e      	ldr	r1, [pc, #56]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
 80020f0:	e021      	b.n	8002136 <HAL_GPIO_Init+0x2e2>
 80020f2:	bf00      	nop
 80020f4:	10320000 	.word	0x10320000
 80020f8:	10310000 	.word	0x10310000
 80020fc:	10220000 	.word	0x10220000
 8002100:	10210000 	.word	0x10210000
 8002104:	10120000 	.word	0x10120000
 8002108:	10110000 	.word	0x10110000
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	40010800 	.word	0x40010800
 8002118:	40010c00 	.word	0x40010c00
 800211c:	40011000 	.word	0x40011000
 8002120:	40011400 	.word	0x40011400
 8002124:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_GPIO_Init+0x304>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	43db      	mvns	r3, r3
 8002130:	4909      	ldr	r1, [pc, #36]	; (8002158 <HAL_GPIO_Init+0x304>)
 8002132:	4013      	ands	r3, r2
 8002134:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	f47f ae8e 	bne.w	8001e68 <HAL_GPIO_Init+0x14>
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	372c      	adds	r7, #44	; 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e001      	b.n	800217e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	807b      	strh	r3, [r7, #2]
 8002196:	4613      	mov	r3, r2
 8002198:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800219a:	787b      	ldrb	r3, [r7, #1]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a6:	e003      	b.n	80021b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e272      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e24c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fcca 	bl	8001c30 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fcc6 	bl	8001c30 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e200      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fcb6 	bl	8001c30 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fcb2 	bl	8001c30 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1ec      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c0      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fc6b 	bl	8001c30 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fc67 	bl	8001c30 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc4a 	bl	8001c30 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc46 	bl	8001c30 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e180      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fc2a 	bl	8001c30 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fc26 	bl	8001c30 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e160      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fad8 	bl	80029b4 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff fc10 	bl	8001c30 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fc0c 	bl	8001c30 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e146      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b7f      	ldr	r3, [pc, #508]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7e      	ldr	r2, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fbcd 	bl	8001c30 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fbc9 	bl	8001c30 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e103      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a60      	ldr	r2, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a57      	ldr	r2, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fb7d 	bl	8001c30 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fb79 	bl	8001c30 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff fb67 	bl	8001c30 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7ff fb63 	bl	8001c30 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e09b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fb37 	bl	8001c30 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff fb33 	bl	8001c30 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e06d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4921      	ldr	r1, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff fb07 	bl	8001c30 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff fb03 	bl	8001c30 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e035      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff faf0 	bl	8001c30 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff faec 	bl	8001c30 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e026      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e01e      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e019      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x500>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d0      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d910      	bls.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4965      	ldr	r1, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d040      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e073      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4936      	ldr	r1, [pc, #216]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7ff fa3e 	bl	8001c30 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7ff fa3a 	bl	8001c30 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e053      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4922      	ldr	r1, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1cc>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f99c 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	08005fd4 	.word	0x08005fd4
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b490      	push	{r4, r7}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_GetSysClockFreq+0xac>)
 800289c:	1d3c      	adds	r4, r7, #4
 800289e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a4:	f240 2301 	movw	r3, #513	; 0x201
 80028a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x46>
 80028d2:	e02b      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d6:	623b      	str	r3, [r7, #32]
      break;
 80028d8:	e02b      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	0c9b      	lsrs	r3, r3, #18
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3328      	adds	r3, #40	; 0x28
 80028e4:	443b      	add	r3, r7
 80028e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0c5b      	lsrs	r3, r3, #17
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	3328      	adds	r3, #40	; 0x28
 8002902:	443b      	add	r3, r7
 8002904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6a3b      	ldr	r3, [r7, #32]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc90      	pop	{r4, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	08005fc4 	.word	0x08005fc4
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	003d0900 	.word	0x003d0900

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_RCC_GetHCLKFreq+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff2 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	08005fe4 	.word	0x08005fe4

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffde 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0adb      	lsrs	r3, r3, #11
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08005fe4 	.word	0x08005fe4

080029b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <RCC_Delay+0x34>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <RCC_Delay+0x38>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a5b      	lsrs	r3, r3, #9
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d0:	bf00      	nop
  }
  while (Delay --);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f9      	bne.n	80029d0 <RCC_Delay+0x1c>
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000000 	.word	0x20000000
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e041      	b.n	8002a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe ff26 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f000 f93c 	bl	8002cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d001      	beq.n	8002aa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e032      	b.n	8002b0e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_TIM_Base_Start+0x88>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_TIM_Base_Start+0x48>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d009      	beq.n	8002ad8 <HAL_TIM_Base_Start+0x48>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_TIM_Base_Start+0x8c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_TIM_Base_Start+0x48>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <HAL_TIM_Base_Start+0x90>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d111      	bne.n	8002afc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d010      	beq.n	8002b0c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afa:	e007      	b.n	8002b0c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800

08002b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_TIM_ConfigClockSource+0x18>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0b3      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x180>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b74:	d03e      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0xd0>
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7a:	f200 8087 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b82:	f000 8085 	beq.w	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d87f      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b8c:	2b70      	cmp	r3, #112	; 0x70
 8002b8e:	d01a      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xa2>
 8002b90:	2b70      	cmp	r3, #112	; 0x70
 8002b92:	d87b      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d050      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x116>
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d877      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b9c:	2b50      	cmp	r3, #80	; 0x50
 8002b9e:	d03c      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xf6>
 8002ba0:	2b50      	cmp	r3, #80	; 0x50
 8002ba2:	d873      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d058      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x136>
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d86f      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002bac:	2b30      	cmp	r3, #48	; 0x30
 8002bae:	d064      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
 8002bb0:	2b30      	cmp	r3, #48	; 0x30
 8002bb2:	d86b      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d060      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d867      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05c      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d05a      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bc4:	e062      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f000 f942 	bl	8002e5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
      break;
 8002bf2:	e04e      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f000 f92b 	bl	8002e5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c16:	609a      	str	r2, [r3, #8]
      break;
 8002c18:	e03b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 f8a2 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2150      	movs	r1, #80	; 0x50
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f8f9 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c38:	e02b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 f8c0 	bl	8002dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2160      	movs	r1, #96	; 0x60
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f8e9 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c58:	e01b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 f882 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f8d9 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c78:	e00b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 f8d0 	bl	8002e2a <TIM_ITRx_SetConfig>
        break;
 8002c8a:	e002      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <TIM_Base_SetConfig+0xb8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <TIM_Base_SetConfig+0x30>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d007      	beq.n	8002cdc <TIM_Base_SetConfig+0x30>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <TIM_Base_SetConfig+0xbc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_Base_SetConfig+0x30>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <TIM_Base_SetConfig+0xc0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <TIM_Base_SetConfig+0xb8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0x62>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x62>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <TIM_Base_SetConfig+0xbc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <TIM_Base_SetConfig+0xc0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <TIM_Base_SetConfig+0xb8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	615a      	str	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800

08002d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 030a 	bic.w	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 0210 	bic.w	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	031b      	lsls	r3, r3, #12
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f043 0307 	orr.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	609a      	str	r2, [r3, #8]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e046      	b.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d009      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d10c      	bne.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800

08002f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e03f      	b.n	8002fea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fc90 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f905 	bl	80031ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08a      	sub	sp, #40	; 0x28
 8002ff6:	af02      	add	r7, sp, #8
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	d17c      	bne.n	800310c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_UART_Transmit+0x2c>
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e075      	b.n	800310e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_UART_Transmit+0x3e>
 800302c:	2302      	movs	r3, #2
 800302e:	e06e      	b.n	800310e <HAL_UART_Transmit+0x11c>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2221      	movs	r2, #33	; 0x21
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003046:	f7fe fdf3 	bl	8001c30 <HAL_GetTick>
 800304a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003060:	d108      	bne.n	8003074 <HAL_UART_Transmit+0x82>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e003      	b.n	800307c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003084:	e02a      	b.n	80030dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f840 	bl	8003116 <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e036      	b.n	800310e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	3302      	adds	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e007      	b.n	80030ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1cf      	bne.n	8003086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f810 	bl	8003116 <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e006      	b.n	800310e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003126:	e02c      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d028      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0x30>
 8003136:	f7fe fd7b 	bl	8001c30 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	429a      	cmp	r2, r3
 8003144:	d21d      	bcs.n	8003182 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003154:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d0c3      	beq.n	8003128 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031e6:	f023 030c 	bic.w	r3, r3, #12
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <UART_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7ff fbba 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	e002      	b.n	8003222 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7ff fba2 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8003220:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009a      	lsls	r2, r3, #2
 800322c:	441a      	add	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	0119      	lsls	r1, r3, #4
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f2f3 	udiv	r2, r2, r3
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <UART_SetConfig+0x118>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2064      	movs	r0, #100	; 0x64
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <UART_SetConfig+0x118>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003278:	4419      	add	r1, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009a      	lsls	r2, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <UART_SetConfig+0x118>)
 8003292:	fba3 0302 	umull	r0, r3, r3, r2
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2064      	movs	r0, #100	; 0x64
 800329a:	fb00 f303 	mul.w	r3, r0, r3
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	3332      	adds	r3, #50	; 0x32
 80032a4:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <UART_SetConfig+0x118>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	440a      	add	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40013800 	.word	0x40013800
 80032c4:	51eb851f 	.word	0x51eb851f

080032c8 <__errno>:
 80032c8:	4b01      	ldr	r3, [pc, #4]	; (80032d0 <__errno+0x8>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	2600      	movs	r6, #0
 80032d8:	4d0c      	ldr	r5, [pc, #48]	; (800330c <__libc_init_array+0x38>)
 80032da:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032dc:	1b64      	subs	r4, r4, r5
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	f002 fdba 	bl	8005e5c <_init>
 80032e8:	2600      	movs	r6, #0
 80032ea:	4d0a      	ldr	r5, [pc, #40]	; (8003314 <__libc_init_array+0x40>)
 80032ec:	4c0a      	ldr	r4, [pc, #40]	; (8003318 <__libc_init_array+0x44>)
 80032ee:	1b64      	subs	r4, r4, r5
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f855 3b04 	ldr.w	r3, [r5], #4
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	080063c4 	.word	0x080063c4
 8003310:	080063c4 	.word	0x080063c4
 8003314:	080063c4 	.word	0x080063c4
 8003318:	080063c8 	.word	0x080063c8

0800331c <memset>:
 800331c:	4603      	mov	r3, r0
 800331e:	4402      	add	r2, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <__cvt>:
 800332c:	2b00      	cmp	r3, #0
 800332e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003332:	461f      	mov	r7, r3
 8003334:	bfbb      	ittet	lt
 8003336:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800333a:	461f      	movlt	r7, r3
 800333c:	2300      	movge	r3, #0
 800333e:	232d      	movlt	r3, #45	; 0x2d
 8003340:	b088      	sub	sp, #32
 8003342:	4614      	mov	r4, r2
 8003344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003346:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003348:	7013      	strb	r3, [r2, #0]
 800334a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800334c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003350:	f023 0820 	bic.w	r8, r3, #32
 8003354:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003358:	d005      	beq.n	8003366 <__cvt+0x3a>
 800335a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800335e:	d100      	bne.n	8003362 <__cvt+0x36>
 8003360:	3501      	adds	r5, #1
 8003362:	2302      	movs	r3, #2
 8003364:	e000      	b.n	8003368 <__cvt+0x3c>
 8003366:	2303      	movs	r3, #3
 8003368:	aa07      	add	r2, sp, #28
 800336a:	9204      	str	r2, [sp, #16]
 800336c:	aa06      	add	r2, sp, #24
 800336e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003372:	e9cd 3500 	strd	r3, r5, [sp]
 8003376:	4622      	mov	r2, r4
 8003378:	463b      	mov	r3, r7
 800337a:	f000 fe11 	bl	8003fa0 <_dtoa_r>
 800337e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003382:	4606      	mov	r6, r0
 8003384:	d102      	bne.n	800338c <__cvt+0x60>
 8003386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003388:	07db      	lsls	r3, r3, #31
 800338a:	d522      	bpl.n	80033d2 <__cvt+0xa6>
 800338c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003390:	eb06 0905 	add.w	r9, r6, r5
 8003394:	d110      	bne.n	80033b8 <__cvt+0x8c>
 8003396:	7833      	ldrb	r3, [r6, #0]
 8003398:	2b30      	cmp	r3, #48	; 0x30
 800339a:	d10a      	bne.n	80033b2 <__cvt+0x86>
 800339c:	2200      	movs	r2, #0
 800339e:	2300      	movs	r3, #0
 80033a0:	4620      	mov	r0, r4
 80033a2:	4639      	mov	r1, r7
 80033a4:	f7fd fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80033a8:	b918      	cbnz	r0, 80033b2 <__cvt+0x86>
 80033aa:	f1c5 0501 	rsb	r5, r5, #1
 80033ae:	f8ca 5000 	str.w	r5, [sl]
 80033b2:	f8da 3000 	ldr.w	r3, [sl]
 80033b6:	4499      	add	r9, r3
 80033b8:	2200      	movs	r2, #0
 80033ba:	2300      	movs	r3, #0
 80033bc:	4620      	mov	r0, r4
 80033be:	4639      	mov	r1, r7
 80033c0:	f7fd faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80033c4:	b108      	cbz	r0, 80033ca <__cvt+0x9e>
 80033c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80033ca:	2230      	movs	r2, #48	; 0x30
 80033cc:	9b07      	ldr	r3, [sp, #28]
 80033ce:	454b      	cmp	r3, r9
 80033d0:	d307      	bcc.n	80033e2 <__cvt+0xb6>
 80033d2:	4630      	mov	r0, r6
 80033d4:	9b07      	ldr	r3, [sp, #28]
 80033d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033d8:	1b9b      	subs	r3, r3, r6
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	b008      	add	sp, #32
 80033de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	9107      	str	r1, [sp, #28]
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	e7f0      	b.n	80033cc <__cvt+0xa0>

080033ea <__exponent>:
 80033ea:	4603      	mov	r3, r0
 80033ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ee:	2900      	cmp	r1, #0
 80033f0:	f803 2b02 	strb.w	r2, [r3], #2
 80033f4:	bfb6      	itet	lt
 80033f6:	222d      	movlt	r2, #45	; 0x2d
 80033f8:	222b      	movge	r2, #43	; 0x2b
 80033fa:	4249      	neglt	r1, r1
 80033fc:	2909      	cmp	r1, #9
 80033fe:	7042      	strb	r2, [r0, #1]
 8003400:	dd2b      	ble.n	800345a <__exponent+0x70>
 8003402:	f10d 0407 	add.w	r4, sp, #7
 8003406:	46a4      	mov	ip, r4
 8003408:	270a      	movs	r7, #10
 800340a:	fb91 f6f7 	sdiv	r6, r1, r7
 800340e:	460a      	mov	r2, r1
 8003410:	46a6      	mov	lr, r4
 8003412:	fb07 1516 	mls	r5, r7, r6, r1
 8003416:	2a63      	cmp	r2, #99	; 0x63
 8003418:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800341c:	4631      	mov	r1, r6
 800341e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003422:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003426:	dcf0      	bgt.n	800340a <__exponent+0x20>
 8003428:	3130      	adds	r1, #48	; 0x30
 800342a:	f1ae 0502 	sub.w	r5, lr, #2
 800342e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003432:	4629      	mov	r1, r5
 8003434:	1c44      	adds	r4, r0, #1
 8003436:	4561      	cmp	r1, ip
 8003438:	d30a      	bcc.n	8003450 <__exponent+0x66>
 800343a:	f10d 0209 	add.w	r2, sp, #9
 800343e:	eba2 020e 	sub.w	r2, r2, lr
 8003442:	4565      	cmp	r5, ip
 8003444:	bf88      	it	hi
 8003446:	2200      	movhi	r2, #0
 8003448:	4413      	add	r3, r2
 800344a:	1a18      	subs	r0, r3, r0
 800344c:	b003      	add	sp, #12
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003450:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003454:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003458:	e7ed      	b.n	8003436 <__exponent+0x4c>
 800345a:	2330      	movs	r3, #48	; 0x30
 800345c:	3130      	adds	r1, #48	; 0x30
 800345e:	7083      	strb	r3, [r0, #2]
 8003460:	70c1      	strb	r1, [r0, #3]
 8003462:	1d03      	adds	r3, r0, #4
 8003464:	e7f1      	b.n	800344a <__exponent+0x60>
	...

08003468 <_printf_float>:
 8003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346c:	b091      	sub	sp, #68	; 0x44
 800346e:	460c      	mov	r4, r1
 8003470:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003474:	4616      	mov	r6, r2
 8003476:	461f      	mov	r7, r3
 8003478:	4605      	mov	r5, r0
 800347a:	f001 fd33 	bl	8004ee4 <_localeconv_r>
 800347e:	6803      	ldr	r3, [r0, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	9309      	str	r3, [sp, #36]	; 0x24
 8003484:	f7fc fe64 	bl	8000150 <strlen>
 8003488:	2300      	movs	r3, #0
 800348a:	930e      	str	r3, [sp, #56]	; 0x38
 800348c:	f8d8 3000 	ldr.w	r3, [r8]
 8003490:	900a      	str	r0, [sp, #40]	; 0x28
 8003492:	3307      	adds	r3, #7
 8003494:	f023 0307 	bic.w	r3, r3, #7
 8003498:	f103 0208 	add.w	r2, r3, #8
 800349c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034a0:	f8d4 b000 	ldr.w	fp, [r4]
 80034a4:	f8c8 2000 	str.w	r2, [r8]
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80034b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80034b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034ba:	f04f 32ff 	mov.w	r2, #4294967295
 80034be:	4640      	mov	r0, r8
 80034c0:	4b9c      	ldr	r3, [pc, #624]	; (8003734 <_printf_float+0x2cc>)
 80034c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034c4:	f7fd faa2 	bl	8000a0c <__aeabi_dcmpun>
 80034c8:	bb70      	cbnz	r0, 8003528 <_printf_float+0xc0>
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295
 80034ce:	4640      	mov	r0, r8
 80034d0:	4b98      	ldr	r3, [pc, #608]	; (8003734 <_printf_float+0x2cc>)
 80034d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034d4:	f7fd fa7c 	bl	80009d0 <__aeabi_dcmple>
 80034d8:	bb30      	cbnz	r0, 8003528 <_printf_float+0xc0>
 80034da:	2200      	movs	r2, #0
 80034dc:	2300      	movs	r3, #0
 80034de:	4640      	mov	r0, r8
 80034e0:	4651      	mov	r1, sl
 80034e2:	f7fd fa6b 	bl	80009bc <__aeabi_dcmplt>
 80034e6:	b110      	cbz	r0, 80034ee <_printf_float+0x86>
 80034e8:	232d      	movs	r3, #45	; 0x2d
 80034ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ee:	4b92      	ldr	r3, [pc, #584]	; (8003738 <_printf_float+0x2d0>)
 80034f0:	4892      	ldr	r0, [pc, #584]	; (800373c <_printf_float+0x2d4>)
 80034f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034f6:	bf94      	ite	ls
 80034f8:	4698      	movls	r8, r3
 80034fa:	4680      	movhi	r8, r0
 80034fc:	2303      	movs	r3, #3
 80034fe:	f04f 0a00 	mov.w	sl, #0
 8003502:	6123      	str	r3, [r4, #16]
 8003504:	f02b 0304 	bic.w	r3, fp, #4
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	4633      	mov	r3, r6
 800350c:	4621      	mov	r1, r4
 800350e:	4628      	mov	r0, r5
 8003510:	9700      	str	r7, [sp, #0]
 8003512:	aa0f      	add	r2, sp, #60	; 0x3c
 8003514:	f000 f9d4 	bl	80038c0 <_printf_common>
 8003518:	3001      	adds	r0, #1
 800351a:	f040 8090 	bne.w	800363e <_printf_float+0x1d6>
 800351e:	f04f 30ff 	mov.w	r0, #4294967295
 8003522:	b011      	add	sp, #68	; 0x44
 8003524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003528:	4642      	mov	r2, r8
 800352a:	4653      	mov	r3, sl
 800352c:	4640      	mov	r0, r8
 800352e:	4651      	mov	r1, sl
 8003530:	f7fd fa6c 	bl	8000a0c <__aeabi_dcmpun>
 8003534:	b148      	cbz	r0, 800354a <_printf_float+0xe2>
 8003536:	f1ba 0f00 	cmp.w	sl, #0
 800353a:	bfb8      	it	lt
 800353c:	232d      	movlt	r3, #45	; 0x2d
 800353e:	4880      	ldr	r0, [pc, #512]	; (8003740 <_printf_float+0x2d8>)
 8003540:	bfb8      	it	lt
 8003542:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003546:	4b7f      	ldr	r3, [pc, #508]	; (8003744 <_printf_float+0x2dc>)
 8003548:	e7d3      	b.n	80034f2 <_printf_float+0x8a>
 800354a:	6863      	ldr	r3, [r4, #4]
 800354c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	d142      	bne.n	80035da <_printf_float+0x172>
 8003554:	2306      	movs	r3, #6
 8003556:	6063      	str	r3, [r4, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	9206      	str	r2, [sp, #24]
 800355c:	aa0e      	add	r2, sp, #56	; 0x38
 800355e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003562:	aa0d      	add	r2, sp, #52	; 0x34
 8003564:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003568:	9203      	str	r2, [sp, #12]
 800356a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800356e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	4642      	mov	r2, r8
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	4628      	mov	r0, r5
 800357c:	4653      	mov	r3, sl
 800357e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003580:	f7ff fed4 	bl	800332c <__cvt>
 8003584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003586:	4680      	mov	r8, r0
 8003588:	2947      	cmp	r1, #71	; 0x47
 800358a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800358c:	d108      	bne.n	80035a0 <_printf_float+0x138>
 800358e:	1cc8      	adds	r0, r1, #3
 8003590:	db02      	blt.n	8003598 <_printf_float+0x130>
 8003592:	6863      	ldr	r3, [r4, #4]
 8003594:	4299      	cmp	r1, r3
 8003596:	dd40      	ble.n	800361a <_printf_float+0x1b2>
 8003598:	f1a9 0902 	sub.w	r9, r9, #2
 800359c:	fa5f f989 	uxtb.w	r9, r9
 80035a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035a4:	d81f      	bhi.n	80035e6 <_printf_float+0x17e>
 80035a6:	464a      	mov	r2, r9
 80035a8:	3901      	subs	r1, #1
 80035aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035ae:	910d      	str	r1, [sp, #52]	; 0x34
 80035b0:	f7ff ff1b 	bl	80033ea <__exponent>
 80035b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035b6:	4682      	mov	sl, r0
 80035b8:	1813      	adds	r3, r2, r0
 80035ba:	2a01      	cmp	r2, #1
 80035bc:	6123      	str	r3, [r4, #16]
 80035be:	dc02      	bgt.n	80035c6 <_printf_float+0x15e>
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	07d2      	lsls	r2, r2, #31
 80035c4:	d501      	bpl.n	80035ca <_printf_float+0x162>
 80035c6:	3301      	adds	r3, #1
 80035c8:	6123      	str	r3, [r4, #16]
 80035ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d09b      	beq.n	800350a <_printf_float+0xa2>
 80035d2:	232d      	movs	r3, #45	; 0x2d
 80035d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d8:	e797      	b.n	800350a <_printf_float+0xa2>
 80035da:	2947      	cmp	r1, #71	; 0x47
 80035dc:	d1bc      	bne.n	8003558 <_printf_float+0xf0>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ba      	bne.n	8003558 <_printf_float+0xf0>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e7b7      	b.n	8003556 <_printf_float+0xee>
 80035e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035ea:	d118      	bne.n	800361e <_printf_float+0x1b6>
 80035ec:	2900      	cmp	r1, #0
 80035ee:	6863      	ldr	r3, [r4, #4]
 80035f0:	dd0b      	ble.n	800360a <_printf_float+0x1a2>
 80035f2:	6121      	str	r1, [r4, #16]
 80035f4:	b913      	cbnz	r3, 80035fc <_printf_float+0x194>
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	07d0      	lsls	r0, r2, #31
 80035fa:	d502      	bpl.n	8003602 <_printf_float+0x19a>
 80035fc:	3301      	adds	r3, #1
 80035fe:	440b      	add	r3, r1
 8003600:	6123      	str	r3, [r4, #16]
 8003602:	f04f 0a00 	mov.w	sl, #0
 8003606:	65a1      	str	r1, [r4, #88]	; 0x58
 8003608:	e7df      	b.n	80035ca <_printf_float+0x162>
 800360a:	b913      	cbnz	r3, 8003612 <_printf_float+0x1aa>
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	07d2      	lsls	r2, r2, #31
 8003610:	d501      	bpl.n	8003616 <_printf_float+0x1ae>
 8003612:	3302      	adds	r3, #2
 8003614:	e7f4      	b.n	8003600 <_printf_float+0x198>
 8003616:	2301      	movs	r3, #1
 8003618:	e7f2      	b.n	8003600 <_printf_float+0x198>
 800361a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800361e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003620:	4299      	cmp	r1, r3
 8003622:	db05      	blt.n	8003630 <_printf_float+0x1c8>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	6121      	str	r1, [r4, #16]
 8003628:	07d8      	lsls	r0, r3, #31
 800362a:	d5ea      	bpl.n	8003602 <_printf_float+0x19a>
 800362c:	1c4b      	adds	r3, r1, #1
 800362e:	e7e7      	b.n	8003600 <_printf_float+0x198>
 8003630:	2900      	cmp	r1, #0
 8003632:	bfcc      	ite	gt
 8003634:	2201      	movgt	r2, #1
 8003636:	f1c1 0202 	rsble	r2, r1, #2
 800363a:	4413      	add	r3, r2
 800363c:	e7e0      	b.n	8003600 <_printf_float+0x198>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	055a      	lsls	r2, r3, #21
 8003642:	d407      	bmi.n	8003654 <_printf_float+0x1ec>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	4642      	mov	r2, r8
 8003648:	4631      	mov	r1, r6
 800364a:	4628      	mov	r0, r5
 800364c:	47b8      	blx	r7
 800364e:	3001      	adds	r0, #1
 8003650:	d12b      	bne.n	80036aa <_printf_float+0x242>
 8003652:	e764      	b.n	800351e <_printf_float+0xb6>
 8003654:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003658:	f240 80dd 	bls.w	8003816 <_printf_float+0x3ae>
 800365c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003660:	2200      	movs	r2, #0
 8003662:	2300      	movs	r3, #0
 8003664:	f7fd f9a0 	bl	80009a8 <__aeabi_dcmpeq>
 8003668:	2800      	cmp	r0, #0
 800366a:	d033      	beq.n	80036d4 <_printf_float+0x26c>
 800366c:	2301      	movs	r3, #1
 800366e:	4631      	mov	r1, r6
 8003670:	4628      	mov	r0, r5
 8003672:	4a35      	ldr	r2, [pc, #212]	; (8003748 <_printf_float+0x2e0>)
 8003674:	47b8      	blx	r7
 8003676:	3001      	adds	r0, #1
 8003678:	f43f af51 	beq.w	800351e <_printf_float+0xb6>
 800367c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003680:	429a      	cmp	r2, r3
 8003682:	db02      	blt.n	800368a <_printf_float+0x222>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	07d8      	lsls	r0, r3, #31
 8003688:	d50f      	bpl.n	80036aa <_printf_float+0x242>
 800368a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	f43f af42 	beq.w	800351e <_printf_float+0xb6>
 800369a:	f04f 0800 	mov.w	r8, #0
 800369e:	f104 091a 	add.w	r9, r4, #26
 80036a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036a4:	3b01      	subs	r3, #1
 80036a6:	4543      	cmp	r3, r8
 80036a8:	dc09      	bgt.n	80036be <_printf_float+0x256>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	079b      	lsls	r3, r3, #30
 80036ae:	f100 8102 	bmi.w	80038b6 <_printf_float+0x44e>
 80036b2:	68e0      	ldr	r0, [r4, #12]
 80036b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036b6:	4298      	cmp	r0, r3
 80036b8:	bfb8      	it	lt
 80036ba:	4618      	movlt	r0, r3
 80036bc:	e731      	b.n	8003522 <_printf_float+0xba>
 80036be:	2301      	movs	r3, #1
 80036c0:	464a      	mov	r2, r9
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	47b8      	blx	r7
 80036c8:	3001      	adds	r0, #1
 80036ca:	f43f af28 	beq.w	800351e <_printf_float+0xb6>
 80036ce:	f108 0801 	add.w	r8, r8, #1
 80036d2:	e7e6      	b.n	80036a2 <_printf_float+0x23a>
 80036d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	dc38      	bgt.n	800374c <_printf_float+0x2e4>
 80036da:	2301      	movs	r3, #1
 80036dc:	4631      	mov	r1, r6
 80036de:	4628      	mov	r0, r5
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <_printf_float+0x2e0>)
 80036e2:	47b8      	blx	r7
 80036e4:	3001      	adds	r0, #1
 80036e6:	f43f af1a 	beq.w	800351e <_printf_float+0xb6>
 80036ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036ee:	4313      	orrs	r3, r2
 80036f0:	d102      	bne.n	80036f8 <_printf_float+0x290>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	07d9      	lsls	r1, r3, #31
 80036f6:	d5d8      	bpl.n	80036aa <_printf_float+0x242>
 80036f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	47b8      	blx	r7
 8003702:	3001      	adds	r0, #1
 8003704:	f43f af0b 	beq.w	800351e <_printf_float+0xb6>
 8003708:	f04f 0900 	mov.w	r9, #0
 800370c:	f104 0a1a 	add.w	sl, r4, #26
 8003710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003712:	425b      	negs	r3, r3
 8003714:	454b      	cmp	r3, r9
 8003716:	dc01      	bgt.n	800371c <_printf_float+0x2b4>
 8003718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800371a:	e794      	b.n	8003646 <_printf_float+0x1de>
 800371c:	2301      	movs	r3, #1
 800371e:	4652      	mov	r2, sl
 8003720:	4631      	mov	r1, r6
 8003722:	4628      	mov	r0, r5
 8003724:	47b8      	blx	r7
 8003726:	3001      	adds	r0, #1
 8003728:	f43f aef9 	beq.w	800351e <_printf_float+0xb6>
 800372c:	f109 0901 	add.w	r9, r9, #1
 8003730:	e7ee      	b.n	8003710 <_printf_float+0x2a8>
 8003732:	bf00      	nop
 8003734:	7fefffff 	.word	0x7fefffff
 8003738:	08005ff0 	.word	0x08005ff0
 800373c:	08005ff4 	.word	0x08005ff4
 8003740:	08005ffc 	.word	0x08005ffc
 8003744:	08005ff8 	.word	0x08005ff8
 8003748:	08006000 	.word	0x08006000
 800374c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800374e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003750:	429a      	cmp	r2, r3
 8003752:	bfa8      	it	ge
 8003754:	461a      	movge	r2, r3
 8003756:	2a00      	cmp	r2, #0
 8003758:	4691      	mov	r9, r2
 800375a:	dc37      	bgt.n	80037cc <_printf_float+0x364>
 800375c:	f04f 0b00 	mov.w	fp, #0
 8003760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003764:	f104 021a 	add.w	r2, r4, #26
 8003768:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800376c:	ebaa 0309 	sub.w	r3, sl, r9
 8003770:	455b      	cmp	r3, fp
 8003772:	dc33      	bgt.n	80037dc <_printf_float+0x374>
 8003774:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003778:	429a      	cmp	r2, r3
 800377a:	db3b      	blt.n	80037f4 <_printf_float+0x38c>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	07da      	lsls	r2, r3, #31
 8003780:	d438      	bmi.n	80037f4 <_printf_float+0x38c>
 8003782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003784:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003786:	eba3 020a 	sub.w	r2, r3, sl
 800378a:	eba3 0901 	sub.w	r9, r3, r1
 800378e:	4591      	cmp	r9, r2
 8003790:	bfa8      	it	ge
 8003792:	4691      	movge	r9, r2
 8003794:	f1b9 0f00 	cmp.w	r9, #0
 8003798:	dc34      	bgt.n	8003804 <_printf_float+0x39c>
 800379a:	f04f 0800 	mov.w	r8, #0
 800379e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037a2:	f104 0a1a 	add.w	sl, r4, #26
 80037a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	eba3 0309 	sub.w	r3, r3, r9
 80037b0:	4543      	cmp	r3, r8
 80037b2:	f77f af7a 	ble.w	80036aa <_printf_float+0x242>
 80037b6:	2301      	movs	r3, #1
 80037b8:	4652      	mov	r2, sl
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	f43f aeac 	beq.w	800351e <_printf_float+0xb6>
 80037c6:	f108 0801 	add.w	r8, r8, #1
 80037ca:	e7ec      	b.n	80037a6 <_printf_float+0x33e>
 80037cc:	4613      	mov	r3, r2
 80037ce:	4631      	mov	r1, r6
 80037d0:	4642      	mov	r2, r8
 80037d2:	4628      	mov	r0, r5
 80037d4:	47b8      	blx	r7
 80037d6:	3001      	adds	r0, #1
 80037d8:	d1c0      	bne.n	800375c <_printf_float+0x2f4>
 80037da:	e6a0      	b.n	800351e <_printf_float+0xb6>
 80037dc:	2301      	movs	r3, #1
 80037de:	4631      	mov	r1, r6
 80037e0:	4628      	mov	r0, r5
 80037e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80037e4:	47b8      	blx	r7
 80037e6:	3001      	adds	r0, #1
 80037e8:	f43f ae99 	beq.w	800351e <_printf_float+0xb6>
 80037ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037ee:	f10b 0b01 	add.w	fp, fp, #1
 80037f2:	e7b9      	b.n	8003768 <_printf_float+0x300>
 80037f4:	4631      	mov	r1, r6
 80037f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037fa:	4628      	mov	r0, r5
 80037fc:	47b8      	blx	r7
 80037fe:	3001      	adds	r0, #1
 8003800:	d1bf      	bne.n	8003782 <_printf_float+0x31a>
 8003802:	e68c      	b.n	800351e <_printf_float+0xb6>
 8003804:	464b      	mov	r3, r9
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	eb08 020a 	add.w	r2, r8, sl
 800380e:	47b8      	blx	r7
 8003810:	3001      	adds	r0, #1
 8003812:	d1c2      	bne.n	800379a <_printf_float+0x332>
 8003814:	e683      	b.n	800351e <_printf_float+0xb6>
 8003816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003818:	2a01      	cmp	r2, #1
 800381a:	dc01      	bgt.n	8003820 <_printf_float+0x3b8>
 800381c:	07db      	lsls	r3, r3, #31
 800381e:	d537      	bpl.n	8003890 <_printf_float+0x428>
 8003820:	2301      	movs	r3, #1
 8003822:	4642      	mov	r2, r8
 8003824:	4631      	mov	r1, r6
 8003826:	4628      	mov	r0, r5
 8003828:	47b8      	blx	r7
 800382a:	3001      	adds	r0, #1
 800382c:	f43f ae77 	beq.w	800351e <_printf_float+0xb6>
 8003830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003834:	4631      	mov	r1, r6
 8003836:	4628      	mov	r0, r5
 8003838:	47b8      	blx	r7
 800383a:	3001      	adds	r0, #1
 800383c:	f43f ae6f 	beq.w	800351e <_printf_float+0xb6>
 8003840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003844:	2200      	movs	r2, #0
 8003846:	2300      	movs	r3, #0
 8003848:	f7fd f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800384c:	b9d8      	cbnz	r0, 8003886 <_printf_float+0x41e>
 800384e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003850:	f108 0201 	add.w	r2, r8, #1
 8003854:	3b01      	subs	r3, #1
 8003856:	4631      	mov	r1, r6
 8003858:	4628      	mov	r0, r5
 800385a:	47b8      	blx	r7
 800385c:	3001      	adds	r0, #1
 800385e:	d10e      	bne.n	800387e <_printf_float+0x416>
 8003860:	e65d      	b.n	800351e <_printf_float+0xb6>
 8003862:	2301      	movs	r3, #1
 8003864:	464a      	mov	r2, r9
 8003866:	4631      	mov	r1, r6
 8003868:	4628      	mov	r0, r5
 800386a:	47b8      	blx	r7
 800386c:	3001      	adds	r0, #1
 800386e:	f43f ae56 	beq.w	800351e <_printf_float+0xb6>
 8003872:	f108 0801 	add.w	r8, r8, #1
 8003876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003878:	3b01      	subs	r3, #1
 800387a:	4543      	cmp	r3, r8
 800387c:	dcf1      	bgt.n	8003862 <_printf_float+0x3fa>
 800387e:	4653      	mov	r3, sl
 8003880:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003884:	e6e0      	b.n	8003648 <_printf_float+0x1e0>
 8003886:	f04f 0800 	mov.w	r8, #0
 800388a:	f104 091a 	add.w	r9, r4, #26
 800388e:	e7f2      	b.n	8003876 <_printf_float+0x40e>
 8003890:	2301      	movs	r3, #1
 8003892:	4642      	mov	r2, r8
 8003894:	e7df      	b.n	8003856 <_printf_float+0x3ee>
 8003896:	2301      	movs	r3, #1
 8003898:	464a      	mov	r2, r9
 800389a:	4631      	mov	r1, r6
 800389c:	4628      	mov	r0, r5
 800389e:	47b8      	blx	r7
 80038a0:	3001      	adds	r0, #1
 80038a2:	f43f ae3c 	beq.w	800351e <_printf_float+0xb6>
 80038a6:	f108 0801 	add.w	r8, r8, #1
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038ae:	1a5b      	subs	r3, r3, r1
 80038b0:	4543      	cmp	r3, r8
 80038b2:	dcf0      	bgt.n	8003896 <_printf_float+0x42e>
 80038b4:	e6fd      	b.n	80036b2 <_printf_float+0x24a>
 80038b6:	f04f 0800 	mov.w	r8, #0
 80038ba:	f104 0919 	add.w	r9, r4, #25
 80038be:	e7f4      	b.n	80038aa <_printf_float+0x442>

080038c0 <_printf_common>:
 80038c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c4:	4616      	mov	r6, r2
 80038c6:	4699      	mov	r9, r3
 80038c8:	688a      	ldr	r2, [r1, #8]
 80038ca:	690b      	ldr	r3, [r1, #16]
 80038cc:	4607      	mov	r7, r0
 80038ce:	4293      	cmp	r3, r2
 80038d0:	bfb8      	it	lt
 80038d2:	4613      	movlt	r3, r2
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038da:	460c      	mov	r4, r1
 80038dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e0:	b10a      	cbz	r2, 80038e6 <_printf_common+0x26>
 80038e2:	3301      	adds	r3, #1
 80038e4:	6033      	str	r3, [r6, #0]
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	0699      	lsls	r1, r3, #26
 80038ea:	bf42      	ittt	mi
 80038ec:	6833      	ldrmi	r3, [r6, #0]
 80038ee:	3302      	addmi	r3, #2
 80038f0:	6033      	strmi	r3, [r6, #0]
 80038f2:	6825      	ldr	r5, [r4, #0]
 80038f4:	f015 0506 	ands.w	r5, r5, #6
 80038f8:	d106      	bne.n	8003908 <_printf_common+0x48>
 80038fa:	f104 0a19 	add.w	sl, r4, #25
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	6832      	ldr	r2, [r6, #0]
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	42ab      	cmp	r3, r5
 8003906:	dc28      	bgt.n	800395a <_printf_common+0x9a>
 8003908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800390c:	1e13      	subs	r3, r2, #0
 800390e:	6822      	ldr	r2, [r4, #0]
 8003910:	bf18      	it	ne
 8003912:	2301      	movne	r3, #1
 8003914:	0692      	lsls	r2, r2, #26
 8003916:	d42d      	bmi.n	8003974 <_printf_common+0xb4>
 8003918:	4649      	mov	r1, r9
 800391a:	4638      	mov	r0, r7
 800391c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003920:	47c0      	blx	r8
 8003922:	3001      	adds	r0, #1
 8003924:	d020      	beq.n	8003968 <_printf_common+0xa8>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	68e5      	ldr	r5, [r4, #12]
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf18      	it	ne
 8003932:	2500      	movne	r5, #0
 8003934:	6832      	ldr	r2, [r6, #0]
 8003936:	f04f 0600 	mov.w	r6, #0
 800393a:	68a3      	ldr	r3, [r4, #8]
 800393c:	bf08      	it	eq
 800393e:	1aad      	subeq	r5, r5, r2
 8003940:	6922      	ldr	r2, [r4, #16]
 8003942:	bf08      	it	eq
 8003944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003948:	4293      	cmp	r3, r2
 800394a:	bfc4      	itt	gt
 800394c:	1a9b      	subgt	r3, r3, r2
 800394e:	18ed      	addgt	r5, r5, r3
 8003950:	341a      	adds	r4, #26
 8003952:	42b5      	cmp	r5, r6
 8003954:	d11a      	bne.n	800398c <_printf_common+0xcc>
 8003956:	2000      	movs	r0, #0
 8003958:	e008      	b.n	800396c <_printf_common+0xac>
 800395a:	2301      	movs	r3, #1
 800395c:	4652      	mov	r2, sl
 800395e:	4649      	mov	r1, r9
 8003960:	4638      	mov	r0, r7
 8003962:	47c0      	blx	r8
 8003964:	3001      	adds	r0, #1
 8003966:	d103      	bne.n	8003970 <_printf_common+0xb0>
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003970:	3501      	adds	r5, #1
 8003972:	e7c4      	b.n	80038fe <_printf_common+0x3e>
 8003974:	2030      	movs	r0, #48	; 0x30
 8003976:	18e1      	adds	r1, r4, r3
 8003978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003982:	4422      	add	r2, r4
 8003984:	3302      	adds	r3, #2
 8003986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800398a:	e7c5      	b.n	8003918 <_printf_common+0x58>
 800398c:	2301      	movs	r3, #1
 800398e:	4622      	mov	r2, r4
 8003990:	4649      	mov	r1, r9
 8003992:	4638      	mov	r0, r7
 8003994:	47c0      	blx	r8
 8003996:	3001      	adds	r0, #1
 8003998:	d0e6      	beq.n	8003968 <_printf_common+0xa8>
 800399a:	3601      	adds	r6, #1
 800399c:	e7d9      	b.n	8003952 <_printf_common+0x92>
	...

080039a0 <_printf_i>:
 80039a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	7e0f      	ldrb	r7, [r1, #24]
 80039a6:	4691      	mov	r9, r2
 80039a8:	2f78      	cmp	r7, #120	; 0x78
 80039aa:	4680      	mov	r8, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	469a      	mov	sl, r3
 80039b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039b6:	d807      	bhi.n	80039c8 <_printf_i+0x28>
 80039b8:	2f62      	cmp	r7, #98	; 0x62
 80039ba:	d80a      	bhi.n	80039d2 <_printf_i+0x32>
 80039bc:	2f00      	cmp	r7, #0
 80039be:	f000 80d9 	beq.w	8003b74 <_printf_i+0x1d4>
 80039c2:	2f58      	cmp	r7, #88	; 0x58
 80039c4:	f000 80a4 	beq.w	8003b10 <_printf_i+0x170>
 80039c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039d0:	e03a      	b.n	8003a48 <_printf_i+0xa8>
 80039d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039d6:	2b15      	cmp	r3, #21
 80039d8:	d8f6      	bhi.n	80039c8 <_printf_i+0x28>
 80039da:	a101      	add	r1, pc, #4	; (adr r1, 80039e0 <_printf_i+0x40>)
 80039dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039e0:	08003a39 	.word	0x08003a39
 80039e4:	08003a4d 	.word	0x08003a4d
 80039e8:	080039c9 	.word	0x080039c9
 80039ec:	080039c9 	.word	0x080039c9
 80039f0:	080039c9 	.word	0x080039c9
 80039f4:	080039c9 	.word	0x080039c9
 80039f8:	08003a4d 	.word	0x08003a4d
 80039fc:	080039c9 	.word	0x080039c9
 8003a00:	080039c9 	.word	0x080039c9
 8003a04:	080039c9 	.word	0x080039c9
 8003a08:	080039c9 	.word	0x080039c9
 8003a0c:	08003b5b 	.word	0x08003b5b
 8003a10:	08003a7d 	.word	0x08003a7d
 8003a14:	08003b3d 	.word	0x08003b3d
 8003a18:	080039c9 	.word	0x080039c9
 8003a1c:	080039c9 	.word	0x080039c9
 8003a20:	08003b7d 	.word	0x08003b7d
 8003a24:	080039c9 	.word	0x080039c9
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	080039c9 	.word	0x080039c9
 8003a30:	080039c9 	.word	0x080039c9
 8003a34:	08003b45 	.word	0x08003b45
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	602a      	str	r2, [r5, #0]
 8003a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0a4      	b.n	8003b96 <_printf_i+0x1f6>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	6829      	ldr	r1, [r5, #0]
 8003a50:	0606      	lsls	r6, r0, #24
 8003a52:	f101 0304 	add.w	r3, r1, #4
 8003a56:	d50a      	bpl.n	8003a6e <_printf_i+0xce>
 8003a58:	680e      	ldr	r6, [r1, #0]
 8003a5a:	602b      	str	r3, [r5, #0]
 8003a5c:	2e00      	cmp	r6, #0
 8003a5e:	da03      	bge.n	8003a68 <_printf_i+0xc8>
 8003a60:	232d      	movs	r3, #45	; 0x2d
 8003a62:	4276      	negs	r6, r6
 8003a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a68:	230a      	movs	r3, #10
 8003a6a:	485e      	ldr	r0, [pc, #376]	; (8003be4 <_printf_i+0x244>)
 8003a6c:	e019      	b.n	8003aa2 <_printf_i+0x102>
 8003a6e:	680e      	ldr	r6, [r1, #0]
 8003a70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a74:	602b      	str	r3, [r5, #0]
 8003a76:	bf18      	it	ne
 8003a78:	b236      	sxthne	r6, r6
 8003a7a:	e7ef      	b.n	8003a5c <_printf_i+0xbc>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	6820      	ldr	r0, [r4, #0]
 8003a80:	1d19      	adds	r1, r3, #4
 8003a82:	6029      	str	r1, [r5, #0]
 8003a84:	0601      	lsls	r1, r0, #24
 8003a86:	d501      	bpl.n	8003a8c <_printf_i+0xec>
 8003a88:	681e      	ldr	r6, [r3, #0]
 8003a8a:	e002      	b.n	8003a92 <_printf_i+0xf2>
 8003a8c:	0646      	lsls	r6, r0, #25
 8003a8e:	d5fb      	bpl.n	8003a88 <_printf_i+0xe8>
 8003a90:	881e      	ldrh	r6, [r3, #0]
 8003a92:	2f6f      	cmp	r7, #111	; 0x6f
 8003a94:	bf0c      	ite	eq
 8003a96:	2308      	moveq	r3, #8
 8003a98:	230a      	movne	r3, #10
 8003a9a:	4852      	ldr	r0, [pc, #328]	; (8003be4 <_printf_i+0x244>)
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aa2:	6865      	ldr	r5, [r4, #4]
 8003aa4:	2d00      	cmp	r5, #0
 8003aa6:	bfa8      	it	ge
 8003aa8:	6821      	ldrge	r1, [r4, #0]
 8003aaa:	60a5      	str	r5, [r4, #8]
 8003aac:	bfa4      	itt	ge
 8003aae:	f021 0104 	bicge.w	r1, r1, #4
 8003ab2:	6021      	strge	r1, [r4, #0]
 8003ab4:	b90e      	cbnz	r6, 8003aba <_printf_i+0x11a>
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	d04d      	beq.n	8003b56 <_printf_i+0x1b6>
 8003aba:	4615      	mov	r5, r2
 8003abc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ac0:	fb03 6711 	mls	r7, r3, r1, r6
 8003ac4:	5dc7      	ldrb	r7, [r0, r7]
 8003ac6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003aca:	4637      	mov	r7, r6
 8003acc:	42bb      	cmp	r3, r7
 8003ace:	460e      	mov	r6, r1
 8003ad0:	d9f4      	bls.n	8003abc <_printf_i+0x11c>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d10b      	bne.n	8003aee <_printf_i+0x14e>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	07de      	lsls	r6, r3, #31
 8003ada:	d508      	bpl.n	8003aee <_printf_i+0x14e>
 8003adc:	6923      	ldr	r3, [r4, #16]
 8003ade:	6861      	ldr	r1, [r4, #4]
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	bfde      	ittt	le
 8003ae4:	2330      	movle	r3, #48	; 0x30
 8003ae6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003aea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003aee:	1b52      	subs	r2, r2, r5
 8003af0:	6122      	str	r2, [r4, #16]
 8003af2:	464b      	mov	r3, r9
 8003af4:	4621      	mov	r1, r4
 8003af6:	4640      	mov	r0, r8
 8003af8:	f8cd a000 	str.w	sl, [sp]
 8003afc:	aa03      	add	r2, sp, #12
 8003afe:	f7ff fedf 	bl	80038c0 <_printf_common>
 8003b02:	3001      	adds	r0, #1
 8003b04:	d14c      	bne.n	8003ba0 <_printf_i+0x200>
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	b004      	add	sp, #16
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b10:	4834      	ldr	r0, [pc, #208]	; (8003be4 <_printf_i+0x244>)
 8003b12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b16:	6829      	ldr	r1, [r5, #0]
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b1e:	6029      	str	r1, [r5, #0]
 8003b20:	061d      	lsls	r5, r3, #24
 8003b22:	d514      	bpl.n	8003b4e <_printf_i+0x1ae>
 8003b24:	07df      	lsls	r7, r3, #31
 8003b26:	bf44      	itt	mi
 8003b28:	f043 0320 	orrmi.w	r3, r3, #32
 8003b2c:	6023      	strmi	r3, [r4, #0]
 8003b2e:	b91e      	cbnz	r6, 8003b38 <_printf_i+0x198>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	2310      	movs	r3, #16
 8003b3a:	e7af      	b.n	8003a9c <_printf_i+0xfc>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	f043 0320 	orr.w	r3, r3, #32
 8003b42:	6023      	str	r3, [r4, #0]
 8003b44:	2378      	movs	r3, #120	; 0x78
 8003b46:	4828      	ldr	r0, [pc, #160]	; (8003be8 <_printf_i+0x248>)
 8003b48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b4c:	e7e3      	b.n	8003b16 <_printf_i+0x176>
 8003b4e:	0659      	lsls	r1, r3, #25
 8003b50:	bf48      	it	mi
 8003b52:	b2b6      	uxthmi	r6, r6
 8003b54:	e7e6      	b.n	8003b24 <_printf_i+0x184>
 8003b56:	4615      	mov	r5, r2
 8003b58:	e7bb      	b.n	8003ad2 <_printf_i+0x132>
 8003b5a:	682b      	ldr	r3, [r5, #0]
 8003b5c:	6826      	ldr	r6, [r4, #0]
 8003b5e:	1d18      	adds	r0, r3, #4
 8003b60:	6961      	ldr	r1, [r4, #20]
 8003b62:	6028      	str	r0, [r5, #0]
 8003b64:	0635      	lsls	r5, r6, #24
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	d501      	bpl.n	8003b6e <_printf_i+0x1ce>
 8003b6a:	6019      	str	r1, [r3, #0]
 8003b6c:	e002      	b.n	8003b74 <_printf_i+0x1d4>
 8003b6e:	0670      	lsls	r0, r6, #25
 8003b70:	d5fb      	bpl.n	8003b6a <_printf_i+0x1ca>
 8003b72:	8019      	strh	r1, [r3, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	4615      	mov	r5, r2
 8003b78:	6123      	str	r3, [r4, #16]
 8003b7a:	e7ba      	b.n	8003af2 <_printf_i+0x152>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	1d1a      	adds	r2, r3, #4
 8003b82:	602a      	str	r2, [r5, #0]
 8003b84:	681d      	ldr	r5, [r3, #0]
 8003b86:	6862      	ldr	r2, [r4, #4]
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f001 fa1f 	bl	8004fcc <memchr>
 8003b8e:	b108      	cbz	r0, 8003b94 <_printf_i+0x1f4>
 8003b90:	1b40      	subs	r0, r0, r5
 8003b92:	6060      	str	r0, [r4, #4]
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	6123      	str	r3, [r4, #16]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b9e:	e7a8      	b.n	8003af2 <_printf_i+0x152>
 8003ba0:	462a      	mov	r2, r5
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	4640      	mov	r0, r8
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	47d0      	blx	sl
 8003baa:	3001      	adds	r0, #1
 8003bac:	d0ab      	beq.n	8003b06 <_printf_i+0x166>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	079b      	lsls	r3, r3, #30
 8003bb2:	d413      	bmi.n	8003bdc <_printf_i+0x23c>
 8003bb4:	68e0      	ldr	r0, [r4, #12]
 8003bb6:	9b03      	ldr	r3, [sp, #12]
 8003bb8:	4298      	cmp	r0, r3
 8003bba:	bfb8      	it	lt
 8003bbc:	4618      	movlt	r0, r3
 8003bbe:	e7a4      	b.n	8003b0a <_printf_i+0x16a>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4632      	mov	r2, r6
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	47d0      	blx	sl
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d09b      	beq.n	8003b06 <_printf_i+0x166>
 8003bce:	3501      	adds	r5, #1
 8003bd0:	68e3      	ldr	r3, [r4, #12]
 8003bd2:	9903      	ldr	r1, [sp, #12]
 8003bd4:	1a5b      	subs	r3, r3, r1
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	dcf2      	bgt.n	8003bc0 <_printf_i+0x220>
 8003bda:	e7eb      	b.n	8003bb4 <_printf_i+0x214>
 8003bdc:	2500      	movs	r5, #0
 8003bde:	f104 0619 	add.w	r6, r4, #25
 8003be2:	e7f5      	b.n	8003bd0 <_printf_i+0x230>
 8003be4:	08006002 	.word	0x08006002
 8003be8:	08006013 	.word	0x08006013

08003bec <iprintf>:
 8003bec:	b40f      	push	{r0, r1, r2, r3}
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <iprintf+0x2c>)
 8003bf0:	b513      	push	{r0, r1, r4, lr}
 8003bf2:	681c      	ldr	r4, [r3, #0]
 8003bf4:	b124      	cbz	r4, 8003c00 <iprintf+0x14>
 8003bf6:	69a3      	ldr	r3, [r4, #24]
 8003bf8:	b913      	cbnz	r3, 8003c00 <iprintf+0x14>
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f001 f8d4 	bl	8004da8 <__sinit>
 8003c00:	ab05      	add	r3, sp, #20
 8003c02:	4620      	mov	r0, r4
 8003c04:	9a04      	ldr	r2, [sp, #16]
 8003c06:	68a1      	ldr	r1, [r4, #8]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	f001 fe95 	bl	8005938 <_vfiprintf_r>
 8003c0e:	b002      	add	sp, #8
 8003c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c14:	b004      	add	sp, #16
 8003c16:	4770      	bx	lr
 8003c18:	2000000c 	.word	0x2000000c

08003c1c <_puts_r>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	460e      	mov	r6, r1
 8003c20:	4605      	mov	r5, r0
 8003c22:	b118      	cbz	r0, 8003c2c <_puts_r+0x10>
 8003c24:	6983      	ldr	r3, [r0, #24]
 8003c26:	b90b      	cbnz	r3, 8003c2c <_puts_r+0x10>
 8003c28:	f001 f8be 	bl	8004da8 <__sinit>
 8003c2c:	69ab      	ldr	r3, [r5, #24]
 8003c2e:	68ac      	ldr	r4, [r5, #8]
 8003c30:	b913      	cbnz	r3, 8003c38 <_puts_r+0x1c>
 8003c32:	4628      	mov	r0, r5
 8003c34:	f001 f8b8 	bl	8004da8 <__sinit>
 8003c38:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <_puts_r+0xd0>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	d120      	bne.n	8003c80 <_puts_r+0x64>
 8003c3e:	686c      	ldr	r4, [r5, #4]
 8003c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c42:	07db      	lsls	r3, r3, #31
 8003c44:	d405      	bmi.n	8003c52 <_puts_r+0x36>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	0598      	lsls	r0, r3, #22
 8003c4a:	d402      	bmi.n	8003c52 <_puts_r+0x36>
 8003c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c4e:	f001 f94e 	bl	8004eee <__retarget_lock_acquire_recursive>
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	0719      	lsls	r1, r3, #28
 8003c56:	d51d      	bpl.n	8003c94 <_puts_r+0x78>
 8003c58:	6923      	ldr	r3, [r4, #16]
 8003c5a:	b1db      	cbz	r3, 8003c94 <_puts_r+0x78>
 8003c5c:	3e01      	subs	r6, #1
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60a3      	str	r3, [r4, #8]
 8003c68:	bb39      	cbnz	r1, 8003cba <_puts_r+0x9e>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da38      	bge.n	8003ce0 <_puts_r+0xc4>
 8003c6e:	4622      	mov	r2, r4
 8003c70:	210a      	movs	r1, #10
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f848 	bl	8003d08 <__swbuf_r>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d011      	beq.n	8003ca0 <_puts_r+0x84>
 8003c7c:	250a      	movs	r5, #10
 8003c7e:	e011      	b.n	8003ca4 <_puts_r+0x88>
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <_puts_r+0xd4>)
 8003c82:	429c      	cmp	r4, r3
 8003c84:	d101      	bne.n	8003c8a <_puts_r+0x6e>
 8003c86:	68ac      	ldr	r4, [r5, #8]
 8003c88:	e7da      	b.n	8003c40 <_puts_r+0x24>
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <_puts_r+0xd8>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	bf08      	it	eq
 8003c90:	68ec      	ldreq	r4, [r5, #12]
 8003c92:	e7d5      	b.n	8003c40 <_puts_r+0x24>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 f888 	bl	8003dac <__swsetup_r>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d0dd      	beq.n	8003c5c <_puts_r+0x40>
 8003ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ca6:	07da      	lsls	r2, r3, #31
 8003ca8:	d405      	bmi.n	8003cb6 <_puts_r+0x9a>
 8003caa:	89a3      	ldrh	r3, [r4, #12]
 8003cac:	059b      	lsls	r3, r3, #22
 8003cae:	d402      	bmi.n	8003cb6 <_puts_r+0x9a>
 8003cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cb2:	f001 f91d 	bl	8004ef0 <__retarget_lock_release_recursive>
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da04      	bge.n	8003cc8 <_puts_r+0xac>
 8003cbe:	69a2      	ldr	r2, [r4, #24]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dc06      	bgt.n	8003cd2 <_puts_r+0xb6>
 8003cc4:	290a      	cmp	r1, #10
 8003cc6:	d004      	beq.n	8003cd2 <_puts_r+0xb6>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	7019      	strb	r1, [r3, #0]
 8003cd0:	e7c5      	b.n	8003c5e <_puts_r+0x42>
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 f817 	bl	8003d08 <__swbuf_r>
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d1bf      	bne.n	8003c5e <_puts_r+0x42>
 8003cde:	e7df      	b.n	8003ca0 <_puts_r+0x84>
 8003ce0:	250a      	movs	r5, #10
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	6022      	str	r2, [r4, #0]
 8003ce8:	701d      	strb	r5, [r3, #0]
 8003cea:	e7db      	b.n	8003ca4 <_puts_r+0x88>
 8003cec:	080060d4 	.word	0x080060d4
 8003cf0:	080060f4 	.word	0x080060f4
 8003cf4:	080060b4 	.word	0x080060b4

08003cf8 <puts>:
 8003cf8:	4b02      	ldr	r3, [pc, #8]	; (8003d04 <puts+0xc>)
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f7ff bf8d 	b.w	8003c1c <_puts_r>
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c

08003d08 <__swbuf_r>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	4605      	mov	r5, r0
 8003d10:	b118      	cbz	r0, 8003d1a <__swbuf_r+0x12>
 8003d12:	6983      	ldr	r3, [r0, #24]
 8003d14:	b90b      	cbnz	r3, 8003d1a <__swbuf_r+0x12>
 8003d16:	f001 f847 	bl	8004da8 <__sinit>
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <__swbuf_r+0x98>)
 8003d1c:	429c      	cmp	r4, r3
 8003d1e:	d12b      	bne.n	8003d78 <__swbuf_r+0x70>
 8003d20:	686c      	ldr	r4, [r5, #4]
 8003d22:	69a3      	ldr	r3, [r4, #24]
 8003d24:	60a3      	str	r3, [r4, #8]
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	071a      	lsls	r2, r3, #28
 8003d2a:	d52f      	bpl.n	8003d8c <__swbuf_r+0x84>
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	b36b      	cbz	r3, 8003d8c <__swbuf_r+0x84>
 8003d30:	6923      	ldr	r3, [r4, #16]
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	b2f6      	uxtb	r6, r6
 8003d36:	1ac0      	subs	r0, r0, r3
 8003d38:	6963      	ldr	r3, [r4, #20]
 8003d3a:	4637      	mov	r7, r6
 8003d3c:	4283      	cmp	r3, r0
 8003d3e:	dc04      	bgt.n	8003d4a <__swbuf_r+0x42>
 8003d40:	4621      	mov	r1, r4
 8003d42:	4628      	mov	r0, r5
 8003d44:	f000 ff9c 	bl	8004c80 <_fflush_r>
 8003d48:	bb30      	cbnz	r0, 8003d98 <__swbuf_r+0x90>
 8003d4a:	68a3      	ldr	r3, [r4, #8]
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	6022      	str	r2, [r4, #0]
 8003d58:	701e      	strb	r6, [r3, #0]
 8003d5a:	6963      	ldr	r3, [r4, #20]
 8003d5c:	4283      	cmp	r3, r0
 8003d5e:	d004      	beq.n	8003d6a <__swbuf_r+0x62>
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	07db      	lsls	r3, r3, #31
 8003d64:	d506      	bpl.n	8003d74 <__swbuf_r+0x6c>
 8003d66:	2e0a      	cmp	r6, #10
 8003d68:	d104      	bne.n	8003d74 <__swbuf_r+0x6c>
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f000 ff87 	bl	8004c80 <_fflush_r>
 8003d72:	b988      	cbnz	r0, 8003d98 <__swbuf_r+0x90>
 8003d74:	4638      	mov	r0, r7
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <__swbuf_r+0x9c>)
 8003d7a:	429c      	cmp	r4, r3
 8003d7c:	d101      	bne.n	8003d82 <__swbuf_r+0x7a>
 8003d7e:	68ac      	ldr	r4, [r5, #8]
 8003d80:	e7cf      	b.n	8003d22 <__swbuf_r+0x1a>
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <__swbuf_r+0xa0>)
 8003d84:	429c      	cmp	r4, r3
 8003d86:	bf08      	it	eq
 8003d88:	68ec      	ldreq	r4, [r5, #12]
 8003d8a:	e7ca      	b.n	8003d22 <__swbuf_r+0x1a>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f80c 	bl	8003dac <__swsetup_r>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d0cb      	beq.n	8003d30 <__swbuf_r+0x28>
 8003d98:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9c:	e7ea      	b.n	8003d74 <__swbuf_r+0x6c>
 8003d9e:	bf00      	nop
 8003da0:	080060d4 	.word	0x080060d4
 8003da4:	080060f4 	.word	0x080060f4
 8003da8:	080060b4 	.word	0x080060b4

08003dac <__swsetup_r>:
 8003dac:	4b32      	ldr	r3, [pc, #200]	; (8003e78 <__swsetup_r+0xcc>)
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	681d      	ldr	r5, [r3, #0]
 8003db2:	4606      	mov	r6, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	b125      	cbz	r5, 8003dc2 <__swsetup_r+0x16>
 8003db8:	69ab      	ldr	r3, [r5, #24]
 8003dba:	b913      	cbnz	r3, 8003dc2 <__swsetup_r+0x16>
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 fff3 	bl	8004da8 <__sinit>
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <__swsetup_r+0xd0>)
 8003dc4:	429c      	cmp	r4, r3
 8003dc6:	d10f      	bne.n	8003de8 <__swsetup_r+0x3c>
 8003dc8:	686c      	ldr	r4, [r5, #4]
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dd0:	0719      	lsls	r1, r3, #28
 8003dd2:	d42c      	bmi.n	8003e2e <__swsetup_r+0x82>
 8003dd4:	06dd      	lsls	r5, r3, #27
 8003dd6:	d411      	bmi.n	8003dfc <__swsetup_r+0x50>
 8003dd8:	2309      	movs	r3, #9
 8003dda:	6033      	str	r3, [r6, #0]
 8003ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	e03e      	b.n	8003e66 <__swsetup_r+0xba>
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <__swsetup_r+0xd4>)
 8003dea:	429c      	cmp	r4, r3
 8003dec:	d101      	bne.n	8003df2 <__swsetup_r+0x46>
 8003dee:	68ac      	ldr	r4, [r5, #8]
 8003df0:	e7eb      	b.n	8003dca <__swsetup_r+0x1e>
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <__swsetup_r+0xd8>)
 8003df4:	429c      	cmp	r4, r3
 8003df6:	bf08      	it	eq
 8003df8:	68ec      	ldreq	r4, [r5, #12]
 8003dfa:	e7e6      	b.n	8003dca <__swsetup_r+0x1e>
 8003dfc:	0758      	lsls	r0, r3, #29
 8003dfe:	d512      	bpl.n	8003e26 <__swsetup_r+0x7a>
 8003e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e02:	b141      	cbz	r1, 8003e16 <__swsetup_r+0x6a>
 8003e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	d002      	beq.n	8003e12 <__swsetup_r+0x66>
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f001 fc8f 	bl	8005730 <_free_r>
 8003e12:	2300      	movs	r3, #0
 8003e14:	6363      	str	r3, [r4, #52]	; 0x34
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e1c:	81a3      	strh	r3, [r4, #12]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6063      	str	r3, [r4, #4]
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f043 0308 	orr.w	r3, r3, #8
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	b94b      	cbnz	r3, 8003e46 <__swsetup_r+0x9a>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d003      	beq.n	8003e46 <__swsetup_r+0x9a>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4630      	mov	r0, r6
 8003e42:	f001 f87b 	bl	8004f3c <__smakebuf_r>
 8003e46:	89a0      	ldrh	r0, [r4, #12]
 8003e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e4c:	f010 0301 	ands.w	r3, r0, #1
 8003e50:	d00a      	beq.n	8003e68 <__swsetup_r+0xbc>
 8003e52:	2300      	movs	r3, #0
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	6963      	ldr	r3, [r4, #20]
 8003e58:	425b      	negs	r3, r3
 8003e5a:	61a3      	str	r3, [r4, #24]
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	b943      	cbnz	r3, 8003e72 <__swsetup_r+0xc6>
 8003e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e64:	d1ba      	bne.n	8003ddc <__swsetup_r+0x30>
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	0781      	lsls	r1, r0, #30
 8003e6a:	bf58      	it	pl
 8003e6c:	6963      	ldrpl	r3, [r4, #20]
 8003e6e:	60a3      	str	r3, [r4, #8]
 8003e70:	e7f4      	b.n	8003e5c <__swsetup_r+0xb0>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e7f7      	b.n	8003e66 <__swsetup_r+0xba>
 8003e76:	bf00      	nop
 8003e78:	2000000c 	.word	0x2000000c
 8003e7c:	080060d4 	.word	0x080060d4
 8003e80:	080060f4 	.word	0x080060f4
 8003e84:	080060b4 	.word	0x080060b4

08003e88 <quorem>:
 8003e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	6903      	ldr	r3, [r0, #16]
 8003e8e:	690c      	ldr	r4, [r1, #16]
 8003e90:	4607      	mov	r7, r0
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	f2c0 8082 	blt.w	8003f9c <quorem+0x114>
 8003e98:	3c01      	subs	r4, #1
 8003e9a:	f100 0514 	add.w	r5, r0, #20
 8003e9e:	f101 0814 	add.w	r8, r1, #20
 8003ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ec0:	d331      	bcc.n	8003f26 <quorem+0x9e>
 8003ec2:	f04f 0e00 	mov.w	lr, #0
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	46ac      	mov	ip, r5
 8003eca:	46f2      	mov	sl, lr
 8003ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ed0:	b293      	uxth	r3, r2
 8003ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8003ed6:	0c12      	lsrs	r2, r2, #16
 8003ed8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	fb06 e202 	mla	r2, r6, r2, lr
 8003ee2:	ebaa 0303 	sub.w	r3, sl, r3
 8003ee6:	f8dc a000 	ldr.w	sl, [ip]
 8003eea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003eee:	fa1f fa8a 	uxth.w	sl, sl
 8003ef2:	4453      	add	r3, sl
 8003ef4:	f8dc a000 	ldr.w	sl, [ip]
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003efe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f08:	4581      	cmp	r9, r0
 8003f0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8003f12:	d2db      	bcs.n	8003ecc <quorem+0x44>
 8003f14:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f18:	b92b      	cbnz	r3, 8003f26 <quorem+0x9e>
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	3b04      	subs	r3, #4
 8003f1e:	429d      	cmp	r5, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	d32f      	bcc.n	8003f84 <quorem+0xfc>
 8003f24:	613c      	str	r4, [r7, #16]
 8003f26:	4638      	mov	r0, r7
 8003f28:	f001 faea 	bl	8005500 <__mcmp>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	db25      	blt.n	8003f7c <quorem+0xf4>
 8003f30:	4628      	mov	r0, r5
 8003f32:	f04f 0c00 	mov.w	ip, #0
 8003f36:	3601      	adds	r6, #1
 8003f38:	f858 1b04 	ldr.w	r1, [r8], #4
 8003f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8003f40:	b28b      	uxth	r3, r1
 8003f42:	ebac 0303 	sub.w	r3, ip, r3
 8003f46:	fa1f f28e 	uxth.w	r2, lr
 8003f4a:	4413      	add	r3, r2
 8003f4c:	0c0a      	lsrs	r2, r1, #16
 8003f4e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f5c:	45c1      	cmp	r9, r8
 8003f5e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f62:	f840 3b04 	str.w	r3, [r0], #4
 8003f66:	d2e7      	bcs.n	8003f38 <quorem+0xb0>
 8003f68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f70:	b922      	cbnz	r2, 8003f7c <quorem+0xf4>
 8003f72:	3b04      	subs	r3, #4
 8003f74:	429d      	cmp	r5, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	d30a      	bcc.n	8003f90 <quorem+0x108>
 8003f7a:	613c      	str	r4, [r7, #16]
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	b003      	add	sp, #12
 8003f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	3b04      	subs	r3, #4
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	d1cb      	bne.n	8003f24 <quorem+0x9c>
 8003f8c:	3c01      	subs	r4, #1
 8003f8e:	e7c6      	b.n	8003f1e <quorem+0x96>
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d1f0      	bne.n	8003f7a <quorem+0xf2>
 8003f98:	3c01      	subs	r4, #1
 8003f9a:	e7eb      	b.n	8003f74 <quorem+0xec>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e7ee      	b.n	8003f7e <quorem+0xf6>

08003fa0 <_dtoa_r>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	4616      	mov	r6, r2
 8003fa6:	461f      	mov	r7, r3
 8003fa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003faa:	b099      	sub	sp, #100	; 0x64
 8003fac:	4605      	mov	r5, r0
 8003fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003fb6:	b974      	cbnz	r4, 8003fd6 <_dtoa_r+0x36>
 8003fb8:	2010      	movs	r0, #16
 8003fba:	f000 ffff 	bl	8004fbc <malloc>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6268      	str	r0, [r5, #36]	; 0x24
 8003fc2:	b920      	cbnz	r0, 8003fce <_dtoa_r+0x2e>
 8003fc4:	21ea      	movs	r1, #234	; 0xea
 8003fc6:	4ba8      	ldr	r3, [pc, #672]	; (8004268 <_dtoa_r+0x2c8>)
 8003fc8:	48a8      	ldr	r0, [pc, #672]	; (800426c <_dtoa_r+0x2cc>)
 8003fca:	f001 fe4b 	bl	8005c64 <__assert_func>
 8003fce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003fd2:	6004      	str	r4, [r0, #0]
 8003fd4:	60c4      	str	r4, [r0, #12]
 8003fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	b151      	cbz	r1, 8003ff2 <_dtoa_r+0x52>
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4093      	lsls	r3, r2
 8003fe2:	604a      	str	r2, [r1, #4]
 8003fe4:	608b      	str	r3, [r1, #8]
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f001 f84c 	bl	8005084 <_Bfree>
 8003fec:	2200      	movs	r2, #0
 8003fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	1e3b      	subs	r3, r7, #0
 8003ff4:	bfaf      	iteee	ge
 8003ff6:	2300      	movge	r3, #0
 8003ff8:	2201      	movlt	r2, #1
 8003ffa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ffe:	9305      	strlt	r3, [sp, #20]
 8004000:	bfa8      	it	ge
 8004002:	f8c8 3000 	strge.w	r3, [r8]
 8004006:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800400a:	4b99      	ldr	r3, [pc, #612]	; (8004270 <_dtoa_r+0x2d0>)
 800400c:	bfb8      	it	lt
 800400e:	f8c8 2000 	strlt.w	r2, [r8]
 8004012:	ea33 0309 	bics.w	r3, r3, r9
 8004016:	d119      	bne.n	800404c <_dtoa_r+0xac>
 8004018:	f242 730f 	movw	r3, #9999	; 0x270f
 800401c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004024:	4333      	orrs	r3, r6
 8004026:	f000 857f 	beq.w	8004b28 <_dtoa_r+0xb88>
 800402a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800402c:	b953      	cbnz	r3, 8004044 <_dtoa_r+0xa4>
 800402e:	4b91      	ldr	r3, [pc, #580]	; (8004274 <_dtoa_r+0x2d4>)
 8004030:	e022      	b.n	8004078 <_dtoa_r+0xd8>
 8004032:	4b91      	ldr	r3, [pc, #580]	; (8004278 <_dtoa_r+0x2d8>)
 8004034:	9303      	str	r3, [sp, #12]
 8004036:	3308      	adds	r3, #8
 8004038:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	9803      	ldr	r0, [sp, #12]
 800403e:	b019      	add	sp, #100	; 0x64
 8004040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004044:	4b8b      	ldr	r3, [pc, #556]	; (8004274 <_dtoa_r+0x2d4>)
 8004046:	9303      	str	r3, [sp, #12]
 8004048:	3303      	adds	r3, #3
 800404a:	e7f5      	b.n	8004038 <_dtoa_r+0x98>
 800404c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004050:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004058:	2200      	movs	r2, #0
 800405a:	2300      	movs	r3, #0
 800405c:	f7fc fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8004060:	4680      	mov	r8, r0
 8004062:	b158      	cbz	r0, 800407c <_dtoa_r+0xdc>
 8004064:	2301      	movs	r3, #1
 8004066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8558 	beq.w	8004b22 <_dtoa_r+0xb82>
 8004072:	4882      	ldr	r0, [pc, #520]	; (800427c <_dtoa_r+0x2dc>)
 8004074:	6018      	str	r0, [r3, #0]
 8004076:	1e43      	subs	r3, r0, #1
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	e7df      	b.n	800403c <_dtoa_r+0x9c>
 800407c:	ab16      	add	r3, sp, #88	; 0x58
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	ab17      	add	r3, sp, #92	; 0x5c
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4628      	mov	r0, r5
 8004086:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800408a:	f001 fae1 	bl	8005650 <__d2b>
 800408e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004092:	4683      	mov	fp, r0
 8004094:	2c00      	cmp	r4, #0
 8004096:	d07f      	beq.n	8004198 <_dtoa_r+0x1f8>
 8004098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800409c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800409e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80040a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80040aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80040ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80040b2:	2200      	movs	r2, #0
 80040b4:	4b72      	ldr	r3, [pc, #456]	; (8004280 <_dtoa_r+0x2e0>)
 80040b6:	f7fc f857 	bl	8000168 <__aeabi_dsub>
 80040ba:	a365      	add	r3, pc, #404	; (adr r3, 8004250 <_dtoa_r+0x2b0>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc fa0a 	bl	80004d8 <__aeabi_dmul>
 80040c4:	a364      	add	r3, pc, #400	; (adr r3, 8004258 <_dtoa_r+0x2b8>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f7fc f84f 	bl	800016c <__adddf3>
 80040ce:	4606      	mov	r6, r0
 80040d0:	4620      	mov	r0, r4
 80040d2:	460f      	mov	r7, r1
 80040d4:	f7fc f996 	bl	8000404 <__aeabi_i2d>
 80040d8:	a361      	add	r3, pc, #388	; (adr r3, 8004260 <_dtoa_r+0x2c0>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f7fc f9fb 	bl	80004d8 <__aeabi_dmul>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4630      	mov	r0, r6
 80040e8:	4639      	mov	r1, r7
 80040ea:	f7fc f83f 	bl	800016c <__adddf3>
 80040ee:	4606      	mov	r6, r0
 80040f0:	460f      	mov	r7, r1
 80040f2:	f7fc fca1 	bl	8000a38 <__aeabi_d2iz>
 80040f6:	2200      	movs	r2, #0
 80040f8:	4682      	mov	sl, r0
 80040fa:	2300      	movs	r3, #0
 80040fc:	4630      	mov	r0, r6
 80040fe:	4639      	mov	r1, r7
 8004100:	f7fc fc5c 	bl	80009bc <__aeabi_dcmplt>
 8004104:	b148      	cbz	r0, 800411a <_dtoa_r+0x17a>
 8004106:	4650      	mov	r0, sl
 8004108:	f7fc f97c 	bl	8000404 <__aeabi_i2d>
 800410c:	4632      	mov	r2, r6
 800410e:	463b      	mov	r3, r7
 8004110:	f7fc fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004114:	b908      	cbnz	r0, 800411a <_dtoa_r+0x17a>
 8004116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800411a:	f1ba 0f16 	cmp.w	sl, #22
 800411e:	d858      	bhi.n	80041d2 <_dtoa_r+0x232>
 8004120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004124:	4b57      	ldr	r3, [pc, #348]	; (8004284 <_dtoa_r+0x2e4>)
 8004126:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f7fc fc45 	bl	80009bc <__aeabi_dcmplt>
 8004132:	2800      	cmp	r0, #0
 8004134:	d04f      	beq.n	80041d6 <_dtoa_r+0x236>
 8004136:	2300      	movs	r3, #0
 8004138:	f10a 3aff 	add.w	sl, sl, #4294967295
 800413c:	930f      	str	r3, [sp, #60]	; 0x3c
 800413e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004140:	1b1c      	subs	r4, r3, r4
 8004142:	1e63      	subs	r3, r4, #1
 8004144:	9309      	str	r3, [sp, #36]	; 0x24
 8004146:	bf49      	itett	mi
 8004148:	f1c4 0301 	rsbmi	r3, r4, #1
 800414c:	2300      	movpl	r3, #0
 800414e:	9306      	strmi	r3, [sp, #24]
 8004150:	2300      	movmi	r3, #0
 8004152:	bf54      	ite	pl
 8004154:	9306      	strpl	r3, [sp, #24]
 8004156:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004158:	f1ba 0f00 	cmp.w	sl, #0
 800415c:	db3d      	blt.n	80041da <_dtoa_r+0x23a>
 800415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004160:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004164:	4453      	add	r3, sl
 8004166:	9309      	str	r3, [sp, #36]	; 0x24
 8004168:	2300      	movs	r3, #0
 800416a:	930a      	str	r3, [sp, #40]	; 0x28
 800416c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800416e:	2b09      	cmp	r3, #9
 8004170:	f200 808c 	bhi.w	800428c <_dtoa_r+0x2ec>
 8004174:	2b05      	cmp	r3, #5
 8004176:	bfc4      	itt	gt
 8004178:	3b04      	subgt	r3, #4
 800417a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800417c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800417e:	bfc8      	it	gt
 8004180:	2400      	movgt	r4, #0
 8004182:	f1a3 0302 	sub.w	r3, r3, #2
 8004186:	bfd8      	it	le
 8004188:	2401      	movle	r4, #1
 800418a:	2b03      	cmp	r3, #3
 800418c:	f200 808a 	bhi.w	80042a4 <_dtoa_r+0x304>
 8004190:	e8df f003 	tbb	[pc, r3]
 8004194:	5b4d4f2d 	.word	0x5b4d4f2d
 8004198:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800419c:	441c      	add	r4, r3
 800419e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	bfc3      	ittte	gt
 80041a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80041ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80041b2:	f1c3 0320 	rsble	r3, r3, #32
 80041b6:	bfc6      	itte	gt
 80041b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80041bc:	4318      	orrgt	r0, r3
 80041be:	fa06 f003 	lslle.w	r0, r6, r3
 80041c2:	f7fc f90f 	bl	80003e4 <__aeabi_ui2d>
 80041c6:	2301      	movs	r3, #1
 80041c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80041cc:	3c01      	subs	r4, #1
 80041ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80041d0:	e76f      	b.n	80040b2 <_dtoa_r+0x112>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e7b2      	b.n	800413c <_dtoa_r+0x19c>
 80041d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80041d8:	e7b1      	b.n	800413e <_dtoa_r+0x19e>
 80041da:	9b06      	ldr	r3, [sp, #24]
 80041dc:	eba3 030a 	sub.w	r3, r3, sl
 80041e0:	9306      	str	r3, [sp, #24]
 80041e2:	f1ca 0300 	rsb	r3, sl, #0
 80041e6:	930a      	str	r3, [sp, #40]	; 0x28
 80041e8:	2300      	movs	r3, #0
 80041ea:	930e      	str	r3, [sp, #56]	; 0x38
 80041ec:	e7be      	b.n	800416c <_dtoa_r+0x1cc>
 80041ee:	2300      	movs	r3, #0
 80041f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80041f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dc58      	bgt.n	80042aa <_dtoa_r+0x30a>
 80041f8:	f04f 0901 	mov.w	r9, #1
 80041fc:	464b      	mov	r3, r9
 80041fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8004202:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004206:	2200      	movs	r2, #0
 8004208:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800420a:	6042      	str	r2, [r0, #4]
 800420c:	2204      	movs	r2, #4
 800420e:	f102 0614 	add.w	r6, r2, #20
 8004212:	429e      	cmp	r6, r3
 8004214:	6841      	ldr	r1, [r0, #4]
 8004216:	d94e      	bls.n	80042b6 <_dtoa_r+0x316>
 8004218:	4628      	mov	r0, r5
 800421a:	f000 fef3 	bl	8005004 <_Balloc>
 800421e:	9003      	str	r0, [sp, #12]
 8004220:	2800      	cmp	r0, #0
 8004222:	d14c      	bne.n	80042be <_dtoa_r+0x31e>
 8004224:	4602      	mov	r2, r0
 8004226:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <_dtoa_r+0x2e8>)
 800422c:	e6cc      	b.n	8003fc8 <_dtoa_r+0x28>
 800422e:	2301      	movs	r3, #1
 8004230:	e7de      	b.n	80041f0 <_dtoa_r+0x250>
 8004232:	2300      	movs	r3, #0
 8004234:	930b      	str	r3, [sp, #44]	; 0x2c
 8004236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004238:	eb0a 0903 	add.w	r9, sl, r3
 800423c:	f109 0301 	add.w	r3, r9, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	9308      	str	r3, [sp, #32]
 8004244:	bfb8      	it	lt
 8004246:	2301      	movlt	r3, #1
 8004248:	e7dd      	b.n	8004206 <_dtoa_r+0x266>
 800424a:	2301      	movs	r3, #1
 800424c:	e7f2      	b.n	8004234 <_dtoa_r+0x294>
 800424e:	bf00      	nop
 8004250:	636f4361 	.word	0x636f4361
 8004254:	3fd287a7 	.word	0x3fd287a7
 8004258:	8b60c8b3 	.word	0x8b60c8b3
 800425c:	3fc68a28 	.word	0x3fc68a28
 8004260:	509f79fb 	.word	0x509f79fb
 8004264:	3fd34413 	.word	0x3fd34413
 8004268:	08006031 	.word	0x08006031
 800426c:	08006048 	.word	0x08006048
 8004270:	7ff00000 	.word	0x7ff00000
 8004274:	0800602d 	.word	0x0800602d
 8004278:	08006024 	.word	0x08006024
 800427c:	08006001 	.word	0x08006001
 8004280:	3ff80000 	.word	0x3ff80000
 8004284:	08006198 	.word	0x08006198
 8004288:	080060a3 	.word	0x080060a3
 800428c:	2401      	movs	r4, #1
 800428e:	2300      	movs	r3, #0
 8004290:	940b      	str	r4, [sp, #44]	; 0x2c
 8004292:	9322      	str	r3, [sp, #136]	; 0x88
 8004294:	f04f 39ff 	mov.w	r9, #4294967295
 8004298:	2200      	movs	r2, #0
 800429a:	2312      	movs	r3, #18
 800429c:	f8cd 9020 	str.w	r9, [sp, #32]
 80042a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80042a2:	e7b0      	b.n	8004206 <_dtoa_r+0x266>
 80042a4:	2301      	movs	r3, #1
 80042a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042a8:	e7f4      	b.n	8004294 <_dtoa_r+0x2f4>
 80042aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80042ae:	464b      	mov	r3, r9
 80042b0:	f8cd 9020 	str.w	r9, [sp, #32]
 80042b4:	e7a7      	b.n	8004206 <_dtoa_r+0x266>
 80042b6:	3101      	adds	r1, #1
 80042b8:	6041      	str	r1, [r0, #4]
 80042ba:	0052      	lsls	r2, r2, #1
 80042bc:	e7a7      	b.n	800420e <_dtoa_r+0x26e>
 80042be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042c0:	9a03      	ldr	r2, [sp, #12]
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	9b08      	ldr	r3, [sp, #32]
 80042c6:	2b0e      	cmp	r3, #14
 80042c8:	f200 80a8 	bhi.w	800441c <_dtoa_r+0x47c>
 80042cc:	2c00      	cmp	r4, #0
 80042ce:	f000 80a5 	beq.w	800441c <_dtoa_r+0x47c>
 80042d2:	f1ba 0f00 	cmp.w	sl, #0
 80042d6:	dd34      	ble.n	8004342 <_dtoa_r+0x3a2>
 80042d8:	4a9a      	ldr	r2, [pc, #616]	; (8004544 <_dtoa_r+0x5a4>)
 80042da:	f00a 030f 	and.w	r3, sl, #15
 80042de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80042e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80042ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80042f2:	d016      	beq.n	8004322 <_dtoa_r+0x382>
 80042f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042f8:	4b93      	ldr	r3, [pc, #588]	; (8004548 <_dtoa_r+0x5a8>)
 80042fa:	2703      	movs	r7, #3
 80042fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004300:	f7fc fa14 	bl	800072c <__aeabi_ddiv>
 8004304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004308:	f004 040f 	and.w	r4, r4, #15
 800430c:	4e8e      	ldr	r6, [pc, #568]	; (8004548 <_dtoa_r+0x5a8>)
 800430e:	b954      	cbnz	r4, 8004326 <_dtoa_r+0x386>
 8004310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004318:	f7fc fa08 	bl	800072c <__aeabi_ddiv>
 800431c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004320:	e029      	b.n	8004376 <_dtoa_r+0x3d6>
 8004322:	2702      	movs	r7, #2
 8004324:	e7f2      	b.n	800430c <_dtoa_r+0x36c>
 8004326:	07e1      	lsls	r1, r4, #31
 8004328:	d508      	bpl.n	800433c <_dtoa_r+0x39c>
 800432a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800432e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004332:	f7fc f8d1 	bl	80004d8 <__aeabi_dmul>
 8004336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800433a:	3701      	adds	r7, #1
 800433c:	1064      	asrs	r4, r4, #1
 800433e:	3608      	adds	r6, #8
 8004340:	e7e5      	b.n	800430e <_dtoa_r+0x36e>
 8004342:	f000 80a5 	beq.w	8004490 <_dtoa_r+0x4f0>
 8004346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800434a:	f1ca 0400 	rsb	r4, sl, #0
 800434e:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <_dtoa_r+0x5a4>)
 8004350:	f004 020f 	and.w	r2, r4, #15
 8004354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc f8bc 	bl	80004d8 <__aeabi_dmul>
 8004360:	2702      	movs	r7, #2
 8004362:	2300      	movs	r3, #0
 8004364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004368:	4e77      	ldr	r6, [pc, #476]	; (8004548 <_dtoa_r+0x5a8>)
 800436a:	1124      	asrs	r4, r4, #4
 800436c:	2c00      	cmp	r4, #0
 800436e:	f040 8084 	bne.w	800447a <_dtoa_r+0x4da>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1d2      	bne.n	800431c <_dtoa_r+0x37c>
 8004376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 808b 	beq.w	8004494 <_dtoa_r+0x4f4>
 800437e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004382:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800438a:	2200      	movs	r2, #0
 800438c:	4b6f      	ldr	r3, [pc, #444]	; (800454c <_dtoa_r+0x5ac>)
 800438e:	f7fc fb15 	bl	80009bc <__aeabi_dcmplt>
 8004392:	2800      	cmp	r0, #0
 8004394:	d07e      	beq.n	8004494 <_dtoa_r+0x4f4>
 8004396:	9b08      	ldr	r3, [sp, #32]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d07b      	beq.n	8004494 <_dtoa_r+0x4f4>
 800439c:	f1b9 0f00 	cmp.w	r9, #0
 80043a0:	dd38      	ble.n	8004414 <_dtoa_r+0x474>
 80043a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043a6:	2200      	movs	r2, #0
 80043a8:	4b69      	ldr	r3, [pc, #420]	; (8004550 <_dtoa_r+0x5b0>)
 80043aa:	f7fc f895 	bl	80004d8 <__aeabi_dmul>
 80043ae:	464c      	mov	r4, r9
 80043b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043b4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80043b8:	3701      	adds	r7, #1
 80043ba:	4638      	mov	r0, r7
 80043bc:	f7fc f822 	bl	8000404 <__aeabi_i2d>
 80043c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043c4:	f7fc f888 	bl	80004d8 <__aeabi_dmul>
 80043c8:	2200      	movs	r2, #0
 80043ca:	4b62      	ldr	r3, [pc, #392]	; (8004554 <_dtoa_r+0x5b4>)
 80043cc:	f7fb fece 	bl	800016c <__adddf3>
 80043d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80043d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043d8:	9611      	str	r6, [sp, #68]	; 0x44
 80043da:	2c00      	cmp	r4, #0
 80043dc:	d15d      	bne.n	800449a <_dtoa_r+0x4fa>
 80043de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043e2:	2200      	movs	r2, #0
 80043e4:	4b5c      	ldr	r3, [pc, #368]	; (8004558 <_dtoa_r+0x5b8>)
 80043e6:	f7fb febf 	bl	8000168 <__aeabi_dsub>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043f2:	4633      	mov	r3, r6
 80043f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043f6:	f7fc faff 	bl	80009f8 <__aeabi_dcmpgt>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	f040 829c 	bne.w	8004938 <_dtoa_r+0x998>
 8004400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004406:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800440a:	f7fc fad7 	bl	80009bc <__aeabi_dcmplt>
 800440e:	2800      	cmp	r0, #0
 8004410:	f040 8290 	bne.w	8004934 <_dtoa_r+0x994>
 8004414:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004418:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800441c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800441e:	2b00      	cmp	r3, #0
 8004420:	f2c0 8152 	blt.w	80046c8 <_dtoa_r+0x728>
 8004424:	f1ba 0f0e 	cmp.w	sl, #14
 8004428:	f300 814e 	bgt.w	80046c8 <_dtoa_r+0x728>
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <_dtoa_r+0x5a4>)
 800442e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004432:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004436:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800443a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800443c:	2b00      	cmp	r3, #0
 800443e:	f280 80db 	bge.w	80045f8 <_dtoa_r+0x658>
 8004442:	9b08      	ldr	r3, [sp, #32]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f300 80d7 	bgt.w	80045f8 <_dtoa_r+0x658>
 800444a:	f040 8272 	bne.w	8004932 <_dtoa_r+0x992>
 800444e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004452:	2200      	movs	r2, #0
 8004454:	4b40      	ldr	r3, [pc, #256]	; (8004558 <_dtoa_r+0x5b8>)
 8004456:	f7fc f83f 	bl	80004d8 <__aeabi_dmul>
 800445a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800445e:	f7fc fac1 	bl	80009e4 <__aeabi_dcmpge>
 8004462:	9c08      	ldr	r4, [sp, #32]
 8004464:	4626      	mov	r6, r4
 8004466:	2800      	cmp	r0, #0
 8004468:	f040 8248 	bne.w	80048fc <_dtoa_r+0x95c>
 800446c:	2331      	movs	r3, #49	; 0x31
 800446e:	9f03      	ldr	r7, [sp, #12]
 8004470:	f10a 0a01 	add.w	sl, sl, #1
 8004474:	f807 3b01 	strb.w	r3, [r7], #1
 8004478:	e244      	b.n	8004904 <_dtoa_r+0x964>
 800447a:	07e2      	lsls	r2, r4, #31
 800447c:	d505      	bpl.n	800448a <_dtoa_r+0x4ea>
 800447e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004482:	f7fc f829 	bl	80004d8 <__aeabi_dmul>
 8004486:	2301      	movs	r3, #1
 8004488:	3701      	adds	r7, #1
 800448a:	1064      	asrs	r4, r4, #1
 800448c:	3608      	adds	r6, #8
 800448e:	e76d      	b.n	800436c <_dtoa_r+0x3cc>
 8004490:	2702      	movs	r7, #2
 8004492:	e770      	b.n	8004376 <_dtoa_r+0x3d6>
 8004494:	46d0      	mov	r8, sl
 8004496:	9c08      	ldr	r4, [sp, #32]
 8004498:	e78f      	b.n	80043ba <_dtoa_r+0x41a>
 800449a:	9903      	ldr	r1, [sp, #12]
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <_dtoa_r+0x5a4>)
 800449e:	4421      	add	r1, r4
 80044a0:	9112      	str	r1, [sp, #72]	; 0x48
 80044a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80044ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d055      	beq.n	8004560 <_dtoa_r+0x5c0>
 80044b4:	2000      	movs	r0, #0
 80044b6:	4929      	ldr	r1, [pc, #164]	; (800455c <_dtoa_r+0x5bc>)
 80044b8:	f7fc f938 	bl	800072c <__aeabi_ddiv>
 80044bc:	463b      	mov	r3, r7
 80044be:	4632      	mov	r2, r6
 80044c0:	f7fb fe52 	bl	8000168 <__aeabi_dsub>
 80044c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044c8:	9f03      	ldr	r7, [sp, #12]
 80044ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ce:	f7fc fab3 	bl	8000a38 <__aeabi_d2iz>
 80044d2:	4604      	mov	r4, r0
 80044d4:	f7fb ff96 	bl	8000404 <__aeabi_i2d>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044e0:	f7fb fe42 	bl	8000168 <__aeabi_dsub>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	3430      	adds	r4, #48	; 0x30
 80044ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044f2:	f807 4b01 	strb.w	r4, [r7], #1
 80044f6:	f7fc fa61 	bl	80009bc <__aeabi_dcmplt>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d174      	bne.n	80045e8 <_dtoa_r+0x648>
 80044fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004502:	2000      	movs	r0, #0
 8004504:	4911      	ldr	r1, [pc, #68]	; (800454c <_dtoa_r+0x5ac>)
 8004506:	f7fb fe2f 	bl	8000168 <__aeabi_dsub>
 800450a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800450e:	f7fc fa55 	bl	80009bc <__aeabi_dcmplt>
 8004512:	2800      	cmp	r0, #0
 8004514:	f040 80b7 	bne.w	8004686 <_dtoa_r+0x6e6>
 8004518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800451a:	429f      	cmp	r7, r3
 800451c:	f43f af7a 	beq.w	8004414 <_dtoa_r+0x474>
 8004520:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004524:	2200      	movs	r2, #0
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <_dtoa_r+0x5b0>)
 8004528:	f7fb ffd6 	bl	80004d8 <__aeabi_dmul>
 800452c:	2200      	movs	r2, #0
 800452e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <_dtoa_r+0x5b0>)
 8004538:	f7fb ffce 	bl	80004d8 <__aeabi_dmul>
 800453c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004540:	e7c3      	b.n	80044ca <_dtoa_r+0x52a>
 8004542:	bf00      	nop
 8004544:	08006198 	.word	0x08006198
 8004548:	08006170 	.word	0x08006170
 800454c:	3ff00000 	.word	0x3ff00000
 8004550:	40240000 	.word	0x40240000
 8004554:	401c0000 	.word	0x401c0000
 8004558:	40140000 	.word	0x40140000
 800455c:	3fe00000 	.word	0x3fe00000
 8004560:	4630      	mov	r0, r6
 8004562:	4639      	mov	r1, r7
 8004564:	f7fb ffb8 	bl	80004d8 <__aeabi_dmul>
 8004568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800456a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800456e:	9c03      	ldr	r4, [sp, #12]
 8004570:	9314      	str	r3, [sp, #80]	; 0x50
 8004572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004576:	f7fc fa5f 	bl	8000a38 <__aeabi_d2iz>
 800457a:	9015      	str	r0, [sp, #84]	; 0x54
 800457c:	f7fb ff42 	bl	8000404 <__aeabi_i2d>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004588:	f7fb fdee 	bl	8000168 <__aeabi_dsub>
 800458c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800458e:	4606      	mov	r6, r0
 8004590:	3330      	adds	r3, #48	; 0x30
 8004592:	f804 3b01 	strb.w	r3, [r4], #1
 8004596:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004598:	460f      	mov	r7, r1
 800459a:	429c      	cmp	r4, r3
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	d124      	bne.n	80045ec <_dtoa_r+0x64c>
 80045a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045a6:	4bb0      	ldr	r3, [pc, #704]	; (8004868 <_dtoa_r+0x8c8>)
 80045a8:	f7fb fde0 	bl	800016c <__adddf3>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4630      	mov	r0, r6
 80045b2:	4639      	mov	r1, r7
 80045b4:	f7fc fa20 	bl	80009f8 <__aeabi_dcmpgt>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d163      	bne.n	8004684 <_dtoa_r+0x6e4>
 80045bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045c0:	2000      	movs	r0, #0
 80045c2:	49a9      	ldr	r1, [pc, #676]	; (8004868 <_dtoa_r+0x8c8>)
 80045c4:	f7fb fdd0 	bl	8000168 <__aeabi_dsub>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4630      	mov	r0, r6
 80045ce:	4639      	mov	r1, r7
 80045d0:	f7fc f9f4 	bl	80009bc <__aeabi_dcmplt>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	f43f af1d 	beq.w	8004414 <_dtoa_r+0x474>
 80045da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80045dc:	1e7b      	subs	r3, r7, #1
 80045de:	9314      	str	r3, [sp, #80]	; 0x50
 80045e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80045e4:	2b30      	cmp	r3, #48	; 0x30
 80045e6:	d0f8      	beq.n	80045da <_dtoa_r+0x63a>
 80045e8:	46c2      	mov	sl, r8
 80045ea:	e03b      	b.n	8004664 <_dtoa_r+0x6c4>
 80045ec:	4b9f      	ldr	r3, [pc, #636]	; (800486c <_dtoa_r+0x8cc>)
 80045ee:	f7fb ff73 	bl	80004d8 <__aeabi_dmul>
 80045f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045f6:	e7bc      	b.n	8004572 <_dtoa_r+0x5d2>
 80045f8:	9f03      	ldr	r7, [sp, #12]
 80045fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80045fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004602:	4640      	mov	r0, r8
 8004604:	4649      	mov	r1, r9
 8004606:	f7fc f891 	bl	800072c <__aeabi_ddiv>
 800460a:	f7fc fa15 	bl	8000a38 <__aeabi_d2iz>
 800460e:	4604      	mov	r4, r0
 8004610:	f7fb fef8 	bl	8000404 <__aeabi_i2d>
 8004614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004618:	f7fb ff5e 	bl	80004d8 <__aeabi_dmul>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4640      	mov	r0, r8
 8004622:	4649      	mov	r1, r9
 8004624:	f7fb fda0 	bl	8000168 <__aeabi_dsub>
 8004628:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800462c:	f807 6b01 	strb.w	r6, [r7], #1
 8004630:	9e03      	ldr	r6, [sp, #12]
 8004632:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004636:	1bbe      	subs	r6, r7, r6
 8004638:	45b4      	cmp	ip, r6
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	d136      	bne.n	80046ae <_dtoa_r+0x70e>
 8004640:	f7fb fd94 	bl	800016c <__adddf3>
 8004644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004648:	4680      	mov	r8, r0
 800464a:	4689      	mov	r9, r1
 800464c:	f7fc f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 8004650:	bb58      	cbnz	r0, 80046aa <_dtoa_r+0x70a>
 8004652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004656:	4640      	mov	r0, r8
 8004658:	4649      	mov	r1, r9
 800465a:	f7fc f9a5 	bl	80009a8 <__aeabi_dcmpeq>
 800465e:	b108      	cbz	r0, 8004664 <_dtoa_r+0x6c4>
 8004660:	07e1      	lsls	r1, r4, #31
 8004662:	d422      	bmi.n	80046aa <_dtoa_r+0x70a>
 8004664:	4628      	mov	r0, r5
 8004666:	4659      	mov	r1, fp
 8004668:	f000 fd0c 	bl	8005084 <_Bfree>
 800466c:	2300      	movs	r3, #0
 800466e:	703b      	strb	r3, [r7, #0]
 8004670:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004672:	f10a 0001 	add.w	r0, sl, #1
 8004676:	6018      	str	r0, [r3, #0]
 8004678:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800467a:	2b00      	cmp	r3, #0
 800467c:	f43f acde 	beq.w	800403c <_dtoa_r+0x9c>
 8004680:	601f      	str	r7, [r3, #0]
 8004682:	e4db      	b.n	800403c <_dtoa_r+0x9c>
 8004684:	4627      	mov	r7, r4
 8004686:	463b      	mov	r3, r7
 8004688:	461f      	mov	r7, r3
 800468a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800468e:	2a39      	cmp	r2, #57	; 0x39
 8004690:	d107      	bne.n	80046a2 <_dtoa_r+0x702>
 8004692:	9a03      	ldr	r2, [sp, #12]
 8004694:	429a      	cmp	r2, r3
 8004696:	d1f7      	bne.n	8004688 <_dtoa_r+0x6e8>
 8004698:	2230      	movs	r2, #48	; 0x30
 800469a:	9903      	ldr	r1, [sp, #12]
 800469c:	f108 0801 	add.w	r8, r8, #1
 80046a0:	700a      	strb	r2, [r1, #0]
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	3201      	adds	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e79e      	b.n	80045e8 <_dtoa_r+0x648>
 80046aa:	46d0      	mov	r8, sl
 80046ac:	e7eb      	b.n	8004686 <_dtoa_r+0x6e6>
 80046ae:	2200      	movs	r2, #0
 80046b0:	4b6e      	ldr	r3, [pc, #440]	; (800486c <_dtoa_r+0x8cc>)
 80046b2:	f7fb ff11 	bl	80004d8 <__aeabi_dmul>
 80046b6:	2200      	movs	r2, #0
 80046b8:	2300      	movs	r3, #0
 80046ba:	4680      	mov	r8, r0
 80046bc:	4689      	mov	r9, r1
 80046be:	f7fc f973 	bl	80009a8 <__aeabi_dcmpeq>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d09b      	beq.n	80045fe <_dtoa_r+0x65e>
 80046c6:	e7cd      	b.n	8004664 <_dtoa_r+0x6c4>
 80046c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	f000 80d0 	beq.w	8004870 <_dtoa_r+0x8d0>
 80046d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80046d2:	2a01      	cmp	r2, #1
 80046d4:	f300 80ae 	bgt.w	8004834 <_dtoa_r+0x894>
 80046d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80046da:	2a00      	cmp	r2, #0
 80046dc:	f000 80a6 	beq.w	800482c <_dtoa_r+0x88c>
 80046e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80046e6:	9f06      	ldr	r7, [sp, #24]
 80046e8:	9a06      	ldr	r2, [sp, #24]
 80046ea:	2101      	movs	r1, #1
 80046ec:	441a      	add	r2, r3
 80046ee:	9206      	str	r2, [sp, #24]
 80046f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046f2:	4628      	mov	r0, r5
 80046f4:	441a      	add	r2, r3
 80046f6:	9209      	str	r2, [sp, #36]	; 0x24
 80046f8:	f000 fd7a 	bl	80051f0 <__i2b>
 80046fc:	4606      	mov	r6, r0
 80046fe:	2f00      	cmp	r7, #0
 8004700:	dd0c      	ble.n	800471c <_dtoa_r+0x77c>
 8004702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	dd09      	ble.n	800471c <_dtoa_r+0x77c>
 8004708:	42bb      	cmp	r3, r7
 800470a:	bfa8      	it	ge
 800470c:	463b      	movge	r3, r7
 800470e:	9a06      	ldr	r2, [sp, #24]
 8004710:	1aff      	subs	r7, r7, r3
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	9206      	str	r2, [sp, #24]
 8004716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	9309      	str	r3, [sp, #36]	; 0x24
 800471c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471e:	b1f3      	cbz	r3, 800475e <_dtoa_r+0x7be>
 8004720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80a8 	beq.w	8004878 <_dtoa_r+0x8d8>
 8004728:	2c00      	cmp	r4, #0
 800472a:	dd10      	ble.n	800474e <_dtoa_r+0x7ae>
 800472c:	4631      	mov	r1, r6
 800472e:	4622      	mov	r2, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f000 fe1b 	bl	800536c <__pow5mult>
 8004736:	465a      	mov	r2, fp
 8004738:	4601      	mov	r1, r0
 800473a:	4606      	mov	r6, r0
 800473c:	4628      	mov	r0, r5
 800473e:	f000 fd6d 	bl	800521c <__multiply>
 8004742:	4680      	mov	r8, r0
 8004744:	4659      	mov	r1, fp
 8004746:	4628      	mov	r0, r5
 8004748:	f000 fc9c 	bl	8005084 <_Bfree>
 800474c:	46c3      	mov	fp, r8
 800474e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004750:	1b1a      	subs	r2, r3, r4
 8004752:	d004      	beq.n	800475e <_dtoa_r+0x7be>
 8004754:	4659      	mov	r1, fp
 8004756:	4628      	mov	r0, r5
 8004758:	f000 fe08 	bl	800536c <__pow5mult>
 800475c:	4683      	mov	fp, r0
 800475e:	2101      	movs	r1, #1
 8004760:	4628      	mov	r0, r5
 8004762:	f000 fd45 	bl	80051f0 <__i2b>
 8004766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004768:	4604      	mov	r4, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f340 8086 	ble.w	800487c <_dtoa_r+0x8dc>
 8004770:	461a      	mov	r2, r3
 8004772:	4601      	mov	r1, r0
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fdf9 	bl	800536c <__pow5mult>
 800477a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800477c:	4604      	mov	r4, r0
 800477e:	2b01      	cmp	r3, #1
 8004780:	dd7f      	ble.n	8004882 <_dtoa_r+0x8e2>
 8004782:	f04f 0800 	mov.w	r8, #0
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800478c:	6918      	ldr	r0, [r3, #16]
 800478e:	f000 fce1 	bl	8005154 <__hi0bits>
 8004792:	f1c0 0020 	rsb	r0, r0, #32
 8004796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004798:	4418      	add	r0, r3
 800479a:	f010 001f 	ands.w	r0, r0, #31
 800479e:	f000 8092 	beq.w	80048c6 <_dtoa_r+0x926>
 80047a2:	f1c0 0320 	rsb	r3, r0, #32
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	f340 808a 	ble.w	80048c0 <_dtoa_r+0x920>
 80047ac:	f1c0 001c 	rsb	r0, r0, #28
 80047b0:	9b06      	ldr	r3, [sp, #24]
 80047b2:	4407      	add	r7, r0
 80047b4:	4403      	add	r3, r0
 80047b6:	9306      	str	r3, [sp, #24]
 80047b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ba:	4403      	add	r3, r0
 80047bc:	9309      	str	r3, [sp, #36]	; 0x24
 80047be:	9b06      	ldr	r3, [sp, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dd05      	ble.n	80047d0 <_dtoa_r+0x830>
 80047c4:	4659      	mov	r1, fp
 80047c6:	461a      	mov	r2, r3
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 fe29 	bl	8005420 <__lshift>
 80047ce:	4683      	mov	fp, r0
 80047d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dd05      	ble.n	80047e2 <_dtoa_r+0x842>
 80047d6:	4621      	mov	r1, r4
 80047d8:	461a      	mov	r2, r3
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 fe20 	bl	8005420 <__lshift>
 80047e0:	4604      	mov	r4, r0
 80047e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d070      	beq.n	80048ca <_dtoa_r+0x92a>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4658      	mov	r0, fp
 80047ec:	f000 fe88 	bl	8005500 <__mcmp>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	da6a      	bge.n	80048ca <_dtoa_r+0x92a>
 80047f4:	2300      	movs	r3, #0
 80047f6:	4659      	mov	r1, fp
 80047f8:	220a      	movs	r2, #10
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 fc64 	bl	80050c8 <__multadd>
 8004800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004802:	4683      	mov	fp, r0
 8004804:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8194 	beq.w	8004b36 <_dtoa_r+0xb96>
 800480e:	4631      	mov	r1, r6
 8004810:	2300      	movs	r3, #0
 8004812:	220a      	movs	r2, #10
 8004814:	4628      	mov	r0, r5
 8004816:	f000 fc57 	bl	80050c8 <__multadd>
 800481a:	f1b9 0f00 	cmp.w	r9, #0
 800481e:	4606      	mov	r6, r0
 8004820:	f300 8093 	bgt.w	800494a <_dtoa_r+0x9aa>
 8004824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004826:	2b02      	cmp	r3, #2
 8004828:	dc57      	bgt.n	80048da <_dtoa_r+0x93a>
 800482a:	e08e      	b.n	800494a <_dtoa_r+0x9aa>
 800482c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800482e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004832:	e757      	b.n	80046e4 <_dtoa_r+0x744>
 8004834:	9b08      	ldr	r3, [sp, #32]
 8004836:	1e5c      	subs	r4, r3, #1
 8004838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800483a:	42a3      	cmp	r3, r4
 800483c:	bfb7      	itett	lt
 800483e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004840:	1b1c      	subge	r4, r3, r4
 8004842:	1ae2      	sublt	r2, r4, r3
 8004844:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004846:	bfbe      	ittt	lt
 8004848:	940a      	strlt	r4, [sp, #40]	; 0x28
 800484a:	189b      	addlt	r3, r3, r2
 800484c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800484e:	9b08      	ldr	r3, [sp, #32]
 8004850:	bfb8      	it	lt
 8004852:	2400      	movlt	r4, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	bfbb      	ittet	lt
 8004858:	9b06      	ldrlt	r3, [sp, #24]
 800485a:	9a08      	ldrlt	r2, [sp, #32]
 800485c:	9f06      	ldrge	r7, [sp, #24]
 800485e:	1a9f      	sublt	r7, r3, r2
 8004860:	bfac      	ite	ge
 8004862:	9b08      	ldrge	r3, [sp, #32]
 8004864:	2300      	movlt	r3, #0
 8004866:	e73f      	b.n	80046e8 <_dtoa_r+0x748>
 8004868:	3fe00000 	.word	0x3fe00000
 800486c:	40240000 	.word	0x40240000
 8004870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004872:	9f06      	ldr	r7, [sp, #24]
 8004874:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004876:	e742      	b.n	80046fe <_dtoa_r+0x75e>
 8004878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800487a:	e76b      	b.n	8004754 <_dtoa_r+0x7b4>
 800487c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800487e:	2b01      	cmp	r3, #1
 8004880:	dc19      	bgt.n	80048b6 <_dtoa_r+0x916>
 8004882:	9b04      	ldr	r3, [sp, #16]
 8004884:	b9bb      	cbnz	r3, 80048b6 <_dtoa_r+0x916>
 8004886:	9b05      	ldr	r3, [sp, #20]
 8004888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800488c:	b99b      	cbnz	r3, 80048b6 <_dtoa_r+0x916>
 800488e:	9b05      	ldr	r3, [sp, #20]
 8004890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004894:	0d1b      	lsrs	r3, r3, #20
 8004896:	051b      	lsls	r3, r3, #20
 8004898:	b183      	cbz	r3, 80048bc <_dtoa_r+0x91c>
 800489a:	f04f 0801 	mov.w	r8, #1
 800489e:	9b06      	ldr	r3, [sp, #24]
 80048a0:	3301      	adds	r3, #1
 80048a2:	9306      	str	r3, [sp, #24]
 80048a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a6:	3301      	adds	r3, #1
 80048a8:	9309      	str	r3, [sp, #36]	; 0x24
 80048aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f af6a 	bne.w	8004786 <_dtoa_r+0x7e6>
 80048b2:	2001      	movs	r0, #1
 80048b4:	e76f      	b.n	8004796 <_dtoa_r+0x7f6>
 80048b6:	f04f 0800 	mov.w	r8, #0
 80048ba:	e7f6      	b.n	80048aa <_dtoa_r+0x90a>
 80048bc:	4698      	mov	r8, r3
 80048be:	e7f4      	b.n	80048aa <_dtoa_r+0x90a>
 80048c0:	f43f af7d 	beq.w	80047be <_dtoa_r+0x81e>
 80048c4:	4618      	mov	r0, r3
 80048c6:	301c      	adds	r0, #28
 80048c8:	e772      	b.n	80047b0 <_dtoa_r+0x810>
 80048ca:	9b08      	ldr	r3, [sp, #32]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dc36      	bgt.n	800493e <_dtoa_r+0x99e>
 80048d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	dd33      	ble.n	800493e <_dtoa_r+0x99e>
 80048d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048da:	f1b9 0f00 	cmp.w	r9, #0
 80048de:	d10d      	bne.n	80048fc <_dtoa_r+0x95c>
 80048e0:	4621      	mov	r1, r4
 80048e2:	464b      	mov	r3, r9
 80048e4:	2205      	movs	r2, #5
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 fbee 	bl	80050c8 <__multadd>
 80048ec:	4601      	mov	r1, r0
 80048ee:	4604      	mov	r4, r0
 80048f0:	4658      	mov	r0, fp
 80048f2:	f000 fe05 	bl	8005500 <__mcmp>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f73f adb8 	bgt.w	800446c <_dtoa_r+0x4cc>
 80048fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048fe:	9f03      	ldr	r7, [sp, #12]
 8004900:	ea6f 0a03 	mvn.w	sl, r3
 8004904:	f04f 0800 	mov.w	r8, #0
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fbba 	bl	8005084 <_Bfree>
 8004910:	2e00      	cmp	r6, #0
 8004912:	f43f aea7 	beq.w	8004664 <_dtoa_r+0x6c4>
 8004916:	f1b8 0f00 	cmp.w	r8, #0
 800491a:	d005      	beq.n	8004928 <_dtoa_r+0x988>
 800491c:	45b0      	cmp	r8, r6
 800491e:	d003      	beq.n	8004928 <_dtoa_r+0x988>
 8004920:	4641      	mov	r1, r8
 8004922:	4628      	mov	r0, r5
 8004924:	f000 fbae 	bl	8005084 <_Bfree>
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	f000 fbaa 	bl	8005084 <_Bfree>
 8004930:	e698      	b.n	8004664 <_dtoa_r+0x6c4>
 8004932:	2400      	movs	r4, #0
 8004934:	4626      	mov	r6, r4
 8004936:	e7e1      	b.n	80048fc <_dtoa_r+0x95c>
 8004938:	46c2      	mov	sl, r8
 800493a:	4626      	mov	r6, r4
 800493c:	e596      	b.n	800446c <_dtoa_r+0x4cc>
 800493e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80fd 	beq.w	8004b44 <_dtoa_r+0xba4>
 800494a:	2f00      	cmp	r7, #0
 800494c:	dd05      	ble.n	800495a <_dtoa_r+0x9ba>
 800494e:	4631      	mov	r1, r6
 8004950:	463a      	mov	r2, r7
 8004952:	4628      	mov	r0, r5
 8004954:	f000 fd64 	bl	8005420 <__lshift>
 8004958:	4606      	mov	r6, r0
 800495a:	f1b8 0f00 	cmp.w	r8, #0
 800495e:	d05c      	beq.n	8004a1a <_dtoa_r+0xa7a>
 8004960:	4628      	mov	r0, r5
 8004962:	6871      	ldr	r1, [r6, #4]
 8004964:	f000 fb4e 	bl	8005004 <_Balloc>
 8004968:	4607      	mov	r7, r0
 800496a:	b928      	cbnz	r0, 8004978 <_dtoa_r+0x9d8>
 800496c:	4602      	mov	r2, r0
 800496e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004972:	4b7f      	ldr	r3, [pc, #508]	; (8004b70 <_dtoa_r+0xbd0>)
 8004974:	f7ff bb28 	b.w	8003fc8 <_dtoa_r+0x28>
 8004978:	6932      	ldr	r2, [r6, #16]
 800497a:	f106 010c 	add.w	r1, r6, #12
 800497e:	3202      	adds	r2, #2
 8004980:	0092      	lsls	r2, r2, #2
 8004982:	300c      	adds	r0, #12
 8004984:	f000 fb30 	bl	8004fe8 <memcpy>
 8004988:	2201      	movs	r2, #1
 800498a:	4639      	mov	r1, r7
 800498c:	4628      	mov	r0, r5
 800498e:	f000 fd47 	bl	8005420 <__lshift>
 8004992:	46b0      	mov	r8, r6
 8004994:	4606      	mov	r6, r0
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	3301      	adds	r3, #1
 800499a:	9308      	str	r3, [sp, #32]
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	444b      	add	r3, r9
 80049a0:	930a      	str	r3, [sp, #40]	; 0x28
 80049a2:	9b04      	ldr	r3, [sp, #16]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	9309      	str	r3, [sp, #36]	; 0x24
 80049aa:	9b08      	ldr	r3, [sp, #32]
 80049ac:	4621      	mov	r1, r4
 80049ae:	3b01      	subs	r3, #1
 80049b0:	4658      	mov	r0, fp
 80049b2:	9304      	str	r3, [sp, #16]
 80049b4:	f7ff fa68 	bl	8003e88 <quorem>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4641      	mov	r1, r8
 80049bc:	3330      	adds	r3, #48	; 0x30
 80049be:	9006      	str	r0, [sp, #24]
 80049c0:	4658      	mov	r0, fp
 80049c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80049c4:	f000 fd9c 	bl	8005500 <__mcmp>
 80049c8:	4632      	mov	r2, r6
 80049ca:	4681      	mov	r9, r0
 80049cc:	4621      	mov	r1, r4
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 fdb2 	bl	8005538 <__mdiff>
 80049d4:	68c2      	ldr	r2, [r0, #12]
 80049d6:	4607      	mov	r7, r0
 80049d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049da:	bb02      	cbnz	r2, 8004a1e <_dtoa_r+0xa7e>
 80049dc:	4601      	mov	r1, r0
 80049de:	4658      	mov	r0, fp
 80049e0:	f000 fd8e 	bl	8005500 <__mcmp>
 80049e4:	4602      	mov	r2, r0
 80049e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e8:	4639      	mov	r1, r7
 80049ea:	4628      	mov	r0, r5
 80049ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80049f0:	f000 fb48 	bl	8005084 <_Bfree>
 80049f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049f8:	9f08      	ldr	r7, [sp, #32]
 80049fa:	ea43 0102 	orr.w	r1, r3, r2
 80049fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a00:	430b      	orrs	r3, r1
 8004a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a04:	d10d      	bne.n	8004a22 <_dtoa_r+0xa82>
 8004a06:	2b39      	cmp	r3, #57	; 0x39
 8004a08:	d029      	beq.n	8004a5e <_dtoa_r+0xabe>
 8004a0a:	f1b9 0f00 	cmp.w	r9, #0
 8004a0e:	dd01      	ble.n	8004a14 <_dtoa_r+0xa74>
 8004a10:	9b06      	ldr	r3, [sp, #24]
 8004a12:	3331      	adds	r3, #49	; 0x31
 8004a14:	9a04      	ldr	r2, [sp, #16]
 8004a16:	7013      	strb	r3, [r2, #0]
 8004a18:	e776      	b.n	8004908 <_dtoa_r+0x968>
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	e7b9      	b.n	8004992 <_dtoa_r+0x9f2>
 8004a1e:	2201      	movs	r2, #1
 8004a20:	e7e2      	b.n	80049e8 <_dtoa_r+0xa48>
 8004a22:	f1b9 0f00 	cmp.w	r9, #0
 8004a26:	db06      	blt.n	8004a36 <_dtoa_r+0xa96>
 8004a28:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004a2a:	ea41 0909 	orr.w	r9, r1, r9
 8004a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a30:	ea59 0101 	orrs.w	r1, r9, r1
 8004a34:	d120      	bne.n	8004a78 <_dtoa_r+0xad8>
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	ddec      	ble.n	8004a14 <_dtoa_r+0xa74>
 8004a3a:	4659      	mov	r1, fp
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4628      	mov	r0, r5
 8004a40:	9308      	str	r3, [sp, #32]
 8004a42:	f000 fced 	bl	8005420 <__lshift>
 8004a46:	4621      	mov	r1, r4
 8004a48:	4683      	mov	fp, r0
 8004a4a:	f000 fd59 	bl	8005500 <__mcmp>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	9b08      	ldr	r3, [sp, #32]
 8004a52:	dc02      	bgt.n	8004a5a <_dtoa_r+0xaba>
 8004a54:	d1de      	bne.n	8004a14 <_dtoa_r+0xa74>
 8004a56:	07da      	lsls	r2, r3, #31
 8004a58:	d5dc      	bpl.n	8004a14 <_dtoa_r+0xa74>
 8004a5a:	2b39      	cmp	r3, #57	; 0x39
 8004a5c:	d1d8      	bne.n	8004a10 <_dtoa_r+0xa70>
 8004a5e:	2339      	movs	r3, #57	; 0x39
 8004a60:	9a04      	ldr	r2, [sp, #16]
 8004a62:	7013      	strb	r3, [r2, #0]
 8004a64:	463b      	mov	r3, r7
 8004a66:	461f      	mov	r7, r3
 8004a68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	2a39      	cmp	r2, #57	; 0x39
 8004a70:	d050      	beq.n	8004b14 <_dtoa_r+0xb74>
 8004a72:	3201      	adds	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	e747      	b.n	8004908 <_dtoa_r+0x968>
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	dd03      	ble.n	8004a84 <_dtoa_r+0xae4>
 8004a7c:	2b39      	cmp	r3, #57	; 0x39
 8004a7e:	d0ee      	beq.n	8004a5e <_dtoa_r+0xabe>
 8004a80:	3301      	adds	r3, #1
 8004a82:	e7c7      	b.n	8004a14 <_dtoa_r+0xa74>
 8004a84:	9a08      	ldr	r2, [sp, #32]
 8004a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004a8c:	428a      	cmp	r2, r1
 8004a8e:	d02a      	beq.n	8004ae6 <_dtoa_r+0xb46>
 8004a90:	4659      	mov	r1, fp
 8004a92:	2300      	movs	r3, #0
 8004a94:	220a      	movs	r2, #10
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 fb16 	bl	80050c8 <__multadd>
 8004a9c:	45b0      	cmp	r8, r6
 8004a9e:	4683      	mov	fp, r0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	f04f 020a 	mov.w	r2, #10
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	4628      	mov	r0, r5
 8004aac:	d107      	bne.n	8004abe <_dtoa_r+0xb1e>
 8004aae:	f000 fb0b 	bl	80050c8 <__multadd>
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	9b08      	ldr	r3, [sp, #32]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	9308      	str	r3, [sp, #32]
 8004abc:	e775      	b.n	80049aa <_dtoa_r+0xa0a>
 8004abe:	f000 fb03 	bl	80050c8 <__multadd>
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	220a      	movs	r2, #10
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 fafc 	bl	80050c8 <__multadd>
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	e7f0      	b.n	8004ab6 <_dtoa_r+0xb16>
 8004ad4:	f1b9 0f00 	cmp.w	r9, #0
 8004ad8:	bfcc      	ite	gt
 8004ada:	464f      	movgt	r7, r9
 8004adc:	2701      	movle	r7, #1
 8004ade:	f04f 0800 	mov.w	r8, #0
 8004ae2:	9a03      	ldr	r2, [sp, #12]
 8004ae4:	4417      	add	r7, r2
 8004ae6:	4659      	mov	r1, fp
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4628      	mov	r0, r5
 8004aec:	9308      	str	r3, [sp, #32]
 8004aee:	f000 fc97 	bl	8005420 <__lshift>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4683      	mov	fp, r0
 8004af6:	f000 fd03 	bl	8005500 <__mcmp>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	dcb2      	bgt.n	8004a64 <_dtoa_r+0xac4>
 8004afe:	d102      	bne.n	8004b06 <_dtoa_r+0xb66>
 8004b00:	9b08      	ldr	r3, [sp, #32]
 8004b02:	07db      	lsls	r3, r3, #31
 8004b04:	d4ae      	bmi.n	8004a64 <_dtoa_r+0xac4>
 8004b06:	463b      	mov	r3, r7
 8004b08:	461f      	mov	r7, r3
 8004b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b0e:	2a30      	cmp	r2, #48	; 0x30
 8004b10:	d0fa      	beq.n	8004b08 <_dtoa_r+0xb68>
 8004b12:	e6f9      	b.n	8004908 <_dtoa_r+0x968>
 8004b14:	9a03      	ldr	r2, [sp, #12]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d1a5      	bne.n	8004a66 <_dtoa_r+0xac6>
 8004b1a:	2331      	movs	r3, #49	; 0x31
 8004b1c:	f10a 0a01 	add.w	sl, sl, #1
 8004b20:	e779      	b.n	8004a16 <_dtoa_r+0xa76>
 8004b22:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <_dtoa_r+0xbd4>)
 8004b24:	f7ff baa8 	b.w	8004078 <_dtoa_r+0xd8>
 8004b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f47f aa81 	bne.w	8004032 <_dtoa_r+0x92>
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <_dtoa_r+0xbd8>)
 8004b32:	f7ff baa1 	b.w	8004078 <_dtoa_r+0xd8>
 8004b36:	f1b9 0f00 	cmp.w	r9, #0
 8004b3a:	dc03      	bgt.n	8004b44 <_dtoa_r+0xba4>
 8004b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	f73f aecb 	bgt.w	80048da <_dtoa_r+0x93a>
 8004b44:	9f03      	ldr	r7, [sp, #12]
 8004b46:	4621      	mov	r1, r4
 8004b48:	4658      	mov	r0, fp
 8004b4a:	f7ff f99d 	bl	8003e88 <quorem>
 8004b4e:	9a03      	ldr	r2, [sp, #12]
 8004b50:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004b54:	f807 3b01 	strb.w	r3, [r7], #1
 8004b58:	1aba      	subs	r2, r7, r2
 8004b5a:	4591      	cmp	r9, r2
 8004b5c:	ddba      	ble.n	8004ad4 <_dtoa_r+0xb34>
 8004b5e:	4659      	mov	r1, fp
 8004b60:	2300      	movs	r3, #0
 8004b62:	220a      	movs	r2, #10
 8004b64:	4628      	mov	r0, r5
 8004b66:	f000 faaf 	bl	80050c8 <__multadd>
 8004b6a:	4683      	mov	fp, r0
 8004b6c:	e7eb      	b.n	8004b46 <_dtoa_r+0xba6>
 8004b6e:	bf00      	nop
 8004b70:	080060a3 	.word	0x080060a3
 8004b74:	08006000 	.word	0x08006000
 8004b78:	08006024 	.word	0x08006024

08004b7c <__sflush_r>:
 8004b7c:	898a      	ldrh	r2, [r1, #12]
 8004b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b80:	4605      	mov	r5, r0
 8004b82:	0710      	lsls	r0, r2, #28
 8004b84:	460c      	mov	r4, r1
 8004b86:	d457      	bmi.n	8004c38 <__sflush_r+0xbc>
 8004b88:	684b      	ldr	r3, [r1, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dc04      	bgt.n	8004b98 <__sflush_r+0x1c>
 8004b8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	dc01      	bgt.n	8004b98 <__sflush_r+0x1c>
 8004b94:	2000      	movs	r0, #0
 8004b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	d0fa      	beq.n	8004b94 <__sflush_r+0x18>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ba4:	682f      	ldr	r7, [r5, #0]
 8004ba6:	602b      	str	r3, [r5, #0]
 8004ba8:	d032      	beq.n	8004c10 <__sflush_r+0x94>
 8004baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	075a      	lsls	r2, r3, #29
 8004bb0:	d505      	bpl.n	8004bbe <__sflush_r+0x42>
 8004bb2:	6863      	ldr	r3, [r4, #4]
 8004bb4:	1ac0      	subs	r0, r0, r3
 8004bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bb8:	b10b      	cbz	r3, 8004bbe <__sflush_r+0x42>
 8004bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bbc:	1ac0      	subs	r0, r0, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	6a21      	ldr	r1, [r4, #32]
 8004bc8:	47b0      	blx	r6
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	d106      	bne.n	8004bde <__sflush_r+0x62>
 8004bd0:	6829      	ldr	r1, [r5, #0]
 8004bd2:	291d      	cmp	r1, #29
 8004bd4:	d82c      	bhi.n	8004c30 <__sflush_r+0xb4>
 8004bd6:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <__sflush_r+0x100>)
 8004bd8:	40ca      	lsrs	r2, r1
 8004bda:	07d6      	lsls	r6, r2, #31
 8004bdc:	d528      	bpl.n	8004c30 <__sflush_r+0xb4>
 8004bde:	2200      	movs	r2, #0
 8004be0:	6062      	str	r2, [r4, #4]
 8004be2:	6922      	ldr	r2, [r4, #16]
 8004be4:	04d9      	lsls	r1, r3, #19
 8004be6:	6022      	str	r2, [r4, #0]
 8004be8:	d504      	bpl.n	8004bf4 <__sflush_r+0x78>
 8004bea:	1c42      	adds	r2, r0, #1
 8004bec:	d101      	bne.n	8004bf2 <__sflush_r+0x76>
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	b903      	cbnz	r3, 8004bf4 <__sflush_r+0x78>
 8004bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8004bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf6:	602f      	str	r7, [r5, #0]
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	d0cb      	beq.n	8004b94 <__sflush_r+0x18>
 8004bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d002      	beq.n	8004c0a <__sflush_r+0x8e>
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 fd93 	bl	8005730 <_free_r>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c0e:	e7c2      	b.n	8004b96 <__sflush_r+0x1a>
 8004c10:	6a21      	ldr	r1, [r4, #32]
 8004c12:	2301      	movs	r3, #1
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b0      	blx	r6
 8004c18:	1c41      	adds	r1, r0, #1
 8004c1a:	d1c7      	bne.n	8004bac <__sflush_r+0x30>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0c4      	beq.n	8004bac <__sflush_r+0x30>
 8004c22:	2b1d      	cmp	r3, #29
 8004c24:	d001      	beq.n	8004c2a <__sflush_r+0xae>
 8004c26:	2b16      	cmp	r3, #22
 8004c28:	d101      	bne.n	8004c2e <__sflush_r+0xb2>
 8004c2a:	602f      	str	r7, [r5, #0]
 8004c2c:	e7b2      	b.n	8004b94 <__sflush_r+0x18>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	e7ae      	b.n	8004b96 <__sflush_r+0x1a>
 8004c38:	690f      	ldr	r7, [r1, #16]
 8004c3a:	2f00      	cmp	r7, #0
 8004c3c:	d0aa      	beq.n	8004b94 <__sflush_r+0x18>
 8004c3e:	0793      	lsls	r3, r2, #30
 8004c40:	bf18      	it	ne
 8004c42:	2300      	movne	r3, #0
 8004c44:	680e      	ldr	r6, [r1, #0]
 8004c46:	bf08      	it	eq
 8004c48:	694b      	ldreq	r3, [r1, #20]
 8004c4a:	1bf6      	subs	r6, r6, r7
 8004c4c:	600f      	str	r7, [r1, #0]
 8004c4e:	608b      	str	r3, [r1, #8]
 8004c50:	2e00      	cmp	r6, #0
 8004c52:	dd9f      	ble.n	8004b94 <__sflush_r+0x18>
 8004c54:	4633      	mov	r3, r6
 8004c56:	463a      	mov	r2, r7
 8004c58:	4628      	mov	r0, r5
 8004c5a:	6a21      	ldr	r1, [r4, #32]
 8004c5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c60:	47e0      	blx	ip
 8004c62:	2800      	cmp	r0, #0
 8004c64:	dc06      	bgt.n	8004c74 <__sflush_r+0xf8>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	e790      	b.n	8004b96 <__sflush_r+0x1a>
 8004c74:	4407      	add	r7, r0
 8004c76:	1a36      	subs	r6, r6, r0
 8004c78:	e7ea      	b.n	8004c50 <__sflush_r+0xd4>
 8004c7a:	bf00      	nop
 8004c7c:	20400001 	.word	0x20400001

08004c80 <_fflush_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	690b      	ldr	r3, [r1, #16]
 8004c84:	4605      	mov	r5, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	b913      	cbnz	r3, 8004c90 <_fflush_r+0x10>
 8004c8a:	2500      	movs	r5, #0
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	b118      	cbz	r0, 8004c9a <_fflush_r+0x1a>
 8004c92:	6983      	ldr	r3, [r0, #24]
 8004c94:	b90b      	cbnz	r3, 8004c9a <_fflush_r+0x1a>
 8004c96:	f000 f887 	bl	8004da8 <__sinit>
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <_fflush_r+0x6c>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d11b      	bne.n	8004cd8 <_fflush_r+0x58>
 8004ca0:	686c      	ldr	r4, [r5, #4]
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0ef      	beq.n	8004c8a <_fflush_r+0xa>
 8004caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cac:	07d0      	lsls	r0, r2, #31
 8004cae:	d404      	bmi.n	8004cba <_fflush_r+0x3a>
 8004cb0:	0599      	lsls	r1, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_fflush_r+0x3a>
 8004cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb6:	f000 f91a 	bl	8004eee <__retarget_lock_acquire_recursive>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f7ff ff5d 	bl	8004b7c <__sflush_r>
 8004cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	07da      	lsls	r2, r3, #31
 8004cc8:	d4e0      	bmi.n	8004c8c <_fflush_r+0xc>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	d4dd      	bmi.n	8004c8c <_fflush_r+0xc>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f000 f90d 	bl	8004ef0 <__retarget_lock_release_recursive>
 8004cd6:	e7d9      	b.n	8004c8c <_fflush_r+0xc>
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <_fflush_r+0x70>)
 8004cda:	429c      	cmp	r4, r3
 8004cdc:	d101      	bne.n	8004ce2 <_fflush_r+0x62>
 8004cde:	68ac      	ldr	r4, [r5, #8]
 8004ce0:	e7df      	b.n	8004ca2 <_fflush_r+0x22>
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <_fflush_r+0x74>)
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	bf08      	it	eq
 8004ce8:	68ec      	ldreq	r4, [r5, #12]
 8004cea:	e7da      	b.n	8004ca2 <_fflush_r+0x22>
 8004cec:	080060d4 	.word	0x080060d4
 8004cf0:	080060f4 	.word	0x080060f4
 8004cf4:	080060b4 	.word	0x080060b4

08004cf8 <std>:
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8004d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d06:	6083      	str	r3, [r0, #8]
 8004d08:	8181      	strh	r1, [r0, #12]
 8004d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d0c:	81c2      	strh	r2, [r0, #14]
 8004d0e:	6183      	str	r3, [r0, #24]
 8004d10:	4619      	mov	r1, r3
 8004d12:	2208      	movs	r2, #8
 8004d14:	305c      	adds	r0, #92	; 0x5c
 8004d16:	f7fe fb01 	bl	800331c <memset>
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <std+0x38>)
 8004d1c:	6224      	str	r4, [r4, #32]
 8004d1e:	6263      	str	r3, [r4, #36]	; 0x24
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <std+0x3c>)
 8004d22:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <std+0x40>)
 8004d26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <std+0x44>)
 8004d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	bf00      	nop
 8004d30:	08005bb9 	.word	0x08005bb9
 8004d34:	08005bdb 	.word	0x08005bdb
 8004d38:	08005c13 	.word	0x08005c13
 8004d3c:	08005c37 	.word	0x08005c37

08004d40 <_cleanup_r>:
 8004d40:	4901      	ldr	r1, [pc, #4]	; (8004d48 <_cleanup_r+0x8>)
 8004d42:	f000 b8af 	b.w	8004ea4 <_fwalk_reent>
 8004d46:	bf00      	nop
 8004d48:	08004c81 	.word	0x08004c81

08004d4c <__sfmoreglue>:
 8004d4c:	2268      	movs	r2, #104	; 0x68
 8004d4e:	b570      	push	{r4, r5, r6, lr}
 8004d50:	1e4d      	subs	r5, r1, #1
 8004d52:	4355      	muls	r5, r2
 8004d54:	460e      	mov	r6, r1
 8004d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d5a:	f000 fd51 	bl	8005800 <_malloc_r>
 8004d5e:	4604      	mov	r4, r0
 8004d60:	b140      	cbz	r0, 8004d74 <__sfmoreglue+0x28>
 8004d62:	2100      	movs	r1, #0
 8004d64:	e9c0 1600 	strd	r1, r6, [r0]
 8004d68:	300c      	adds	r0, #12
 8004d6a:	60a0      	str	r0, [r4, #8]
 8004d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d70:	f7fe fad4 	bl	800331c <memset>
 8004d74:	4620      	mov	r0, r4
 8004d76:	bd70      	pop	{r4, r5, r6, pc}

08004d78 <__sfp_lock_acquire>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <__sfp_lock_acquire+0x8>)
 8004d7a:	f000 b8b8 	b.w	8004eee <__retarget_lock_acquire_recursive>
 8004d7e:	bf00      	nop
 8004d80:	200002b5 	.word	0x200002b5

08004d84 <__sfp_lock_release>:
 8004d84:	4801      	ldr	r0, [pc, #4]	; (8004d8c <__sfp_lock_release+0x8>)
 8004d86:	f000 b8b3 	b.w	8004ef0 <__retarget_lock_release_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	200002b5 	.word	0x200002b5

08004d90 <__sinit_lock_acquire>:
 8004d90:	4801      	ldr	r0, [pc, #4]	; (8004d98 <__sinit_lock_acquire+0x8>)
 8004d92:	f000 b8ac 	b.w	8004eee <__retarget_lock_acquire_recursive>
 8004d96:	bf00      	nop
 8004d98:	200002b6 	.word	0x200002b6

08004d9c <__sinit_lock_release>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	; (8004da4 <__sinit_lock_release+0x8>)
 8004d9e:	f000 b8a7 	b.w	8004ef0 <__retarget_lock_release_recursive>
 8004da2:	bf00      	nop
 8004da4:	200002b6 	.word	0x200002b6

08004da8 <__sinit>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	4604      	mov	r4, r0
 8004dac:	f7ff fff0 	bl	8004d90 <__sinit_lock_acquire>
 8004db0:	69a3      	ldr	r3, [r4, #24]
 8004db2:	b11b      	cbz	r3, 8004dbc <__sinit+0x14>
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db8:	f7ff bff0 	b.w	8004d9c <__sinit_lock_release>
 8004dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <__sinit+0x68>)
 8004dc4:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <__sinit+0x6c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	bf08      	it	eq
 8004dce:	2301      	moveq	r3, #1
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	bf08      	it	eq
 8004dd4:	61a3      	streq	r3, [r4, #24]
 8004dd6:	f000 f81f 	bl	8004e18 <__sfp>
 8004dda:	6060      	str	r0, [r4, #4]
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 f81b 	bl	8004e18 <__sfp>
 8004de2:	60a0      	str	r0, [r4, #8]
 8004de4:	4620      	mov	r0, r4
 8004de6:	f000 f817 	bl	8004e18 <__sfp>
 8004dea:	2200      	movs	r2, #0
 8004dec:	2104      	movs	r1, #4
 8004dee:	60e0      	str	r0, [r4, #12]
 8004df0:	6860      	ldr	r0, [r4, #4]
 8004df2:	f7ff ff81 	bl	8004cf8 <std>
 8004df6:	2201      	movs	r2, #1
 8004df8:	2109      	movs	r1, #9
 8004dfa:	68a0      	ldr	r0, [r4, #8]
 8004dfc:	f7ff ff7c 	bl	8004cf8 <std>
 8004e00:	2202      	movs	r2, #2
 8004e02:	2112      	movs	r1, #18
 8004e04:	68e0      	ldr	r0, [r4, #12]
 8004e06:	f7ff ff77 	bl	8004cf8 <std>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61a3      	str	r3, [r4, #24]
 8004e0e:	e7d1      	b.n	8004db4 <__sinit+0xc>
 8004e10:	08005fec 	.word	0x08005fec
 8004e14:	08004d41 	.word	0x08004d41

08004e18 <__sfp>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	4607      	mov	r7, r0
 8004e1c:	f7ff ffac 	bl	8004d78 <__sfp_lock_acquire>
 8004e20:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <__sfp+0x84>)
 8004e22:	681e      	ldr	r6, [r3, #0]
 8004e24:	69b3      	ldr	r3, [r6, #24]
 8004e26:	b913      	cbnz	r3, 8004e2e <__sfp+0x16>
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7ff ffbd 	bl	8004da8 <__sinit>
 8004e2e:	3648      	adds	r6, #72	; 0x48
 8004e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	d503      	bpl.n	8004e40 <__sfp+0x28>
 8004e38:	6833      	ldr	r3, [r6, #0]
 8004e3a:	b30b      	cbz	r3, 8004e80 <__sfp+0x68>
 8004e3c:	6836      	ldr	r6, [r6, #0]
 8004e3e:	e7f7      	b.n	8004e30 <__sfp+0x18>
 8004e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e44:	b9d5      	cbnz	r5, 8004e7c <__sfp+0x64>
 8004e46:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <__sfp+0x88>)
 8004e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e4c:	60e3      	str	r3, [r4, #12]
 8004e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e50:	f000 f84c 	bl	8004eec <__retarget_lock_init_recursive>
 8004e54:	f7ff ff96 	bl	8004d84 <__sfp_lock_release>
 8004e58:	2208      	movs	r2, #8
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e64:	6025      	str	r5, [r4, #0]
 8004e66:	61a5      	str	r5, [r4, #24]
 8004e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e6c:	f7fe fa56 	bl	800331c <memset>
 8004e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e78:	4620      	mov	r0, r4
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7c:	3468      	adds	r4, #104	; 0x68
 8004e7e:	e7d9      	b.n	8004e34 <__sfp+0x1c>
 8004e80:	2104      	movs	r1, #4
 8004e82:	4638      	mov	r0, r7
 8004e84:	f7ff ff62 	bl	8004d4c <__sfmoreglue>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	6030      	str	r0, [r6, #0]
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d1d5      	bne.n	8004e3c <__sfp+0x24>
 8004e90:	f7ff ff78 	bl	8004d84 <__sfp_lock_release>
 8004e94:	230c      	movs	r3, #12
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	e7ee      	b.n	8004e78 <__sfp+0x60>
 8004e9a:	bf00      	nop
 8004e9c:	08005fec 	.word	0x08005fec
 8004ea0:	ffff0001 	.word	0xffff0001

08004ea4 <_fwalk_reent>:
 8004ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	4688      	mov	r8, r1
 8004eac:	2700      	movs	r7, #0
 8004eae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eba:	d505      	bpl.n	8004ec8 <_fwalk_reent+0x24>
 8004ebc:	6824      	ldr	r4, [r4, #0]
 8004ebe:	2c00      	cmp	r4, #0
 8004ec0:	d1f7      	bne.n	8004eb2 <_fwalk_reent+0xe>
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec8:	89ab      	ldrh	r3, [r5, #12]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d907      	bls.n	8004ede <_fwalk_reent+0x3a>
 8004ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	d003      	beq.n	8004ede <_fwalk_reent+0x3a>
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4630      	mov	r0, r6
 8004eda:	47c0      	blx	r8
 8004edc:	4307      	orrs	r7, r0
 8004ede:	3568      	adds	r5, #104	; 0x68
 8004ee0:	e7e9      	b.n	8004eb6 <_fwalk_reent+0x12>
	...

08004ee4 <_localeconv_r>:
 8004ee4:	4800      	ldr	r0, [pc, #0]	; (8004ee8 <_localeconv_r+0x4>)
 8004ee6:	4770      	bx	lr
 8004ee8:	20000160 	.word	0x20000160

08004eec <__retarget_lock_init_recursive>:
 8004eec:	4770      	bx	lr

08004eee <__retarget_lock_acquire_recursive>:
 8004eee:	4770      	bx	lr

08004ef0 <__retarget_lock_release_recursive>:
 8004ef0:	4770      	bx	lr

08004ef2 <__swhatbuf_r>:
 8004ef2:	b570      	push	{r4, r5, r6, lr}
 8004ef4:	460e      	mov	r6, r1
 8004ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efa:	4614      	mov	r4, r2
 8004efc:	2900      	cmp	r1, #0
 8004efe:	461d      	mov	r5, r3
 8004f00:	b096      	sub	sp, #88	; 0x58
 8004f02:	da08      	bge.n	8004f16 <__swhatbuf_r+0x24>
 8004f04:	2200      	movs	r2, #0
 8004f06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f0a:	602a      	str	r2, [r5, #0]
 8004f0c:	061a      	lsls	r2, r3, #24
 8004f0e:	d410      	bmi.n	8004f32 <__swhatbuf_r+0x40>
 8004f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f14:	e00e      	b.n	8004f34 <__swhatbuf_r+0x42>
 8004f16:	466a      	mov	r2, sp
 8004f18:	f000 fee4 	bl	8005ce4 <_fstat_r>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	dbf1      	blt.n	8004f04 <__swhatbuf_r+0x12>
 8004f20:	9a01      	ldr	r2, [sp, #4]
 8004f22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f2a:	425a      	negs	r2, r3
 8004f2c:	415a      	adcs	r2, r3
 8004f2e:	602a      	str	r2, [r5, #0]
 8004f30:	e7ee      	b.n	8004f10 <__swhatbuf_r+0x1e>
 8004f32:	2340      	movs	r3, #64	; 0x40
 8004f34:	2000      	movs	r0, #0
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	b016      	add	sp, #88	; 0x58
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}

08004f3c <__smakebuf_r>:
 8004f3c:	898b      	ldrh	r3, [r1, #12]
 8004f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f40:	079d      	lsls	r5, r3, #30
 8004f42:	4606      	mov	r6, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	d507      	bpl.n	8004f58 <__smakebuf_r+0x1c>
 8004f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	6123      	str	r3, [r4, #16]
 8004f50:	2301      	movs	r3, #1
 8004f52:	6163      	str	r3, [r4, #20]
 8004f54:	b002      	add	sp, #8
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	466a      	mov	r2, sp
 8004f5a:	ab01      	add	r3, sp, #4
 8004f5c:	f7ff ffc9 	bl	8004ef2 <__swhatbuf_r>
 8004f60:	9900      	ldr	r1, [sp, #0]
 8004f62:	4605      	mov	r5, r0
 8004f64:	4630      	mov	r0, r6
 8004f66:	f000 fc4b 	bl	8005800 <_malloc_r>
 8004f6a:	b948      	cbnz	r0, 8004f80 <__smakebuf_r+0x44>
 8004f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f70:	059a      	lsls	r2, r3, #22
 8004f72:	d4ef      	bmi.n	8004f54 <__smakebuf_r+0x18>
 8004f74:	f023 0303 	bic.w	r3, r3, #3
 8004f78:	f043 0302 	orr.w	r3, r3, #2
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	e7e3      	b.n	8004f48 <__smakebuf_r+0xc>
 8004f80:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <__smakebuf_r+0x7c>)
 8004f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	6020      	str	r0, [r4, #0]
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	9b00      	ldr	r3, [sp, #0]
 8004f90:	6120      	str	r0, [r4, #16]
 8004f92:	6163      	str	r3, [r4, #20]
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	b15b      	cbz	r3, 8004fb0 <__smakebuf_r+0x74>
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f9e:	f000 feb3 	bl	8005d08 <_isatty_r>
 8004fa2:	b128      	cbz	r0, 8004fb0 <__smakebuf_r+0x74>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	89a0      	ldrh	r0, [r4, #12]
 8004fb2:	4305      	orrs	r5, r0
 8004fb4:	81a5      	strh	r5, [r4, #12]
 8004fb6:	e7cd      	b.n	8004f54 <__smakebuf_r+0x18>
 8004fb8:	08004d41 	.word	0x08004d41

08004fbc <malloc>:
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <malloc+0xc>)
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	f000 bc1d 	b.w	8005800 <_malloc_r>
 8004fc6:	bf00      	nop
 8004fc8:	2000000c 	.word	0x2000000c

08004fcc <memchr>:
 8004fcc:	4603      	mov	r3, r0
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	b2c9      	uxtb	r1, r1
 8004fd2:	4402      	add	r2, r0
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	d101      	bne.n	8004fde <memchr+0x12>
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e003      	b.n	8004fe6 <memchr+0x1a>
 8004fde:	7804      	ldrb	r4, [r0, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	428c      	cmp	r4, r1
 8004fe4:	d1f6      	bne.n	8004fd4 <memchr+0x8>
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <memcpy>:
 8004fe8:	440a      	add	r2, r1
 8004fea:	4291      	cmp	r1, r2
 8004fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ff0:	d100      	bne.n	8004ff4 <memcpy+0xc>
 8004ff2:	4770      	bx	lr
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ffa:	4291      	cmp	r1, r2
 8004ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005000:	d1f9      	bne.n	8004ff6 <memcpy+0xe>
 8005002:	bd10      	pop	{r4, pc}

08005004 <_Balloc>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005008:	4604      	mov	r4, r0
 800500a:	460d      	mov	r5, r1
 800500c:	b976      	cbnz	r6, 800502c <_Balloc+0x28>
 800500e:	2010      	movs	r0, #16
 8005010:	f7ff ffd4 	bl	8004fbc <malloc>
 8005014:	4602      	mov	r2, r0
 8005016:	6260      	str	r0, [r4, #36]	; 0x24
 8005018:	b920      	cbnz	r0, 8005024 <_Balloc+0x20>
 800501a:	2166      	movs	r1, #102	; 0x66
 800501c:	4b17      	ldr	r3, [pc, #92]	; (800507c <_Balloc+0x78>)
 800501e:	4818      	ldr	r0, [pc, #96]	; (8005080 <_Balloc+0x7c>)
 8005020:	f000 fe20 	bl	8005c64 <__assert_func>
 8005024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005028:	6006      	str	r6, [r0, #0]
 800502a:	60c6      	str	r6, [r0, #12]
 800502c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800502e:	68f3      	ldr	r3, [r6, #12]
 8005030:	b183      	cbz	r3, 8005054 <_Balloc+0x50>
 8005032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800503a:	b9b8      	cbnz	r0, 800506c <_Balloc+0x68>
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f605 	lsl.w	r6, r1, r5
 8005042:	1d72      	adds	r2, r6, #5
 8005044:	4620      	mov	r0, r4
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	f000 fb5e 	bl	8005708 <_calloc_r>
 800504c:	b160      	cbz	r0, 8005068 <_Balloc+0x64>
 800504e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005052:	e00e      	b.n	8005072 <_Balloc+0x6e>
 8005054:	2221      	movs	r2, #33	; 0x21
 8005056:	2104      	movs	r1, #4
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fb55 	bl	8005708 <_calloc_r>
 800505e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005060:	60f0      	str	r0, [r6, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e4      	bne.n	8005032 <_Balloc+0x2e>
 8005068:	2000      	movs	r0, #0
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	6802      	ldr	r2, [r0, #0]
 800506e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005072:	2300      	movs	r3, #0
 8005074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005078:	e7f7      	b.n	800506a <_Balloc+0x66>
 800507a:	bf00      	nop
 800507c:	08006031 	.word	0x08006031
 8005080:	08006114 	.word	0x08006114

08005084 <_Bfree>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005088:	4605      	mov	r5, r0
 800508a:	460c      	mov	r4, r1
 800508c:	b976      	cbnz	r6, 80050ac <_Bfree+0x28>
 800508e:	2010      	movs	r0, #16
 8005090:	f7ff ff94 	bl	8004fbc <malloc>
 8005094:	4602      	mov	r2, r0
 8005096:	6268      	str	r0, [r5, #36]	; 0x24
 8005098:	b920      	cbnz	r0, 80050a4 <_Bfree+0x20>
 800509a:	218a      	movs	r1, #138	; 0x8a
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <_Bfree+0x3c>)
 800509e:	4809      	ldr	r0, [pc, #36]	; (80050c4 <_Bfree+0x40>)
 80050a0:	f000 fde0 	bl	8005c64 <__assert_func>
 80050a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050a8:	6006      	str	r6, [r0, #0]
 80050aa:	60c6      	str	r6, [r0, #12]
 80050ac:	b13c      	cbz	r4, 80050be <_Bfree+0x3a>
 80050ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050b0:	6862      	ldr	r2, [r4, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050b8:	6021      	str	r1, [r4, #0]
 80050ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	08006031 	.word	0x08006031
 80050c4:	08006114 	.word	0x08006114

080050c8 <__multadd>:
 80050c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050cc:	4607      	mov	r7, r0
 80050ce:	460c      	mov	r4, r1
 80050d0:	461e      	mov	r6, r3
 80050d2:	2000      	movs	r0, #0
 80050d4:	690d      	ldr	r5, [r1, #16]
 80050d6:	f101 0c14 	add.w	ip, r1, #20
 80050da:	f8dc 3000 	ldr.w	r3, [ip]
 80050de:	3001      	adds	r0, #1
 80050e0:	b299      	uxth	r1, r3
 80050e2:	fb02 6101 	mla	r1, r2, r1, r6
 80050e6:	0c1e      	lsrs	r6, r3, #16
 80050e8:	0c0b      	lsrs	r3, r1, #16
 80050ea:	fb02 3306 	mla	r3, r2, r6, r3
 80050ee:	b289      	uxth	r1, r1
 80050f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80050f4:	4285      	cmp	r5, r0
 80050f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80050fa:	f84c 1b04 	str.w	r1, [ip], #4
 80050fe:	dcec      	bgt.n	80050da <__multadd+0x12>
 8005100:	b30e      	cbz	r6, 8005146 <__multadd+0x7e>
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	42ab      	cmp	r3, r5
 8005106:	dc19      	bgt.n	800513c <__multadd+0x74>
 8005108:	6861      	ldr	r1, [r4, #4]
 800510a:	4638      	mov	r0, r7
 800510c:	3101      	adds	r1, #1
 800510e:	f7ff ff79 	bl	8005004 <_Balloc>
 8005112:	4680      	mov	r8, r0
 8005114:	b928      	cbnz	r0, 8005122 <__multadd+0x5a>
 8005116:	4602      	mov	r2, r0
 8005118:	21b5      	movs	r1, #181	; 0xb5
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <__multadd+0x84>)
 800511c:	480c      	ldr	r0, [pc, #48]	; (8005150 <__multadd+0x88>)
 800511e:	f000 fda1 	bl	8005c64 <__assert_func>
 8005122:	6922      	ldr	r2, [r4, #16]
 8005124:	f104 010c 	add.w	r1, r4, #12
 8005128:	3202      	adds	r2, #2
 800512a:	0092      	lsls	r2, r2, #2
 800512c:	300c      	adds	r0, #12
 800512e:	f7ff ff5b 	bl	8004fe8 <memcpy>
 8005132:	4621      	mov	r1, r4
 8005134:	4638      	mov	r0, r7
 8005136:	f7ff ffa5 	bl	8005084 <_Bfree>
 800513a:	4644      	mov	r4, r8
 800513c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005140:	3501      	adds	r5, #1
 8005142:	615e      	str	r6, [r3, #20]
 8005144:	6125      	str	r5, [r4, #16]
 8005146:	4620      	mov	r0, r4
 8005148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800514c:	080060a3 	.word	0x080060a3
 8005150:	08006114 	.word	0x08006114

08005154 <__hi0bits>:
 8005154:	0c02      	lsrs	r2, r0, #16
 8005156:	0412      	lsls	r2, r2, #16
 8005158:	4603      	mov	r3, r0
 800515a:	b9ca      	cbnz	r2, 8005190 <__hi0bits+0x3c>
 800515c:	0403      	lsls	r3, r0, #16
 800515e:	2010      	movs	r0, #16
 8005160:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005164:	bf04      	itt	eq
 8005166:	021b      	lsleq	r3, r3, #8
 8005168:	3008      	addeq	r0, #8
 800516a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800516e:	bf04      	itt	eq
 8005170:	011b      	lsleq	r3, r3, #4
 8005172:	3004      	addeq	r0, #4
 8005174:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005178:	bf04      	itt	eq
 800517a:	009b      	lsleq	r3, r3, #2
 800517c:	3002      	addeq	r0, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	db05      	blt.n	800518e <__hi0bits+0x3a>
 8005182:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005186:	f100 0001 	add.w	r0, r0, #1
 800518a:	bf08      	it	eq
 800518c:	2020      	moveq	r0, #32
 800518e:	4770      	bx	lr
 8005190:	2000      	movs	r0, #0
 8005192:	e7e5      	b.n	8005160 <__hi0bits+0xc>

08005194 <__lo0bits>:
 8005194:	6803      	ldr	r3, [r0, #0]
 8005196:	4602      	mov	r2, r0
 8005198:	f013 0007 	ands.w	r0, r3, #7
 800519c:	d00b      	beq.n	80051b6 <__lo0bits+0x22>
 800519e:	07d9      	lsls	r1, r3, #31
 80051a0:	d421      	bmi.n	80051e6 <__lo0bits+0x52>
 80051a2:	0798      	lsls	r0, r3, #30
 80051a4:	bf49      	itett	mi
 80051a6:	085b      	lsrmi	r3, r3, #1
 80051a8:	089b      	lsrpl	r3, r3, #2
 80051aa:	2001      	movmi	r0, #1
 80051ac:	6013      	strmi	r3, [r2, #0]
 80051ae:	bf5c      	itt	pl
 80051b0:	2002      	movpl	r0, #2
 80051b2:	6013      	strpl	r3, [r2, #0]
 80051b4:	4770      	bx	lr
 80051b6:	b299      	uxth	r1, r3
 80051b8:	b909      	cbnz	r1, 80051be <__lo0bits+0x2a>
 80051ba:	2010      	movs	r0, #16
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	b2d9      	uxtb	r1, r3
 80051c0:	b909      	cbnz	r1, 80051c6 <__lo0bits+0x32>
 80051c2:	3008      	adds	r0, #8
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	0719      	lsls	r1, r3, #28
 80051c8:	bf04      	itt	eq
 80051ca:	091b      	lsreq	r3, r3, #4
 80051cc:	3004      	addeq	r0, #4
 80051ce:	0799      	lsls	r1, r3, #30
 80051d0:	bf04      	itt	eq
 80051d2:	089b      	lsreq	r3, r3, #2
 80051d4:	3002      	addeq	r0, #2
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	d403      	bmi.n	80051e2 <__lo0bits+0x4e>
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	f100 0001 	add.w	r0, r0, #1
 80051e0:	d003      	beq.n	80051ea <__lo0bits+0x56>
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	4770      	bx	lr
 80051e6:	2000      	movs	r0, #0
 80051e8:	4770      	bx	lr
 80051ea:	2020      	movs	r0, #32
 80051ec:	4770      	bx	lr
	...

080051f0 <__i2b>:
 80051f0:	b510      	push	{r4, lr}
 80051f2:	460c      	mov	r4, r1
 80051f4:	2101      	movs	r1, #1
 80051f6:	f7ff ff05 	bl	8005004 <_Balloc>
 80051fa:	4602      	mov	r2, r0
 80051fc:	b928      	cbnz	r0, 800520a <__i2b+0x1a>
 80051fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005202:	4b04      	ldr	r3, [pc, #16]	; (8005214 <__i2b+0x24>)
 8005204:	4804      	ldr	r0, [pc, #16]	; (8005218 <__i2b+0x28>)
 8005206:	f000 fd2d 	bl	8005c64 <__assert_func>
 800520a:	2301      	movs	r3, #1
 800520c:	6144      	str	r4, [r0, #20]
 800520e:	6103      	str	r3, [r0, #16]
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	080060a3 	.word	0x080060a3
 8005218:	08006114 	.word	0x08006114

0800521c <__multiply>:
 800521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	4691      	mov	r9, r2
 8005222:	690a      	ldr	r2, [r1, #16]
 8005224:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005228:	460c      	mov	r4, r1
 800522a:	429a      	cmp	r2, r3
 800522c:	bfbe      	ittt	lt
 800522e:	460b      	movlt	r3, r1
 8005230:	464c      	movlt	r4, r9
 8005232:	4699      	movlt	r9, r3
 8005234:	6927      	ldr	r7, [r4, #16]
 8005236:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	6861      	ldr	r1, [r4, #4]
 800523e:	eb07 060a 	add.w	r6, r7, sl
 8005242:	42b3      	cmp	r3, r6
 8005244:	b085      	sub	sp, #20
 8005246:	bfb8      	it	lt
 8005248:	3101      	addlt	r1, #1
 800524a:	f7ff fedb 	bl	8005004 <_Balloc>
 800524e:	b930      	cbnz	r0, 800525e <__multiply+0x42>
 8005250:	4602      	mov	r2, r0
 8005252:	f240 115d 	movw	r1, #349	; 0x15d
 8005256:	4b43      	ldr	r3, [pc, #268]	; (8005364 <__multiply+0x148>)
 8005258:	4843      	ldr	r0, [pc, #268]	; (8005368 <__multiply+0x14c>)
 800525a:	f000 fd03 	bl	8005c64 <__assert_func>
 800525e:	f100 0514 	add.w	r5, r0, #20
 8005262:	462b      	mov	r3, r5
 8005264:	2200      	movs	r2, #0
 8005266:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800526a:	4543      	cmp	r3, r8
 800526c:	d321      	bcc.n	80052b2 <__multiply+0x96>
 800526e:	f104 0314 	add.w	r3, r4, #20
 8005272:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005276:	f109 0314 	add.w	r3, r9, #20
 800527a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800527e:	9202      	str	r2, [sp, #8]
 8005280:	1b3a      	subs	r2, r7, r4
 8005282:	3a15      	subs	r2, #21
 8005284:	f022 0203 	bic.w	r2, r2, #3
 8005288:	3204      	adds	r2, #4
 800528a:	f104 0115 	add.w	r1, r4, #21
 800528e:	428f      	cmp	r7, r1
 8005290:	bf38      	it	cc
 8005292:	2204      	movcc	r2, #4
 8005294:	9201      	str	r2, [sp, #4]
 8005296:	9a02      	ldr	r2, [sp, #8]
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	429a      	cmp	r2, r3
 800529c:	d80c      	bhi.n	80052b8 <__multiply+0x9c>
 800529e:	2e00      	cmp	r6, #0
 80052a0:	dd03      	ble.n	80052aa <__multiply+0x8e>
 80052a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d059      	beq.n	800535e <__multiply+0x142>
 80052aa:	6106      	str	r6, [r0, #16]
 80052ac:	b005      	add	sp, #20
 80052ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b2:	f843 2b04 	str.w	r2, [r3], #4
 80052b6:	e7d8      	b.n	800526a <__multiply+0x4e>
 80052b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80052bc:	f1ba 0f00 	cmp.w	sl, #0
 80052c0:	d023      	beq.n	800530a <__multiply+0xee>
 80052c2:	46a9      	mov	r9, r5
 80052c4:	f04f 0c00 	mov.w	ip, #0
 80052c8:	f104 0e14 	add.w	lr, r4, #20
 80052cc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80052d0:	f8d9 1000 	ldr.w	r1, [r9]
 80052d4:	fa1f fb82 	uxth.w	fp, r2
 80052d8:	b289      	uxth	r1, r1
 80052da:	fb0a 110b 	mla	r1, sl, fp, r1
 80052de:	4461      	add	r1, ip
 80052e0:	f8d9 c000 	ldr.w	ip, [r9]
 80052e4:	0c12      	lsrs	r2, r2, #16
 80052e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80052ea:	fb0a c202 	mla	r2, sl, r2, ip
 80052ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80052f2:	b289      	uxth	r1, r1
 80052f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80052f8:	4577      	cmp	r7, lr
 80052fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80052fe:	f849 1b04 	str.w	r1, [r9], #4
 8005302:	d8e3      	bhi.n	80052cc <__multiply+0xb0>
 8005304:	9a01      	ldr	r2, [sp, #4]
 8005306:	f845 c002 	str.w	ip, [r5, r2]
 800530a:	9a03      	ldr	r2, [sp, #12]
 800530c:	3304      	adds	r3, #4
 800530e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005312:	f1b9 0f00 	cmp.w	r9, #0
 8005316:	d020      	beq.n	800535a <__multiply+0x13e>
 8005318:	46ae      	mov	lr, r5
 800531a:	f04f 0a00 	mov.w	sl, #0
 800531e:	6829      	ldr	r1, [r5, #0]
 8005320:	f104 0c14 	add.w	ip, r4, #20
 8005324:	f8bc b000 	ldrh.w	fp, [ip]
 8005328:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800532c:	b289      	uxth	r1, r1
 800532e:	fb09 220b 	mla	r2, r9, fp, r2
 8005332:	4492      	add	sl, r2
 8005334:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005338:	f84e 1b04 	str.w	r1, [lr], #4
 800533c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005340:	f8be 1000 	ldrh.w	r1, [lr]
 8005344:	0c12      	lsrs	r2, r2, #16
 8005346:	fb09 1102 	mla	r1, r9, r2, r1
 800534a:	4567      	cmp	r7, ip
 800534c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005350:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005354:	d8e6      	bhi.n	8005324 <__multiply+0x108>
 8005356:	9a01      	ldr	r2, [sp, #4]
 8005358:	50a9      	str	r1, [r5, r2]
 800535a:	3504      	adds	r5, #4
 800535c:	e79b      	b.n	8005296 <__multiply+0x7a>
 800535e:	3e01      	subs	r6, #1
 8005360:	e79d      	b.n	800529e <__multiply+0x82>
 8005362:	bf00      	nop
 8005364:	080060a3 	.word	0x080060a3
 8005368:	08006114 	.word	0x08006114

0800536c <__pow5mult>:
 800536c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005370:	4615      	mov	r5, r2
 8005372:	f012 0203 	ands.w	r2, r2, #3
 8005376:	4606      	mov	r6, r0
 8005378:	460f      	mov	r7, r1
 800537a:	d007      	beq.n	800538c <__pow5mult+0x20>
 800537c:	4c25      	ldr	r4, [pc, #148]	; (8005414 <__pow5mult+0xa8>)
 800537e:	3a01      	subs	r2, #1
 8005380:	2300      	movs	r3, #0
 8005382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005386:	f7ff fe9f 	bl	80050c8 <__multadd>
 800538a:	4607      	mov	r7, r0
 800538c:	10ad      	asrs	r5, r5, #2
 800538e:	d03d      	beq.n	800540c <__pow5mult+0xa0>
 8005390:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005392:	b97c      	cbnz	r4, 80053b4 <__pow5mult+0x48>
 8005394:	2010      	movs	r0, #16
 8005396:	f7ff fe11 	bl	8004fbc <malloc>
 800539a:	4602      	mov	r2, r0
 800539c:	6270      	str	r0, [r6, #36]	; 0x24
 800539e:	b928      	cbnz	r0, 80053ac <__pow5mult+0x40>
 80053a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80053a4:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <__pow5mult+0xac>)
 80053a6:	481d      	ldr	r0, [pc, #116]	; (800541c <__pow5mult+0xb0>)
 80053a8:	f000 fc5c 	bl	8005c64 <__assert_func>
 80053ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053b0:	6004      	str	r4, [r0, #0]
 80053b2:	60c4      	str	r4, [r0, #12]
 80053b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053bc:	b94c      	cbnz	r4, 80053d2 <__pow5mult+0x66>
 80053be:	f240 2171 	movw	r1, #625	; 0x271
 80053c2:	4630      	mov	r0, r6
 80053c4:	f7ff ff14 	bl	80051f0 <__i2b>
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80053d0:	6003      	str	r3, [r0, #0]
 80053d2:	f04f 0900 	mov.w	r9, #0
 80053d6:	07eb      	lsls	r3, r5, #31
 80053d8:	d50a      	bpl.n	80053f0 <__pow5mult+0x84>
 80053da:	4639      	mov	r1, r7
 80053dc:	4622      	mov	r2, r4
 80053de:	4630      	mov	r0, r6
 80053e0:	f7ff ff1c 	bl	800521c <__multiply>
 80053e4:	4680      	mov	r8, r0
 80053e6:	4639      	mov	r1, r7
 80053e8:	4630      	mov	r0, r6
 80053ea:	f7ff fe4b 	bl	8005084 <_Bfree>
 80053ee:	4647      	mov	r7, r8
 80053f0:	106d      	asrs	r5, r5, #1
 80053f2:	d00b      	beq.n	800540c <__pow5mult+0xa0>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	b938      	cbnz	r0, 8005408 <__pow5mult+0x9c>
 80053f8:	4622      	mov	r2, r4
 80053fa:	4621      	mov	r1, r4
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7ff ff0d 	bl	800521c <__multiply>
 8005402:	6020      	str	r0, [r4, #0]
 8005404:	f8c0 9000 	str.w	r9, [r0]
 8005408:	4604      	mov	r4, r0
 800540a:	e7e4      	b.n	80053d6 <__pow5mult+0x6a>
 800540c:	4638      	mov	r0, r7
 800540e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005412:	bf00      	nop
 8005414:	08006260 	.word	0x08006260
 8005418:	08006031 	.word	0x08006031
 800541c:	08006114 	.word	0x08006114

08005420 <__lshift>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	460c      	mov	r4, r1
 8005426:	4607      	mov	r7, r0
 8005428:	4691      	mov	r9, r2
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	6849      	ldr	r1, [r1, #4]
 800542e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005438:	f108 0601 	add.w	r6, r8, #1
 800543c:	42b3      	cmp	r3, r6
 800543e:	db0b      	blt.n	8005458 <__lshift+0x38>
 8005440:	4638      	mov	r0, r7
 8005442:	f7ff fddf 	bl	8005004 <_Balloc>
 8005446:	4605      	mov	r5, r0
 8005448:	b948      	cbnz	r0, 800545e <__lshift+0x3e>
 800544a:	4602      	mov	r2, r0
 800544c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005450:	4b29      	ldr	r3, [pc, #164]	; (80054f8 <__lshift+0xd8>)
 8005452:	482a      	ldr	r0, [pc, #168]	; (80054fc <__lshift+0xdc>)
 8005454:	f000 fc06 	bl	8005c64 <__assert_func>
 8005458:	3101      	adds	r1, #1
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	e7ee      	b.n	800543c <__lshift+0x1c>
 800545e:	2300      	movs	r3, #0
 8005460:	f100 0114 	add.w	r1, r0, #20
 8005464:	f100 0210 	add.w	r2, r0, #16
 8005468:	4618      	mov	r0, r3
 800546a:	4553      	cmp	r3, sl
 800546c:	db37      	blt.n	80054de <__lshift+0xbe>
 800546e:	6920      	ldr	r0, [r4, #16]
 8005470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005474:	f104 0314 	add.w	r3, r4, #20
 8005478:	f019 091f 	ands.w	r9, r9, #31
 800547c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005480:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005484:	d02f      	beq.n	80054e6 <__lshift+0xc6>
 8005486:	468a      	mov	sl, r1
 8005488:	f04f 0c00 	mov.w	ip, #0
 800548c:	f1c9 0e20 	rsb	lr, r9, #32
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	fa02 f209 	lsl.w	r2, r2, r9
 8005496:	ea42 020c 	orr.w	r2, r2, ip
 800549a:	f84a 2b04 	str.w	r2, [sl], #4
 800549e:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a2:	4298      	cmp	r0, r3
 80054a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80054a8:	d8f2      	bhi.n	8005490 <__lshift+0x70>
 80054aa:	1b03      	subs	r3, r0, r4
 80054ac:	3b15      	subs	r3, #21
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	3304      	adds	r3, #4
 80054b4:	f104 0215 	add.w	r2, r4, #21
 80054b8:	4290      	cmp	r0, r2
 80054ba:	bf38      	it	cc
 80054bc:	2304      	movcc	r3, #4
 80054be:	f841 c003 	str.w	ip, [r1, r3]
 80054c2:	f1bc 0f00 	cmp.w	ip, #0
 80054c6:	d001      	beq.n	80054cc <__lshift+0xac>
 80054c8:	f108 0602 	add.w	r6, r8, #2
 80054cc:	3e01      	subs	r6, #1
 80054ce:	4638      	mov	r0, r7
 80054d0:	4621      	mov	r1, r4
 80054d2:	612e      	str	r6, [r5, #16]
 80054d4:	f7ff fdd6 	bl	8005084 <_Bfree>
 80054d8:	4628      	mov	r0, r5
 80054da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054de:	f842 0f04 	str.w	r0, [r2, #4]!
 80054e2:	3301      	adds	r3, #1
 80054e4:	e7c1      	b.n	800546a <__lshift+0x4a>
 80054e6:	3904      	subs	r1, #4
 80054e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ec:	4298      	cmp	r0, r3
 80054ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80054f2:	d8f9      	bhi.n	80054e8 <__lshift+0xc8>
 80054f4:	e7ea      	b.n	80054cc <__lshift+0xac>
 80054f6:	bf00      	nop
 80054f8:	080060a3 	.word	0x080060a3
 80054fc:	08006114 	.word	0x08006114

08005500 <__mcmp>:
 8005500:	4603      	mov	r3, r0
 8005502:	690a      	ldr	r2, [r1, #16]
 8005504:	6900      	ldr	r0, [r0, #16]
 8005506:	b530      	push	{r4, r5, lr}
 8005508:	1a80      	subs	r0, r0, r2
 800550a:	d10d      	bne.n	8005528 <__mcmp+0x28>
 800550c:	3314      	adds	r3, #20
 800550e:	3114      	adds	r1, #20
 8005510:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005514:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800551c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005520:	4295      	cmp	r5, r2
 8005522:	d002      	beq.n	800552a <__mcmp+0x2a>
 8005524:	d304      	bcc.n	8005530 <__mcmp+0x30>
 8005526:	2001      	movs	r0, #1
 8005528:	bd30      	pop	{r4, r5, pc}
 800552a:	42a3      	cmp	r3, r4
 800552c:	d3f4      	bcc.n	8005518 <__mcmp+0x18>
 800552e:	e7fb      	b.n	8005528 <__mcmp+0x28>
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	e7f8      	b.n	8005528 <__mcmp+0x28>
	...

08005538 <__mdiff>:
 8005538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	460d      	mov	r5, r1
 800553e:	4607      	mov	r7, r0
 8005540:	4611      	mov	r1, r2
 8005542:	4628      	mov	r0, r5
 8005544:	4614      	mov	r4, r2
 8005546:	f7ff ffdb 	bl	8005500 <__mcmp>
 800554a:	1e06      	subs	r6, r0, #0
 800554c:	d111      	bne.n	8005572 <__mdiff+0x3a>
 800554e:	4631      	mov	r1, r6
 8005550:	4638      	mov	r0, r7
 8005552:	f7ff fd57 	bl	8005004 <_Balloc>
 8005556:	4602      	mov	r2, r0
 8005558:	b928      	cbnz	r0, 8005566 <__mdiff+0x2e>
 800555a:	f240 2132 	movw	r1, #562	; 0x232
 800555e:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <__mdiff+0x110>)
 8005560:	483a      	ldr	r0, [pc, #232]	; (800564c <__mdiff+0x114>)
 8005562:	f000 fb7f 	bl	8005c64 <__assert_func>
 8005566:	2301      	movs	r3, #1
 8005568:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800556c:	4610      	mov	r0, r2
 800556e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005572:	bfa4      	itt	ge
 8005574:	4623      	movge	r3, r4
 8005576:	462c      	movge	r4, r5
 8005578:	4638      	mov	r0, r7
 800557a:	6861      	ldr	r1, [r4, #4]
 800557c:	bfa6      	itte	ge
 800557e:	461d      	movge	r5, r3
 8005580:	2600      	movge	r6, #0
 8005582:	2601      	movlt	r6, #1
 8005584:	f7ff fd3e 	bl	8005004 <_Balloc>
 8005588:	4602      	mov	r2, r0
 800558a:	b918      	cbnz	r0, 8005594 <__mdiff+0x5c>
 800558c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005590:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <__mdiff+0x110>)
 8005592:	e7e5      	b.n	8005560 <__mdiff+0x28>
 8005594:	f102 0814 	add.w	r8, r2, #20
 8005598:	46c2      	mov	sl, r8
 800559a:	f04f 0c00 	mov.w	ip, #0
 800559e:	6927      	ldr	r7, [r4, #16]
 80055a0:	60c6      	str	r6, [r0, #12]
 80055a2:	692e      	ldr	r6, [r5, #16]
 80055a4:	f104 0014 	add.w	r0, r4, #20
 80055a8:	f105 0914 	add.w	r9, r5, #20
 80055ac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80055b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055b4:	3410      	adds	r4, #16
 80055b6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80055ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80055be:	fa1f f18b 	uxth.w	r1, fp
 80055c2:	448c      	add	ip, r1
 80055c4:	b299      	uxth	r1, r3
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	ebac 0101 	sub.w	r1, ip, r1
 80055cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80055d0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80055d4:	b289      	uxth	r1, r1
 80055d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80055da:	454e      	cmp	r6, r9
 80055dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80055e0:	f84a 3b04 	str.w	r3, [sl], #4
 80055e4:	d8e7      	bhi.n	80055b6 <__mdiff+0x7e>
 80055e6:	1b73      	subs	r3, r6, r5
 80055e8:	3b15      	subs	r3, #21
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	3515      	adds	r5, #21
 80055f0:	3304      	adds	r3, #4
 80055f2:	42ae      	cmp	r6, r5
 80055f4:	bf38      	it	cc
 80055f6:	2304      	movcc	r3, #4
 80055f8:	4418      	add	r0, r3
 80055fa:	4443      	add	r3, r8
 80055fc:	461e      	mov	r6, r3
 80055fe:	4605      	mov	r5, r0
 8005600:	4575      	cmp	r5, lr
 8005602:	d30e      	bcc.n	8005622 <__mdiff+0xea>
 8005604:	f10e 0103 	add.w	r1, lr, #3
 8005608:	1a09      	subs	r1, r1, r0
 800560a:	f021 0103 	bic.w	r1, r1, #3
 800560e:	3803      	subs	r0, #3
 8005610:	4586      	cmp	lr, r0
 8005612:	bf38      	it	cc
 8005614:	2100      	movcc	r1, #0
 8005616:	4419      	add	r1, r3
 8005618:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800561c:	b18b      	cbz	r3, 8005642 <__mdiff+0x10a>
 800561e:	6117      	str	r7, [r2, #16]
 8005620:	e7a4      	b.n	800556c <__mdiff+0x34>
 8005622:	f855 8b04 	ldr.w	r8, [r5], #4
 8005626:	fa1f f188 	uxth.w	r1, r8
 800562a:	4461      	add	r1, ip
 800562c:	140c      	asrs	r4, r1, #16
 800562e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005632:	b289      	uxth	r1, r1
 8005634:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005638:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800563c:	f846 1b04 	str.w	r1, [r6], #4
 8005640:	e7de      	b.n	8005600 <__mdiff+0xc8>
 8005642:	3f01      	subs	r7, #1
 8005644:	e7e8      	b.n	8005618 <__mdiff+0xe0>
 8005646:	bf00      	nop
 8005648:	080060a3 	.word	0x080060a3
 800564c:	08006114 	.word	0x08006114

08005650 <__d2b>:
 8005650:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005654:	2101      	movs	r1, #1
 8005656:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800565a:	4690      	mov	r8, r2
 800565c:	461d      	mov	r5, r3
 800565e:	f7ff fcd1 	bl	8005004 <_Balloc>
 8005662:	4604      	mov	r4, r0
 8005664:	b930      	cbnz	r0, 8005674 <__d2b+0x24>
 8005666:	4602      	mov	r2, r0
 8005668:	f240 310a 	movw	r1, #778	; 0x30a
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <__d2b+0xb0>)
 800566e:	4825      	ldr	r0, [pc, #148]	; (8005704 <__d2b+0xb4>)
 8005670:	f000 faf8 	bl	8005c64 <__assert_func>
 8005674:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005678:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800567c:	bb2d      	cbnz	r5, 80056ca <__d2b+0x7a>
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	f1b8 0300 	subs.w	r3, r8, #0
 8005684:	d026      	beq.n	80056d4 <__d2b+0x84>
 8005686:	4668      	mov	r0, sp
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	f7ff fd83 	bl	8005194 <__lo0bits>
 800568e:	9900      	ldr	r1, [sp, #0]
 8005690:	b1f0      	cbz	r0, 80056d0 <__d2b+0x80>
 8005692:	9a01      	ldr	r2, [sp, #4]
 8005694:	f1c0 0320 	rsb	r3, r0, #32
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	430b      	orrs	r3, r1
 800569e:	40c2      	lsrs	r2, r0
 80056a0:	6163      	str	r3, [r4, #20]
 80056a2:	9201      	str	r2, [sp, #4]
 80056a4:	9b01      	ldr	r3, [sp, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2102      	movne	r1, #2
 80056ac:	2101      	moveq	r1, #1
 80056ae:	61a3      	str	r3, [r4, #24]
 80056b0:	6121      	str	r1, [r4, #16]
 80056b2:	b1c5      	cbz	r5, 80056e6 <__d2b+0x96>
 80056b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80056b8:	4405      	add	r5, r0
 80056ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056be:	603d      	str	r5, [r7, #0]
 80056c0:	6030      	str	r0, [r6, #0]
 80056c2:	4620      	mov	r0, r4
 80056c4:	b002      	add	sp, #8
 80056c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ce:	e7d6      	b.n	800567e <__d2b+0x2e>
 80056d0:	6161      	str	r1, [r4, #20]
 80056d2:	e7e7      	b.n	80056a4 <__d2b+0x54>
 80056d4:	a801      	add	r0, sp, #4
 80056d6:	f7ff fd5d 	bl	8005194 <__lo0bits>
 80056da:	2101      	movs	r1, #1
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	6121      	str	r1, [r4, #16]
 80056e0:	6163      	str	r3, [r4, #20]
 80056e2:	3020      	adds	r0, #32
 80056e4:	e7e5      	b.n	80056b2 <__d2b+0x62>
 80056e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80056ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80056ee:	6038      	str	r0, [r7, #0]
 80056f0:	6918      	ldr	r0, [r3, #16]
 80056f2:	f7ff fd2f 	bl	8005154 <__hi0bits>
 80056f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80056fa:	6031      	str	r1, [r6, #0]
 80056fc:	e7e1      	b.n	80056c2 <__d2b+0x72>
 80056fe:	bf00      	nop
 8005700:	080060a3 	.word	0x080060a3
 8005704:	08006114 	.word	0x08006114

08005708 <_calloc_r>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	fba1 5402 	umull	r5, r4, r1, r2
 800570e:	b934      	cbnz	r4, 800571e <_calloc_r+0x16>
 8005710:	4629      	mov	r1, r5
 8005712:	f000 f875 	bl	8005800 <_malloc_r>
 8005716:	4606      	mov	r6, r0
 8005718:	b928      	cbnz	r0, 8005726 <_calloc_r+0x1e>
 800571a:	4630      	mov	r0, r6
 800571c:	bd70      	pop	{r4, r5, r6, pc}
 800571e:	220c      	movs	r2, #12
 8005720:	2600      	movs	r6, #0
 8005722:	6002      	str	r2, [r0, #0]
 8005724:	e7f9      	b.n	800571a <_calloc_r+0x12>
 8005726:	462a      	mov	r2, r5
 8005728:	4621      	mov	r1, r4
 800572a:	f7fd fdf7 	bl	800331c <memset>
 800572e:	e7f4      	b.n	800571a <_calloc_r+0x12>

08005730 <_free_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4605      	mov	r5, r0
 8005734:	2900      	cmp	r1, #0
 8005736:	d040      	beq.n	80057ba <_free_r+0x8a>
 8005738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573c:	1f0c      	subs	r4, r1, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	bfb8      	it	lt
 8005742:	18e4      	addlt	r4, r4, r3
 8005744:	f000 fb14 	bl	8005d70 <__malloc_lock>
 8005748:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <_free_r+0x8c>)
 800574a:	6813      	ldr	r3, [r2, #0]
 800574c:	b933      	cbnz	r3, 800575c <_free_r+0x2c>
 800574e:	6063      	str	r3, [r4, #4]
 8005750:	6014      	str	r4, [r2, #0]
 8005752:	4628      	mov	r0, r5
 8005754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005758:	f000 bb10 	b.w	8005d7c <__malloc_unlock>
 800575c:	42a3      	cmp	r3, r4
 800575e:	d908      	bls.n	8005772 <_free_r+0x42>
 8005760:	6820      	ldr	r0, [r4, #0]
 8005762:	1821      	adds	r1, r4, r0
 8005764:	428b      	cmp	r3, r1
 8005766:	bf01      	itttt	eq
 8005768:	6819      	ldreq	r1, [r3, #0]
 800576a:	685b      	ldreq	r3, [r3, #4]
 800576c:	1809      	addeq	r1, r1, r0
 800576e:	6021      	streq	r1, [r4, #0]
 8005770:	e7ed      	b.n	800574e <_free_r+0x1e>
 8005772:	461a      	mov	r2, r3
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	b10b      	cbz	r3, 800577c <_free_r+0x4c>
 8005778:	42a3      	cmp	r3, r4
 800577a:	d9fa      	bls.n	8005772 <_free_r+0x42>
 800577c:	6811      	ldr	r1, [r2, #0]
 800577e:	1850      	adds	r0, r2, r1
 8005780:	42a0      	cmp	r0, r4
 8005782:	d10b      	bne.n	800579c <_free_r+0x6c>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	4401      	add	r1, r0
 8005788:	1850      	adds	r0, r2, r1
 800578a:	4283      	cmp	r3, r0
 800578c:	6011      	str	r1, [r2, #0]
 800578e:	d1e0      	bne.n	8005752 <_free_r+0x22>
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4401      	add	r1, r0
 8005796:	6011      	str	r1, [r2, #0]
 8005798:	6053      	str	r3, [r2, #4]
 800579a:	e7da      	b.n	8005752 <_free_r+0x22>
 800579c:	d902      	bls.n	80057a4 <_free_r+0x74>
 800579e:	230c      	movs	r3, #12
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	e7d6      	b.n	8005752 <_free_r+0x22>
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	1821      	adds	r1, r4, r0
 80057a8:	428b      	cmp	r3, r1
 80057aa:	bf01      	itttt	eq
 80057ac:	6819      	ldreq	r1, [r3, #0]
 80057ae:	685b      	ldreq	r3, [r3, #4]
 80057b0:	1809      	addeq	r1, r1, r0
 80057b2:	6021      	streq	r1, [r4, #0]
 80057b4:	6063      	str	r3, [r4, #4]
 80057b6:	6054      	str	r4, [r2, #4]
 80057b8:	e7cb      	b.n	8005752 <_free_r+0x22>
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	200002b8 	.word	0x200002b8

080057c0 <sbrk_aligned>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4e0e      	ldr	r6, [pc, #56]	; (80057fc <sbrk_aligned+0x3c>)
 80057c4:	460c      	mov	r4, r1
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	4605      	mov	r5, r0
 80057ca:	b911      	cbnz	r1, 80057d2 <sbrk_aligned+0x12>
 80057cc:	f000 f9e4 	bl	8005b98 <_sbrk_r>
 80057d0:	6030      	str	r0, [r6, #0]
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f9df 	bl	8005b98 <_sbrk_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d00a      	beq.n	80057f4 <sbrk_aligned+0x34>
 80057de:	1cc4      	adds	r4, r0, #3
 80057e0:	f024 0403 	bic.w	r4, r4, #3
 80057e4:	42a0      	cmp	r0, r4
 80057e6:	d007      	beq.n	80057f8 <sbrk_aligned+0x38>
 80057e8:	1a21      	subs	r1, r4, r0
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f9d4 	bl	8005b98 <_sbrk_r>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d101      	bne.n	80057f8 <sbrk_aligned+0x38>
 80057f4:	f04f 34ff 	mov.w	r4, #4294967295
 80057f8:	4620      	mov	r0, r4
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	200002bc 	.word	0x200002bc

08005800 <_malloc_r>:
 8005800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005804:	1ccd      	adds	r5, r1, #3
 8005806:	f025 0503 	bic.w	r5, r5, #3
 800580a:	3508      	adds	r5, #8
 800580c:	2d0c      	cmp	r5, #12
 800580e:	bf38      	it	cc
 8005810:	250c      	movcc	r5, #12
 8005812:	2d00      	cmp	r5, #0
 8005814:	4607      	mov	r7, r0
 8005816:	db01      	blt.n	800581c <_malloc_r+0x1c>
 8005818:	42a9      	cmp	r1, r5
 800581a:	d905      	bls.n	8005828 <_malloc_r+0x28>
 800581c:	230c      	movs	r3, #12
 800581e:	2600      	movs	r6, #0
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4630      	mov	r0, r6
 8005824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005828:	4e2e      	ldr	r6, [pc, #184]	; (80058e4 <_malloc_r+0xe4>)
 800582a:	f000 faa1 	bl	8005d70 <__malloc_lock>
 800582e:	6833      	ldr	r3, [r6, #0]
 8005830:	461c      	mov	r4, r3
 8005832:	bb34      	cbnz	r4, 8005882 <_malloc_r+0x82>
 8005834:	4629      	mov	r1, r5
 8005836:	4638      	mov	r0, r7
 8005838:	f7ff ffc2 	bl	80057c0 <sbrk_aligned>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	4604      	mov	r4, r0
 8005840:	d14d      	bne.n	80058de <_malloc_r+0xde>
 8005842:	6834      	ldr	r4, [r6, #0]
 8005844:	4626      	mov	r6, r4
 8005846:	2e00      	cmp	r6, #0
 8005848:	d140      	bne.n	80058cc <_malloc_r+0xcc>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	4631      	mov	r1, r6
 800584e:	4638      	mov	r0, r7
 8005850:	eb04 0803 	add.w	r8, r4, r3
 8005854:	f000 f9a0 	bl	8005b98 <_sbrk_r>
 8005858:	4580      	cmp	r8, r0
 800585a:	d13a      	bne.n	80058d2 <_malloc_r+0xd2>
 800585c:	6821      	ldr	r1, [r4, #0]
 800585e:	3503      	adds	r5, #3
 8005860:	1a6d      	subs	r5, r5, r1
 8005862:	f025 0503 	bic.w	r5, r5, #3
 8005866:	3508      	adds	r5, #8
 8005868:	2d0c      	cmp	r5, #12
 800586a:	bf38      	it	cc
 800586c:	250c      	movcc	r5, #12
 800586e:	4638      	mov	r0, r7
 8005870:	4629      	mov	r1, r5
 8005872:	f7ff ffa5 	bl	80057c0 <sbrk_aligned>
 8005876:	3001      	adds	r0, #1
 8005878:	d02b      	beq.n	80058d2 <_malloc_r+0xd2>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	442b      	add	r3, r5
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	e00e      	b.n	80058a0 <_malloc_r+0xa0>
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	1b52      	subs	r2, r2, r5
 8005886:	d41e      	bmi.n	80058c6 <_malloc_r+0xc6>
 8005888:	2a0b      	cmp	r2, #11
 800588a:	d916      	bls.n	80058ba <_malloc_r+0xba>
 800588c:	1961      	adds	r1, r4, r5
 800588e:	42a3      	cmp	r3, r4
 8005890:	6025      	str	r5, [r4, #0]
 8005892:	bf18      	it	ne
 8005894:	6059      	strne	r1, [r3, #4]
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	bf08      	it	eq
 800589a:	6031      	streq	r1, [r6, #0]
 800589c:	5162      	str	r2, [r4, r5]
 800589e:	604b      	str	r3, [r1, #4]
 80058a0:	4638      	mov	r0, r7
 80058a2:	f104 060b 	add.w	r6, r4, #11
 80058a6:	f000 fa69 	bl	8005d7c <__malloc_unlock>
 80058aa:	f026 0607 	bic.w	r6, r6, #7
 80058ae:	1d23      	adds	r3, r4, #4
 80058b0:	1af2      	subs	r2, r6, r3
 80058b2:	d0b6      	beq.n	8005822 <_malloc_r+0x22>
 80058b4:	1b9b      	subs	r3, r3, r6
 80058b6:	50a3      	str	r3, [r4, r2]
 80058b8:	e7b3      	b.n	8005822 <_malloc_r+0x22>
 80058ba:	6862      	ldr	r2, [r4, #4]
 80058bc:	42a3      	cmp	r3, r4
 80058be:	bf0c      	ite	eq
 80058c0:	6032      	streq	r2, [r6, #0]
 80058c2:	605a      	strne	r2, [r3, #4]
 80058c4:	e7ec      	b.n	80058a0 <_malloc_r+0xa0>
 80058c6:	4623      	mov	r3, r4
 80058c8:	6864      	ldr	r4, [r4, #4]
 80058ca:	e7b2      	b.n	8005832 <_malloc_r+0x32>
 80058cc:	4634      	mov	r4, r6
 80058ce:	6876      	ldr	r6, [r6, #4]
 80058d0:	e7b9      	b.n	8005846 <_malloc_r+0x46>
 80058d2:	230c      	movs	r3, #12
 80058d4:	4638      	mov	r0, r7
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	f000 fa50 	bl	8005d7c <__malloc_unlock>
 80058dc:	e7a1      	b.n	8005822 <_malloc_r+0x22>
 80058de:	6025      	str	r5, [r4, #0]
 80058e0:	e7de      	b.n	80058a0 <_malloc_r+0xa0>
 80058e2:	bf00      	nop
 80058e4:	200002b8 	.word	0x200002b8

080058e8 <__sfputc_r>:
 80058e8:	6893      	ldr	r3, [r2, #8]
 80058ea:	b410      	push	{r4}
 80058ec:	3b01      	subs	r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	6093      	str	r3, [r2, #8]
 80058f2:	da07      	bge.n	8005904 <__sfputc_r+0x1c>
 80058f4:	6994      	ldr	r4, [r2, #24]
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	db01      	blt.n	80058fe <__sfputc_r+0x16>
 80058fa:	290a      	cmp	r1, #10
 80058fc:	d102      	bne.n	8005904 <__sfputc_r+0x1c>
 80058fe:	bc10      	pop	{r4}
 8005900:	f7fe ba02 	b.w	8003d08 <__swbuf_r>
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	1c58      	adds	r0, r3, #1
 8005908:	6010      	str	r0, [r2, #0]
 800590a:	7019      	strb	r1, [r3, #0]
 800590c:	4608      	mov	r0, r1
 800590e:	bc10      	pop	{r4}
 8005910:	4770      	bx	lr

08005912 <__sfputs_r>:
 8005912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005914:	4606      	mov	r6, r0
 8005916:	460f      	mov	r7, r1
 8005918:	4614      	mov	r4, r2
 800591a:	18d5      	adds	r5, r2, r3
 800591c:	42ac      	cmp	r4, r5
 800591e:	d101      	bne.n	8005924 <__sfputs_r+0x12>
 8005920:	2000      	movs	r0, #0
 8005922:	e007      	b.n	8005934 <__sfputs_r+0x22>
 8005924:	463a      	mov	r2, r7
 8005926:	4630      	mov	r0, r6
 8005928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592c:	f7ff ffdc 	bl	80058e8 <__sfputc_r>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d1f3      	bne.n	800591c <__sfputs_r+0xa>
 8005934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005938 <_vfiprintf_r>:
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	460d      	mov	r5, r1
 800593e:	4614      	mov	r4, r2
 8005940:	4698      	mov	r8, r3
 8005942:	4606      	mov	r6, r0
 8005944:	b09d      	sub	sp, #116	; 0x74
 8005946:	b118      	cbz	r0, 8005950 <_vfiprintf_r+0x18>
 8005948:	6983      	ldr	r3, [r0, #24]
 800594a:	b90b      	cbnz	r3, 8005950 <_vfiprintf_r+0x18>
 800594c:	f7ff fa2c 	bl	8004da8 <__sinit>
 8005950:	4b89      	ldr	r3, [pc, #548]	; (8005b78 <_vfiprintf_r+0x240>)
 8005952:	429d      	cmp	r5, r3
 8005954:	d11b      	bne.n	800598e <_vfiprintf_r+0x56>
 8005956:	6875      	ldr	r5, [r6, #4]
 8005958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800595a:	07d9      	lsls	r1, r3, #31
 800595c:	d405      	bmi.n	800596a <_vfiprintf_r+0x32>
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	059a      	lsls	r2, r3, #22
 8005962:	d402      	bmi.n	800596a <_vfiprintf_r+0x32>
 8005964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005966:	f7ff fac2 	bl	8004eee <__retarget_lock_acquire_recursive>
 800596a:	89ab      	ldrh	r3, [r5, #12]
 800596c:	071b      	lsls	r3, r3, #28
 800596e:	d501      	bpl.n	8005974 <_vfiprintf_r+0x3c>
 8005970:	692b      	ldr	r3, [r5, #16]
 8005972:	b9eb      	cbnz	r3, 80059b0 <_vfiprintf_r+0x78>
 8005974:	4629      	mov	r1, r5
 8005976:	4630      	mov	r0, r6
 8005978:	f7fe fa18 	bl	8003dac <__swsetup_r>
 800597c:	b1c0      	cbz	r0, 80059b0 <_vfiprintf_r+0x78>
 800597e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005980:	07dc      	lsls	r4, r3, #31
 8005982:	d50e      	bpl.n	80059a2 <_vfiprintf_r+0x6a>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	b01d      	add	sp, #116	; 0x74
 800598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598e:	4b7b      	ldr	r3, [pc, #492]	; (8005b7c <_vfiprintf_r+0x244>)
 8005990:	429d      	cmp	r5, r3
 8005992:	d101      	bne.n	8005998 <_vfiprintf_r+0x60>
 8005994:	68b5      	ldr	r5, [r6, #8]
 8005996:	e7df      	b.n	8005958 <_vfiprintf_r+0x20>
 8005998:	4b79      	ldr	r3, [pc, #484]	; (8005b80 <_vfiprintf_r+0x248>)
 800599a:	429d      	cmp	r5, r3
 800599c:	bf08      	it	eq
 800599e:	68f5      	ldreq	r5, [r6, #12]
 80059a0:	e7da      	b.n	8005958 <_vfiprintf_r+0x20>
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	0598      	lsls	r0, r3, #22
 80059a6:	d4ed      	bmi.n	8005984 <_vfiprintf_r+0x4c>
 80059a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059aa:	f7ff faa1 	bl	8004ef0 <__retarget_lock_release_recursive>
 80059ae:	e7e9      	b.n	8005984 <_vfiprintf_r+0x4c>
 80059b0:	2300      	movs	r3, #0
 80059b2:	9309      	str	r3, [sp, #36]	; 0x24
 80059b4:	2320      	movs	r3, #32
 80059b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ba:	2330      	movs	r3, #48	; 0x30
 80059bc:	f04f 0901 	mov.w	r9, #1
 80059c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b84 <_vfiprintf_r+0x24c>
 80059c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059cc:	4623      	mov	r3, r4
 80059ce:	469a      	mov	sl, r3
 80059d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d4:	b10a      	cbz	r2, 80059da <_vfiprintf_r+0xa2>
 80059d6:	2a25      	cmp	r2, #37	; 0x25
 80059d8:	d1f9      	bne.n	80059ce <_vfiprintf_r+0x96>
 80059da:	ebba 0b04 	subs.w	fp, sl, r4
 80059de:	d00b      	beq.n	80059f8 <_vfiprintf_r+0xc0>
 80059e0:	465b      	mov	r3, fp
 80059e2:	4622      	mov	r2, r4
 80059e4:	4629      	mov	r1, r5
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7ff ff93 	bl	8005912 <__sfputs_r>
 80059ec:	3001      	adds	r0, #1
 80059ee:	f000 80aa 	beq.w	8005b46 <_vfiprintf_r+0x20e>
 80059f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f4:	445a      	add	r2, fp
 80059f6:	9209      	str	r2, [sp, #36]	; 0x24
 80059f8:	f89a 3000 	ldrb.w	r3, [sl]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a2 	beq.w	8005b46 <_vfiprintf_r+0x20e>
 8005a02:	2300      	movs	r3, #0
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0c:	f10a 0a01 	add.w	sl, sl, #1
 8005a10:	9304      	str	r3, [sp, #16]
 8005a12:	9307      	str	r3, [sp, #28]
 8005a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a18:	931a      	str	r3, [sp, #104]	; 0x68
 8005a1a:	4654      	mov	r4, sl
 8005a1c:	2205      	movs	r2, #5
 8005a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a22:	4858      	ldr	r0, [pc, #352]	; (8005b84 <_vfiprintf_r+0x24c>)
 8005a24:	f7ff fad2 	bl	8004fcc <memchr>
 8005a28:	9a04      	ldr	r2, [sp, #16]
 8005a2a:	b9d8      	cbnz	r0, 8005a64 <_vfiprintf_r+0x12c>
 8005a2c:	06d1      	lsls	r1, r2, #27
 8005a2e:	bf44      	itt	mi
 8005a30:	2320      	movmi	r3, #32
 8005a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a36:	0713      	lsls	r3, r2, #28
 8005a38:	bf44      	itt	mi
 8005a3a:	232b      	movmi	r3, #43	; 0x2b
 8005a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a40:	f89a 3000 	ldrb.w	r3, [sl]
 8005a44:	2b2a      	cmp	r3, #42	; 0x2a
 8005a46:	d015      	beq.n	8005a74 <_vfiprintf_r+0x13c>
 8005a48:	4654      	mov	r4, sl
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f04f 0c0a 	mov.w	ip, #10
 8005a50:	9a07      	ldr	r2, [sp, #28]
 8005a52:	4621      	mov	r1, r4
 8005a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a58:	3b30      	subs	r3, #48	; 0x30
 8005a5a:	2b09      	cmp	r3, #9
 8005a5c:	d94e      	bls.n	8005afc <_vfiprintf_r+0x1c4>
 8005a5e:	b1b0      	cbz	r0, 8005a8e <_vfiprintf_r+0x156>
 8005a60:	9207      	str	r2, [sp, #28]
 8005a62:	e014      	b.n	8005a8e <_vfiprintf_r+0x156>
 8005a64:	eba0 0308 	sub.w	r3, r0, r8
 8005a68:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	46a2      	mov	sl, r4
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	e7d2      	b.n	8005a1a <_vfiprintf_r+0xe2>
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	1d19      	adds	r1, r3, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	9103      	str	r1, [sp, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bfbb      	ittet	lt
 8005a80:	425b      	neglt	r3, r3
 8005a82:	f042 0202 	orrlt.w	r2, r2, #2
 8005a86:	9307      	strge	r3, [sp, #28]
 8005a88:	9307      	strlt	r3, [sp, #28]
 8005a8a:	bfb8      	it	lt
 8005a8c:	9204      	strlt	r2, [sp, #16]
 8005a8e:	7823      	ldrb	r3, [r4, #0]
 8005a90:	2b2e      	cmp	r3, #46	; 0x2e
 8005a92:	d10c      	bne.n	8005aae <_vfiprintf_r+0x176>
 8005a94:	7863      	ldrb	r3, [r4, #1]
 8005a96:	2b2a      	cmp	r3, #42	; 0x2a
 8005a98:	d135      	bne.n	8005b06 <_vfiprintf_r+0x1ce>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	3402      	adds	r4, #2
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfb8      	it	lt
 8005aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aac:	9305      	str	r3, [sp, #20]
 8005aae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005b88 <_vfiprintf_r+0x250>
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	7821      	ldrb	r1, [r4, #0]
 8005ab8:	f7ff fa88 	bl	8004fcc <memchr>
 8005abc:	b140      	cbz	r0, 8005ad0 <_vfiprintf_r+0x198>
 8005abe:	2340      	movs	r3, #64	; 0x40
 8005ac0:	eba0 000a 	sub.w	r0, r0, sl
 8005ac4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ac8:	9b04      	ldr	r3, [sp, #16]
 8005aca:	3401      	adds	r4, #1
 8005acc:	4303      	orrs	r3, r0
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad4:	2206      	movs	r2, #6
 8005ad6:	482d      	ldr	r0, [pc, #180]	; (8005b8c <_vfiprintf_r+0x254>)
 8005ad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005adc:	f7ff fa76 	bl	8004fcc <memchr>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d03f      	beq.n	8005b64 <_vfiprintf_r+0x22c>
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <_vfiprintf_r+0x258>)
 8005ae6:	bb1b      	cbnz	r3, 8005b30 <_vfiprintf_r+0x1f8>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	3307      	adds	r3, #7
 8005aec:	f023 0307 	bic.w	r3, r3, #7
 8005af0:	3308      	adds	r3, #8
 8005af2:	9303      	str	r3, [sp, #12]
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	443b      	add	r3, r7
 8005af8:	9309      	str	r3, [sp, #36]	; 0x24
 8005afa:	e767      	b.n	80059cc <_vfiprintf_r+0x94>
 8005afc:	460c      	mov	r4, r1
 8005afe:	2001      	movs	r0, #1
 8005b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b04:	e7a5      	b.n	8005a52 <_vfiprintf_r+0x11a>
 8005b06:	2300      	movs	r3, #0
 8005b08:	f04f 0c0a 	mov.w	ip, #10
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	3401      	adds	r4, #1
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	4620      	mov	r0, r4
 8005b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b18:	3a30      	subs	r2, #48	; 0x30
 8005b1a:	2a09      	cmp	r2, #9
 8005b1c:	d903      	bls.n	8005b26 <_vfiprintf_r+0x1ee>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0c5      	beq.n	8005aae <_vfiprintf_r+0x176>
 8005b22:	9105      	str	r1, [sp, #20]
 8005b24:	e7c3      	b.n	8005aae <_vfiprintf_r+0x176>
 8005b26:	4604      	mov	r4, r0
 8005b28:	2301      	movs	r3, #1
 8005b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2e:	e7f0      	b.n	8005b12 <_vfiprintf_r+0x1da>
 8005b30:	ab03      	add	r3, sp, #12
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4630      	mov	r0, r6
 8005b38:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <_vfiprintf_r+0x25c>)
 8005b3a:	a904      	add	r1, sp, #16
 8005b3c:	f7fd fc94 	bl	8003468 <_printf_float>
 8005b40:	4607      	mov	r7, r0
 8005b42:	1c78      	adds	r0, r7, #1
 8005b44:	d1d6      	bne.n	8005af4 <_vfiprintf_r+0x1bc>
 8005b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b48:	07d9      	lsls	r1, r3, #31
 8005b4a:	d405      	bmi.n	8005b58 <_vfiprintf_r+0x220>
 8005b4c:	89ab      	ldrh	r3, [r5, #12]
 8005b4e:	059a      	lsls	r2, r3, #22
 8005b50:	d402      	bmi.n	8005b58 <_vfiprintf_r+0x220>
 8005b52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b54:	f7ff f9cc 	bl	8004ef0 <__retarget_lock_release_recursive>
 8005b58:	89ab      	ldrh	r3, [r5, #12]
 8005b5a:	065b      	lsls	r3, r3, #25
 8005b5c:	f53f af12 	bmi.w	8005984 <_vfiprintf_r+0x4c>
 8005b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b62:	e711      	b.n	8005988 <_vfiprintf_r+0x50>
 8005b64:	ab03      	add	r3, sp, #12
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <_vfiprintf_r+0x25c>)
 8005b6e:	a904      	add	r1, sp, #16
 8005b70:	f7fd ff16 	bl	80039a0 <_printf_i>
 8005b74:	e7e4      	b.n	8005b40 <_vfiprintf_r+0x208>
 8005b76:	bf00      	nop
 8005b78:	080060d4 	.word	0x080060d4
 8005b7c:	080060f4 	.word	0x080060f4
 8005b80:	080060b4 	.word	0x080060b4
 8005b84:	0800626c 	.word	0x0800626c
 8005b88:	08006272 	.word	0x08006272
 8005b8c:	08006276 	.word	0x08006276
 8005b90:	08003469 	.word	0x08003469
 8005b94:	08005913 	.word	0x08005913

08005b98 <_sbrk_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4d05      	ldr	r5, [pc, #20]	; (8005bb4 <_sbrk_r+0x1c>)
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fb ff8a 	bl	8001abc <_sbrk>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_sbrk_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_sbrk_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	200002c0 	.word	0x200002c0

08005bb8 <__sread>:
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	460c      	mov	r4, r1
 8005bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc0:	f000 f8e2 	bl	8005d88 <_read_r>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	bfab      	itete	ge
 8005bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bca:	89a3      	ldrhlt	r3, [r4, #12]
 8005bcc:	181b      	addge	r3, r3, r0
 8005bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bd2:	bfac      	ite	ge
 8005bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bd6:	81a3      	strhlt	r3, [r4, #12]
 8005bd8:	bd10      	pop	{r4, pc}

08005bda <__swrite>:
 8005bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	461f      	mov	r7, r3
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	4605      	mov	r5, r0
 8005be4:	05db      	lsls	r3, r3, #23
 8005be6:	460c      	mov	r4, r1
 8005be8:	4616      	mov	r6, r2
 8005bea:	d505      	bpl.n	8005bf8 <__swrite+0x1e>
 8005bec:	2302      	movs	r3, #2
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf4:	f000 f898 	bl	8005d28 <_lseek_r>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	4628      	mov	r0, r5
 8005c04:	463b      	mov	r3, r7
 8005c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0e:	f000 b817 	b.w	8005c40 <_write_r>

08005c12 <__sseek>:
 8005c12:	b510      	push	{r4, lr}
 8005c14:	460c      	mov	r4, r1
 8005c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1a:	f000 f885 	bl	8005d28 <_lseek_r>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	bf15      	itete	ne
 8005c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c2e:	81a3      	strheq	r3, [r4, #12]
 8005c30:	bf18      	it	ne
 8005c32:	81a3      	strhne	r3, [r4, #12]
 8005c34:	bd10      	pop	{r4, pc}

08005c36 <__sclose>:
 8005c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3a:	f000 b831 	b.w	8005ca0 <_close_r>
	...

08005c40 <_write_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4d05      	ldr	r5, [pc, #20]	; (8005c60 <_write_r+0x20>)
 8005c4c:	602a      	str	r2, [r5, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7fb fee8 	bl	8001a24 <_write>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_write_r+0x1e>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_write_r+0x1e>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	200002c0 	.word	0x200002c0

08005c64 <__assert_func>:
 8005c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c66:	4614      	mov	r4, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <__assert_func+0x2c>)
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68d8      	ldr	r0, [r3, #12]
 8005c72:	b14c      	cbz	r4, 8005c88 <__assert_func+0x24>
 8005c74:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <__assert_func+0x30>)
 8005c76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c7a:	9100      	str	r1, [sp, #0]
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	4906      	ldr	r1, [pc, #24]	; (8005c98 <__assert_func+0x34>)
 8005c80:	f000 f81e 	bl	8005cc0 <fiprintf>
 8005c84:	f000 f89f 	bl	8005dc6 <abort>
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <__assert_func+0x38>)
 8005c8a:	461c      	mov	r4, r3
 8005c8c:	e7f3      	b.n	8005c76 <__assert_func+0x12>
 8005c8e:	bf00      	nop
 8005c90:	2000000c 	.word	0x2000000c
 8005c94:	0800627d 	.word	0x0800627d
 8005c98:	0800628a 	.word	0x0800628a
 8005c9c:	080062b8 	.word	0x080062b8

08005ca0 <_close_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4d05      	ldr	r5, [pc, #20]	; (8005cbc <_close_r+0x1c>)
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	f7fb fed6 	bl	8001a5c <_close>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_close_r+0x1a>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_close_r+0x1a>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	200002c0 	.word	0x200002c0

08005cc0 <fiprintf>:
 8005cc0:	b40e      	push	{r1, r2, r3}
 8005cc2:	b503      	push	{r0, r1, lr}
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	ab03      	add	r3, sp, #12
 8005cc8:	4805      	ldr	r0, [pc, #20]	; (8005ce0 <fiprintf+0x20>)
 8005cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cce:	6800      	ldr	r0, [r0, #0]
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	f7ff fe31 	bl	8005938 <_vfiprintf_r>
 8005cd6:	b002      	add	sp, #8
 8005cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cdc:	b003      	add	sp, #12
 8005cde:	4770      	bx	lr
 8005ce0:	2000000c 	.word	0x2000000c

08005ce4 <_fstat_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4d06      	ldr	r5, [pc, #24]	; (8005d04 <_fstat_r+0x20>)
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	f7fb febe 	bl	8001a72 <_fstat>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	d102      	bne.n	8005d00 <_fstat_r+0x1c>
 8005cfa:	682b      	ldr	r3, [r5, #0]
 8005cfc:	b103      	cbz	r3, 8005d00 <_fstat_r+0x1c>
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	bd38      	pop	{r3, r4, r5, pc}
 8005d02:	bf00      	nop
 8005d04:	200002c0 	.word	0x200002c0

08005d08 <_isatty_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4d05      	ldr	r5, [pc, #20]	; (8005d24 <_isatty_r+0x1c>)
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb febc 	bl	8001a90 <_isatty>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_isatty_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_isatty_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200002c0 	.word	0x200002c0

08005d28 <_lseek_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	2200      	movs	r2, #0
 8005d32:	4d05      	ldr	r5, [pc, #20]	; (8005d48 <_lseek_r+0x20>)
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f7fb feb4 	bl	8001aa4 <_lseek>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_lseek_r+0x1e>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_lseek_r+0x1e>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	200002c0 	.word	0x200002c0

08005d4c <__ascii_mbtowc>:
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	b901      	cbnz	r1, 8005d52 <__ascii_mbtowc+0x6>
 8005d50:	a901      	add	r1, sp, #4
 8005d52:	b142      	cbz	r2, 8005d66 <__ascii_mbtowc+0x1a>
 8005d54:	b14b      	cbz	r3, 8005d6a <__ascii_mbtowc+0x1e>
 8005d56:	7813      	ldrb	r3, [r2, #0]
 8005d58:	600b      	str	r3, [r1, #0]
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	1e10      	subs	r0, r2, #0
 8005d5e:	bf18      	it	ne
 8005d60:	2001      	movne	r0, #1
 8005d62:	b002      	add	sp, #8
 8005d64:	4770      	bx	lr
 8005d66:	4610      	mov	r0, r2
 8005d68:	e7fb      	b.n	8005d62 <__ascii_mbtowc+0x16>
 8005d6a:	f06f 0001 	mvn.w	r0, #1
 8005d6e:	e7f8      	b.n	8005d62 <__ascii_mbtowc+0x16>

08005d70 <__malloc_lock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	; (8005d78 <__malloc_lock+0x8>)
 8005d72:	f7ff b8bc 	b.w	8004eee <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	200002b4 	.word	0x200002b4

08005d7c <__malloc_unlock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__malloc_unlock+0x8>)
 8005d7e:	f7ff b8b7 	b.w	8004ef0 <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	200002b4 	.word	0x200002b4

08005d88 <_read_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	2200      	movs	r2, #0
 8005d92:	4d05      	ldr	r5, [pc, #20]	; (8005da8 <_read_r+0x20>)
 8005d94:	602a      	str	r2, [r5, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f7fb fe27 	bl	80019ea <_read>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_read_r+0x1e>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_read_r+0x1e>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	200002c0 	.word	0x200002c0

08005dac <__ascii_wctomb>:
 8005dac:	4603      	mov	r3, r0
 8005dae:	4608      	mov	r0, r1
 8005db0:	b141      	cbz	r1, 8005dc4 <__ascii_wctomb+0x18>
 8005db2:	2aff      	cmp	r2, #255	; 0xff
 8005db4:	d904      	bls.n	8005dc0 <__ascii_wctomb+0x14>
 8005db6:	228a      	movs	r2, #138	; 0x8a
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	4770      	bx	lr
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	700a      	strb	r2, [r1, #0]
 8005dc4:	4770      	bx	lr

08005dc6 <abort>:
 8005dc6:	2006      	movs	r0, #6
 8005dc8:	b508      	push	{r3, lr}
 8005dca:	f000 f82b 	bl	8005e24 <raise>
 8005dce:	2001      	movs	r0, #1
 8005dd0:	f7fb fe01 	bl	80019d6 <_exit>

08005dd4 <_raise_r>:
 8005dd4:	291f      	cmp	r1, #31
 8005dd6:	b538      	push	{r3, r4, r5, lr}
 8005dd8:	4604      	mov	r4, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	d904      	bls.n	8005de8 <_raise_r+0x14>
 8005dde:	2316      	movs	r3, #22
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	f04f 30ff 	mov.w	r0, #4294967295
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005dea:	b112      	cbz	r2, 8005df2 <_raise_r+0x1e>
 8005dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005df0:	b94b      	cbnz	r3, 8005e06 <_raise_r+0x32>
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 f830 	bl	8005e58 <_getpid_r>
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e02:	f000 b817 	b.w	8005e34 <_kill_r>
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d00a      	beq.n	8005e20 <_raise_r+0x4c>
 8005e0a:	1c59      	adds	r1, r3, #1
 8005e0c:	d103      	bne.n	8005e16 <_raise_r+0x42>
 8005e0e:	2316      	movs	r3, #22
 8005e10:	6003      	str	r3, [r0, #0]
 8005e12:	2001      	movs	r0, #1
 8005e14:	e7e7      	b.n	8005de6 <_raise_r+0x12>
 8005e16:	2400      	movs	r4, #0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e1e:	4798      	blx	r3
 8005e20:	2000      	movs	r0, #0
 8005e22:	e7e0      	b.n	8005de6 <_raise_r+0x12>

08005e24 <raise>:
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <raise+0xc>)
 8005e26:	4601      	mov	r1, r0
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f7ff bfd3 	b.w	8005dd4 <_raise_r>
 8005e2e:	bf00      	nop
 8005e30:	2000000c 	.word	0x2000000c

08005e34 <_kill_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	2300      	movs	r3, #0
 8005e38:	4d06      	ldr	r5, [pc, #24]	; (8005e54 <_kill_r+0x20>)
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	f7fb fdb8 	bl	80019b6 <_kill>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d102      	bne.n	8005e50 <_kill_r+0x1c>
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	b103      	cbz	r3, 8005e50 <_kill_r+0x1c>
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	bf00      	nop
 8005e54:	200002c0 	.word	0x200002c0

08005e58 <_getpid_r>:
 8005e58:	f7fb bda6 	b.w	80019a8 <_getpid>

08005e5c <_init>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr

08005e68 <_fini>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr
