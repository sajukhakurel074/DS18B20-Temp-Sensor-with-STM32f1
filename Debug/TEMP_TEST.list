
TEMP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08005b60  08005b60  00015b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800600c  0800600c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800600c  0800600c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800600c  0800600c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200001dc  080061f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080061f0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e30  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199f  00000000  00000000  0002a035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018643  00000000  00000000  0002d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1cc  00000000  00000000  000457e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6d9  00000000  00000000  000519af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd088  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000447c  00000000  00000000  000dd0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b44 	.word	0x08005b44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005b44 	.word	0x08005b44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <delay>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <delay+0x2c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay){
 8000f54:	bf00      	nop
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <delay+0x2c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f9      	bhi.n	8000f56 <delay+0x12>

	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001f8 	.word	0x200001f8

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f000 fc74 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f87e 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 f93c 	bl	80011fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f84:	f000 f910 	bl	80011a8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f88:	f000 f8be 	bl	8001108 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f8c:	4831      	ldr	r0, [pc, #196]	; (8001054 <main+0xe0>)
 8000f8e:	f001 fbf1 	bl	8002774 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("From TEMP Sensor Test\r\n");
 8000f92:	4831      	ldr	r0, [pc, #196]	; (8001058 <main+0xe4>)
 8000f94:	f002 fd22 	bl	80039dc <puts>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		delay(1000); // (Max value to pass in function 0 - 1000) (min -> 1us to max -> 1ms)

		Presence = DS18B20_Start();
 8000f98:	f000 f9a6 	bl	80012e8 <DS18B20_Start>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a2f      	ldr	r2, [pc, #188]	; (800105c <main+0xe8>)
 8000fa0:	6013      	str	r3, [r2, #0]
		printf("Presence = %d\n", Presence);
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <main+0xe8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482d      	ldr	r0, [pc, #180]	; (8001060 <main+0xec>)
 8000faa:	f002 fc91 	bl	80038d0 <iprintf>
		HAL_Delay(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f000 fcba 	bl	8001928 <HAL_Delay>
		DS18B20_Write(0xCC);  // skip ROM
 8000fb4:	20cc      	movs	r0, #204	; 0xcc
 8000fb6:	f000 f9c9 	bl	800134c <DS18B20_Write>
		DS18B20_Write(0x44);  // convert t
 8000fba:	2044      	movs	r0, #68	; 0x44
 8000fbc:	f000 f9c6 	bl	800134c <DS18B20_Write>
		HAL_Delay(800);
 8000fc0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fc4:	f000 fcb0 	bl	8001928 <HAL_Delay>

		Presence = DS18B20_Start();
 8000fc8:	f000 f98e 	bl	80012e8 <DS18B20_Start>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a23      	ldr	r2, [pc, #140]	; (800105c <main+0xe8>)
 8000fd0:	6013      	str	r3, [r2, #0]
		printf("Presence2 = %d\n", Presence);
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <main+0xe8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4822      	ldr	r0, [pc, #136]	; (8001064 <main+0xf0>)
 8000fda:	f002 fc79 	bl	80038d0 <iprintf>
		HAL_Delay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fca2 	bl	8001928 <HAL_Delay>
		DS18B20_Write(0xCC);  // skip ROM
 8000fe4:	20cc      	movs	r0, #204	; 0xcc
 8000fe6:	f000 f9b1 	bl	800134c <DS18B20_Write>
		DS18B20_Write(0xBE);  // Read Scratch-pad
 8000fea:	20be      	movs	r0, #190	; 0xbe
 8000fec:	f000 f9ae 	bl	800134c <DS18B20_Write>

		Temp_byte1 = DS18B20_Read();
 8000ff0:	f000 f9f2 	bl	80013d8 <DS18B20_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <main+0xf4>)
 8000ffa:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DS18B20_Read();
 8000ffc:	f000 f9ec 	bl	80013d8 <DS18B20_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <main+0xf8>)
 8001006:	701a      	strb	r2, [r3, #0]

		TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <main+0xf8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21a      	sxth	r2, r3
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <main+0xf4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <main+0xfc>)
 800101e:	801a      	strh	r2, [r3, #0]
		Temperature = (float) TEMP / 16;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <main+0xfc>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fde5 	bl	8000bf4 <__aeabi_ui2f>
 800102a:	4603      	mov	r3, r0
 800102c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff feeb 	bl	8000e0c <__aeabi_fdiv>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <main+0x100>)
 800103c:	601a      	str	r2, [r3, #0]

		printf("Temperature = %f \n", Temperature);
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <main+0x100>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f9f0 	bl	8000428 <__aeabi_f2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <main+0x104>)
 800104e:	f002 fc3f 	bl	80038d0 <iprintf>
		printf("From TEMP Sensor Test\r\n");
 8001052:	e79e      	b.n	8000f92 <main+0x1e>
 8001054:	200001f8 	.word	0x200001f8
 8001058:	08005b60 	.word	0x08005b60
 800105c:	20000288 	.word	0x20000288
 8001060:	08005b78 	.word	0x08005b78
 8001064:	08005b88 	.word	0x08005b88
 8001068:	20000284 	.word	0x20000284
 800106c:	20000285 	.word	0x20000285
 8001070:	20000290 	.word	0x20000290
 8001074:	2000028c 	.word	0x2000028c
 8001078:	08005b98 	.word	0x08005b98

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b090      	sub	sp, #64	; 0x40
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2228      	movs	r2, #40	; 0x28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f001 ffb8 	bl	8003000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 feeb 	bl	8001ea0 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010d0:	f000 fa00 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 f958 	bl	80023a4 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010fa:	f000 f9eb 	bl	80014d4 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3740      	adds	r7, #64	; 0x40
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_TIM1_Init+0x98>)
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <MX_TIM1_Init+0x9c>)
 8001128:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_TIM1_Init+0x98>)
 800112c:	2247      	movs	r2, #71	; 0x47
 800112e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_TIM1_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_TIM1_Init+0x98>)
 8001138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_TIM1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_TIM1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_TIM1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <MX_TIM1_Init+0x98>)
 8001152:	f001 fabf 	bl	80026d4 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800115c:	f000 f9ba 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_TIM1_Init+0x98>)
 800116e:	f001 fb4b 	bl	8002808 <HAL_TIM_ConfigClockSource>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001178:	f000 f9ac 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_TIM1_Init+0x98>)
 800118a:	f001 fcf9 	bl	8002b80 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001194:	f000 f99e 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	40012c00 	.word	0x40012c00

080011a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART1_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f001 fd2c 	bl	8002c3c <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f973 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000240 	.word	0x20000240
 80011f8:	40013800 	.word	0x40013800

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <MX_GPIO_Init+0xbc>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <MX_GPIO_Init+0xbc>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_GPIO_Init+0xbc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_GPIO_Init+0xbc>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <MX_GPIO_Init+0xbc>)
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_GPIO_Init+0xbc>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_GPIO_Init+0xbc>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_GPIO_Init+0xbc>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_GPIO_Init+0xbc>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_GPIO_Init+0xbc>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <MX_GPIO_Init+0xbc>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_GPIO_Init+0xbc>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <MX_GPIO_Init+0xc0>)
 8001278:	f000 fdf9 	bl	8001e6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2302      	movs	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <MX_GPIO_Init+0xc0>)
 8001296:	f000 fc4f 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800129a:	2302      	movs	r3, #2
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_GPIO_Init+0xc4>)
 80012aa:	f000 fc45 	bl	8001b38 <HAL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40010c00 	.word	0x40010c00

080012c4 <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80012cc:	1d39      	adds	r1, r7, #4
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	2201      	movs	r2, #1
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <__io_putchar+0x20>)
 80012d6:	f001 fcfe 	bl	8002cd6 <HAL_UART_Transmit>
	return ch;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000240 	.word	0x20000240

080012e8 <DS18B20_Start>:

int DS18B20_Start(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	int Response = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80012f2:	2102      	movs	r1, #2
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <DS18B20_Start+0x60>)
 80012f6:	f000 f8b3 	bl	8001460 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin low
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	4812      	ldr	r0, [pc, #72]	; (8001348 <DS18B20_Start+0x60>)
 8001300:	f000 fdb5 	bl	8001e6e <HAL_GPIO_WritePin>
	delay(480);   // delay according to data sheet
 8001304:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001308:	f7ff fe1c 	bl	8000f44 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 800130c:	2102      	movs	r1, #2
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <DS18B20_Start+0x60>)
 8001310:	f000 f8c3 	bl	800149a <Set_Pin_Input>
	delay(80);    // delay according to data sheet
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f7ff fe15 	bl	8000f44 <delay>

	if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 800131a:	2102      	movs	r1, #2
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DS18B20_Start+0x60>)
 800131e:	f000 fd8f 	bl	8001e40 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <DS18B20_Start+0x46>
		Response = 1; // if the pin is low i.e the presence pulse is detected
 8001328:	2301      	movs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	e002      	b.n	8001334 <DS18B20_Start+0x4c>
	else
		Response = -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	607b      	str	r3, [r7, #4]

	delay(400); // Waiting to complete the response cycle
 8001334:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001338:	f7ff fe04 	bl	8000f44 <delay>

	return Response;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40010c00 	.word	0x40010c00

0800134c <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001356:	2102      	movs	r1, #2
 8001358:	481e      	ldr	r0, [pc, #120]	; (80013d4 <DS18B20_Write+0x88>)
 800135a:	f000 f881 	bl	8001460 <Set_Pin_Output>

	for (int i = 0; i < 8; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	e02e      	b.n	80013c2 <DS18B20_Write+0x76>

		if ((data & (1 << i)) != 0)  // if the bit is high
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	fa42 f303 	asr.w	r3, r2, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <DS18B20_Write+0x50>
				{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001374:	2102      	movs	r1, #2
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <DS18B20_Write+0x88>)
 8001378:	f000 f872 	bl	8001460 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	4814      	ldr	r0, [pc, #80]	; (80013d4 <DS18B20_Write+0x88>)
 8001382:	f000 fd74 	bl	8001e6e <HAL_GPIO_WritePin>
			delay(1);  // wait for 1 us
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff fddc 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800138c:	2102      	movs	r1, #2
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <DS18B20_Write+0x88>)
 8001390:	f000 f883 	bl	800149a <Set_Pin_Input>
			delay(60);  // wait for 60 us
 8001394:	203c      	movs	r0, #60	; 0x3c
 8001396:	f7ff fdd5 	bl	8000f44 <delay>
 800139a:	e00f      	b.n	80013bc <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800139c:	2102      	movs	r1, #2
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <DS18B20_Write+0x88>)
 80013a0:	f000 f85e 	bl	8001460 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 80013a4:	2200      	movs	r2, #0
 80013a6:	2102      	movs	r1, #2
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <DS18B20_Write+0x88>)
 80013aa:	f000 fd60 	bl	8001e6e <HAL_GPIO_WritePin>
			delay(60);  // wait for 60 us
 80013ae:	203c      	movs	r0, #60	; 0x3c
 80013b0:	f7ff fdc8 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80013b4:	2102      	movs	r1, #2
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <DS18B20_Write+0x88>)
 80013b8:	f000 f86f 	bl	800149a <Set_Pin_Input>
	for (int i = 0; i < 8; i++) {
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	ddcd      	ble.n	8001364 <DS18B20_Write+0x18>
		}
	}
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80013e2:	2102      	movs	r1, #2
 80013e4:	481c      	ldr	r0, [pc, #112]	; (8001458 <DS18B20_Read+0x80>)
 80013e6:	f000 f858 	bl	800149a <Set_Pin_Input>

	for (int i = 0; i < 8; i++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	e02b      	b.n	8001448 <DS18B20_Read+0x70>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80013f0:	2102      	movs	r1, #2
 80013f2:	4819      	ldr	r0, [pc, #100]	; (8001458 <DS18B20_Read+0x80>)
 80013f4:	f000 f834 	bl	8001460 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the data pin LOW
 80013f8:	2200      	movs	r2, #0
 80013fa:	2102      	movs	r1, #2
 80013fc:	4816      	ldr	r0, [pc, #88]	; (8001458 <DS18B20_Read+0x80>)
 80013fe:	f000 fd36 	bl	8001e6e <HAL_GPIO_WritePin>
		delay(5);  // wait for 5 us
 8001402:	2005      	movs	r0, #5
 8001404:	f7ff fd9e 	bl	8000f44 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001408:	2102      	movs	r1, #2
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <DS18B20_Read+0x80>)
 800140c:	f000 f845 	bl	800149a <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001410:	2102      	movs	r1, #2
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <DS18B20_Read+0x80>)
 8001414:	f000 fd14 	bl	8001e40 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00e      	beq.n	800143c <DS18B20_Read+0x64>
				{
			value |= 1 << i;  // read = 1
 800141e:	2201      	movs	r2, #1
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b25a      	sxtb	r2, r3
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4313      	orrs	r3, r2
 800142e:	b25b      	sxtb	r3, r3
 8001430:	71fb      	strb	r3, [r7, #7]
			printf("value = %d\n", value);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4619      	mov	r1, r3
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <DS18B20_Read+0x84>)
 8001438:	f002 fa4a 	bl	80038d0 <iprintf>
		}
		delay(60);  // wait for 60 us
 800143c:	203c      	movs	r0, #60	; 0x3c
 800143e:	f7ff fd81 	bl	8000f44 <delay>
	for (int i = 0; i < 8; i++) {
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b07      	cmp	r3, #7
 800144c:	ddd0      	ble.n	80013f0 <DS18B20_Read+0x18>
	}
	return value;
 800144e:	79fb      	ldrb	r3, [r7, #7]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010c00 	.word	0x40010c00
 800145c:	08005bac 	.word	0x08005bac

08001460 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4619      	mov	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fb53 	bl	8001b38 <HAL_GPIO_Init>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fb36 	bl	8001b38 <HAL_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("From the error handler\n");
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <Error_Handler+0x10>)
 80014da:	f002 fa7f 	bl	80039dc <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014de:	b672      	cpsid	i
}
 80014e0:	bf00      	nop
	__disable_irq();
	while (1) {
 80014e2:	e7fe      	b.n	80014e2 <Error_Handler+0xe>
 80014e4:	08005bb8 	.word	0x08005bb8

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_MspInit+0x5c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_MspInit+0x5c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_MspInit+0x60>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_MspInit+0x60>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x34>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10b      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40012c00 	.word	0x40012c00
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_UART_MspInit+0x8c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d131      	bne.n	800160c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_UART_MspInit+0x90>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <HAL_UART_MspInit+0x90>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_UART_MspInit+0x90>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_UART_MspInit+0x90>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_UART_MspInit+0x90>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_UART_MspInit+0x90>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	4619      	mov	r1, r3
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <HAL_UART_MspInit+0x94>)
 80015ee:	f000 faa3 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4619      	mov	r1, r3
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_MspInit+0x94>)
 8001608:	f000 fa96 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40013800 	.word	0x40013800
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	printf("From NMI Handler\n");
 8001624:	4801      	ldr	r0, [pc, #4]	; (800162c <NMI_Handler+0xc>)
 8001626:	f002 f9d9 	bl	80039dc <puts>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800162a:	e7fe      	b.n	800162a <NMI_Handler+0xa>
 800162c:	08005bd0 	.word	0x08005bd0

08001630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault handler\n");
 8001634:	4801      	ldr	r0, [pc, #4]	; (800163c <HardFault_Handler+0xc>)
 8001636:	f002 f9d1 	bl	80039dc <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0xa>
 800163c:	08005be4 	.word	0x08005be4

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemMange Handler\n");
 8001644:	4801      	ldr	r0, [pc, #4]	; (800164c <MemManage_Handler+0xc>)
 8001646:	f002 f9c9 	bl	80039dc <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <MemManage_Handler+0xa>
 800164c:	08005bf8 	.word	0x08005bf8

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <BusFault_Handler+0x4>

08001656 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <UsageFault_Handler+0x4>

0800165c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001684:	f000 f934 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <_kill>:

int _kill(int pid, int sig)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016a4:	f001 fc82 	bl	8002fac <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2216      	movs	r2, #22
 80016ac:	601a      	str	r2, [r3, #0]
	return -1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_exit>:

void _exit (int status)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016c2:	f04f 31ff 	mov.w	r1, #4294967295
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffe7 	bl	800169a <_kill>
	while (1) {}		/* Make sure we hang here */
 80016cc:	e7fe      	b.n	80016cc <_exit+0x12>

080016ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e00a      	b.n	80016f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016e0:	f3af 8000 	nop.w
 80016e4:	4601      	mov	r1, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	60ba      	str	r2, [r7, #8]
 80016ec:	b2ca      	uxtb	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbf0      	blt.n	80016e0 <_read+0x12>
	}

return len;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e009      	b.n	800172e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fdce 	bl	80012c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf1      	blt.n	800171a <_write+0x12>
	}
	return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_close>:

int _close(int file)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001766:	605a      	str	r2, [r3, #4]
	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <_isatty>:

int _isatty(int file)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f001 fbec 	bl	8002fac <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20005000 	.word	0x20005000
 8001800:	00000400 	.word	0x00000400
 8001804:	20000294 	.word	0x20000294
 8001808:	200002b0 	.word	0x200002b0

0800180c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	; (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800183e:	f7ff ffe5 	bl	800180c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f001 fbb9 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001846:	f7ff fb95 	bl	8000f74 <main>
  bx lr
 800184a:	4770      	bx	lr
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001854:	08006014 	.word	0x08006014
  ldr r2, =_sbss
 8001858:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800185c:	200002ac 	.word	0x200002ac

08001860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC1_2_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_Init+0x28>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_Init+0x28>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f92b 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fe32 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f935 	bl	8001b1e <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 f90b 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_IncTick+0x1c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_IncTick+0x20>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_IncTick+0x20>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000008 	.word	0x20000008
 8001910:	20000298 	.word	0x20000298

08001914 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b02      	ldr	r3, [pc, #8]	; (8001924 <HAL_GetTick+0x10>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000298 	.word	0x20000298

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff fff0 	bl	8001914 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffe0 	bl	8001914 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f7ff ff90 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff49 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff5e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff90 	bl	8001a28 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5f 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffb0 	bl	8001a8c <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b08b      	sub	sp, #44	; 0x2c
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e169      	b.n	8001e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 8158 	bne.w	8001e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a9a      	ldr	r2, [pc, #616]	; (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d05e      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b74:	4a98      	ldr	r2, [pc, #608]	; (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d875      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b7a:	4a98      	ldr	r2, [pc, #608]	; (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d058      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b80:	4a96      	ldr	r2, [pc, #600]	; (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d86f      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b86:	4a96      	ldr	r2, [pc, #600]	; (8001de0 <HAL_GPIO_Init+0x2a8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d052      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b8c:	4a94      	ldr	r2, [pc, #592]	; (8001de0 <HAL_GPIO_Init+0x2a8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d869      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b92:	4a94      	ldr	r2, [pc, #592]	; (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04c      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b98:	4a92      	ldr	r2, [pc, #584]	; (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d863      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b9e:	4a92      	ldr	r2, [pc, #584]	; (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d046      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a90      	ldr	r2, [pc, #576]	; (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d85d      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d82a      	bhi.n	8001c04 <HAL_GPIO_Init+0xcc>
 8001bae:	2b12      	cmp	r3, #18
 8001bb0:	d859      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <HAL_GPIO_Init+0x80>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001c33 	.word	0x08001c33
 8001bbc:	08001c0d 	.word	0x08001c0d
 8001bc0:	08001c1f 	.word	0x08001c1f
 8001bc4:	08001c61 	.word	0x08001c61
 8001bc8:	08001c67 	.word	0x08001c67
 8001bcc:	08001c67 	.word	0x08001c67
 8001bd0:	08001c67 	.word	0x08001c67
 8001bd4:	08001c67 	.word	0x08001c67
 8001bd8:	08001c67 	.word	0x08001c67
 8001bdc:	08001c67 	.word	0x08001c67
 8001be0:	08001c67 	.word	0x08001c67
 8001be4:	08001c67 	.word	0x08001c67
 8001be8:	08001c67 	.word	0x08001c67
 8001bec:	08001c67 	.word	0x08001c67
 8001bf0:	08001c67 	.word	0x08001c67
 8001bf4:	08001c67 	.word	0x08001c67
 8001bf8:	08001c67 	.word	0x08001c67
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c29 	.word	0x08001c29
 8001c04:	4a79      	ldr	r2, [pc, #484]	; (8001dec <HAL_GPIO_Init+0x2b4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c0a:	e02c      	b.n	8001c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e029      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e024      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	3308      	adds	r3, #8
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e01f      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	330c      	adds	r3, #12
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e01a      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e013      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	611a      	str	r2, [r3, #16]
          break;
 8001c52:	e009      	b.n	8001c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c54:	2308      	movs	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	615a      	str	r2, [r3, #20]
          break;
 8001c5e:	e003      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
          break;
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          break;
 8001c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2bff      	cmp	r3, #255	; 0xff
 8001c6c:	d801      	bhi.n	8001c72 <HAL_GPIO_Init+0x13a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	e001      	b.n	8001c76 <HAL_GPIO_Init+0x13e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2bff      	cmp	r3, #255	; 0xff
 8001c7c:	d802      	bhi.n	8001c84 <HAL_GPIO_Init+0x14c>
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x152>
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3b08      	subs	r3, #8
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	210f      	movs	r1, #15
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80b1 	beq.w	8001e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a4c      	ldr	r2, [pc, #304]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd0:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a40      	ldr	r2, [pc, #256]	; (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_GPIO_Init+0x1ec>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_GPIO_Init+0x2c4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00d      	beq.n	8001d20 <HAL_GPIO_Init+0x1e8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <HAL_GPIO_Init+0x1e4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_GPIO_Init+0x1e0>
 8001d14:	2303      	movs	r3, #3
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d18:	2304      	movs	r3, #4
 8001d1a:	e004      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d24:	2300      	movs	r3, #0
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d36:	492f      	ldr	r1, [pc, #188]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	492c      	ldr	r1, [pc, #176]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4928      	ldr	r1, [pc, #160]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	491e      	ldr	r1, [pc, #120]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4918      	ldr	r1, [pc, #96]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4914      	ldr	r1, [pc, #80]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d021      	beq.n	8001e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	490e      	ldr	r1, [pc, #56]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
 8001dd4:	e021      	b.n	8001e1a <HAL_GPIO_Init+0x2e2>
 8001dd6:	bf00      	nop
 8001dd8:	10320000 	.word	0x10320000
 8001ddc:	10310000 	.word	0x10310000
 8001de0:	10220000 	.word	0x10220000
 8001de4:	10210000 	.word	0x10210000
 8001de8:	10120000 	.word	0x10120000
 8001dec:	10110000 	.word	0x10110000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	40011000 	.word	0x40011000
 8001e04:	40011400 	.word	0x40011400
 8001e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4909      	ldr	r1, [pc, #36]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f47f ae8e 	bne.w	8001b4c <HAL_GPIO_Init+0x14>
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	372c      	adds	r7, #44	; 0x2c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	807b      	strh	r3, [r7, #2]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7e:	787b      	ldrb	r3, [r7, #1]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e84:	887a      	ldrh	r2, [r7, #2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e8a:	e003      	b.n	8001e94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	041a      	lsls	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	611a      	str	r2, [r3, #16]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e272      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec0:	4b92      	ldr	r3, [pc, #584]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d00c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ecc:	4b8f      	ldr	r3, [pc, #572]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d112      	bne.n	8001efe <HAL_RCC_OscConfig+0x5e>
 8001ed8:	4b8c      	ldr	r3, [pc, #560]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d10b      	bne.n	8001efe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee6:	4b89      	ldr	r3, [pc, #548]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d06c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x12c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d168      	bne.n	8001fcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e24c      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x76>
 8001f08:	4b80      	ldr	r3, [pc, #512]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a7f      	ldr	r2, [pc, #508]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e02e      	b.n	8001f74 <HAL_RCC_OscConfig+0xd4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b7b      	ldr	r3, [pc, #492]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7a      	ldr	r2, [pc, #488]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b78      	ldr	r3, [pc, #480]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a77      	ldr	r2, [pc, #476]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01d      	b.n	8001f74 <HAL_RCC_OscConfig+0xd4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0xbc>
 8001f42:	4b72      	ldr	r3, [pc, #456]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a71      	ldr	r2, [pc, #452]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b6f      	ldr	r3, [pc, #444]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6e      	ldr	r2, [pc, #440]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xd4>
 8001f5c:	4b6b      	ldr	r3, [pc, #428]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fcca 	bl	8001914 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fcc6 	bl	8001914 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e200      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b5d      	ldr	r3, [pc, #372]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe4>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fcb6 	bl	8001914 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff fcb2 	bl	8001914 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1ec      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x10c>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d063      	beq.n	80020a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fda:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d11c      	bne.n	800202c <HAL_RCC_OscConfig+0x18c>
 8001ff2:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d116      	bne.n	800202c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x176>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e1c0      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4939      	ldr	r1, [pc, #228]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	e03a      	b.n	80020a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_RCC_OscConfig+0x270>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7ff fc6b 	bl	8001914 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff fc67 	bl	8001914 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1a1      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4927      	ldr	r1, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
 8002074:	e015      	b.n	80020a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_RCC_OscConfig+0x270>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fc4a 	bl	8001914 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7ff fc46 	bl	8001914 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e180      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d03a      	beq.n	8002124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d019      	beq.n	80020ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020bc:	f7ff fc2a 	bl	8001914 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff fc26 	bl	8001914 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e160      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f000 fad8 	bl	8002698 <RCC_Delay>
 80020e8:	e01c      	b.n	8002124 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7ff fc10 	bl	8001914 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f6:	e00f      	b.n	8002118 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f8:	f7ff fc0c 	bl	8001914 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d908      	bls.n	8002118 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e146      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	42420000 	.word	0x42420000
 8002114:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002118:	4b92      	ldr	r3, [pc, #584]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e9      	bne.n	80020f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a6 	beq.w	800227e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002136:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10d      	bne.n	800215e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a87      	ldr	r2, [pc, #540]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	61d3      	str	r3, [r2, #28]
 800214e:	4b85      	ldr	r3, [pc, #532]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d118      	bne.n	800219c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216a:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7e      	ldr	r2, [pc, #504]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002176:	f7ff fbcd 	bl	8001914 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217e:	f7ff fbc9 	bl	8001914 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	; 0x64
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e103      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	4b75      	ldr	r3, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x312>
 80021a4:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	e02d      	b.n	800220e <HAL_RCC_OscConfig+0x36e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x334>
 80021ba:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a69      	ldr	r2, [pc, #420]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	e01c      	b.n	800220e <HAL_RCC_OscConfig+0x36e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d10c      	bne.n	80021f6 <HAL_RCC_OscConfig+0x356>
 80021dc:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a60      	ldr	r2, [pc, #384]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	4b5e      	ldr	r3, [pc, #376]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a5d      	ldr	r2, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	e00b      	b.n	800220e <HAL_RCC_OscConfig+0x36e>
 80021f6:	4b5b      	ldr	r3, [pc, #364]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a5a      	ldr	r2, [pc, #360]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b58      	ldr	r3, [pc, #352]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d015      	beq.n	8002242 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fb7d 	bl	8001914 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7ff fb79 	bl	8001914 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0b1      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ee      	beq.n	800221e <HAL_RCC_OscConfig+0x37e>
 8002240:	e014      	b.n	800226c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff fb67 	bl	8001914 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7ff fb63 	bl	8001914 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e09b      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	4b40      	ldr	r3, [pc, #256]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ee      	bne.n	800224a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002272:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8087 	beq.w	8002396 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b08      	cmp	r3, #8
 8002292:	d061      	beq.n	8002358 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d146      	bne.n	800232a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCC_OscConfig+0x4cc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7ff fb37 	bl	8001914 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff fb33 	bl	8001914 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e06d      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d108      	bne.n	80022e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4921      	ldr	r1, [pc, #132]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a19      	ldr	r1, [r3, #32]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	430b      	orrs	r3, r1
 80022f6:	491b      	ldr	r1, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x4cc>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7ff fb07 	bl	8001914 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230a:	f7ff fb03 	bl	8001914 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e03d      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x46a>
 8002328:	e035      	b.n	8002396 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_OscConfig+0x4cc>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff faf0 	bl	8001914 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7ff faec 	bl	8001914 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e026      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x498>
 8002356:	e01e      	b.n	8002396 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e019      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
 800236c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_OscConfig+0x500>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	429a      	cmp	r2, r3
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d0      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d910      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
 80023ce:	4965      	ldr	r1, [pc, #404]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002422:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d040      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d115      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e073      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06b      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b39      	ldr	r3, [pc, #228]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4936      	ldr	r1, [pc, #216]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002494:	f7ff fa3e 	bl	8001914 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7ff fa3a 	bl	8001914 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e053      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d210      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4922      	ldr	r1, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f821 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1cc>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1d0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f99c 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	08005c1c 	.word	0x08005c1c
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b490      	push	{r4, r7}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_GetSysClockFreq+0xac>)
 8002580:	1d3c      	adds	r4, r7, #4
 8002582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002588:	f240 2301 	movw	r3, #513	; 0x201
 800258c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x40>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x46>
 80025b6:	e02b      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ba:	623b      	str	r3, [r7, #32]
      break;
 80025bc:	e02b      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3328      	adds	r3, #40	; 0x28
 80025c8:	443b      	add	r3, r7
 80025ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d012      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0c5b      	lsrs	r3, r3, #17
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	3328      	adds	r3, #40	; 0x28
 80025e6:	443b      	add	r3, r7
 80025e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	e004      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	623b      	str	r3, [r7, #32]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002612:	623b      	str	r3, [r7, #32]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	6a3b      	ldr	r3, [r7, #32]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc90      	pop	{r4, r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	08005c0c 	.word	0x08005c0c
 8002628:	40021000 	.word	0x40021000
 800262c:	007a1200 	.word	0x007a1200
 8002630:	003d0900 	.word	0x003d0900

08002634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b02      	ldr	r3, [pc, #8]	; (8002644 <HAL_RCC_GetHCLKFreq+0x10>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264c:	f7ff fff2 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	08005c2c 	.word	0x08005c2c

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002674:	f7ff ffde 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	08005c2c 	.word	0x08005c2c

08002698 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <RCC_Delay+0x34>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <RCC_Delay+0x38>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0a5b      	lsrs	r3, r3, #9
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026b4:	bf00      	nop
  }
  while (Delay --);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1e5a      	subs	r2, r3, #1
 80026ba:	60fa      	str	r2, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f9      	bne.n	80026b4 <RCC_Delay+0x1c>
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	20000000 	.word	0x20000000
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e041      	b.n	800276a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe ff26 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f000 f93c 	bl	8002990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d001      	beq.n	800278c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e032      	b.n	80027f2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_TIM_Base_Start+0x88>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00e      	beq.n	80027bc <HAL_TIM_Base_Start+0x48>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d009      	beq.n	80027bc <HAL_TIM_Base_Start+0x48>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_TIM_Base_Start+0x8c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_TIM_Base_Start+0x48>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_TIM_Base_Start+0x90>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d111      	bne.n	80027e0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d010      	beq.n	80027f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	e007      	b.n	80027f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800

08002808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_TIM_ConfigClockSource+0x18>
 800281c:	2302      	movs	r3, #2
 800281e:	e0b3      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x180>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800283e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002846:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002858:	d03e      	beq.n	80028d8 <HAL_TIM_ConfigClockSource+0xd0>
 800285a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285e:	f200 8087 	bhi.w	8002970 <HAL_TIM_ConfigClockSource+0x168>
 8002862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002866:	f000 8085 	beq.w	8002974 <HAL_TIM_ConfigClockSource+0x16c>
 800286a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286e:	d87f      	bhi.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
 8002870:	2b70      	cmp	r3, #112	; 0x70
 8002872:	d01a      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0xa2>
 8002874:	2b70      	cmp	r3, #112	; 0x70
 8002876:	d87b      	bhi.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
 8002878:	2b60      	cmp	r3, #96	; 0x60
 800287a:	d050      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x116>
 800287c:	2b60      	cmp	r3, #96	; 0x60
 800287e:	d877      	bhi.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
 8002880:	2b50      	cmp	r3, #80	; 0x50
 8002882:	d03c      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0xf6>
 8002884:	2b50      	cmp	r3, #80	; 0x50
 8002886:	d873      	bhi.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d058      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x136>
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d86f      	bhi.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
 8002890:	2b30      	cmp	r3, #48	; 0x30
 8002892:	d064      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x156>
 8002894:	2b30      	cmp	r3, #48	; 0x30
 8002896:	d86b      	bhi.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
 8002898:	2b20      	cmp	r3, #32
 800289a:	d060      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x156>
 800289c:	2b20      	cmp	r3, #32
 800289e:	d867      	bhi.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d05c      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x156>
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d05a      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028a8:	e062      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f000 f942 	bl	8002b42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	609a      	str	r2, [r3, #8]
      break;
 80028d6:	e04e      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f000 f92b 	bl	8002b42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028fa:	609a      	str	r2, [r3, #8]
      break;
 80028fc:	e03b      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f8a2 	bl	8002a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2150      	movs	r1, #80	; 0x50
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f8f9 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 800291c:	e02b      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	461a      	mov	r2, r3
 800292c:	f000 f8c0 	bl	8002ab0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2160      	movs	r1, #96	; 0x60
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f8e9 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 800293c:	e01b      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 f882 	bl	8002a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2140      	movs	r1, #64	; 0x40
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f8d9 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 800295c:	e00b      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f000 f8d0 	bl	8002b0e <TIM_ITRx_SetConfig>
        break;
 800296e:	e002      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002970:	bf00      	nop
 8002972:	e000      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002974:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <TIM_Base_SetConfig+0xbc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <TIM_Base_SetConfig+0xc0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <TIM_Base_SetConfig+0xbc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <TIM_Base_SetConfig+0xc0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d103      	bne.n	8002a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800

08002a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0201 	bic.w	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 030a 	bic.w	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 0210 	bic.w	r2, r3, #16
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ada:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	031b      	lsls	r3, r3, #12
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f043 0307 	orr.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e046      	b.n	8002c26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d009      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10c      	bne.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03f      	b.n	8002cce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fc90 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f905 	bl	8002e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08a      	sub	sp, #40	; 0x28
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d17c      	bne.n	8002df0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_UART_Transmit+0x2c>
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e075      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Transmit+0x3e>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e06e      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2221      	movs	r2, #33	; 0x21
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fdf3 	bl	8001914 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d44:	d108      	bne.n	8002d58 <HAL_UART_Transmit+0x82>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	e003      	b.n	8002d60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d68:	e02a      	b.n	8002dc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f840 	bl	8002dfa <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e036      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e007      	b.n	8002db2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1cf      	bne.n	8002d6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f810 	bl	8002dfa <UART_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e006      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0a:	e02c      	b.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d028      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e1a:	f7fe fd7b 	bl	8001914 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d21d      	bcs.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e00f      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d0c3      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eca:	f023 030c 	bic.w	r3, r3, #12
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <UART_SetConfig+0x114>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d103      	bne.n	8002f00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f7ff fbba 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	e002      	b.n	8002f06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7ff fba2 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8002f04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	0119      	lsls	r1, r3, #4
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009a      	lsls	r2, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2064      	movs	r0, #100	; 0x64
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	4419      	add	r1, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f76:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2064      	movs	r0, #100	; 0x64
 8002f7e:	fb00 f303 	mul.w	r3, r0, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	3332      	adds	r3, #50	; 0x32
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 020f 	and.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	440a      	add	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	51eb851f 	.word	0x51eb851f

08002fac <__errno>:
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <__errno+0x8>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	2600      	movs	r6, #0
 8002fbc:	4d0c      	ldr	r5, [pc, #48]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbe:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	f002 fdbc 	bl	8005b44 <_init>
 8002fcc:	2600      	movs	r6, #0
 8002fce:	4d0a      	ldr	r5, [pc, #40]	; (8002ff8 <__libc_init_array+0x40>)
 8002fd0:	4c0a      	ldr	r4, [pc, #40]	; (8002ffc <__libc_init_array+0x44>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	0800600c 	.word	0x0800600c
 8002ff4:	0800600c 	.word	0x0800600c
 8002ff8:	0800600c 	.word	0x0800600c
 8002ffc:	08006010 	.word	0x08006010

08003000 <memset>:
 8003000:	4603      	mov	r3, r0
 8003002:	4402      	add	r2, r0
 8003004:	4293      	cmp	r3, r2
 8003006:	d100      	bne.n	800300a <memset+0xa>
 8003008:	4770      	bx	lr
 800300a:	f803 1b01 	strb.w	r1, [r3], #1
 800300e:	e7f9      	b.n	8003004 <memset+0x4>

08003010 <__cvt>:
 8003010:	2b00      	cmp	r3, #0
 8003012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003016:	461f      	mov	r7, r3
 8003018:	bfbb      	ittet	lt
 800301a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800301e:	461f      	movlt	r7, r3
 8003020:	2300      	movge	r3, #0
 8003022:	232d      	movlt	r3, #45	; 0x2d
 8003024:	b088      	sub	sp, #32
 8003026:	4614      	mov	r4, r2
 8003028:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800302a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800302c:	7013      	strb	r3, [r2, #0]
 800302e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003030:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003034:	f023 0820 	bic.w	r8, r3, #32
 8003038:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800303c:	d005      	beq.n	800304a <__cvt+0x3a>
 800303e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003042:	d100      	bne.n	8003046 <__cvt+0x36>
 8003044:	3501      	adds	r5, #1
 8003046:	2302      	movs	r3, #2
 8003048:	e000      	b.n	800304c <__cvt+0x3c>
 800304a:	2303      	movs	r3, #3
 800304c:	aa07      	add	r2, sp, #28
 800304e:	9204      	str	r2, [sp, #16]
 8003050:	aa06      	add	r2, sp, #24
 8003052:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003056:	e9cd 3500 	strd	r3, r5, [sp]
 800305a:	4622      	mov	r2, r4
 800305c:	463b      	mov	r3, r7
 800305e:	f000 fe13 	bl	8003c88 <_dtoa_r>
 8003062:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003066:	4606      	mov	r6, r0
 8003068:	d102      	bne.n	8003070 <__cvt+0x60>
 800306a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800306c:	07db      	lsls	r3, r3, #31
 800306e:	d522      	bpl.n	80030b6 <__cvt+0xa6>
 8003070:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003074:	eb06 0905 	add.w	r9, r6, r5
 8003078:	d110      	bne.n	800309c <__cvt+0x8c>
 800307a:	7833      	ldrb	r3, [r6, #0]
 800307c:	2b30      	cmp	r3, #48	; 0x30
 800307e:	d10a      	bne.n	8003096 <__cvt+0x86>
 8003080:	2200      	movs	r2, #0
 8003082:	2300      	movs	r3, #0
 8003084:	4620      	mov	r0, r4
 8003086:	4639      	mov	r1, r7
 8003088:	f7fd fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800308c:	b918      	cbnz	r0, 8003096 <__cvt+0x86>
 800308e:	f1c5 0501 	rsb	r5, r5, #1
 8003092:	f8ca 5000 	str.w	r5, [sl]
 8003096:	f8da 3000 	ldr.w	r3, [sl]
 800309a:	4499      	add	r9, r3
 800309c:	2200      	movs	r2, #0
 800309e:	2300      	movs	r3, #0
 80030a0:	4620      	mov	r0, r4
 80030a2:	4639      	mov	r1, r7
 80030a4:	f7fd fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80030a8:	b108      	cbz	r0, 80030ae <__cvt+0x9e>
 80030aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80030ae:	2230      	movs	r2, #48	; 0x30
 80030b0:	9b07      	ldr	r3, [sp, #28]
 80030b2:	454b      	cmp	r3, r9
 80030b4:	d307      	bcc.n	80030c6 <__cvt+0xb6>
 80030b6:	4630      	mov	r0, r6
 80030b8:	9b07      	ldr	r3, [sp, #28]
 80030ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80030bc:	1b9b      	subs	r3, r3, r6
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	b008      	add	sp, #32
 80030c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	9107      	str	r1, [sp, #28]
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e7f0      	b.n	80030b0 <__cvt+0xa0>

080030ce <__exponent>:
 80030ce:	4603      	mov	r3, r0
 80030d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030d2:	2900      	cmp	r1, #0
 80030d4:	f803 2b02 	strb.w	r2, [r3], #2
 80030d8:	bfb6      	itet	lt
 80030da:	222d      	movlt	r2, #45	; 0x2d
 80030dc:	222b      	movge	r2, #43	; 0x2b
 80030de:	4249      	neglt	r1, r1
 80030e0:	2909      	cmp	r1, #9
 80030e2:	7042      	strb	r2, [r0, #1]
 80030e4:	dd2b      	ble.n	800313e <__exponent+0x70>
 80030e6:	f10d 0407 	add.w	r4, sp, #7
 80030ea:	46a4      	mov	ip, r4
 80030ec:	270a      	movs	r7, #10
 80030ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80030f2:	460a      	mov	r2, r1
 80030f4:	46a6      	mov	lr, r4
 80030f6:	fb07 1516 	mls	r5, r7, r6, r1
 80030fa:	2a63      	cmp	r2, #99	; 0x63
 80030fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003100:	4631      	mov	r1, r6
 8003102:	f104 34ff 	add.w	r4, r4, #4294967295
 8003106:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800310a:	dcf0      	bgt.n	80030ee <__exponent+0x20>
 800310c:	3130      	adds	r1, #48	; 0x30
 800310e:	f1ae 0502 	sub.w	r5, lr, #2
 8003112:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003116:	4629      	mov	r1, r5
 8003118:	1c44      	adds	r4, r0, #1
 800311a:	4561      	cmp	r1, ip
 800311c:	d30a      	bcc.n	8003134 <__exponent+0x66>
 800311e:	f10d 0209 	add.w	r2, sp, #9
 8003122:	eba2 020e 	sub.w	r2, r2, lr
 8003126:	4565      	cmp	r5, ip
 8003128:	bf88      	it	hi
 800312a:	2200      	movhi	r2, #0
 800312c:	4413      	add	r3, r2
 800312e:	1a18      	subs	r0, r3, r0
 8003130:	b003      	add	sp, #12
 8003132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003134:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003138:	f804 2f01 	strb.w	r2, [r4, #1]!
 800313c:	e7ed      	b.n	800311a <__exponent+0x4c>
 800313e:	2330      	movs	r3, #48	; 0x30
 8003140:	3130      	adds	r1, #48	; 0x30
 8003142:	7083      	strb	r3, [r0, #2]
 8003144:	70c1      	strb	r1, [r0, #3]
 8003146:	1d03      	adds	r3, r0, #4
 8003148:	e7f1      	b.n	800312e <__exponent+0x60>
	...

0800314c <_printf_float>:
 800314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003150:	b091      	sub	sp, #68	; 0x44
 8003152:	460c      	mov	r4, r1
 8003154:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003158:	4616      	mov	r6, r2
 800315a:	461f      	mov	r7, r3
 800315c:	4605      	mov	r5, r0
 800315e:	f001 fd35 	bl	8004bcc <_localeconv_r>
 8003162:	6803      	ldr	r3, [r0, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	9309      	str	r3, [sp, #36]	; 0x24
 8003168:	f7fc fff2 	bl	8000150 <strlen>
 800316c:	2300      	movs	r3, #0
 800316e:	930e      	str	r3, [sp, #56]	; 0x38
 8003170:	f8d8 3000 	ldr.w	r3, [r8]
 8003174:	900a      	str	r0, [sp, #40]	; 0x28
 8003176:	3307      	adds	r3, #7
 8003178:	f023 0307 	bic.w	r3, r3, #7
 800317c:	f103 0208 	add.w	r2, r3, #8
 8003180:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003184:	f8d4 b000 	ldr.w	fp, [r4]
 8003188:	f8c8 2000 	str.w	r2, [r8]
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003194:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003198:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800319c:	930b      	str	r3, [sp, #44]	; 0x2c
 800319e:	f04f 32ff 	mov.w	r2, #4294967295
 80031a2:	4640      	mov	r0, r8
 80031a4:	4b9c      	ldr	r3, [pc, #624]	; (8003418 <_printf_float+0x2cc>)
 80031a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031a8:	f7fd fc30 	bl	8000a0c <__aeabi_dcmpun>
 80031ac:	bb70      	cbnz	r0, 800320c <_printf_float+0xc0>
 80031ae:	f04f 32ff 	mov.w	r2, #4294967295
 80031b2:	4640      	mov	r0, r8
 80031b4:	4b98      	ldr	r3, [pc, #608]	; (8003418 <_printf_float+0x2cc>)
 80031b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031b8:	f7fd fc0a 	bl	80009d0 <__aeabi_dcmple>
 80031bc:	bb30      	cbnz	r0, 800320c <_printf_float+0xc0>
 80031be:	2200      	movs	r2, #0
 80031c0:	2300      	movs	r3, #0
 80031c2:	4640      	mov	r0, r8
 80031c4:	4651      	mov	r1, sl
 80031c6:	f7fd fbf9 	bl	80009bc <__aeabi_dcmplt>
 80031ca:	b110      	cbz	r0, 80031d2 <_printf_float+0x86>
 80031cc:	232d      	movs	r3, #45	; 0x2d
 80031ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031d2:	4b92      	ldr	r3, [pc, #584]	; (800341c <_printf_float+0x2d0>)
 80031d4:	4892      	ldr	r0, [pc, #584]	; (8003420 <_printf_float+0x2d4>)
 80031d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80031da:	bf94      	ite	ls
 80031dc:	4698      	movls	r8, r3
 80031de:	4680      	movhi	r8, r0
 80031e0:	2303      	movs	r3, #3
 80031e2:	f04f 0a00 	mov.w	sl, #0
 80031e6:	6123      	str	r3, [r4, #16]
 80031e8:	f02b 0304 	bic.w	r3, fp, #4
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	4633      	mov	r3, r6
 80031f0:	4621      	mov	r1, r4
 80031f2:	4628      	mov	r0, r5
 80031f4:	9700      	str	r7, [sp, #0]
 80031f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80031f8:	f000 f9d4 	bl	80035a4 <_printf_common>
 80031fc:	3001      	adds	r0, #1
 80031fe:	f040 8090 	bne.w	8003322 <_printf_float+0x1d6>
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	b011      	add	sp, #68	; 0x44
 8003208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800320c:	4642      	mov	r2, r8
 800320e:	4653      	mov	r3, sl
 8003210:	4640      	mov	r0, r8
 8003212:	4651      	mov	r1, sl
 8003214:	f7fd fbfa 	bl	8000a0c <__aeabi_dcmpun>
 8003218:	b148      	cbz	r0, 800322e <_printf_float+0xe2>
 800321a:	f1ba 0f00 	cmp.w	sl, #0
 800321e:	bfb8      	it	lt
 8003220:	232d      	movlt	r3, #45	; 0x2d
 8003222:	4880      	ldr	r0, [pc, #512]	; (8003424 <_printf_float+0x2d8>)
 8003224:	bfb8      	it	lt
 8003226:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800322a:	4b7f      	ldr	r3, [pc, #508]	; (8003428 <_printf_float+0x2dc>)
 800322c:	e7d3      	b.n	80031d6 <_printf_float+0x8a>
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	d142      	bne.n	80032be <_printf_float+0x172>
 8003238:	2306      	movs	r3, #6
 800323a:	6063      	str	r3, [r4, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	9206      	str	r2, [sp, #24]
 8003240:	aa0e      	add	r2, sp, #56	; 0x38
 8003242:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003246:	aa0d      	add	r2, sp, #52	; 0x34
 8003248:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800324c:	9203      	str	r2, [sp, #12]
 800324e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003252:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003256:	6023      	str	r3, [r4, #0]
 8003258:	6863      	ldr	r3, [r4, #4]
 800325a:	4642      	mov	r2, r8
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4628      	mov	r0, r5
 8003260:	4653      	mov	r3, sl
 8003262:	910b      	str	r1, [sp, #44]	; 0x2c
 8003264:	f7ff fed4 	bl	8003010 <__cvt>
 8003268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800326a:	4680      	mov	r8, r0
 800326c:	2947      	cmp	r1, #71	; 0x47
 800326e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003270:	d108      	bne.n	8003284 <_printf_float+0x138>
 8003272:	1cc8      	adds	r0, r1, #3
 8003274:	db02      	blt.n	800327c <_printf_float+0x130>
 8003276:	6863      	ldr	r3, [r4, #4]
 8003278:	4299      	cmp	r1, r3
 800327a:	dd40      	ble.n	80032fe <_printf_float+0x1b2>
 800327c:	f1a9 0902 	sub.w	r9, r9, #2
 8003280:	fa5f f989 	uxtb.w	r9, r9
 8003284:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003288:	d81f      	bhi.n	80032ca <_printf_float+0x17e>
 800328a:	464a      	mov	r2, r9
 800328c:	3901      	subs	r1, #1
 800328e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003292:	910d      	str	r1, [sp, #52]	; 0x34
 8003294:	f7ff ff1b 	bl	80030ce <__exponent>
 8003298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800329a:	4682      	mov	sl, r0
 800329c:	1813      	adds	r3, r2, r0
 800329e:	2a01      	cmp	r2, #1
 80032a0:	6123      	str	r3, [r4, #16]
 80032a2:	dc02      	bgt.n	80032aa <_printf_float+0x15e>
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	07d2      	lsls	r2, r2, #31
 80032a8:	d501      	bpl.n	80032ae <_printf_float+0x162>
 80032aa:	3301      	adds	r3, #1
 80032ac:	6123      	str	r3, [r4, #16]
 80032ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d09b      	beq.n	80031ee <_printf_float+0xa2>
 80032b6:	232d      	movs	r3, #45	; 0x2d
 80032b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032bc:	e797      	b.n	80031ee <_printf_float+0xa2>
 80032be:	2947      	cmp	r1, #71	; 0x47
 80032c0:	d1bc      	bne.n	800323c <_printf_float+0xf0>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ba      	bne.n	800323c <_printf_float+0xf0>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e7b7      	b.n	800323a <_printf_float+0xee>
 80032ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80032ce:	d118      	bne.n	8003302 <_printf_float+0x1b6>
 80032d0:	2900      	cmp	r1, #0
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	dd0b      	ble.n	80032ee <_printf_float+0x1a2>
 80032d6:	6121      	str	r1, [r4, #16]
 80032d8:	b913      	cbnz	r3, 80032e0 <_printf_float+0x194>
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	07d0      	lsls	r0, r2, #31
 80032de:	d502      	bpl.n	80032e6 <_printf_float+0x19a>
 80032e0:	3301      	adds	r3, #1
 80032e2:	440b      	add	r3, r1
 80032e4:	6123      	str	r3, [r4, #16]
 80032e6:	f04f 0a00 	mov.w	sl, #0
 80032ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80032ec:	e7df      	b.n	80032ae <_printf_float+0x162>
 80032ee:	b913      	cbnz	r3, 80032f6 <_printf_float+0x1aa>
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	07d2      	lsls	r2, r2, #31
 80032f4:	d501      	bpl.n	80032fa <_printf_float+0x1ae>
 80032f6:	3302      	adds	r3, #2
 80032f8:	e7f4      	b.n	80032e4 <_printf_float+0x198>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e7f2      	b.n	80032e4 <_printf_float+0x198>
 80032fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003304:	4299      	cmp	r1, r3
 8003306:	db05      	blt.n	8003314 <_printf_float+0x1c8>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	6121      	str	r1, [r4, #16]
 800330c:	07d8      	lsls	r0, r3, #31
 800330e:	d5ea      	bpl.n	80032e6 <_printf_float+0x19a>
 8003310:	1c4b      	adds	r3, r1, #1
 8003312:	e7e7      	b.n	80032e4 <_printf_float+0x198>
 8003314:	2900      	cmp	r1, #0
 8003316:	bfcc      	ite	gt
 8003318:	2201      	movgt	r2, #1
 800331a:	f1c1 0202 	rsble	r2, r1, #2
 800331e:	4413      	add	r3, r2
 8003320:	e7e0      	b.n	80032e4 <_printf_float+0x198>
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	055a      	lsls	r2, r3, #21
 8003326:	d407      	bmi.n	8003338 <_printf_float+0x1ec>
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	4642      	mov	r2, r8
 800332c:	4631      	mov	r1, r6
 800332e:	4628      	mov	r0, r5
 8003330:	47b8      	blx	r7
 8003332:	3001      	adds	r0, #1
 8003334:	d12b      	bne.n	800338e <_printf_float+0x242>
 8003336:	e764      	b.n	8003202 <_printf_float+0xb6>
 8003338:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800333c:	f240 80dd 	bls.w	80034fa <_printf_float+0x3ae>
 8003340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003344:	2200      	movs	r2, #0
 8003346:	2300      	movs	r3, #0
 8003348:	f7fd fb2e 	bl	80009a8 <__aeabi_dcmpeq>
 800334c:	2800      	cmp	r0, #0
 800334e:	d033      	beq.n	80033b8 <_printf_float+0x26c>
 8003350:	2301      	movs	r3, #1
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	4a35      	ldr	r2, [pc, #212]	; (800342c <_printf_float+0x2e0>)
 8003358:	47b8      	blx	r7
 800335a:	3001      	adds	r0, #1
 800335c:	f43f af51 	beq.w	8003202 <_printf_float+0xb6>
 8003360:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003364:	429a      	cmp	r2, r3
 8003366:	db02      	blt.n	800336e <_printf_float+0x222>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	07d8      	lsls	r0, r3, #31
 800336c:	d50f      	bpl.n	800338e <_printf_float+0x242>
 800336e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003372:	4631      	mov	r1, r6
 8003374:	4628      	mov	r0, r5
 8003376:	47b8      	blx	r7
 8003378:	3001      	adds	r0, #1
 800337a:	f43f af42 	beq.w	8003202 <_printf_float+0xb6>
 800337e:	f04f 0800 	mov.w	r8, #0
 8003382:	f104 091a 	add.w	r9, r4, #26
 8003386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003388:	3b01      	subs	r3, #1
 800338a:	4543      	cmp	r3, r8
 800338c:	dc09      	bgt.n	80033a2 <_printf_float+0x256>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	079b      	lsls	r3, r3, #30
 8003392:	f100 8102 	bmi.w	800359a <_printf_float+0x44e>
 8003396:	68e0      	ldr	r0, [r4, #12]
 8003398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800339a:	4298      	cmp	r0, r3
 800339c:	bfb8      	it	lt
 800339e:	4618      	movlt	r0, r3
 80033a0:	e731      	b.n	8003206 <_printf_float+0xba>
 80033a2:	2301      	movs	r3, #1
 80033a4:	464a      	mov	r2, r9
 80033a6:	4631      	mov	r1, r6
 80033a8:	4628      	mov	r0, r5
 80033aa:	47b8      	blx	r7
 80033ac:	3001      	adds	r0, #1
 80033ae:	f43f af28 	beq.w	8003202 <_printf_float+0xb6>
 80033b2:	f108 0801 	add.w	r8, r8, #1
 80033b6:	e7e6      	b.n	8003386 <_printf_float+0x23a>
 80033b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	dc38      	bgt.n	8003430 <_printf_float+0x2e4>
 80033be:	2301      	movs	r3, #1
 80033c0:	4631      	mov	r1, r6
 80033c2:	4628      	mov	r0, r5
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <_printf_float+0x2e0>)
 80033c6:	47b8      	blx	r7
 80033c8:	3001      	adds	r0, #1
 80033ca:	f43f af1a 	beq.w	8003202 <_printf_float+0xb6>
 80033ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033d2:	4313      	orrs	r3, r2
 80033d4:	d102      	bne.n	80033dc <_printf_float+0x290>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	07d9      	lsls	r1, r3, #31
 80033da:	d5d8      	bpl.n	800338e <_printf_float+0x242>
 80033dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033e0:	4631      	mov	r1, r6
 80033e2:	4628      	mov	r0, r5
 80033e4:	47b8      	blx	r7
 80033e6:	3001      	adds	r0, #1
 80033e8:	f43f af0b 	beq.w	8003202 <_printf_float+0xb6>
 80033ec:	f04f 0900 	mov.w	r9, #0
 80033f0:	f104 0a1a 	add.w	sl, r4, #26
 80033f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033f6:	425b      	negs	r3, r3
 80033f8:	454b      	cmp	r3, r9
 80033fa:	dc01      	bgt.n	8003400 <_printf_float+0x2b4>
 80033fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033fe:	e794      	b.n	800332a <_printf_float+0x1de>
 8003400:	2301      	movs	r3, #1
 8003402:	4652      	mov	r2, sl
 8003404:	4631      	mov	r1, r6
 8003406:	4628      	mov	r0, r5
 8003408:	47b8      	blx	r7
 800340a:	3001      	adds	r0, #1
 800340c:	f43f aef9 	beq.w	8003202 <_printf_float+0xb6>
 8003410:	f109 0901 	add.w	r9, r9, #1
 8003414:	e7ee      	b.n	80033f4 <_printf_float+0x2a8>
 8003416:	bf00      	nop
 8003418:	7fefffff 	.word	0x7fefffff
 800341c:	08005c38 	.word	0x08005c38
 8003420:	08005c3c 	.word	0x08005c3c
 8003424:	08005c44 	.word	0x08005c44
 8003428:	08005c40 	.word	0x08005c40
 800342c:	08005c48 	.word	0x08005c48
 8003430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003434:	429a      	cmp	r2, r3
 8003436:	bfa8      	it	ge
 8003438:	461a      	movge	r2, r3
 800343a:	2a00      	cmp	r2, #0
 800343c:	4691      	mov	r9, r2
 800343e:	dc37      	bgt.n	80034b0 <_printf_float+0x364>
 8003440:	f04f 0b00 	mov.w	fp, #0
 8003444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003448:	f104 021a 	add.w	r2, r4, #26
 800344c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003450:	ebaa 0309 	sub.w	r3, sl, r9
 8003454:	455b      	cmp	r3, fp
 8003456:	dc33      	bgt.n	80034c0 <_printf_float+0x374>
 8003458:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800345c:	429a      	cmp	r2, r3
 800345e:	db3b      	blt.n	80034d8 <_printf_float+0x38c>
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	07da      	lsls	r2, r3, #31
 8003464:	d438      	bmi.n	80034d8 <_printf_float+0x38c>
 8003466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003468:	990d      	ldr	r1, [sp, #52]	; 0x34
 800346a:	eba3 020a 	sub.w	r2, r3, sl
 800346e:	eba3 0901 	sub.w	r9, r3, r1
 8003472:	4591      	cmp	r9, r2
 8003474:	bfa8      	it	ge
 8003476:	4691      	movge	r9, r2
 8003478:	f1b9 0f00 	cmp.w	r9, #0
 800347c:	dc34      	bgt.n	80034e8 <_printf_float+0x39c>
 800347e:	f04f 0800 	mov.w	r8, #0
 8003482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003486:	f104 0a1a 	add.w	sl, r4, #26
 800348a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	eba3 0309 	sub.w	r3, r3, r9
 8003494:	4543      	cmp	r3, r8
 8003496:	f77f af7a 	ble.w	800338e <_printf_float+0x242>
 800349a:	2301      	movs	r3, #1
 800349c:	4652      	mov	r2, sl
 800349e:	4631      	mov	r1, r6
 80034a0:	4628      	mov	r0, r5
 80034a2:	47b8      	blx	r7
 80034a4:	3001      	adds	r0, #1
 80034a6:	f43f aeac 	beq.w	8003202 <_printf_float+0xb6>
 80034aa:	f108 0801 	add.w	r8, r8, #1
 80034ae:	e7ec      	b.n	800348a <_printf_float+0x33e>
 80034b0:	4613      	mov	r3, r2
 80034b2:	4631      	mov	r1, r6
 80034b4:	4642      	mov	r2, r8
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	d1c0      	bne.n	8003440 <_printf_float+0x2f4>
 80034be:	e6a0      	b.n	8003202 <_printf_float+0xb6>
 80034c0:	2301      	movs	r3, #1
 80034c2:	4631      	mov	r1, r6
 80034c4:	4628      	mov	r0, r5
 80034c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80034c8:	47b8      	blx	r7
 80034ca:	3001      	adds	r0, #1
 80034cc:	f43f ae99 	beq.w	8003202 <_printf_float+0xb6>
 80034d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034d2:	f10b 0b01 	add.w	fp, fp, #1
 80034d6:	e7b9      	b.n	800344c <_printf_float+0x300>
 80034d8:	4631      	mov	r1, r6
 80034da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	d1bf      	bne.n	8003466 <_printf_float+0x31a>
 80034e6:	e68c      	b.n	8003202 <_printf_float+0xb6>
 80034e8:	464b      	mov	r3, r9
 80034ea:	4631      	mov	r1, r6
 80034ec:	4628      	mov	r0, r5
 80034ee:	eb08 020a 	add.w	r2, r8, sl
 80034f2:	47b8      	blx	r7
 80034f4:	3001      	adds	r0, #1
 80034f6:	d1c2      	bne.n	800347e <_printf_float+0x332>
 80034f8:	e683      	b.n	8003202 <_printf_float+0xb6>
 80034fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034fc:	2a01      	cmp	r2, #1
 80034fe:	dc01      	bgt.n	8003504 <_printf_float+0x3b8>
 8003500:	07db      	lsls	r3, r3, #31
 8003502:	d537      	bpl.n	8003574 <_printf_float+0x428>
 8003504:	2301      	movs	r3, #1
 8003506:	4642      	mov	r2, r8
 8003508:	4631      	mov	r1, r6
 800350a:	4628      	mov	r0, r5
 800350c:	47b8      	blx	r7
 800350e:	3001      	adds	r0, #1
 8003510:	f43f ae77 	beq.w	8003202 <_printf_float+0xb6>
 8003514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003518:	4631      	mov	r1, r6
 800351a:	4628      	mov	r0, r5
 800351c:	47b8      	blx	r7
 800351e:	3001      	adds	r0, #1
 8003520:	f43f ae6f 	beq.w	8003202 <_printf_float+0xb6>
 8003524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003528:	2200      	movs	r2, #0
 800352a:	2300      	movs	r3, #0
 800352c:	f7fd fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 8003530:	b9d8      	cbnz	r0, 800356a <_printf_float+0x41e>
 8003532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003534:	f108 0201 	add.w	r2, r8, #1
 8003538:	3b01      	subs	r3, #1
 800353a:	4631      	mov	r1, r6
 800353c:	4628      	mov	r0, r5
 800353e:	47b8      	blx	r7
 8003540:	3001      	adds	r0, #1
 8003542:	d10e      	bne.n	8003562 <_printf_float+0x416>
 8003544:	e65d      	b.n	8003202 <_printf_float+0xb6>
 8003546:	2301      	movs	r3, #1
 8003548:	464a      	mov	r2, r9
 800354a:	4631      	mov	r1, r6
 800354c:	4628      	mov	r0, r5
 800354e:	47b8      	blx	r7
 8003550:	3001      	adds	r0, #1
 8003552:	f43f ae56 	beq.w	8003202 <_printf_float+0xb6>
 8003556:	f108 0801 	add.w	r8, r8, #1
 800355a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800355c:	3b01      	subs	r3, #1
 800355e:	4543      	cmp	r3, r8
 8003560:	dcf1      	bgt.n	8003546 <_printf_float+0x3fa>
 8003562:	4653      	mov	r3, sl
 8003564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003568:	e6e0      	b.n	800332c <_printf_float+0x1e0>
 800356a:	f04f 0800 	mov.w	r8, #0
 800356e:	f104 091a 	add.w	r9, r4, #26
 8003572:	e7f2      	b.n	800355a <_printf_float+0x40e>
 8003574:	2301      	movs	r3, #1
 8003576:	4642      	mov	r2, r8
 8003578:	e7df      	b.n	800353a <_printf_float+0x3ee>
 800357a:	2301      	movs	r3, #1
 800357c:	464a      	mov	r2, r9
 800357e:	4631      	mov	r1, r6
 8003580:	4628      	mov	r0, r5
 8003582:	47b8      	blx	r7
 8003584:	3001      	adds	r0, #1
 8003586:	f43f ae3c 	beq.w	8003202 <_printf_float+0xb6>
 800358a:	f108 0801 	add.w	r8, r8, #1
 800358e:	68e3      	ldr	r3, [r4, #12]
 8003590:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003592:	1a5b      	subs	r3, r3, r1
 8003594:	4543      	cmp	r3, r8
 8003596:	dcf0      	bgt.n	800357a <_printf_float+0x42e>
 8003598:	e6fd      	b.n	8003396 <_printf_float+0x24a>
 800359a:	f04f 0800 	mov.w	r8, #0
 800359e:	f104 0919 	add.w	r9, r4, #25
 80035a2:	e7f4      	b.n	800358e <_printf_float+0x442>

080035a4 <_printf_common>:
 80035a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a8:	4616      	mov	r6, r2
 80035aa:	4699      	mov	r9, r3
 80035ac:	688a      	ldr	r2, [r1, #8]
 80035ae:	690b      	ldr	r3, [r1, #16]
 80035b0:	4607      	mov	r7, r0
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bfb8      	it	lt
 80035b6:	4613      	movlt	r3, r2
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035be:	460c      	mov	r4, r1
 80035c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035c4:	b10a      	cbz	r2, 80035ca <_printf_common+0x26>
 80035c6:	3301      	adds	r3, #1
 80035c8:	6033      	str	r3, [r6, #0]
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	0699      	lsls	r1, r3, #26
 80035ce:	bf42      	ittt	mi
 80035d0:	6833      	ldrmi	r3, [r6, #0]
 80035d2:	3302      	addmi	r3, #2
 80035d4:	6033      	strmi	r3, [r6, #0]
 80035d6:	6825      	ldr	r5, [r4, #0]
 80035d8:	f015 0506 	ands.w	r5, r5, #6
 80035dc:	d106      	bne.n	80035ec <_printf_common+0x48>
 80035de:	f104 0a19 	add.w	sl, r4, #25
 80035e2:	68e3      	ldr	r3, [r4, #12]
 80035e4:	6832      	ldr	r2, [r6, #0]
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	dc28      	bgt.n	800363e <_printf_common+0x9a>
 80035ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035f0:	1e13      	subs	r3, r2, #0
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	bf18      	it	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	0692      	lsls	r2, r2, #26
 80035fa:	d42d      	bmi.n	8003658 <_printf_common+0xb4>
 80035fc:	4649      	mov	r1, r9
 80035fe:	4638      	mov	r0, r7
 8003600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003604:	47c0      	blx	r8
 8003606:	3001      	adds	r0, #1
 8003608:	d020      	beq.n	800364c <_printf_common+0xa8>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	68e5      	ldr	r5, [r4, #12]
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf18      	it	ne
 8003616:	2500      	movne	r5, #0
 8003618:	6832      	ldr	r2, [r6, #0]
 800361a:	f04f 0600 	mov.w	r6, #0
 800361e:	68a3      	ldr	r3, [r4, #8]
 8003620:	bf08      	it	eq
 8003622:	1aad      	subeq	r5, r5, r2
 8003624:	6922      	ldr	r2, [r4, #16]
 8003626:	bf08      	it	eq
 8003628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800362c:	4293      	cmp	r3, r2
 800362e:	bfc4      	itt	gt
 8003630:	1a9b      	subgt	r3, r3, r2
 8003632:	18ed      	addgt	r5, r5, r3
 8003634:	341a      	adds	r4, #26
 8003636:	42b5      	cmp	r5, r6
 8003638:	d11a      	bne.n	8003670 <_printf_common+0xcc>
 800363a:	2000      	movs	r0, #0
 800363c:	e008      	b.n	8003650 <_printf_common+0xac>
 800363e:	2301      	movs	r3, #1
 8003640:	4652      	mov	r2, sl
 8003642:	4649      	mov	r1, r9
 8003644:	4638      	mov	r0, r7
 8003646:	47c0      	blx	r8
 8003648:	3001      	adds	r0, #1
 800364a:	d103      	bne.n	8003654 <_printf_common+0xb0>
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003654:	3501      	adds	r5, #1
 8003656:	e7c4      	b.n	80035e2 <_printf_common+0x3e>
 8003658:	2030      	movs	r0, #48	; 0x30
 800365a:	18e1      	adds	r1, r4, r3
 800365c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003666:	4422      	add	r2, r4
 8003668:	3302      	adds	r3, #2
 800366a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800366e:	e7c5      	b.n	80035fc <_printf_common+0x58>
 8003670:	2301      	movs	r3, #1
 8003672:	4622      	mov	r2, r4
 8003674:	4649      	mov	r1, r9
 8003676:	4638      	mov	r0, r7
 8003678:	47c0      	blx	r8
 800367a:	3001      	adds	r0, #1
 800367c:	d0e6      	beq.n	800364c <_printf_common+0xa8>
 800367e:	3601      	adds	r6, #1
 8003680:	e7d9      	b.n	8003636 <_printf_common+0x92>
	...

08003684 <_printf_i>:
 8003684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	7e0f      	ldrb	r7, [r1, #24]
 800368a:	4691      	mov	r9, r2
 800368c:	2f78      	cmp	r7, #120	; 0x78
 800368e:	4680      	mov	r8, r0
 8003690:	460c      	mov	r4, r1
 8003692:	469a      	mov	sl, r3
 8003694:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800369a:	d807      	bhi.n	80036ac <_printf_i+0x28>
 800369c:	2f62      	cmp	r7, #98	; 0x62
 800369e:	d80a      	bhi.n	80036b6 <_printf_i+0x32>
 80036a0:	2f00      	cmp	r7, #0
 80036a2:	f000 80d9 	beq.w	8003858 <_printf_i+0x1d4>
 80036a6:	2f58      	cmp	r7, #88	; 0x58
 80036a8:	f000 80a4 	beq.w	80037f4 <_printf_i+0x170>
 80036ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036b4:	e03a      	b.n	800372c <_printf_i+0xa8>
 80036b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ba:	2b15      	cmp	r3, #21
 80036bc:	d8f6      	bhi.n	80036ac <_printf_i+0x28>
 80036be:	a101      	add	r1, pc, #4	; (adr r1, 80036c4 <_printf_i+0x40>)
 80036c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036c4:	0800371d 	.word	0x0800371d
 80036c8:	08003731 	.word	0x08003731
 80036cc:	080036ad 	.word	0x080036ad
 80036d0:	080036ad 	.word	0x080036ad
 80036d4:	080036ad 	.word	0x080036ad
 80036d8:	080036ad 	.word	0x080036ad
 80036dc:	08003731 	.word	0x08003731
 80036e0:	080036ad 	.word	0x080036ad
 80036e4:	080036ad 	.word	0x080036ad
 80036e8:	080036ad 	.word	0x080036ad
 80036ec:	080036ad 	.word	0x080036ad
 80036f0:	0800383f 	.word	0x0800383f
 80036f4:	08003761 	.word	0x08003761
 80036f8:	08003821 	.word	0x08003821
 80036fc:	080036ad 	.word	0x080036ad
 8003700:	080036ad 	.word	0x080036ad
 8003704:	08003861 	.word	0x08003861
 8003708:	080036ad 	.word	0x080036ad
 800370c:	08003761 	.word	0x08003761
 8003710:	080036ad 	.word	0x080036ad
 8003714:	080036ad 	.word	0x080036ad
 8003718:	08003829 	.word	0x08003829
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	602a      	str	r2, [r5, #0]
 8003724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800372c:	2301      	movs	r3, #1
 800372e:	e0a4      	b.n	800387a <_printf_i+0x1f6>
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	6829      	ldr	r1, [r5, #0]
 8003734:	0606      	lsls	r6, r0, #24
 8003736:	f101 0304 	add.w	r3, r1, #4
 800373a:	d50a      	bpl.n	8003752 <_printf_i+0xce>
 800373c:	680e      	ldr	r6, [r1, #0]
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	2e00      	cmp	r6, #0
 8003742:	da03      	bge.n	800374c <_printf_i+0xc8>
 8003744:	232d      	movs	r3, #45	; 0x2d
 8003746:	4276      	negs	r6, r6
 8003748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374c:	230a      	movs	r3, #10
 800374e:	485e      	ldr	r0, [pc, #376]	; (80038c8 <_printf_i+0x244>)
 8003750:	e019      	b.n	8003786 <_printf_i+0x102>
 8003752:	680e      	ldr	r6, [r1, #0]
 8003754:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	bf18      	it	ne
 800375c:	b236      	sxthne	r6, r6
 800375e:	e7ef      	b.n	8003740 <_printf_i+0xbc>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	6820      	ldr	r0, [r4, #0]
 8003764:	1d19      	adds	r1, r3, #4
 8003766:	6029      	str	r1, [r5, #0]
 8003768:	0601      	lsls	r1, r0, #24
 800376a:	d501      	bpl.n	8003770 <_printf_i+0xec>
 800376c:	681e      	ldr	r6, [r3, #0]
 800376e:	e002      	b.n	8003776 <_printf_i+0xf2>
 8003770:	0646      	lsls	r6, r0, #25
 8003772:	d5fb      	bpl.n	800376c <_printf_i+0xe8>
 8003774:	881e      	ldrh	r6, [r3, #0]
 8003776:	2f6f      	cmp	r7, #111	; 0x6f
 8003778:	bf0c      	ite	eq
 800377a:	2308      	moveq	r3, #8
 800377c:	230a      	movne	r3, #10
 800377e:	4852      	ldr	r0, [pc, #328]	; (80038c8 <_printf_i+0x244>)
 8003780:	2100      	movs	r1, #0
 8003782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003786:	6865      	ldr	r5, [r4, #4]
 8003788:	2d00      	cmp	r5, #0
 800378a:	bfa8      	it	ge
 800378c:	6821      	ldrge	r1, [r4, #0]
 800378e:	60a5      	str	r5, [r4, #8]
 8003790:	bfa4      	itt	ge
 8003792:	f021 0104 	bicge.w	r1, r1, #4
 8003796:	6021      	strge	r1, [r4, #0]
 8003798:	b90e      	cbnz	r6, 800379e <_printf_i+0x11a>
 800379a:	2d00      	cmp	r5, #0
 800379c:	d04d      	beq.n	800383a <_printf_i+0x1b6>
 800379e:	4615      	mov	r5, r2
 80037a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80037a4:	fb03 6711 	mls	r7, r3, r1, r6
 80037a8:	5dc7      	ldrb	r7, [r0, r7]
 80037aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037ae:	4637      	mov	r7, r6
 80037b0:	42bb      	cmp	r3, r7
 80037b2:	460e      	mov	r6, r1
 80037b4:	d9f4      	bls.n	80037a0 <_printf_i+0x11c>
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d10b      	bne.n	80037d2 <_printf_i+0x14e>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	07de      	lsls	r6, r3, #31
 80037be:	d508      	bpl.n	80037d2 <_printf_i+0x14e>
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	6861      	ldr	r1, [r4, #4]
 80037c4:	4299      	cmp	r1, r3
 80037c6:	bfde      	ittt	le
 80037c8:	2330      	movle	r3, #48	; 0x30
 80037ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037d2:	1b52      	subs	r2, r2, r5
 80037d4:	6122      	str	r2, [r4, #16]
 80037d6:	464b      	mov	r3, r9
 80037d8:	4621      	mov	r1, r4
 80037da:	4640      	mov	r0, r8
 80037dc:	f8cd a000 	str.w	sl, [sp]
 80037e0:	aa03      	add	r2, sp, #12
 80037e2:	f7ff fedf 	bl	80035a4 <_printf_common>
 80037e6:	3001      	adds	r0, #1
 80037e8:	d14c      	bne.n	8003884 <_printf_i+0x200>
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295
 80037ee:	b004      	add	sp, #16
 80037f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f4:	4834      	ldr	r0, [pc, #208]	; (80038c8 <_printf_i+0x244>)
 80037f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037fa:	6829      	ldr	r1, [r5, #0]
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003802:	6029      	str	r1, [r5, #0]
 8003804:	061d      	lsls	r5, r3, #24
 8003806:	d514      	bpl.n	8003832 <_printf_i+0x1ae>
 8003808:	07df      	lsls	r7, r3, #31
 800380a:	bf44      	itt	mi
 800380c:	f043 0320 	orrmi.w	r3, r3, #32
 8003810:	6023      	strmi	r3, [r4, #0]
 8003812:	b91e      	cbnz	r6, 800381c <_printf_i+0x198>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f023 0320 	bic.w	r3, r3, #32
 800381a:	6023      	str	r3, [r4, #0]
 800381c:	2310      	movs	r3, #16
 800381e:	e7af      	b.n	8003780 <_printf_i+0xfc>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	f043 0320 	orr.w	r3, r3, #32
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	2378      	movs	r3, #120	; 0x78
 800382a:	4828      	ldr	r0, [pc, #160]	; (80038cc <_printf_i+0x248>)
 800382c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003830:	e7e3      	b.n	80037fa <_printf_i+0x176>
 8003832:	0659      	lsls	r1, r3, #25
 8003834:	bf48      	it	mi
 8003836:	b2b6      	uxthmi	r6, r6
 8003838:	e7e6      	b.n	8003808 <_printf_i+0x184>
 800383a:	4615      	mov	r5, r2
 800383c:	e7bb      	b.n	80037b6 <_printf_i+0x132>
 800383e:	682b      	ldr	r3, [r5, #0]
 8003840:	6826      	ldr	r6, [r4, #0]
 8003842:	1d18      	adds	r0, r3, #4
 8003844:	6961      	ldr	r1, [r4, #20]
 8003846:	6028      	str	r0, [r5, #0]
 8003848:	0635      	lsls	r5, r6, #24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	d501      	bpl.n	8003852 <_printf_i+0x1ce>
 800384e:	6019      	str	r1, [r3, #0]
 8003850:	e002      	b.n	8003858 <_printf_i+0x1d4>
 8003852:	0670      	lsls	r0, r6, #25
 8003854:	d5fb      	bpl.n	800384e <_printf_i+0x1ca>
 8003856:	8019      	strh	r1, [r3, #0]
 8003858:	2300      	movs	r3, #0
 800385a:	4615      	mov	r5, r2
 800385c:	6123      	str	r3, [r4, #16]
 800385e:	e7ba      	b.n	80037d6 <_printf_i+0x152>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	2100      	movs	r1, #0
 8003864:	1d1a      	adds	r2, r3, #4
 8003866:	602a      	str	r2, [r5, #0]
 8003868:	681d      	ldr	r5, [r3, #0]
 800386a:	6862      	ldr	r2, [r4, #4]
 800386c:	4628      	mov	r0, r5
 800386e:	f001 fa21 	bl	8004cb4 <memchr>
 8003872:	b108      	cbz	r0, 8003878 <_printf_i+0x1f4>
 8003874:	1b40      	subs	r0, r0, r5
 8003876:	6060      	str	r0, [r4, #4]
 8003878:	6863      	ldr	r3, [r4, #4]
 800387a:	6123      	str	r3, [r4, #16]
 800387c:	2300      	movs	r3, #0
 800387e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003882:	e7a8      	b.n	80037d6 <_printf_i+0x152>
 8003884:	462a      	mov	r2, r5
 8003886:	4649      	mov	r1, r9
 8003888:	4640      	mov	r0, r8
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	47d0      	blx	sl
 800388e:	3001      	adds	r0, #1
 8003890:	d0ab      	beq.n	80037ea <_printf_i+0x166>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	079b      	lsls	r3, r3, #30
 8003896:	d413      	bmi.n	80038c0 <_printf_i+0x23c>
 8003898:	68e0      	ldr	r0, [r4, #12]
 800389a:	9b03      	ldr	r3, [sp, #12]
 800389c:	4298      	cmp	r0, r3
 800389e:	bfb8      	it	lt
 80038a0:	4618      	movlt	r0, r3
 80038a2:	e7a4      	b.n	80037ee <_printf_i+0x16a>
 80038a4:	2301      	movs	r3, #1
 80038a6:	4632      	mov	r2, r6
 80038a8:	4649      	mov	r1, r9
 80038aa:	4640      	mov	r0, r8
 80038ac:	47d0      	blx	sl
 80038ae:	3001      	adds	r0, #1
 80038b0:	d09b      	beq.n	80037ea <_printf_i+0x166>
 80038b2:	3501      	adds	r5, #1
 80038b4:	68e3      	ldr	r3, [r4, #12]
 80038b6:	9903      	ldr	r1, [sp, #12]
 80038b8:	1a5b      	subs	r3, r3, r1
 80038ba:	42ab      	cmp	r3, r5
 80038bc:	dcf2      	bgt.n	80038a4 <_printf_i+0x220>
 80038be:	e7eb      	b.n	8003898 <_printf_i+0x214>
 80038c0:	2500      	movs	r5, #0
 80038c2:	f104 0619 	add.w	r6, r4, #25
 80038c6:	e7f5      	b.n	80038b4 <_printf_i+0x230>
 80038c8:	08005c4a 	.word	0x08005c4a
 80038cc:	08005c5b 	.word	0x08005c5b

080038d0 <iprintf>:
 80038d0:	b40f      	push	{r0, r1, r2, r3}
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <iprintf+0x2c>)
 80038d4:	b513      	push	{r0, r1, r4, lr}
 80038d6:	681c      	ldr	r4, [r3, #0]
 80038d8:	b124      	cbz	r4, 80038e4 <iprintf+0x14>
 80038da:	69a3      	ldr	r3, [r4, #24]
 80038dc:	b913      	cbnz	r3, 80038e4 <iprintf+0x14>
 80038de:	4620      	mov	r0, r4
 80038e0:	f001 f8d6 	bl	8004a90 <__sinit>
 80038e4:	ab05      	add	r3, sp, #20
 80038e6:	4620      	mov	r0, r4
 80038e8:	9a04      	ldr	r2, [sp, #16]
 80038ea:	68a1      	ldr	r1, [r4, #8]
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	f001 fe97 	bl	8005620 <_vfiprintf_r>
 80038f2:	b002      	add	sp, #8
 80038f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f8:	b004      	add	sp, #16
 80038fa:	4770      	bx	lr
 80038fc:	2000000c 	.word	0x2000000c

08003900 <_puts_r>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	460e      	mov	r6, r1
 8003904:	4605      	mov	r5, r0
 8003906:	b118      	cbz	r0, 8003910 <_puts_r+0x10>
 8003908:	6983      	ldr	r3, [r0, #24]
 800390a:	b90b      	cbnz	r3, 8003910 <_puts_r+0x10>
 800390c:	f001 f8c0 	bl	8004a90 <__sinit>
 8003910:	69ab      	ldr	r3, [r5, #24]
 8003912:	68ac      	ldr	r4, [r5, #8]
 8003914:	b913      	cbnz	r3, 800391c <_puts_r+0x1c>
 8003916:	4628      	mov	r0, r5
 8003918:	f001 f8ba 	bl	8004a90 <__sinit>
 800391c:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <_puts_r+0xd0>)
 800391e:	429c      	cmp	r4, r3
 8003920:	d120      	bne.n	8003964 <_puts_r+0x64>
 8003922:	686c      	ldr	r4, [r5, #4]
 8003924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003926:	07db      	lsls	r3, r3, #31
 8003928:	d405      	bmi.n	8003936 <_puts_r+0x36>
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	0598      	lsls	r0, r3, #22
 800392e:	d402      	bmi.n	8003936 <_puts_r+0x36>
 8003930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003932:	f001 f950 	bl	8004bd6 <__retarget_lock_acquire_recursive>
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	0719      	lsls	r1, r3, #28
 800393a:	d51d      	bpl.n	8003978 <_puts_r+0x78>
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	b1db      	cbz	r3, 8003978 <_puts_r+0x78>
 8003940:	3e01      	subs	r6, #1
 8003942:	68a3      	ldr	r3, [r4, #8]
 8003944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003948:	3b01      	subs	r3, #1
 800394a:	60a3      	str	r3, [r4, #8]
 800394c:	bb39      	cbnz	r1, 800399e <_puts_r+0x9e>
 800394e:	2b00      	cmp	r3, #0
 8003950:	da38      	bge.n	80039c4 <_puts_r+0xc4>
 8003952:	4622      	mov	r2, r4
 8003954:	210a      	movs	r1, #10
 8003956:	4628      	mov	r0, r5
 8003958:	f000 f848 	bl	80039ec <__swbuf_r>
 800395c:	3001      	adds	r0, #1
 800395e:	d011      	beq.n	8003984 <_puts_r+0x84>
 8003960:	250a      	movs	r5, #10
 8003962:	e011      	b.n	8003988 <_puts_r+0x88>
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <_puts_r+0xd4>)
 8003966:	429c      	cmp	r4, r3
 8003968:	d101      	bne.n	800396e <_puts_r+0x6e>
 800396a:	68ac      	ldr	r4, [r5, #8]
 800396c:	e7da      	b.n	8003924 <_puts_r+0x24>
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <_puts_r+0xd8>)
 8003970:	429c      	cmp	r4, r3
 8003972:	bf08      	it	eq
 8003974:	68ec      	ldreq	r4, [r5, #12]
 8003976:	e7d5      	b.n	8003924 <_puts_r+0x24>
 8003978:	4621      	mov	r1, r4
 800397a:	4628      	mov	r0, r5
 800397c:	f000 f888 	bl	8003a90 <__swsetup_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	d0dd      	beq.n	8003940 <_puts_r+0x40>
 8003984:	f04f 35ff 	mov.w	r5, #4294967295
 8003988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800398a:	07da      	lsls	r2, r3, #31
 800398c:	d405      	bmi.n	800399a <_puts_r+0x9a>
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	059b      	lsls	r3, r3, #22
 8003992:	d402      	bmi.n	800399a <_puts_r+0x9a>
 8003994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003996:	f001 f91f 	bl	8004bd8 <__retarget_lock_release_recursive>
 800399a:	4628      	mov	r0, r5
 800399c:	bd70      	pop	{r4, r5, r6, pc}
 800399e:	2b00      	cmp	r3, #0
 80039a0:	da04      	bge.n	80039ac <_puts_r+0xac>
 80039a2:	69a2      	ldr	r2, [r4, #24]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	dc06      	bgt.n	80039b6 <_puts_r+0xb6>
 80039a8:	290a      	cmp	r1, #10
 80039aa:	d004      	beq.n	80039b6 <_puts_r+0xb6>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	6022      	str	r2, [r4, #0]
 80039b2:	7019      	strb	r1, [r3, #0]
 80039b4:	e7c5      	b.n	8003942 <_puts_r+0x42>
 80039b6:	4622      	mov	r2, r4
 80039b8:	4628      	mov	r0, r5
 80039ba:	f000 f817 	bl	80039ec <__swbuf_r>
 80039be:	3001      	adds	r0, #1
 80039c0:	d1bf      	bne.n	8003942 <_puts_r+0x42>
 80039c2:	e7df      	b.n	8003984 <_puts_r+0x84>
 80039c4:	250a      	movs	r5, #10
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	6022      	str	r2, [r4, #0]
 80039cc:	701d      	strb	r5, [r3, #0]
 80039ce:	e7db      	b.n	8003988 <_puts_r+0x88>
 80039d0:	08005d1c 	.word	0x08005d1c
 80039d4:	08005d3c 	.word	0x08005d3c
 80039d8:	08005cfc 	.word	0x08005cfc

080039dc <puts>:
 80039dc:	4b02      	ldr	r3, [pc, #8]	; (80039e8 <puts+0xc>)
 80039de:	4601      	mov	r1, r0
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	f7ff bf8d 	b.w	8003900 <_puts_r>
 80039e6:	bf00      	nop
 80039e8:	2000000c 	.word	0x2000000c

080039ec <__swbuf_r>:
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	460e      	mov	r6, r1
 80039f0:	4614      	mov	r4, r2
 80039f2:	4605      	mov	r5, r0
 80039f4:	b118      	cbz	r0, 80039fe <__swbuf_r+0x12>
 80039f6:	6983      	ldr	r3, [r0, #24]
 80039f8:	b90b      	cbnz	r3, 80039fe <__swbuf_r+0x12>
 80039fa:	f001 f849 	bl	8004a90 <__sinit>
 80039fe:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <__swbuf_r+0x98>)
 8003a00:	429c      	cmp	r4, r3
 8003a02:	d12b      	bne.n	8003a5c <__swbuf_r+0x70>
 8003a04:	686c      	ldr	r4, [r5, #4]
 8003a06:	69a3      	ldr	r3, [r4, #24]
 8003a08:	60a3      	str	r3, [r4, #8]
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	071a      	lsls	r2, r3, #28
 8003a0e:	d52f      	bpl.n	8003a70 <__swbuf_r+0x84>
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	b36b      	cbz	r3, 8003a70 <__swbuf_r+0x84>
 8003a14:	6923      	ldr	r3, [r4, #16]
 8003a16:	6820      	ldr	r0, [r4, #0]
 8003a18:	b2f6      	uxtb	r6, r6
 8003a1a:	1ac0      	subs	r0, r0, r3
 8003a1c:	6963      	ldr	r3, [r4, #20]
 8003a1e:	4637      	mov	r7, r6
 8003a20:	4283      	cmp	r3, r0
 8003a22:	dc04      	bgt.n	8003a2e <__swbuf_r+0x42>
 8003a24:	4621      	mov	r1, r4
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 ff9e 	bl	8004968 <_fflush_r>
 8003a2c:	bb30      	cbnz	r0, 8003a7c <__swbuf_r+0x90>
 8003a2e:	68a3      	ldr	r3, [r4, #8]
 8003a30:	3001      	adds	r0, #1
 8003a32:	3b01      	subs	r3, #1
 8003a34:	60a3      	str	r3, [r4, #8]
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	6022      	str	r2, [r4, #0]
 8003a3c:	701e      	strb	r6, [r3, #0]
 8003a3e:	6963      	ldr	r3, [r4, #20]
 8003a40:	4283      	cmp	r3, r0
 8003a42:	d004      	beq.n	8003a4e <__swbuf_r+0x62>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	07db      	lsls	r3, r3, #31
 8003a48:	d506      	bpl.n	8003a58 <__swbuf_r+0x6c>
 8003a4a:	2e0a      	cmp	r6, #10
 8003a4c:	d104      	bne.n	8003a58 <__swbuf_r+0x6c>
 8003a4e:	4621      	mov	r1, r4
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 ff89 	bl	8004968 <_fflush_r>
 8003a56:	b988      	cbnz	r0, 8003a7c <__swbuf_r+0x90>
 8003a58:	4638      	mov	r0, r7
 8003a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <__swbuf_r+0x9c>)
 8003a5e:	429c      	cmp	r4, r3
 8003a60:	d101      	bne.n	8003a66 <__swbuf_r+0x7a>
 8003a62:	68ac      	ldr	r4, [r5, #8]
 8003a64:	e7cf      	b.n	8003a06 <__swbuf_r+0x1a>
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <__swbuf_r+0xa0>)
 8003a68:	429c      	cmp	r4, r3
 8003a6a:	bf08      	it	eq
 8003a6c:	68ec      	ldreq	r4, [r5, #12]
 8003a6e:	e7ca      	b.n	8003a06 <__swbuf_r+0x1a>
 8003a70:	4621      	mov	r1, r4
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 f80c 	bl	8003a90 <__swsetup_r>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d0cb      	beq.n	8003a14 <__swbuf_r+0x28>
 8003a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8003a80:	e7ea      	b.n	8003a58 <__swbuf_r+0x6c>
 8003a82:	bf00      	nop
 8003a84:	08005d1c 	.word	0x08005d1c
 8003a88:	08005d3c 	.word	0x08005d3c
 8003a8c:	08005cfc 	.word	0x08005cfc

08003a90 <__swsetup_r>:
 8003a90:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <__swsetup_r+0xcc>)
 8003a92:	b570      	push	{r4, r5, r6, lr}
 8003a94:	681d      	ldr	r5, [r3, #0]
 8003a96:	4606      	mov	r6, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	b125      	cbz	r5, 8003aa6 <__swsetup_r+0x16>
 8003a9c:	69ab      	ldr	r3, [r5, #24]
 8003a9e:	b913      	cbnz	r3, 8003aa6 <__swsetup_r+0x16>
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f000 fff5 	bl	8004a90 <__sinit>
 8003aa6:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <__swsetup_r+0xd0>)
 8003aa8:	429c      	cmp	r4, r3
 8003aaa:	d10f      	bne.n	8003acc <__swsetup_r+0x3c>
 8003aac:	686c      	ldr	r4, [r5, #4]
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ab4:	0719      	lsls	r1, r3, #28
 8003ab6:	d42c      	bmi.n	8003b12 <__swsetup_r+0x82>
 8003ab8:	06dd      	lsls	r5, r3, #27
 8003aba:	d411      	bmi.n	8003ae0 <__swsetup_r+0x50>
 8003abc:	2309      	movs	r3, #9
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	e03e      	b.n	8003b4a <__swsetup_r+0xba>
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <__swsetup_r+0xd4>)
 8003ace:	429c      	cmp	r4, r3
 8003ad0:	d101      	bne.n	8003ad6 <__swsetup_r+0x46>
 8003ad2:	68ac      	ldr	r4, [r5, #8]
 8003ad4:	e7eb      	b.n	8003aae <__swsetup_r+0x1e>
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <__swsetup_r+0xd8>)
 8003ad8:	429c      	cmp	r4, r3
 8003ada:	bf08      	it	eq
 8003adc:	68ec      	ldreq	r4, [r5, #12]
 8003ade:	e7e6      	b.n	8003aae <__swsetup_r+0x1e>
 8003ae0:	0758      	lsls	r0, r3, #29
 8003ae2:	d512      	bpl.n	8003b0a <__swsetup_r+0x7a>
 8003ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ae6:	b141      	cbz	r1, 8003afa <__swsetup_r+0x6a>
 8003ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aec:	4299      	cmp	r1, r3
 8003aee:	d002      	beq.n	8003af6 <__swsetup_r+0x66>
 8003af0:	4630      	mov	r0, r6
 8003af2:	f001 fc91 	bl	8005418 <_free_r>
 8003af6:	2300      	movs	r3, #0
 8003af8:	6363      	str	r3, [r4, #52]	; 0x34
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	2300      	movs	r3, #0
 8003b04:	6063      	str	r3, [r4, #4]
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	f043 0308 	orr.w	r3, r3, #8
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	6923      	ldr	r3, [r4, #16]
 8003b14:	b94b      	cbnz	r3, 8003b2a <__swsetup_r+0x9a>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b20:	d003      	beq.n	8003b2a <__swsetup_r+0x9a>
 8003b22:	4621      	mov	r1, r4
 8003b24:	4630      	mov	r0, r6
 8003b26:	f001 f87d 	bl	8004c24 <__smakebuf_r>
 8003b2a:	89a0      	ldrh	r0, [r4, #12]
 8003b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b30:	f010 0301 	ands.w	r3, r0, #1
 8003b34:	d00a      	beq.n	8003b4c <__swsetup_r+0xbc>
 8003b36:	2300      	movs	r3, #0
 8003b38:	60a3      	str	r3, [r4, #8]
 8003b3a:	6963      	ldr	r3, [r4, #20]
 8003b3c:	425b      	negs	r3, r3
 8003b3e:	61a3      	str	r3, [r4, #24]
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	b943      	cbnz	r3, 8003b56 <__swsetup_r+0xc6>
 8003b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b48:	d1ba      	bne.n	8003ac0 <__swsetup_r+0x30>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	0781      	lsls	r1, r0, #30
 8003b4e:	bf58      	it	pl
 8003b50:	6963      	ldrpl	r3, [r4, #20]
 8003b52:	60a3      	str	r3, [r4, #8]
 8003b54:	e7f4      	b.n	8003b40 <__swsetup_r+0xb0>
 8003b56:	2000      	movs	r0, #0
 8003b58:	e7f7      	b.n	8003b4a <__swsetup_r+0xba>
 8003b5a:	bf00      	nop
 8003b5c:	2000000c 	.word	0x2000000c
 8003b60:	08005d1c 	.word	0x08005d1c
 8003b64:	08005d3c 	.word	0x08005d3c
 8003b68:	08005cfc 	.word	0x08005cfc

08003b6c <quorem>:
 8003b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	6903      	ldr	r3, [r0, #16]
 8003b72:	690c      	ldr	r4, [r1, #16]
 8003b74:	4607      	mov	r7, r0
 8003b76:	42a3      	cmp	r3, r4
 8003b78:	f2c0 8082 	blt.w	8003c80 <quorem+0x114>
 8003b7c:	3c01      	subs	r4, #1
 8003b7e:	f100 0514 	add.w	r5, r0, #20
 8003b82:	f101 0814 	add.w	r8, r1, #20
 8003b86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b94:	3301      	adds	r3, #1
 8003b96:	429a      	cmp	r2, r3
 8003b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ba4:	d331      	bcc.n	8003c0a <quorem+0x9e>
 8003ba6:	f04f 0e00 	mov.w	lr, #0
 8003baa:	4640      	mov	r0, r8
 8003bac:	46ac      	mov	ip, r5
 8003bae:	46f2      	mov	sl, lr
 8003bb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bb4:	b293      	uxth	r3, r2
 8003bb6:	fb06 e303 	mla	r3, r6, r3, lr
 8003bba:	0c12      	lsrs	r2, r2, #16
 8003bbc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	fb06 e202 	mla	r2, r6, r2, lr
 8003bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8003bca:	f8dc a000 	ldr.w	sl, [ip]
 8003bce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bd2:	fa1f fa8a 	uxth.w	sl, sl
 8003bd6:	4453      	add	r3, sl
 8003bd8:	f8dc a000 	ldr.w	sl, [ip]
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003be2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bec:	4581      	cmp	r9, r0
 8003bee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8003bf6:	d2db      	bcs.n	8003bb0 <quorem+0x44>
 8003bf8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bfc:	b92b      	cbnz	r3, 8003c0a <quorem+0x9e>
 8003bfe:	9b01      	ldr	r3, [sp, #4]
 8003c00:	3b04      	subs	r3, #4
 8003c02:	429d      	cmp	r5, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	d32f      	bcc.n	8003c68 <quorem+0xfc>
 8003c08:	613c      	str	r4, [r7, #16]
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f001 faec 	bl	80051e8 <__mcmp>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	db25      	blt.n	8003c60 <quorem+0xf4>
 8003c14:	4628      	mov	r0, r5
 8003c16:	f04f 0c00 	mov.w	ip, #0
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	f858 1b04 	ldr.w	r1, [r8], #4
 8003c20:	f8d0 e000 	ldr.w	lr, [r0]
 8003c24:	b28b      	uxth	r3, r1
 8003c26:	ebac 0303 	sub.w	r3, ip, r3
 8003c2a:	fa1f f28e 	uxth.w	r2, lr
 8003c2e:	4413      	add	r3, r2
 8003c30:	0c0a      	lsrs	r2, r1, #16
 8003c32:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c40:	45c1      	cmp	r9, r8
 8003c42:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c46:	f840 3b04 	str.w	r3, [r0], #4
 8003c4a:	d2e7      	bcs.n	8003c1c <quorem+0xb0>
 8003c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c54:	b922      	cbnz	r2, 8003c60 <quorem+0xf4>
 8003c56:	3b04      	subs	r3, #4
 8003c58:	429d      	cmp	r5, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	d30a      	bcc.n	8003c74 <quorem+0x108>
 8003c5e:	613c      	str	r4, [r7, #16]
 8003c60:	4630      	mov	r0, r6
 8003c62:	b003      	add	sp, #12
 8003c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	3b04      	subs	r3, #4
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	d1cb      	bne.n	8003c08 <quorem+0x9c>
 8003c70:	3c01      	subs	r4, #1
 8003c72:	e7c6      	b.n	8003c02 <quorem+0x96>
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	3b04      	subs	r3, #4
 8003c78:	2a00      	cmp	r2, #0
 8003c7a:	d1f0      	bne.n	8003c5e <quorem+0xf2>
 8003c7c:	3c01      	subs	r4, #1
 8003c7e:	e7eb      	b.n	8003c58 <quorem+0xec>
 8003c80:	2000      	movs	r0, #0
 8003c82:	e7ee      	b.n	8003c62 <quorem+0xf6>
 8003c84:	0000      	movs	r0, r0
	...

08003c88 <_dtoa_r>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	461f      	mov	r7, r3
 8003c90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003c92:	b099      	sub	sp, #100	; 0x64
 8003c94:	4605      	mov	r5, r0
 8003c96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003c9e:	b974      	cbnz	r4, 8003cbe <_dtoa_r+0x36>
 8003ca0:	2010      	movs	r0, #16
 8003ca2:	f000 ffff 	bl	8004ca4 <malloc>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	6268      	str	r0, [r5, #36]	; 0x24
 8003caa:	b920      	cbnz	r0, 8003cb6 <_dtoa_r+0x2e>
 8003cac:	21ea      	movs	r1, #234	; 0xea
 8003cae:	4ba8      	ldr	r3, [pc, #672]	; (8003f50 <_dtoa_r+0x2c8>)
 8003cb0:	48a8      	ldr	r0, [pc, #672]	; (8003f54 <_dtoa_r+0x2cc>)
 8003cb2:	f001 fe4b 	bl	800594c <__assert_func>
 8003cb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cba:	6004      	str	r4, [r0, #0]
 8003cbc:	60c4      	str	r4, [r0, #12]
 8003cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	b151      	cbz	r1, 8003cda <_dtoa_r+0x52>
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4093      	lsls	r3, r2
 8003cca:	604a      	str	r2, [r1, #4]
 8003ccc:	608b      	str	r3, [r1, #8]
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f001 f84c 	bl	8004d6c <_Bfree>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	1e3b      	subs	r3, r7, #0
 8003cdc:	bfaf      	iteee	ge
 8003cde:	2300      	movge	r3, #0
 8003ce0:	2201      	movlt	r2, #1
 8003ce2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ce6:	9305      	strlt	r3, [sp, #20]
 8003ce8:	bfa8      	it	ge
 8003cea:	f8c8 3000 	strge.w	r3, [r8]
 8003cee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003cf2:	4b99      	ldr	r3, [pc, #612]	; (8003f58 <_dtoa_r+0x2d0>)
 8003cf4:	bfb8      	it	lt
 8003cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8003cfa:	ea33 0309 	bics.w	r3, r3, r9
 8003cfe:	d119      	bne.n	8003d34 <_dtoa_r+0xac>
 8003d00:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d0c:	4333      	orrs	r3, r6
 8003d0e:	f000 857f 	beq.w	8004810 <_dtoa_r+0xb88>
 8003d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d14:	b953      	cbnz	r3, 8003d2c <_dtoa_r+0xa4>
 8003d16:	4b91      	ldr	r3, [pc, #580]	; (8003f5c <_dtoa_r+0x2d4>)
 8003d18:	e022      	b.n	8003d60 <_dtoa_r+0xd8>
 8003d1a:	4b91      	ldr	r3, [pc, #580]	; (8003f60 <_dtoa_r+0x2d8>)
 8003d1c:	9303      	str	r3, [sp, #12]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	9803      	ldr	r0, [sp, #12]
 8003d26:	b019      	add	sp, #100	; 0x64
 8003d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2c:	4b8b      	ldr	r3, [pc, #556]	; (8003f5c <_dtoa_r+0x2d4>)
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	3303      	adds	r3, #3
 8003d32:	e7f5      	b.n	8003d20 <_dtoa_r+0x98>
 8003d34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d40:	2200      	movs	r2, #0
 8003d42:	2300      	movs	r3, #0
 8003d44:	f7fc fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8003d48:	4680      	mov	r8, r0
 8003d4a:	b158      	cbz	r0, 8003d64 <_dtoa_r+0xdc>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8558 	beq.w	800480a <_dtoa_r+0xb82>
 8003d5a:	4882      	ldr	r0, [pc, #520]	; (8003f64 <_dtoa_r+0x2dc>)
 8003d5c:	6018      	str	r0, [r3, #0]
 8003d5e:	1e43      	subs	r3, r0, #1
 8003d60:	9303      	str	r3, [sp, #12]
 8003d62:	e7df      	b.n	8003d24 <_dtoa_r+0x9c>
 8003d64:	ab16      	add	r3, sp, #88	; 0x58
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	ab17      	add	r3, sp, #92	; 0x5c
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d72:	f001 fae1 	bl	8005338 <__d2b>
 8003d76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d7a:	4683      	mov	fp, r0
 8003d7c:	2c00      	cmp	r4, #0
 8003d7e:	d07f      	beq.n	8003e80 <_dtoa_r+0x1f8>
 8003d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003d92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <_dtoa_r+0x2e0>)
 8003d9e:	f7fc f9e3 	bl	8000168 <__aeabi_dsub>
 8003da2:	a365      	add	r3, pc, #404	; (adr r3, 8003f38 <_dtoa_r+0x2b0>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f7fc fb96 	bl	80004d8 <__aeabi_dmul>
 8003dac:	a364      	add	r3, pc, #400	; (adr r3, 8003f40 <_dtoa_r+0x2b8>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f7fc f9db 	bl	800016c <__adddf3>
 8003db6:	4606      	mov	r6, r0
 8003db8:	4620      	mov	r0, r4
 8003dba:	460f      	mov	r7, r1
 8003dbc:	f7fc fb22 	bl	8000404 <__aeabi_i2d>
 8003dc0:	a361      	add	r3, pc, #388	; (adr r3, 8003f48 <_dtoa_r+0x2c0>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fb87 	bl	80004d8 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4639      	mov	r1, r7
 8003dd2:	f7fc f9cb 	bl	800016c <__adddf3>
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	460f      	mov	r7, r1
 8003dda:	f7fc fe2d 	bl	8000a38 <__aeabi_d2iz>
 8003dde:	2200      	movs	r2, #0
 8003de0:	4682      	mov	sl, r0
 8003de2:	2300      	movs	r3, #0
 8003de4:	4630      	mov	r0, r6
 8003de6:	4639      	mov	r1, r7
 8003de8:	f7fc fde8 	bl	80009bc <__aeabi_dcmplt>
 8003dec:	b148      	cbz	r0, 8003e02 <_dtoa_r+0x17a>
 8003dee:	4650      	mov	r0, sl
 8003df0:	f7fc fb08 	bl	8000404 <__aeabi_i2d>
 8003df4:	4632      	mov	r2, r6
 8003df6:	463b      	mov	r3, r7
 8003df8:	f7fc fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8003dfc:	b908      	cbnz	r0, 8003e02 <_dtoa_r+0x17a>
 8003dfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e02:	f1ba 0f16 	cmp.w	sl, #22
 8003e06:	d858      	bhi.n	8003eba <_dtoa_r+0x232>
 8003e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e0c:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <_dtoa_r+0x2e4>)
 8003e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f7fc fdd1 	bl	80009bc <__aeabi_dcmplt>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d04f      	beq.n	8003ebe <_dtoa_r+0x236>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e28:	1b1c      	subs	r4, r3, r4
 8003e2a:	1e63      	subs	r3, r4, #1
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	bf49      	itett	mi
 8003e30:	f1c4 0301 	rsbmi	r3, r4, #1
 8003e34:	2300      	movpl	r3, #0
 8003e36:	9306      	strmi	r3, [sp, #24]
 8003e38:	2300      	movmi	r3, #0
 8003e3a:	bf54      	ite	pl
 8003e3c:	9306      	strpl	r3, [sp, #24]
 8003e3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003e40:	f1ba 0f00 	cmp.w	sl, #0
 8003e44:	db3d      	blt.n	8003ec2 <_dtoa_r+0x23a>
 8003e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003e4c:	4453      	add	r3, sl
 8003e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e50:	2300      	movs	r3, #0
 8003e52:	930a      	str	r3, [sp, #40]	; 0x28
 8003e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e56:	2b09      	cmp	r3, #9
 8003e58:	f200 808c 	bhi.w	8003f74 <_dtoa_r+0x2ec>
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	bfc4      	itt	gt
 8003e60:	3b04      	subgt	r3, #4
 8003e62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e66:	bfc8      	it	gt
 8003e68:	2400      	movgt	r4, #0
 8003e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8003e6e:	bfd8      	it	le
 8003e70:	2401      	movle	r4, #1
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	f200 808a 	bhi.w	8003f8c <_dtoa_r+0x304>
 8003e78:	e8df f003 	tbb	[pc, r3]
 8003e7c:	5b4d4f2d 	.word	0x5b4d4f2d
 8003e80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e84:	441c      	add	r4, r3
 8003e86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	bfc3      	ittte	gt
 8003e8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003e96:	fa09 f303 	lslgt.w	r3, r9, r3
 8003e9a:	f1c3 0320 	rsble	r3, r3, #32
 8003e9e:	bfc6      	itte	gt
 8003ea0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ea4:	4318      	orrgt	r0, r3
 8003ea6:	fa06 f003 	lslle.w	r0, r6, r3
 8003eaa:	f7fc fa9b 	bl	80003e4 <__aeabi_ui2d>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003eb4:	3c01      	subs	r4, #1
 8003eb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8003eb8:	e76f      	b.n	8003d9a <_dtoa_r+0x112>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e7b2      	b.n	8003e24 <_dtoa_r+0x19c>
 8003ebe:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ec0:	e7b1      	b.n	8003e26 <_dtoa_r+0x19e>
 8003ec2:	9b06      	ldr	r3, [sp, #24]
 8003ec4:	eba3 030a 	sub.w	r3, r3, sl
 8003ec8:	9306      	str	r3, [sp, #24]
 8003eca:	f1ca 0300 	rsb	r3, sl, #0
 8003ece:	930a      	str	r3, [sp, #40]	; 0x28
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8003ed4:	e7be      	b.n	8003e54 <_dtoa_r+0x1cc>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dc58      	bgt.n	8003f92 <_dtoa_r+0x30a>
 8003ee0:	f04f 0901 	mov.w	r9, #1
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	f8cd 9020 	str.w	r9, [sp, #32]
 8003eea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003eee:	2200      	movs	r2, #0
 8003ef0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003ef2:	6042      	str	r2, [r0, #4]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	f102 0614 	add.w	r6, r2, #20
 8003efa:	429e      	cmp	r6, r3
 8003efc:	6841      	ldr	r1, [r0, #4]
 8003efe:	d94e      	bls.n	8003f9e <_dtoa_r+0x316>
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 fef3 	bl	8004cec <_Balloc>
 8003f06:	9003      	str	r0, [sp, #12]
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d14c      	bne.n	8003fa6 <_dtoa_r+0x31e>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <_dtoa_r+0x2e8>)
 8003f14:	e6cc      	b.n	8003cb0 <_dtoa_r+0x28>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e7de      	b.n	8003ed8 <_dtoa_r+0x250>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f20:	eb0a 0903 	add.w	r9, sl, r3
 8003f24:	f109 0301 	add.w	r3, r9, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	9308      	str	r3, [sp, #32]
 8003f2c:	bfb8      	it	lt
 8003f2e:	2301      	movlt	r3, #1
 8003f30:	e7dd      	b.n	8003eee <_dtoa_r+0x266>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e7f2      	b.n	8003f1c <_dtoa_r+0x294>
 8003f36:	bf00      	nop
 8003f38:	636f4361 	.word	0x636f4361
 8003f3c:	3fd287a7 	.word	0x3fd287a7
 8003f40:	8b60c8b3 	.word	0x8b60c8b3
 8003f44:	3fc68a28 	.word	0x3fc68a28
 8003f48:	509f79fb 	.word	0x509f79fb
 8003f4c:	3fd34413 	.word	0x3fd34413
 8003f50:	08005c79 	.word	0x08005c79
 8003f54:	08005c90 	.word	0x08005c90
 8003f58:	7ff00000 	.word	0x7ff00000
 8003f5c:	08005c75 	.word	0x08005c75
 8003f60:	08005c6c 	.word	0x08005c6c
 8003f64:	08005c49 	.word	0x08005c49
 8003f68:	3ff80000 	.word	0x3ff80000
 8003f6c:	08005de0 	.word	0x08005de0
 8003f70:	08005ceb 	.word	0x08005ceb
 8003f74:	2401      	movs	r4, #1
 8003f76:	2300      	movs	r3, #0
 8003f78:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f7a:	9322      	str	r3, [sp, #136]	; 0x88
 8003f7c:	f04f 39ff 	mov.w	r9, #4294967295
 8003f80:	2200      	movs	r2, #0
 8003f82:	2312      	movs	r3, #18
 8003f84:	f8cd 9020 	str.w	r9, [sp, #32]
 8003f88:	9223      	str	r2, [sp, #140]	; 0x8c
 8003f8a:	e7b0      	b.n	8003eee <_dtoa_r+0x266>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f90:	e7f4      	b.n	8003f7c <_dtoa_r+0x2f4>
 8003f92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003f96:	464b      	mov	r3, r9
 8003f98:	f8cd 9020 	str.w	r9, [sp, #32]
 8003f9c:	e7a7      	b.n	8003eee <_dtoa_r+0x266>
 8003f9e:	3101      	adds	r1, #1
 8003fa0:	6041      	str	r1, [r0, #4]
 8003fa2:	0052      	lsls	r2, r2, #1
 8003fa4:	e7a7      	b.n	8003ef6 <_dtoa_r+0x26e>
 8003fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fa8:	9a03      	ldr	r2, [sp, #12]
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	9b08      	ldr	r3, [sp, #32]
 8003fae:	2b0e      	cmp	r3, #14
 8003fb0:	f200 80a8 	bhi.w	8004104 <_dtoa_r+0x47c>
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	f000 80a5 	beq.w	8004104 <_dtoa_r+0x47c>
 8003fba:	f1ba 0f00 	cmp.w	sl, #0
 8003fbe:	dd34      	ble.n	800402a <_dtoa_r+0x3a2>
 8003fc0:	4a9a      	ldr	r2, [pc, #616]	; (800422c <_dtoa_r+0x5a4>)
 8003fc2:	f00a 030f 	and.w	r3, sl, #15
 8003fc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003fd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003fda:	d016      	beq.n	800400a <_dtoa_r+0x382>
 8003fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fe0:	4b93      	ldr	r3, [pc, #588]	; (8004230 <_dtoa_r+0x5a8>)
 8003fe2:	2703      	movs	r7, #3
 8003fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fe8:	f7fc fba0 	bl	800072c <__aeabi_ddiv>
 8003fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ff0:	f004 040f 	and.w	r4, r4, #15
 8003ff4:	4e8e      	ldr	r6, [pc, #568]	; (8004230 <_dtoa_r+0x5a8>)
 8003ff6:	b954      	cbnz	r4, 800400e <_dtoa_r+0x386>
 8003ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004000:	f7fc fb94 	bl	800072c <__aeabi_ddiv>
 8004004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004008:	e029      	b.n	800405e <_dtoa_r+0x3d6>
 800400a:	2702      	movs	r7, #2
 800400c:	e7f2      	b.n	8003ff4 <_dtoa_r+0x36c>
 800400e:	07e1      	lsls	r1, r4, #31
 8004010:	d508      	bpl.n	8004024 <_dtoa_r+0x39c>
 8004012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004016:	e9d6 2300 	ldrd	r2, r3, [r6]
 800401a:	f7fc fa5d 	bl	80004d8 <__aeabi_dmul>
 800401e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004022:	3701      	adds	r7, #1
 8004024:	1064      	asrs	r4, r4, #1
 8004026:	3608      	adds	r6, #8
 8004028:	e7e5      	b.n	8003ff6 <_dtoa_r+0x36e>
 800402a:	f000 80a5 	beq.w	8004178 <_dtoa_r+0x4f0>
 800402e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004032:	f1ca 0400 	rsb	r4, sl, #0
 8004036:	4b7d      	ldr	r3, [pc, #500]	; (800422c <_dtoa_r+0x5a4>)
 8004038:	f004 020f 	and.w	r2, r4, #15
 800403c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc fa48 	bl	80004d8 <__aeabi_dmul>
 8004048:	2702      	movs	r7, #2
 800404a:	2300      	movs	r3, #0
 800404c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004050:	4e77      	ldr	r6, [pc, #476]	; (8004230 <_dtoa_r+0x5a8>)
 8004052:	1124      	asrs	r4, r4, #4
 8004054:	2c00      	cmp	r4, #0
 8004056:	f040 8084 	bne.w	8004162 <_dtoa_r+0x4da>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1d2      	bne.n	8004004 <_dtoa_r+0x37c>
 800405e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 808b 	beq.w	800417c <_dtoa_r+0x4f4>
 8004066:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800406a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800406e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004072:	2200      	movs	r2, #0
 8004074:	4b6f      	ldr	r3, [pc, #444]	; (8004234 <_dtoa_r+0x5ac>)
 8004076:	f7fc fca1 	bl	80009bc <__aeabi_dcmplt>
 800407a:	2800      	cmp	r0, #0
 800407c:	d07e      	beq.n	800417c <_dtoa_r+0x4f4>
 800407e:	9b08      	ldr	r3, [sp, #32]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d07b      	beq.n	800417c <_dtoa_r+0x4f4>
 8004084:	f1b9 0f00 	cmp.w	r9, #0
 8004088:	dd38      	ble.n	80040fc <_dtoa_r+0x474>
 800408a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800408e:	2200      	movs	r2, #0
 8004090:	4b69      	ldr	r3, [pc, #420]	; (8004238 <_dtoa_r+0x5b0>)
 8004092:	f7fc fa21 	bl	80004d8 <__aeabi_dmul>
 8004096:	464c      	mov	r4, r9
 8004098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800409c:	f10a 38ff 	add.w	r8, sl, #4294967295
 80040a0:	3701      	adds	r7, #1
 80040a2:	4638      	mov	r0, r7
 80040a4:	f7fc f9ae 	bl	8000404 <__aeabi_i2d>
 80040a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040ac:	f7fc fa14 	bl	80004d8 <__aeabi_dmul>
 80040b0:	2200      	movs	r2, #0
 80040b2:	4b62      	ldr	r3, [pc, #392]	; (800423c <_dtoa_r+0x5b4>)
 80040b4:	f7fc f85a 	bl	800016c <__adddf3>
 80040b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040c0:	9611      	str	r6, [sp, #68]	; 0x44
 80040c2:	2c00      	cmp	r4, #0
 80040c4:	d15d      	bne.n	8004182 <_dtoa_r+0x4fa>
 80040c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ca:	2200      	movs	r2, #0
 80040cc:	4b5c      	ldr	r3, [pc, #368]	; (8004240 <_dtoa_r+0x5b8>)
 80040ce:	f7fc f84b 	bl	8000168 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040da:	4633      	mov	r3, r6
 80040dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040de:	f7fc fc8b 	bl	80009f8 <__aeabi_dcmpgt>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	f040 829c 	bne.w	8004620 <_dtoa_r+0x998>
 80040e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80040f2:	f7fc fc63 	bl	80009bc <__aeabi_dcmplt>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	f040 8290 	bne.w	800461c <_dtoa_r+0x994>
 80040fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004100:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004106:	2b00      	cmp	r3, #0
 8004108:	f2c0 8152 	blt.w	80043b0 <_dtoa_r+0x728>
 800410c:	f1ba 0f0e 	cmp.w	sl, #14
 8004110:	f300 814e 	bgt.w	80043b0 <_dtoa_r+0x728>
 8004114:	4b45      	ldr	r3, [pc, #276]	; (800422c <_dtoa_r+0x5a4>)
 8004116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800411a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800411e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004124:	2b00      	cmp	r3, #0
 8004126:	f280 80db 	bge.w	80042e0 <_dtoa_r+0x658>
 800412a:	9b08      	ldr	r3, [sp, #32]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f300 80d7 	bgt.w	80042e0 <_dtoa_r+0x658>
 8004132:	f040 8272 	bne.w	800461a <_dtoa_r+0x992>
 8004136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800413a:	2200      	movs	r2, #0
 800413c:	4b40      	ldr	r3, [pc, #256]	; (8004240 <_dtoa_r+0x5b8>)
 800413e:	f7fc f9cb 	bl	80004d8 <__aeabi_dmul>
 8004142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004146:	f7fc fc4d 	bl	80009e4 <__aeabi_dcmpge>
 800414a:	9c08      	ldr	r4, [sp, #32]
 800414c:	4626      	mov	r6, r4
 800414e:	2800      	cmp	r0, #0
 8004150:	f040 8248 	bne.w	80045e4 <_dtoa_r+0x95c>
 8004154:	2331      	movs	r3, #49	; 0x31
 8004156:	9f03      	ldr	r7, [sp, #12]
 8004158:	f10a 0a01 	add.w	sl, sl, #1
 800415c:	f807 3b01 	strb.w	r3, [r7], #1
 8004160:	e244      	b.n	80045ec <_dtoa_r+0x964>
 8004162:	07e2      	lsls	r2, r4, #31
 8004164:	d505      	bpl.n	8004172 <_dtoa_r+0x4ea>
 8004166:	e9d6 2300 	ldrd	r2, r3, [r6]
 800416a:	f7fc f9b5 	bl	80004d8 <__aeabi_dmul>
 800416e:	2301      	movs	r3, #1
 8004170:	3701      	adds	r7, #1
 8004172:	1064      	asrs	r4, r4, #1
 8004174:	3608      	adds	r6, #8
 8004176:	e76d      	b.n	8004054 <_dtoa_r+0x3cc>
 8004178:	2702      	movs	r7, #2
 800417a:	e770      	b.n	800405e <_dtoa_r+0x3d6>
 800417c:	46d0      	mov	r8, sl
 800417e:	9c08      	ldr	r4, [sp, #32]
 8004180:	e78f      	b.n	80040a2 <_dtoa_r+0x41a>
 8004182:	9903      	ldr	r1, [sp, #12]
 8004184:	4b29      	ldr	r3, [pc, #164]	; (800422c <_dtoa_r+0x5a4>)
 8004186:	4421      	add	r1, r4
 8004188:	9112      	str	r1, [sp, #72]	; 0x48
 800418a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800418c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004190:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004194:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004198:	2900      	cmp	r1, #0
 800419a:	d055      	beq.n	8004248 <_dtoa_r+0x5c0>
 800419c:	2000      	movs	r0, #0
 800419e:	4929      	ldr	r1, [pc, #164]	; (8004244 <_dtoa_r+0x5bc>)
 80041a0:	f7fc fac4 	bl	800072c <__aeabi_ddiv>
 80041a4:	463b      	mov	r3, r7
 80041a6:	4632      	mov	r2, r6
 80041a8:	f7fb ffde 	bl	8000168 <__aeabi_dsub>
 80041ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041b0:	9f03      	ldr	r7, [sp, #12]
 80041b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041b6:	f7fc fc3f 	bl	8000a38 <__aeabi_d2iz>
 80041ba:	4604      	mov	r4, r0
 80041bc:	f7fc f922 	bl	8000404 <__aeabi_i2d>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c8:	f7fb ffce 	bl	8000168 <__aeabi_dsub>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	3430      	adds	r4, #48	; 0x30
 80041d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041da:	f807 4b01 	strb.w	r4, [r7], #1
 80041de:	f7fc fbed 	bl	80009bc <__aeabi_dcmplt>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d174      	bne.n	80042d0 <_dtoa_r+0x648>
 80041e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041ea:	2000      	movs	r0, #0
 80041ec:	4911      	ldr	r1, [pc, #68]	; (8004234 <_dtoa_r+0x5ac>)
 80041ee:	f7fb ffbb 	bl	8000168 <__aeabi_dsub>
 80041f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041f6:	f7fc fbe1 	bl	80009bc <__aeabi_dcmplt>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f040 80b7 	bne.w	800436e <_dtoa_r+0x6e6>
 8004200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004202:	429f      	cmp	r7, r3
 8004204:	f43f af7a 	beq.w	80040fc <_dtoa_r+0x474>
 8004208:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800420c:	2200      	movs	r2, #0
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <_dtoa_r+0x5b0>)
 8004210:	f7fc f962 	bl	80004d8 <__aeabi_dmul>
 8004214:	2200      	movs	r2, #0
 8004216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800421a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <_dtoa_r+0x5b0>)
 8004220:	f7fc f95a 	bl	80004d8 <__aeabi_dmul>
 8004224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004228:	e7c3      	b.n	80041b2 <_dtoa_r+0x52a>
 800422a:	bf00      	nop
 800422c:	08005de0 	.word	0x08005de0
 8004230:	08005db8 	.word	0x08005db8
 8004234:	3ff00000 	.word	0x3ff00000
 8004238:	40240000 	.word	0x40240000
 800423c:	401c0000 	.word	0x401c0000
 8004240:	40140000 	.word	0x40140000
 8004244:	3fe00000 	.word	0x3fe00000
 8004248:	4630      	mov	r0, r6
 800424a:	4639      	mov	r1, r7
 800424c:	f7fc f944 	bl	80004d8 <__aeabi_dmul>
 8004250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004252:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004256:	9c03      	ldr	r4, [sp, #12]
 8004258:	9314      	str	r3, [sp, #80]	; 0x50
 800425a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800425e:	f7fc fbeb 	bl	8000a38 <__aeabi_d2iz>
 8004262:	9015      	str	r0, [sp, #84]	; 0x54
 8004264:	f7fc f8ce 	bl	8000404 <__aeabi_i2d>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004270:	f7fb ff7a 	bl	8000168 <__aeabi_dsub>
 8004274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004276:	4606      	mov	r6, r0
 8004278:	3330      	adds	r3, #48	; 0x30
 800427a:	f804 3b01 	strb.w	r3, [r4], #1
 800427e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004280:	460f      	mov	r7, r1
 8004282:	429c      	cmp	r4, r3
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	d124      	bne.n	80042d4 <_dtoa_r+0x64c>
 800428a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800428e:	4bb0      	ldr	r3, [pc, #704]	; (8004550 <_dtoa_r+0x8c8>)
 8004290:	f7fb ff6c 	bl	800016c <__adddf3>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4630      	mov	r0, r6
 800429a:	4639      	mov	r1, r7
 800429c:	f7fc fbac 	bl	80009f8 <__aeabi_dcmpgt>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d163      	bne.n	800436c <_dtoa_r+0x6e4>
 80042a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042a8:	2000      	movs	r0, #0
 80042aa:	49a9      	ldr	r1, [pc, #676]	; (8004550 <_dtoa_r+0x8c8>)
 80042ac:	f7fb ff5c 	bl	8000168 <__aeabi_dsub>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4630      	mov	r0, r6
 80042b6:	4639      	mov	r1, r7
 80042b8:	f7fc fb80 	bl	80009bc <__aeabi_dcmplt>
 80042bc:	2800      	cmp	r0, #0
 80042be:	f43f af1d 	beq.w	80040fc <_dtoa_r+0x474>
 80042c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80042c4:	1e7b      	subs	r3, r7, #1
 80042c6:	9314      	str	r3, [sp, #80]	; 0x50
 80042c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80042cc:	2b30      	cmp	r3, #48	; 0x30
 80042ce:	d0f8      	beq.n	80042c2 <_dtoa_r+0x63a>
 80042d0:	46c2      	mov	sl, r8
 80042d2:	e03b      	b.n	800434c <_dtoa_r+0x6c4>
 80042d4:	4b9f      	ldr	r3, [pc, #636]	; (8004554 <_dtoa_r+0x8cc>)
 80042d6:	f7fc f8ff 	bl	80004d8 <__aeabi_dmul>
 80042da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042de:	e7bc      	b.n	800425a <_dtoa_r+0x5d2>
 80042e0:	9f03      	ldr	r7, [sp, #12]
 80042e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80042e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042ea:	4640      	mov	r0, r8
 80042ec:	4649      	mov	r1, r9
 80042ee:	f7fc fa1d 	bl	800072c <__aeabi_ddiv>
 80042f2:	f7fc fba1 	bl	8000a38 <__aeabi_d2iz>
 80042f6:	4604      	mov	r4, r0
 80042f8:	f7fc f884 	bl	8000404 <__aeabi_i2d>
 80042fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004300:	f7fc f8ea 	bl	80004d8 <__aeabi_dmul>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4640      	mov	r0, r8
 800430a:	4649      	mov	r1, r9
 800430c:	f7fb ff2c 	bl	8000168 <__aeabi_dsub>
 8004310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004314:	f807 6b01 	strb.w	r6, [r7], #1
 8004318:	9e03      	ldr	r6, [sp, #12]
 800431a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800431e:	1bbe      	subs	r6, r7, r6
 8004320:	45b4      	cmp	ip, r6
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	d136      	bne.n	8004396 <_dtoa_r+0x70e>
 8004328:	f7fb ff20 	bl	800016c <__adddf3>
 800432c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004330:	4680      	mov	r8, r0
 8004332:	4689      	mov	r9, r1
 8004334:	f7fc fb60 	bl	80009f8 <__aeabi_dcmpgt>
 8004338:	bb58      	cbnz	r0, 8004392 <_dtoa_r+0x70a>
 800433a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800433e:	4640      	mov	r0, r8
 8004340:	4649      	mov	r1, r9
 8004342:	f7fc fb31 	bl	80009a8 <__aeabi_dcmpeq>
 8004346:	b108      	cbz	r0, 800434c <_dtoa_r+0x6c4>
 8004348:	07e1      	lsls	r1, r4, #31
 800434a:	d422      	bmi.n	8004392 <_dtoa_r+0x70a>
 800434c:	4628      	mov	r0, r5
 800434e:	4659      	mov	r1, fp
 8004350:	f000 fd0c 	bl	8004d6c <_Bfree>
 8004354:	2300      	movs	r3, #0
 8004356:	703b      	strb	r3, [r7, #0]
 8004358:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800435a:	f10a 0001 	add.w	r0, sl, #1
 800435e:	6018      	str	r0, [r3, #0]
 8004360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004362:	2b00      	cmp	r3, #0
 8004364:	f43f acde 	beq.w	8003d24 <_dtoa_r+0x9c>
 8004368:	601f      	str	r7, [r3, #0]
 800436a:	e4db      	b.n	8003d24 <_dtoa_r+0x9c>
 800436c:	4627      	mov	r7, r4
 800436e:	463b      	mov	r3, r7
 8004370:	461f      	mov	r7, r3
 8004372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004376:	2a39      	cmp	r2, #57	; 0x39
 8004378:	d107      	bne.n	800438a <_dtoa_r+0x702>
 800437a:	9a03      	ldr	r2, [sp, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d1f7      	bne.n	8004370 <_dtoa_r+0x6e8>
 8004380:	2230      	movs	r2, #48	; 0x30
 8004382:	9903      	ldr	r1, [sp, #12]
 8004384:	f108 0801 	add.w	r8, r8, #1
 8004388:	700a      	strb	r2, [r1, #0]
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	3201      	adds	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e79e      	b.n	80042d0 <_dtoa_r+0x648>
 8004392:	46d0      	mov	r8, sl
 8004394:	e7eb      	b.n	800436e <_dtoa_r+0x6e6>
 8004396:	2200      	movs	r2, #0
 8004398:	4b6e      	ldr	r3, [pc, #440]	; (8004554 <_dtoa_r+0x8cc>)
 800439a:	f7fc f89d 	bl	80004d8 <__aeabi_dmul>
 800439e:	2200      	movs	r2, #0
 80043a0:	2300      	movs	r3, #0
 80043a2:	4680      	mov	r8, r0
 80043a4:	4689      	mov	r9, r1
 80043a6:	f7fc faff 	bl	80009a8 <__aeabi_dcmpeq>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d09b      	beq.n	80042e6 <_dtoa_r+0x65e>
 80043ae:	e7cd      	b.n	800434c <_dtoa_r+0x6c4>
 80043b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	f000 80d0 	beq.w	8004558 <_dtoa_r+0x8d0>
 80043b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043ba:	2a01      	cmp	r2, #1
 80043bc:	f300 80ae 	bgt.w	800451c <_dtoa_r+0x894>
 80043c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	f000 80a6 	beq.w	8004514 <_dtoa_r+0x88c>
 80043c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043ce:	9f06      	ldr	r7, [sp, #24]
 80043d0:	9a06      	ldr	r2, [sp, #24]
 80043d2:	2101      	movs	r1, #1
 80043d4:	441a      	add	r2, r3
 80043d6:	9206      	str	r2, [sp, #24]
 80043d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043da:	4628      	mov	r0, r5
 80043dc:	441a      	add	r2, r3
 80043de:	9209      	str	r2, [sp, #36]	; 0x24
 80043e0:	f000 fd7a 	bl	8004ed8 <__i2b>
 80043e4:	4606      	mov	r6, r0
 80043e6:	2f00      	cmp	r7, #0
 80043e8:	dd0c      	ble.n	8004404 <_dtoa_r+0x77c>
 80043ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dd09      	ble.n	8004404 <_dtoa_r+0x77c>
 80043f0:	42bb      	cmp	r3, r7
 80043f2:	bfa8      	it	ge
 80043f4:	463b      	movge	r3, r7
 80043f6:	9a06      	ldr	r2, [sp, #24]
 80043f8:	1aff      	subs	r7, r7, r3
 80043fa:	1ad2      	subs	r2, r2, r3
 80043fc:	9206      	str	r2, [sp, #24]
 80043fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	9309      	str	r3, [sp, #36]	; 0x24
 8004404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004406:	b1f3      	cbz	r3, 8004446 <_dtoa_r+0x7be>
 8004408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80a8 	beq.w	8004560 <_dtoa_r+0x8d8>
 8004410:	2c00      	cmp	r4, #0
 8004412:	dd10      	ble.n	8004436 <_dtoa_r+0x7ae>
 8004414:	4631      	mov	r1, r6
 8004416:	4622      	mov	r2, r4
 8004418:	4628      	mov	r0, r5
 800441a:	f000 fe1b 	bl	8005054 <__pow5mult>
 800441e:	465a      	mov	r2, fp
 8004420:	4601      	mov	r1, r0
 8004422:	4606      	mov	r6, r0
 8004424:	4628      	mov	r0, r5
 8004426:	f000 fd6d 	bl	8004f04 <__multiply>
 800442a:	4680      	mov	r8, r0
 800442c:	4659      	mov	r1, fp
 800442e:	4628      	mov	r0, r5
 8004430:	f000 fc9c 	bl	8004d6c <_Bfree>
 8004434:	46c3      	mov	fp, r8
 8004436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004438:	1b1a      	subs	r2, r3, r4
 800443a:	d004      	beq.n	8004446 <_dtoa_r+0x7be>
 800443c:	4659      	mov	r1, fp
 800443e:	4628      	mov	r0, r5
 8004440:	f000 fe08 	bl	8005054 <__pow5mult>
 8004444:	4683      	mov	fp, r0
 8004446:	2101      	movs	r1, #1
 8004448:	4628      	mov	r0, r5
 800444a:	f000 fd45 	bl	8004ed8 <__i2b>
 800444e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004450:	4604      	mov	r4, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	f340 8086 	ble.w	8004564 <_dtoa_r+0x8dc>
 8004458:	461a      	mov	r2, r3
 800445a:	4601      	mov	r1, r0
 800445c:	4628      	mov	r0, r5
 800445e:	f000 fdf9 	bl	8005054 <__pow5mult>
 8004462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004464:	4604      	mov	r4, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	dd7f      	ble.n	800456a <_dtoa_r+0x8e2>
 800446a:	f04f 0800 	mov.w	r8, #0
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004474:	6918      	ldr	r0, [r3, #16]
 8004476:	f000 fce1 	bl	8004e3c <__hi0bits>
 800447a:	f1c0 0020 	rsb	r0, r0, #32
 800447e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004480:	4418      	add	r0, r3
 8004482:	f010 001f 	ands.w	r0, r0, #31
 8004486:	f000 8092 	beq.w	80045ae <_dtoa_r+0x926>
 800448a:	f1c0 0320 	rsb	r3, r0, #32
 800448e:	2b04      	cmp	r3, #4
 8004490:	f340 808a 	ble.w	80045a8 <_dtoa_r+0x920>
 8004494:	f1c0 001c 	rsb	r0, r0, #28
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	4407      	add	r7, r0
 800449c:	4403      	add	r3, r0
 800449e:	9306      	str	r3, [sp, #24]
 80044a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a2:	4403      	add	r3, r0
 80044a4:	9309      	str	r3, [sp, #36]	; 0x24
 80044a6:	9b06      	ldr	r3, [sp, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dd05      	ble.n	80044b8 <_dtoa_r+0x830>
 80044ac:	4659      	mov	r1, fp
 80044ae:	461a      	mov	r2, r3
 80044b0:	4628      	mov	r0, r5
 80044b2:	f000 fe29 	bl	8005108 <__lshift>
 80044b6:	4683      	mov	fp, r0
 80044b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	dd05      	ble.n	80044ca <_dtoa_r+0x842>
 80044be:	4621      	mov	r1, r4
 80044c0:	461a      	mov	r2, r3
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 fe20 	bl	8005108 <__lshift>
 80044c8:	4604      	mov	r4, r0
 80044ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d070      	beq.n	80045b2 <_dtoa_r+0x92a>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4658      	mov	r0, fp
 80044d4:	f000 fe88 	bl	80051e8 <__mcmp>
 80044d8:	2800      	cmp	r0, #0
 80044da:	da6a      	bge.n	80045b2 <_dtoa_r+0x92a>
 80044dc:	2300      	movs	r3, #0
 80044de:	4659      	mov	r1, fp
 80044e0:	220a      	movs	r2, #10
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 fc64 	bl	8004db0 <__multadd>
 80044e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ea:	4683      	mov	fp, r0
 80044ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8194 	beq.w	800481e <_dtoa_r+0xb96>
 80044f6:	4631      	mov	r1, r6
 80044f8:	2300      	movs	r3, #0
 80044fa:	220a      	movs	r2, #10
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 fc57 	bl	8004db0 <__multadd>
 8004502:	f1b9 0f00 	cmp.w	r9, #0
 8004506:	4606      	mov	r6, r0
 8004508:	f300 8093 	bgt.w	8004632 <_dtoa_r+0x9aa>
 800450c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800450e:	2b02      	cmp	r3, #2
 8004510:	dc57      	bgt.n	80045c2 <_dtoa_r+0x93a>
 8004512:	e08e      	b.n	8004632 <_dtoa_r+0x9aa>
 8004514:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800451a:	e757      	b.n	80043cc <_dtoa_r+0x744>
 800451c:	9b08      	ldr	r3, [sp, #32]
 800451e:	1e5c      	subs	r4, r3, #1
 8004520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004522:	42a3      	cmp	r3, r4
 8004524:	bfb7      	itett	lt
 8004526:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004528:	1b1c      	subge	r4, r3, r4
 800452a:	1ae2      	sublt	r2, r4, r3
 800452c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800452e:	bfbe      	ittt	lt
 8004530:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004532:	189b      	addlt	r3, r3, r2
 8004534:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004536:	9b08      	ldr	r3, [sp, #32]
 8004538:	bfb8      	it	lt
 800453a:	2400      	movlt	r4, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfbb      	ittet	lt
 8004540:	9b06      	ldrlt	r3, [sp, #24]
 8004542:	9a08      	ldrlt	r2, [sp, #32]
 8004544:	9f06      	ldrge	r7, [sp, #24]
 8004546:	1a9f      	sublt	r7, r3, r2
 8004548:	bfac      	ite	ge
 800454a:	9b08      	ldrge	r3, [sp, #32]
 800454c:	2300      	movlt	r3, #0
 800454e:	e73f      	b.n	80043d0 <_dtoa_r+0x748>
 8004550:	3fe00000 	.word	0x3fe00000
 8004554:	40240000 	.word	0x40240000
 8004558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800455a:	9f06      	ldr	r7, [sp, #24]
 800455c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800455e:	e742      	b.n	80043e6 <_dtoa_r+0x75e>
 8004560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004562:	e76b      	b.n	800443c <_dtoa_r+0x7b4>
 8004564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004566:	2b01      	cmp	r3, #1
 8004568:	dc19      	bgt.n	800459e <_dtoa_r+0x916>
 800456a:	9b04      	ldr	r3, [sp, #16]
 800456c:	b9bb      	cbnz	r3, 800459e <_dtoa_r+0x916>
 800456e:	9b05      	ldr	r3, [sp, #20]
 8004570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004574:	b99b      	cbnz	r3, 800459e <_dtoa_r+0x916>
 8004576:	9b05      	ldr	r3, [sp, #20]
 8004578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800457c:	0d1b      	lsrs	r3, r3, #20
 800457e:	051b      	lsls	r3, r3, #20
 8004580:	b183      	cbz	r3, 80045a4 <_dtoa_r+0x91c>
 8004582:	f04f 0801 	mov.w	r8, #1
 8004586:	9b06      	ldr	r3, [sp, #24]
 8004588:	3301      	adds	r3, #1
 800458a:	9306      	str	r3, [sp, #24]
 800458c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458e:	3301      	adds	r3, #1
 8004590:	9309      	str	r3, [sp, #36]	; 0x24
 8004592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f af6a 	bne.w	800446e <_dtoa_r+0x7e6>
 800459a:	2001      	movs	r0, #1
 800459c:	e76f      	b.n	800447e <_dtoa_r+0x7f6>
 800459e:	f04f 0800 	mov.w	r8, #0
 80045a2:	e7f6      	b.n	8004592 <_dtoa_r+0x90a>
 80045a4:	4698      	mov	r8, r3
 80045a6:	e7f4      	b.n	8004592 <_dtoa_r+0x90a>
 80045a8:	f43f af7d 	beq.w	80044a6 <_dtoa_r+0x81e>
 80045ac:	4618      	mov	r0, r3
 80045ae:	301c      	adds	r0, #28
 80045b0:	e772      	b.n	8004498 <_dtoa_r+0x810>
 80045b2:	9b08      	ldr	r3, [sp, #32]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	dc36      	bgt.n	8004626 <_dtoa_r+0x99e>
 80045b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	dd33      	ble.n	8004626 <_dtoa_r+0x99e>
 80045be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045c2:	f1b9 0f00 	cmp.w	r9, #0
 80045c6:	d10d      	bne.n	80045e4 <_dtoa_r+0x95c>
 80045c8:	4621      	mov	r1, r4
 80045ca:	464b      	mov	r3, r9
 80045cc:	2205      	movs	r2, #5
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fbee 	bl	8004db0 <__multadd>
 80045d4:	4601      	mov	r1, r0
 80045d6:	4604      	mov	r4, r0
 80045d8:	4658      	mov	r0, fp
 80045da:	f000 fe05 	bl	80051e8 <__mcmp>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f73f adb8 	bgt.w	8004154 <_dtoa_r+0x4cc>
 80045e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045e6:	9f03      	ldr	r7, [sp, #12]
 80045e8:	ea6f 0a03 	mvn.w	sl, r3
 80045ec:	f04f 0800 	mov.w	r8, #0
 80045f0:	4621      	mov	r1, r4
 80045f2:	4628      	mov	r0, r5
 80045f4:	f000 fbba 	bl	8004d6c <_Bfree>
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	f43f aea7 	beq.w	800434c <_dtoa_r+0x6c4>
 80045fe:	f1b8 0f00 	cmp.w	r8, #0
 8004602:	d005      	beq.n	8004610 <_dtoa_r+0x988>
 8004604:	45b0      	cmp	r8, r6
 8004606:	d003      	beq.n	8004610 <_dtoa_r+0x988>
 8004608:	4641      	mov	r1, r8
 800460a:	4628      	mov	r0, r5
 800460c:	f000 fbae 	bl	8004d6c <_Bfree>
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	f000 fbaa 	bl	8004d6c <_Bfree>
 8004618:	e698      	b.n	800434c <_dtoa_r+0x6c4>
 800461a:	2400      	movs	r4, #0
 800461c:	4626      	mov	r6, r4
 800461e:	e7e1      	b.n	80045e4 <_dtoa_r+0x95c>
 8004620:	46c2      	mov	sl, r8
 8004622:	4626      	mov	r6, r4
 8004624:	e596      	b.n	8004154 <_dtoa_r+0x4cc>
 8004626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80fd 	beq.w	800482c <_dtoa_r+0xba4>
 8004632:	2f00      	cmp	r7, #0
 8004634:	dd05      	ble.n	8004642 <_dtoa_r+0x9ba>
 8004636:	4631      	mov	r1, r6
 8004638:	463a      	mov	r2, r7
 800463a:	4628      	mov	r0, r5
 800463c:	f000 fd64 	bl	8005108 <__lshift>
 8004640:	4606      	mov	r6, r0
 8004642:	f1b8 0f00 	cmp.w	r8, #0
 8004646:	d05c      	beq.n	8004702 <_dtoa_r+0xa7a>
 8004648:	4628      	mov	r0, r5
 800464a:	6871      	ldr	r1, [r6, #4]
 800464c:	f000 fb4e 	bl	8004cec <_Balloc>
 8004650:	4607      	mov	r7, r0
 8004652:	b928      	cbnz	r0, 8004660 <_dtoa_r+0x9d8>
 8004654:	4602      	mov	r2, r0
 8004656:	f240 21ea 	movw	r1, #746	; 0x2ea
 800465a:	4b7f      	ldr	r3, [pc, #508]	; (8004858 <_dtoa_r+0xbd0>)
 800465c:	f7ff bb28 	b.w	8003cb0 <_dtoa_r+0x28>
 8004660:	6932      	ldr	r2, [r6, #16]
 8004662:	f106 010c 	add.w	r1, r6, #12
 8004666:	3202      	adds	r2, #2
 8004668:	0092      	lsls	r2, r2, #2
 800466a:	300c      	adds	r0, #12
 800466c:	f000 fb30 	bl	8004cd0 <memcpy>
 8004670:	2201      	movs	r2, #1
 8004672:	4639      	mov	r1, r7
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fd47 	bl	8005108 <__lshift>
 800467a:	46b0      	mov	r8, r6
 800467c:	4606      	mov	r6, r0
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	3301      	adds	r3, #1
 8004682:	9308      	str	r3, [sp, #32]
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	444b      	add	r3, r9
 8004688:	930a      	str	r3, [sp, #40]	; 0x28
 800468a:	9b04      	ldr	r3, [sp, #16]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	9309      	str	r3, [sp, #36]	; 0x24
 8004692:	9b08      	ldr	r3, [sp, #32]
 8004694:	4621      	mov	r1, r4
 8004696:	3b01      	subs	r3, #1
 8004698:	4658      	mov	r0, fp
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	f7ff fa66 	bl	8003b6c <quorem>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4641      	mov	r1, r8
 80046a4:	3330      	adds	r3, #48	; 0x30
 80046a6:	9006      	str	r0, [sp, #24]
 80046a8:	4658      	mov	r0, fp
 80046aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80046ac:	f000 fd9c 	bl	80051e8 <__mcmp>
 80046b0:	4632      	mov	r2, r6
 80046b2:	4681      	mov	r9, r0
 80046b4:	4621      	mov	r1, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 fdb2 	bl	8005220 <__mdiff>
 80046bc:	68c2      	ldr	r2, [r0, #12]
 80046be:	4607      	mov	r7, r0
 80046c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046c2:	bb02      	cbnz	r2, 8004706 <_dtoa_r+0xa7e>
 80046c4:	4601      	mov	r1, r0
 80046c6:	4658      	mov	r0, fp
 80046c8:	f000 fd8e 	bl	80051e8 <__mcmp>
 80046cc:	4602      	mov	r2, r0
 80046ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d0:	4639      	mov	r1, r7
 80046d2:	4628      	mov	r0, r5
 80046d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80046d8:	f000 fb48 	bl	8004d6c <_Bfree>
 80046dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046e0:	9f08      	ldr	r7, [sp, #32]
 80046e2:	ea43 0102 	orr.w	r1, r3, r2
 80046e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e8:	430b      	orrs	r3, r1
 80046ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046ec:	d10d      	bne.n	800470a <_dtoa_r+0xa82>
 80046ee:	2b39      	cmp	r3, #57	; 0x39
 80046f0:	d029      	beq.n	8004746 <_dtoa_r+0xabe>
 80046f2:	f1b9 0f00 	cmp.w	r9, #0
 80046f6:	dd01      	ble.n	80046fc <_dtoa_r+0xa74>
 80046f8:	9b06      	ldr	r3, [sp, #24]
 80046fa:	3331      	adds	r3, #49	; 0x31
 80046fc:	9a04      	ldr	r2, [sp, #16]
 80046fe:	7013      	strb	r3, [r2, #0]
 8004700:	e776      	b.n	80045f0 <_dtoa_r+0x968>
 8004702:	4630      	mov	r0, r6
 8004704:	e7b9      	b.n	800467a <_dtoa_r+0x9f2>
 8004706:	2201      	movs	r2, #1
 8004708:	e7e2      	b.n	80046d0 <_dtoa_r+0xa48>
 800470a:	f1b9 0f00 	cmp.w	r9, #0
 800470e:	db06      	blt.n	800471e <_dtoa_r+0xa96>
 8004710:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004712:	ea41 0909 	orr.w	r9, r1, r9
 8004716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004718:	ea59 0101 	orrs.w	r1, r9, r1
 800471c:	d120      	bne.n	8004760 <_dtoa_r+0xad8>
 800471e:	2a00      	cmp	r2, #0
 8004720:	ddec      	ble.n	80046fc <_dtoa_r+0xa74>
 8004722:	4659      	mov	r1, fp
 8004724:	2201      	movs	r2, #1
 8004726:	4628      	mov	r0, r5
 8004728:	9308      	str	r3, [sp, #32]
 800472a:	f000 fced 	bl	8005108 <__lshift>
 800472e:	4621      	mov	r1, r4
 8004730:	4683      	mov	fp, r0
 8004732:	f000 fd59 	bl	80051e8 <__mcmp>
 8004736:	2800      	cmp	r0, #0
 8004738:	9b08      	ldr	r3, [sp, #32]
 800473a:	dc02      	bgt.n	8004742 <_dtoa_r+0xaba>
 800473c:	d1de      	bne.n	80046fc <_dtoa_r+0xa74>
 800473e:	07da      	lsls	r2, r3, #31
 8004740:	d5dc      	bpl.n	80046fc <_dtoa_r+0xa74>
 8004742:	2b39      	cmp	r3, #57	; 0x39
 8004744:	d1d8      	bne.n	80046f8 <_dtoa_r+0xa70>
 8004746:	2339      	movs	r3, #57	; 0x39
 8004748:	9a04      	ldr	r2, [sp, #16]
 800474a:	7013      	strb	r3, [r2, #0]
 800474c:	463b      	mov	r3, r7
 800474e:	461f      	mov	r7, r3
 8004750:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004754:	3b01      	subs	r3, #1
 8004756:	2a39      	cmp	r2, #57	; 0x39
 8004758:	d050      	beq.n	80047fc <_dtoa_r+0xb74>
 800475a:	3201      	adds	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e747      	b.n	80045f0 <_dtoa_r+0x968>
 8004760:	2a00      	cmp	r2, #0
 8004762:	dd03      	ble.n	800476c <_dtoa_r+0xae4>
 8004764:	2b39      	cmp	r3, #57	; 0x39
 8004766:	d0ee      	beq.n	8004746 <_dtoa_r+0xabe>
 8004768:	3301      	adds	r3, #1
 800476a:	e7c7      	b.n	80046fc <_dtoa_r+0xa74>
 800476c:	9a08      	ldr	r2, [sp, #32]
 800476e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004770:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004774:	428a      	cmp	r2, r1
 8004776:	d02a      	beq.n	80047ce <_dtoa_r+0xb46>
 8004778:	4659      	mov	r1, fp
 800477a:	2300      	movs	r3, #0
 800477c:	220a      	movs	r2, #10
 800477e:	4628      	mov	r0, r5
 8004780:	f000 fb16 	bl	8004db0 <__multadd>
 8004784:	45b0      	cmp	r8, r6
 8004786:	4683      	mov	fp, r0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	f04f 020a 	mov.w	r2, #10
 8004790:	4641      	mov	r1, r8
 8004792:	4628      	mov	r0, r5
 8004794:	d107      	bne.n	80047a6 <_dtoa_r+0xb1e>
 8004796:	f000 fb0b 	bl	8004db0 <__multadd>
 800479a:	4680      	mov	r8, r0
 800479c:	4606      	mov	r6, r0
 800479e:	9b08      	ldr	r3, [sp, #32]
 80047a0:	3301      	adds	r3, #1
 80047a2:	9308      	str	r3, [sp, #32]
 80047a4:	e775      	b.n	8004692 <_dtoa_r+0xa0a>
 80047a6:	f000 fb03 	bl	8004db0 <__multadd>
 80047aa:	4631      	mov	r1, r6
 80047ac:	4680      	mov	r8, r0
 80047ae:	2300      	movs	r3, #0
 80047b0:	220a      	movs	r2, #10
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 fafc 	bl	8004db0 <__multadd>
 80047b8:	4606      	mov	r6, r0
 80047ba:	e7f0      	b.n	800479e <_dtoa_r+0xb16>
 80047bc:	f1b9 0f00 	cmp.w	r9, #0
 80047c0:	bfcc      	ite	gt
 80047c2:	464f      	movgt	r7, r9
 80047c4:	2701      	movle	r7, #1
 80047c6:	f04f 0800 	mov.w	r8, #0
 80047ca:	9a03      	ldr	r2, [sp, #12]
 80047cc:	4417      	add	r7, r2
 80047ce:	4659      	mov	r1, fp
 80047d0:	2201      	movs	r2, #1
 80047d2:	4628      	mov	r0, r5
 80047d4:	9308      	str	r3, [sp, #32]
 80047d6:	f000 fc97 	bl	8005108 <__lshift>
 80047da:	4621      	mov	r1, r4
 80047dc:	4683      	mov	fp, r0
 80047de:	f000 fd03 	bl	80051e8 <__mcmp>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	dcb2      	bgt.n	800474c <_dtoa_r+0xac4>
 80047e6:	d102      	bne.n	80047ee <_dtoa_r+0xb66>
 80047e8:	9b08      	ldr	r3, [sp, #32]
 80047ea:	07db      	lsls	r3, r3, #31
 80047ec:	d4ae      	bmi.n	800474c <_dtoa_r+0xac4>
 80047ee:	463b      	mov	r3, r7
 80047f0:	461f      	mov	r7, r3
 80047f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047f6:	2a30      	cmp	r2, #48	; 0x30
 80047f8:	d0fa      	beq.n	80047f0 <_dtoa_r+0xb68>
 80047fa:	e6f9      	b.n	80045f0 <_dtoa_r+0x968>
 80047fc:	9a03      	ldr	r2, [sp, #12]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d1a5      	bne.n	800474e <_dtoa_r+0xac6>
 8004802:	2331      	movs	r3, #49	; 0x31
 8004804:	f10a 0a01 	add.w	sl, sl, #1
 8004808:	e779      	b.n	80046fe <_dtoa_r+0xa76>
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <_dtoa_r+0xbd4>)
 800480c:	f7ff baa8 	b.w	8003d60 <_dtoa_r+0xd8>
 8004810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004812:	2b00      	cmp	r3, #0
 8004814:	f47f aa81 	bne.w	8003d1a <_dtoa_r+0x92>
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <_dtoa_r+0xbd8>)
 800481a:	f7ff baa1 	b.w	8003d60 <_dtoa_r+0xd8>
 800481e:	f1b9 0f00 	cmp.w	r9, #0
 8004822:	dc03      	bgt.n	800482c <_dtoa_r+0xba4>
 8004824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004826:	2b02      	cmp	r3, #2
 8004828:	f73f aecb 	bgt.w	80045c2 <_dtoa_r+0x93a>
 800482c:	9f03      	ldr	r7, [sp, #12]
 800482e:	4621      	mov	r1, r4
 8004830:	4658      	mov	r0, fp
 8004832:	f7ff f99b 	bl	8003b6c <quorem>
 8004836:	9a03      	ldr	r2, [sp, #12]
 8004838:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800483c:	f807 3b01 	strb.w	r3, [r7], #1
 8004840:	1aba      	subs	r2, r7, r2
 8004842:	4591      	cmp	r9, r2
 8004844:	ddba      	ble.n	80047bc <_dtoa_r+0xb34>
 8004846:	4659      	mov	r1, fp
 8004848:	2300      	movs	r3, #0
 800484a:	220a      	movs	r2, #10
 800484c:	4628      	mov	r0, r5
 800484e:	f000 faaf 	bl	8004db0 <__multadd>
 8004852:	4683      	mov	fp, r0
 8004854:	e7eb      	b.n	800482e <_dtoa_r+0xba6>
 8004856:	bf00      	nop
 8004858:	08005ceb 	.word	0x08005ceb
 800485c:	08005c48 	.word	0x08005c48
 8004860:	08005c6c 	.word	0x08005c6c

08004864 <__sflush_r>:
 8004864:	898a      	ldrh	r2, [r1, #12]
 8004866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004868:	4605      	mov	r5, r0
 800486a:	0710      	lsls	r0, r2, #28
 800486c:	460c      	mov	r4, r1
 800486e:	d457      	bmi.n	8004920 <__sflush_r+0xbc>
 8004870:	684b      	ldr	r3, [r1, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	dc04      	bgt.n	8004880 <__sflush_r+0x1c>
 8004876:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	dc01      	bgt.n	8004880 <__sflush_r+0x1c>
 800487c:	2000      	movs	r0, #0
 800487e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004882:	2e00      	cmp	r6, #0
 8004884:	d0fa      	beq.n	800487c <__sflush_r+0x18>
 8004886:	2300      	movs	r3, #0
 8004888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800488c:	682f      	ldr	r7, [r5, #0]
 800488e:	602b      	str	r3, [r5, #0]
 8004890:	d032      	beq.n	80048f8 <__sflush_r+0x94>
 8004892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	075a      	lsls	r2, r3, #29
 8004898:	d505      	bpl.n	80048a6 <__sflush_r+0x42>
 800489a:	6863      	ldr	r3, [r4, #4]
 800489c:	1ac0      	subs	r0, r0, r3
 800489e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048a0:	b10b      	cbz	r3, 80048a6 <__sflush_r+0x42>
 80048a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048a4:	1ac0      	subs	r0, r0, r3
 80048a6:	2300      	movs	r3, #0
 80048a8:	4602      	mov	r2, r0
 80048aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ac:	4628      	mov	r0, r5
 80048ae:	6a21      	ldr	r1, [r4, #32]
 80048b0:	47b0      	blx	r6
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	d106      	bne.n	80048c6 <__sflush_r+0x62>
 80048b8:	6829      	ldr	r1, [r5, #0]
 80048ba:	291d      	cmp	r1, #29
 80048bc:	d82c      	bhi.n	8004918 <__sflush_r+0xb4>
 80048be:	4a29      	ldr	r2, [pc, #164]	; (8004964 <__sflush_r+0x100>)
 80048c0:	40ca      	lsrs	r2, r1
 80048c2:	07d6      	lsls	r6, r2, #31
 80048c4:	d528      	bpl.n	8004918 <__sflush_r+0xb4>
 80048c6:	2200      	movs	r2, #0
 80048c8:	6062      	str	r2, [r4, #4]
 80048ca:	6922      	ldr	r2, [r4, #16]
 80048cc:	04d9      	lsls	r1, r3, #19
 80048ce:	6022      	str	r2, [r4, #0]
 80048d0:	d504      	bpl.n	80048dc <__sflush_r+0x78>
 80048d2:	1c42      	adds	r2, r0, #1
 80048d4:	d101      	bne.n	80048da <__sflush_r+0x76>
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	b903      	cbnz	r3, 80048dc <__sflush_r+0x78>
 80048da:	6560      	str	r0, [r4, #84]	; 0x54
 80048dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048de:	602f      	str	r7, [r5, #0]
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d0cb      	beq.n	800487c <__sflush_r+0x18>
 80048e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e8:	4299      	cmp	r1, r3
 80048ea:	d002      	beq.n	80048f2 <__sflush_r+0x8e>
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 fd93 	bl	8005418 <_free_r>
 80048f2:	2000      	movs	r0, #0
 80048f4:	6360      	str	r0, [r4, #52]	; 0x34
 80048f6:	e7c2      	b.n	800487e <__sflush_r+0x1a>
 80048f8:	6a21      	ldr	r1, [r4, #32]
 80048fa:	2301      	movs	r3, #1
 80048fc:	4628      	mov	r0, r5
 80048fe:	47b0      	blx	r6
 8004900:	1c41      	adds	r1, r0, #1
 8004902:	d1c7      	bne.n	8004894 <__sflush_r+0x30>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0c4      	beq.n	8004894 <__sflush_r+0x30>
 800490a:	2b1d      	cmp	r3, #29
 800490c:	d001      	beq.n	8004912 <__sflush_r+0xae>
 800490e:	2b16      	cmp	r3, #22
 8004910:	d101      	bne.n	8004916 <__sflush_r+0xb2>
 8004912:	602f      	str	r7, [r5, #0]
 8004914:	e7b2      	b.n	800487c <__sflush_r+0x18>
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491c:	81a3      	strh	r3, [r4, #12]
 800491e:	e7ae      	b.n	800487e <__sflush_r+0x1a>
 8004920:	690f      	ldr	r7, [r1, #16]
 8004922:	2f00      	cmp	r7, #0
 8004924:	d0aa      	beq.n	800487c <__sflush_r+0x18>
 8004926:	0793      	lsls	r3, r2, #30
 8004928:	bf18      	it	ne
 800492a:	2300      	movne	r3, #0
 800492c:	680e      	ldr	r6, [r1, #0]
 800492e:	bf08      	it	eq
 8004930:	694b      	ldreq	r3, [r1, #20]
 8004932:	1bf6      	subs	r6, r6, r7
 8004934:	600f      	str	r7, [r1, #0]
 8004936:	608b      	str	r3, [r1, #8]
 8004938:	2e00      	cmp	r6, #0
 800493a:	dd9f      	ble.n	800487c <__sflush_r+0x18>
 800493c:	4633      	mov	r3, r6
 800493e:	463a      	mov	r2, r7
 8004940:	4628      	mov	r0, r5
 8004942:	6a21      	ldr	r1, [r4, #32]
 8004944:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004948:	47e0      	blx	ip
 800494a:	2800      	cmp	r0, #0
 800494c:	dc06      	bgt.n	800495c <__sflush_r+0xf8>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004958:	81a3      	strh	r3, [r4, #12]
 800495a:	e790      	b.n	800487e <__sflush_r+0x1a>
 800495c:	4407      	add	r7, r0
 800495e:	1a36      	subs	r6, r6, r0
 8004960:	e7ea      	b.n	8004938 <__sflush_r+0xd4>
 8004962:	bf00      	nop
 8004964:	20400001 	.word	0x20400001

08004968 <_fflush_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	690b      	ldr	r3, [r1, #16]
 800496c:	4605      	mov	r5, r0
 800496e:	460c      	mov	r4, r1
 8004970:	b913      	cbnz	r3, 8004978 <_fflush_r+0x10>
 8004972:	2500      	movs	r5, #0
 8004974:	4628      	mov	r0, r5
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	b118      	cbz	r0, 8004982 <_fflush_r+0x1a>
 800497a:	6983      	ldr	r3, [r0, #24]
 800497c:	b90b      	cbnz	r3, 8004982 <_fflush_r+0x1a>
 800497e:	f000 f887 	bl	8004a90 <__sinit>
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <_fflush_r+0x6c>)
 8004984:	429c      	cmp	r4, r3
 8004986:	d11b      	bne.n	80049c0 <_fflush_r+0x58>
 8004988:	686c      	ldr	r4, [r5, #4]
 800498a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ef      	beq.n	8004972 <_fflush_r+0xa>
 8004992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004994:	07d0      	lsls	r0, r2, #31
 8004996:	d404      	bmi.n	80049a2 <_fflush_r+0x3a>
 8004998:	0599      	lsls	r1, r3, #22
 800499a:	d402      	bmi.n	80049a2 <_fflush_r+0x3a>
 800499c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499e:	f000 f91a 	bl	8004bd6 <__retarget_lock_acquire_recursive>
 80049a2:	4628      	mov	r0, r5
 80049a4:	4621      	mov	r1, r4
 80049a6:	f7ff ff5d 	bl	8004864 <__sflush_r>
 80049aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ac:	4605      	mov	r5, r0
 80049ae:	07da      	lsls	r2, r3, #31
 80049b0:	d4e0      	bmi.n	8004974 <_fflush_r+0xc>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	059b      	lsls	r3, r3, #22
 80049b6:	d4dd      	bmi.n	8004974 <_fflush_r+0xc>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 f90d 	bl	8004bd8 <__retarget_lock_release_recursive>
 80049be:	e7d9      	b.n	8004974 <_fflush_r+0xc>
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <_fflush_r+0x70>)
 80049c2:	429c      	cmp	r4, r3
 80049c4:	d101      	bne.n	80049ca <_fflush_r+0x62>
 80049c6:	68ac      	ldr	r4, [r5, #8]
 80049c8:	e7df      	b.n	800498a <_fflush_r+0x22>
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <_fflush_r+0x74>)
 80049cc:	429c      	cmp	r4, r3
 80049ce:	bf08      	it	eq
 80049d0:	68ec      	ldreq	r4, [r5, #12]
 80049d2:	e7da      	b.n	800498a <_fflush_r+0x22>
 80049d4:	08005d1c 	.word	0x08005d1c
 80049d8:	08005d3c 	.word	0x08005d3c
 80049dc:	08005cfc 	.word	0x08005cfc

080049e0 <std>:
 80049e0:	2300      	movs	r3, #0
 80049e2:	b510      	push	{r4, lr}
 80049e4:	4604      	mov	r4, r0
 80049e6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ee:	6083      	str	r3, [r0, #8]
 80049f0:	8181      	strh	r1, [r0, #12]
 80049f2:	6643      	str	r3, [r0, #100]	; 0x64
 80049f4:	81c2      	strh	r2, [r0, #14]
 80049f6:	6183      	str	r3, [r0, #24]
 80049f8:	4619      	mov	r1, r3
 80049fa:	2208      	movs	r2, #8
 80049fc:	305c      	adds	r0, #92	; 0x5c
 80049fe:	f7fe faff 	bl	8003000 <memset>
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <std+0x38>)
 8004a04:	6224      	str	r4, [r4, #32]
 8004a06:	6263      	str	r3, [r4, #36]	; 0x24
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <std+0x3c>)
 8004a0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <std+0x40>)
 8004a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <std+0x44>)
 8004a12:	6323      	str	r3, [r4, #48]	; 0x30
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	bf00      	nop
 8004a18:	080058a1 	.word	0x080058a1
 8004a1c:	080058c3 	.word	0x080058c3
 8004a20:	080058fb 	.word	0x080058fb
 8004a24:	0800591f 	.word	0x0800591f

08004a28 <_cleanup_r>:
 8004a28:	4901      	ldr	r1, [pc, #4]	; (8004a30 <_cleanup_r+0x8>)
 8004a2a:	f000 b8af 	b.w	8004b8c <_fwalk_reent>
 8004a2e:	bf00      	nop
 8004a30:	08004969 	.word	0x08004969

08004a34 <__sfmoreglue>:
 8004a34:	2268      	movs	r2, #104	; 0x68
 8004a36:	b570      	push	{r4, r5, r6, lr}
 8004a38:	1e4d      	subs	r5, r1, #1
 8004a3a:	4355      	muls	r5, r2
 8004a3c:	460e      	mov	r6, r1
 8004a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a42:	f000 fd51 	bl	80054e8 <_malloc_r>
 8004a46:	4604      	mov	r4, r0
 8004a48:	b140      	cbz	r0, 8004a5c <__sfmoreglue+0x28>
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a50:	300c      	adds	r0, #12
 8004a52:	60a0      	str	r0, [r4, #8]
 8004a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a58:	f7fe fad2 	bl	8003000 <memset>
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}

08004a60 <__sfp_lock_acquire>:
 8004a60:	4801      	ldr	r0, [pc, #4]	; (8004a68 <__sfp_lock_acquire+0x8>)
 8004a62:	f000 b8b8 	b.w	8004bd6 <__retarget_lock_acquire_recursive>
 8004a66:	bf00      	nop
 8004a68:	2000029d 	.word	0x2000029d

08004a6c <__sfp_lock_release>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__sfp_lock_release+0x8>)
 8004a6e:	f000 b8b3 	b.w	8004bd8 <__retarget_lock_release_recursive>
 8004a72:	bf00      	nop
 8004a74:	2000029d 	.word	0x2000029d

08004a78 <__sinit_lock_acquire>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__sinit_lock_acquire+0x8>)
 8004a7a:	f000 b8ac 	b.w	8004bd6 <__retarget_lock_acquire_recursive>
 8004a7e:	bf00      	nop
 8004a80:	2000029e 	.word	0x2000029e

08004a84 <__sinit_lock_release>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__sinit_lock_release+0x8>)
 8004a86:	f000 b8a7 	b.w	8004bd8 <__retarget_lock_release_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	2000029e 	.word	0x2000029e

08004a90 <__sinit>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	4604      	mov	r4, r0
 8004a94:	f7ff fff0 	bl	8004a78 <__sinit_lock_acquire>
 8004a98:	69a3      	ldr	r3, [r4, #24]
 8004a9a:	b11b      	cbz	r3, 8004aa4 <__sinit+0x14>
 8004a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa0:	f7ff bff0 	b.w	8004a84 <__sinit_lock_release>
 8004aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004aa8:	6523      	str	r3, [r4, #80]	; 0x50
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <__sinit+0x68>)
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <__sinit+0x6c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	bf08      	it	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	4620      	mov	r0, r4
 8004aba:	bf08      	it	eq
 8004abc:	61a3      	streq	r3, [r4, #24]
 8004abe:	f000 f81f 	bl	8004b00 <__sfp>
 8004ac2:	6060      	str	r0, [r4, #4]
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f000 f81b 	bl	8004b00 <__sfp>
 8004aca:	60a0      	str	r0, [r4, #8]
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 f817 	bl	8004b00 <__sfp>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	60e0      	str	r0, [r4, #12]
 8004ad8:	6860      	ldr	r0, [r4, #4]
 8004ada:	f7ff ff81 	bl	80049e0 <std>
 8004ade:	2201      	movs	r2, #1
 8004ae0:	2109      	movs	r1, #9
 8004ae2:	68a0      	ldr	r0, [r4, #8]
 8004ae4:	f7ff ff7c 	bl	80049e0 <std>
 8004ae8:	2202      	movs	r2, #2
 8004aea:	2112      	movs	r1, #18
 8004aec:	68e0      	ldr	r0, [r4, #12]
 8004aee:	f7ff ff77 	bl	80049e0 <std>
 8004af2:	2301      	movs	r3, #1
 8004af4:	61a3      	str	r3, [r4, #24]
 8004af6:	e7d1      	b.n	8004a9c <__sinit+0xc>
 8004af8:	08005c34 	.word	0x08005c34
 8004afc:	08004a29 	.word	0x08004a29

08004b00 <__sfp>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	4607      	mov	r7, r0
 8004b04:	f7ff ffac 	bl	8004a60 <__sfp_lock_acquire>
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <__sfp+0x84>)
 8004b0a:	681e      	ldr	r6, [r3, #0]
 8004b0c:	69b3      	ldr	r3, [r6, #24]
 8004b0e:	b913      	cbnz	r3, 8004b16 <__sfp+0x16>
 8004b10:	4630      	mov	r0, r6
 8004b12:	f7ff ffbd 	bl	8004a90 <__sinit>
 8004b16:	3648      	adds	r6, #72	; 0x48
 8004b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	d503      	bpl.n	8004b28 <__sfp+0x28>
 8004b20:	6833      	ldr	r3, [r6, #0]
 8004b22:	b30b      	cbz	r3, 8004b68 <__sfp+0x68>
 8004b24:	6836      	ldr	r6, [r6, #0]
 8004b26:	e7f7      	b.n	8004b18 <__sfp+0x18>
 8004b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b2c:	b9d5      	cbnz	r5, 8004b64 <__sfp+0x64>
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <__sfp+0x88>)
 8004b30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b34:	60e3      	str	r3, [r4, #12]
 8004b36:	6665      	str	r5, [r4, #100]	; 0x64
 8004b38:	f000 f84c 	bl	8004bd4 <__retarget_lock_init_recursive>
 8004b3c:	f7ff ff96 	bl	8004a6c <__sfp_lock_release>
 8004b40:	2208      	movs	r2, #8
 8004b42:	4629      	mov	r1, r5
 8004b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b4c:	6025      	str	r5, [r4, #0]
 8004b4e:	61a5      	str	r5, [r4, #24]
 8004b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b54:	f7fe fa54 	bl	8003000 <memset>
 8004b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b60:	4620      	mov	r0, r4
 8004b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b64:	3468      	adds	r4, #104	; 0x68
 8004b66:	e7d9      	b.n	8004b1c <__sfp+0x1c>
 8004b68:	2104      	movs	r1, #4
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	f7ff ff62 	bl	8004a34 <__sfmoreglue>
 8004b70:	4604      	mov	r4, r0
 8004b72:	6030      	str	r0, [r6, #0]
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d1d5      	bne.n	8004b24 <__sfp+0x24>
 8004b78:	f7ff ff78 	bl	8004a6c <__sfp_lock_release>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	e7ee      	b.n	8004b60 <__sfp+0x60>
 8004b82:	bf00      	nop
 8004b84:	08005c34 	.word	0x08005c34
 8004b88:	ffff0001 	.word	0xffff0001

08004b8c <_fwalk_reent>:
 8004b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b90:	4606      	mov	r6, r0
 8004b92:	4688      	mov	r8, r1
 8004b94:	2700      	movs	r7, #0
 8004b96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004ba2:	d505      	bpl.n	8004bb0 <_fwalk_reent+0x24>
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	2c00      	cmp	r4, #0
 8004ba8:	d1f7      	bne.n	8004b9a <_fwalk_reent+0xe>
 8004baa:	4638      	mov	r0, r7
 8004bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb0:	89ab      	ldrh	r3, [r5, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d907      	bls.n	8004bc6 <_fwalk_reent+0x3a>
 8004bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	d003      	beq.n	8004bc6 <_fwalk_reent+0x3a>
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	47c0      	blx	r8
 8004bc4:	4307      	orrs	r7, r0
 8004bc6:	3568      	adds	r5, #104	; 0x68
 8004bc8:	e7e9      	b.n	8004b9e <_fwalk_reent+0x12>
	...

08004bcc <_localeconv_r>:
 8004bcc:	4800      	ldr	r0, [pc, #0]	; (8004bd0 <_localeconv_r+0x4>)
 8004bce:	4770      	bx	lr
 8004bd0:	20000160 	.word	0x20000160

08004bd4 <__retarget_lock_init_recursive>:
 8004bd4:	4770      	bx	lr

08004bd6 <__retarget_lock_acquire_recursive>:
 8004bd6:	4770      	bx	lr

08004bd8 <__retarget_lock_release_recursive>:
 8004bd8:	4770      	bx	lr

08004bda <__swhatbuf_r>:
 8004bda:	b570      	push	{r4, r5, r6, lr}
 8004bdc:	460e      	mov	r6, r1
 8004bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be2:	4614      	mov	r4, r2
 8004be4:	2900      	cmp	r1, #0
 8004be6:	461d      	mov	r5, r3
 8004be8:	b096      	sub	sp, #88	; 0x58
 8004bea:	da08      	bge.n	8004bfe <__swhatbuf_r+0x24>
 8004bec:	2200      	movs	r2, #0
 8004bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bf2:	602a      	str	r2, [r5, #0]
 8004bf4:	061a      	lsls	r2, r3, #24
 8004bf6:	d410      	bmi.n	8004c1a <__swhatbuf_r+0x40>
 8004bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfc:	e00e      	b.n	8004c1c <__swhatbuf_r+0x42>
 8004bfe:	466a      	mov	r2, sp
 8004c00:	f000 fee4 	bl	80059cc <_fstat_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	dbf1      	blt.n	8004bec <__swhatbuf_r+0x12>
 8004c08:	9a01      	ldr	r2, [sp, #4]
 8004c0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c12:	425a      	negs	r2, r3
 8004c14:	415a      	adcs	r2, r3
 8004c16:	602a      	str	r2, [r5, #0]
 8004c18:	e7ee      	b.n	8004bf8 <__swhatbuf_r+0x1e>
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	b016      	add	sp, #88	; 0x58
 8004c22:	bd70      	pop	{r4, r5, r6, pc}

08004c24 <__smakebuf_r>:
 8004c24:	898b      	ldrh	r3, [r1, #12]
 8004c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c28:	079d      	lsls	r5, r3, #30
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	d507      	bpl.n	8004c40 <__smakebuf_r+0x1c>
 8004c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	6163      	str	r3, [r4, #20]
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	466a      	mov	r2, sp
 8004c42:	ab01      	add	r3, sp, #4
 8004c44:	f7ff ffc9 	bl	8004bda <__swhatbuf_r>
 8004c48:	9900      	ldr	r1, [sp, #0]
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f000 fc4b 	bl	80054e8 <_malloc_r>
 8004c52:	b948      	cbnz	r0, 8004c68 <__smakebuf_r+0x44>
 8004c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c58:	059a      	lsls	r2, r3, #22
 8004c5a:	d4ef      	bmi.n	8004c3c <__smakebuf_r+0x18>
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	f043 0302 	orr.w	r3, r3, #2
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	e7e3      	b.n	8004c30 <__smakebuf_r+0xc>
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <__smakebuf_r+0x7c>)
 8004c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	6020      	str	r0, [r4, #0]
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	6120      	str	r0, [r4, #16]
 8004c7a:	6163      	str	r3, [r4, #20]
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	b15b      	cbz	r3, 8004c98 <__smakebuf_r+0x74>
 8004c80:	4630      	mov	r0, r6
 8004c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c86:	f000 feb3 	bl	80059f0 <_isatty_r>
 8004c8a:	b128      	cbz	r0, 8004c98 <__smakebuf_r+0x74>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	89a0      	ldrh	r0, [r4, #12]
 8004c9a:	4305      	orrs	r5, r0
 8004c9c:	81a5      	strh	r5, [r4, #12]
 8004c9e:	e7cd      	b.n	8004c3c <__smakebuf_r+0x18>
 8004ca0:	08004a29 	.word	0x08004a29

08004ca4 <malloc>:
 8004ca4:	4b02      	ldr	r3, [pc, #8]	; (8004cb0 <malloc+0xc>)
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f000 bc1d 	b.w	80054e8 <_malloc_r>
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <memchr>:
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	b2c9      	uxtb	r1, r1
 8004cba:	4402      	add	r2, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	d101      	bne.n	8004cc6 <memchr+0x12>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e003      	b.n	8004cce <memchr+0x1a>
 8004cc6:	7804      	ldrb	r4, [r0, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	428c      	cmp	r4, r1
 8004ccc:	d1f6      	bne.n	8004cbc <memchr+0x8>
 8004cce:	bd10      	pop	{r4, pc}

08004cd0 <memcpy>:
 8004cd0:	440a      	add	r2, r1
 8004cd2:	4291      	cmp	r1, r2
 8004cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd8:	d100      	bne.n	8004cdc <memcpy+0xc>
 8004cda:	4770      	bx	lr
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce2:	4291      	cmp	r1, r2
 8004ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce8:	d1f9      	bne.n	8004cde <memcpy+0xe>
 8004cea:	bd10      	pop	{r4, pc}

08004cec <_Balloc>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	b976      	cbnz	r6, 8004d14 <_Balloc+0x28>
 8004cf6:	2010      	movs	r0, #16
 8004cf8:	f7ff ffd4 	bl	8004ca4 <malloc>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6260      	str	r0, [r4, #36]	; 0x24
 8004d00:	b920      	cbnz	r0, 8004d0c <_Balloc+0x20>
 8004d02:	2166      	movs	r1, #102	; 0x66
 8004d04:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <_Balloc+0x78>)
 8004d06:	4818      	ldr	r0, [pc, #96]	; (8004d68 <_Balloc+0x7c>)
 8004d08:	f000 fe20 	bl	800594c <__assert_func>
 8004d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d10:	6006      	str	r6, [r0, #0]
 8004d12:	60c6      	str	r6, [r0, #12]
 8004d14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d16:	68f3      	ldr	r3, [r6, #12]
 8004d18:	b183      	cbz	r3, 8004d3c <_Balloc+0x50>
 8004d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d22:	b9b8      	cbnz	r0, 8004d54 <_Balloc+0x68>
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f605 	lsl.w	r6, r1, r5
 8004d2a:	1d72      	adds	r2, r6, #5
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	0092      	lsls	r2, r2, #2
 8004d30:	f000 fb5e 	bl	80053f0 <_calloc_r>
 8004d34:	b160      	cbz	r0, 8004d50 <_Balloc+0x64>
 8004d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d3a:	e00e      	b.n	8004d5a <_Balloc+0x6e>
 8004d3c:	2221      	movs	r2, #33	; 0x21
 8004d3e:	2104      	movs	r1, #4
 8004d40:	4620      	mov	r0, r4
 8004d42:	f000 fb55 	bl	80053f0 <_calloc_r>
 8004d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d48:	60f0      	str	r0, [r6, #12]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e4      	bne.n	8004d1a <_Balloc+0x2e>
 8004d50:	2000      	movs	r0, #0
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
 8004d54:	6802      	ldr	r2, [r0, #0]
 8004d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d60:	e7f7      	b.n	8004d52 <_Balloc+0x66>
 8004d62:	bf00      	nop
 8004d64:	08005c79 	.word	0x08005c79
 8004d68:	08005d5c 	.word	0x08005d5c

08004d6c <_Bfree>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d70:	4605      	mov	r5, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	b976      	cbnz	r6, 8004d94 <_Bfree+0x28>
 8004d76:	2010      	movs	r0, #16
 8004d78:	f7ff ff94 	bl	8004ca4 <malloc>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6268      	str	r0, [r5, #36]	; 0x24
 8004d80:	b920      	cbnz	r0, 8004d8c <_Bfree+0x20>
 8004d82:	218a      	movs	r1, #138	; 0x8a
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <_Bfree+0x3c>)
 8004d86:	4809      	ldr	r0, [pc, #36]	; (8004dac <_Bfree+0x40>)
 8004d88:	f000 fde0 	bl	800594c <__assert_func>
 8004d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d90:	6006      	str	r6, [r0, #0]
 8004d92:	60c6      	str	r6, [r0, #12]
 8004d94:	b13c      	cbz	r4, 8004da6 <_Bfree+0x3a>
 8004d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d98:	6862      	ldr	r2, [r4, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004da0:	6021      	str	r1, [r4, #0]
 8004da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	08005c79 	.word	0x08005c79
 8004dac:	08005d5c 	.word	0x08005d5c

08004db0 <__multadd>:
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	4607      	mov	r7, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	461e      	mov	r6, r3
 8004dba:	2000      	movs	r0, #0
 8004dbc:	690d      	ldr	r5, [r1, #16]
 8004dbe:	f101 0c14 	add.w	ip, r1, #20
 8004dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	b299      	uxth	r1, r3
 8004dca:	fb02 6101 	mla	r1, r2, r1, r6
 8004dce:	0c1e      	lsrs	r6, r3, #16
 8004dd0:	0c0b      	lsrs	r3, r1, #16
 8004dd2:	fb02 3306 	mla	r3, r2, r6, r3
 8004dd6:	b289      	uxth	r1, r1
 8004dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ddc:	4285      	cmp	r5, r0
 8004dde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004de2:	f84c 1b04 	str.w	r1, [ip], #4
 8004de6:	dcec      	bgt.n	8004dc2 <__multadd+0x12>
 8004de8:	b30e      	cbz	r6, 8004e2e <__multadd+0x7e>
 8004dea:	68a3      	ldr	r3, [r4, #8]
 8004dec:	42ab      	cmp	r3, r5
 8004dee:	dc19      	bgt.n	8004e24 <__multadd+0x74>
 8004df0:	6861      	ldr	r1, [r4, #4]
 8004df2:	4638      	mov	r0, r7
 8004df4:	3101      	adds	r1, #1
 8004df6:	f7ff ff79 	bl	8004cec <_Balloc>
 8004dfa:	4680      	mov	r8, r0
 8004dfc:	b928      	cbnz	r0, 8004e0a <__multadd+0x5a>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	21b5      	movs	r1, #181	; 0xb5
 8004e02:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <__multadd+0x84>)
 8004e04:	480c      	ldr	r0, [pc, #48]	; (8004e38 <__multadd+0x88>)
 8004e06:	f000 fda1 	bl	800594c <__assert_func>
 8004e0a:	6922      	ldr	r2, [r4, #16]
 8004e0c:	f104 010c 	add.w	r1, r4, #12
 8004e10:	3202      	adds	r2, #2
 8004e12:	0092      	lsls	r2, r2, #2
 8004e14:	300c      	adds	r0, #12
 8004e16:	f7ff ff5b 	bl	8004cd0 <memcpy>
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	f7ff ffa5 	bl	8004d6c <_Bfree>
 8004e22:	4644      	mov	r4, r8
 8004e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e28:	3501      	adds	r5, #1
 8004e2a:	615e      	str	r6, [r3, #20]
 8004e2c:	6125      	str	r5, [r4, #16]
 8004e2e:	4620      	mov	r0, r4
 8004e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e34:	08005ceb 	.word	0x08005ceb
 8004e38:	08005d5c 	.word	0x08005d5c

08004e3c <__hi0bits>:
 8004e3c:	0c02      	lsrs	r2, r0, #16
 8004e3e:	0412      	lsls	r2, r2, #16
 8004e40:	4603      	mov	r3, r0
 8004e42:	b9ca      	cbnz	r2, 8004e78 <__hi0bits+0x3c>
 8004e44:	0403      	lsls	r3, r0, #16
 8004e46:	2010      	movs	r0, #16
 8004e48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004e4c:	bf04      	itt	eq
 8004e4e:	021b      	lsleq	r3, r3, #8
 8004e50:	3008      	addeq	r0, #8
 8004e52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004e56:	bf04      	itt	eq
 8004e58:	011b      	lsleq	r3, r3, #4
 8004e5a:	3004      	addeq	r0, #4
 8004e5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004e60:	bf04      	itt	eq
 8004e62:	009b      	lsleq	r3, r3, #2
 8004e64:	3002      	addeq	r0, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	db05      	blt.n	8004e76 <__hi0bits+0x3a>
 8004e6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004e6e:	f100 0001 	add.w	r0, r0, #1
 8004e72:	bf08      	it	eq
 8004e74:	2020      	moveq	r0, #32
 8004e76:	4770      	bx	lr
 8004e78:	2000      	movs	r0, #0
 8004e7a:	e7e5      	b.n	8004e48 <__hi0bits+0xc>

08004e7c <__lo0bits>:
 8004e7c:	6803      	ldr	r3, [r0, #0]
 8004e7e:	4602      	mov	r2, r0
 8004e80:	f013 0007 	ands.w	r0, r3, #7
 8004e84:	d00b      	beq.n	8004e9e <__lo0bits+0x22>
 8004e86:	07d9      	lsls	r1, r3, #31
 8004e88:	d421      	bmi.n	8004ece <__lo0bits+0x52>
 8004e8a:	0798      	lsls	r0, r3, #30
 8004e8c:	bf49      	itett	mi
 8004e8e:	085b      	lsrmi	r3, r3, #1
 8004e90:	089b      	lsrpl	r3, r3, #2
 8004e92:	2001      	movmi	r0, #1
 8004e94:	6013      	strmi	r3, [r2, #0]
 8004e96:	bf5c      	itt	pl
 8004e98:	2002      	movpl	r0, #2
 8004e9a:	6013      	strpl	r3, [r2, #0]
 8004e9c:	4770      	bx	lr
 8004e9e:	b299      	uxth	r1, r3
 8004ea0:	b909      	cbnz	r1, 8004ea6 <__lo0bits+0x2a>
 8004ea2:	2010      	movs	r0, #16
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	b2d9      	uxtb	r1, r3
 8004ea8:	b909      	cbnz	r1, 8004eae <__lo0bits+0x32>
 8004eaa:	3008      	adds	r0, #8
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	0719      	lsls	r1, r3, #28
 8004eb0:	bf04      	itt	eq
 8004eb2:	091b      	lsreq	r3, r3, #4
 8004eb4:	3004      	addeq	r0, #4
 8004eb6:	0799      	lsls	r1, r3, #30
 8004eb8:	bf04      	itt	eq
 8004eba:	089b      	lsreq	r3, r3, #2
 8004ebc:	3002      	addeq	r0, #2
 8004ebe:	07d9      	lsls	r1, r3, #31
 8004ec0:	d403      	bmi.n	8004eca <__lo0bits+0x4e>
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	f100 0001 	add.w	r0, r0, #1
 8004ec8:	d003      	beq.n	8004ed2 <__lo0bits+0x56>
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	4770      	bx	lr
 8004ece:	2000      	movs	r0, #0
 8004ed0:	4770      	bx	lr
 8004ed2:	2020      	movs	r0, #32
 8004ed4:	4770      	bx	lr
	...

08004ed8 <__i2b>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	460c      	mov	r4, r1
 8004edc:	2101      	movs	r1, #1
 8004ede:	f7ff ff05 	bl	8004cec <_Balloc>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	b928      	cbnz	r0, 8004ef2 <__i2b+0x1a>
 8004ee6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004eea:	4b04      	ldr	r3, [pc, #16]	; (8004efc <__i2b+0x24>)
 8004eec:	4804      	ldr	r0, [pc, #16]	; (8004f00 <__i2b+0x28>)
 8004eee:	f000 fd2d 	bl	800594c <__assert_func>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	6144      	str	r4, [r0, #20]
 8004ef6:	6103      	str	r3, [r0, #16]
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	bf00      	nop
 8004efc:	08005ceb 	.word	0x08005ceb
 8004f00:	08005d5c 	.word	0x08005d5c

08004f04 <__multiply>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4691      	mov	r9, r2
 8004f0a:	690a      	ldr	r2, [r1, #16]
 8004f0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f10:	460c      	mov	r4, r1
 8004f12:	429a      	cmp	r2, r3
 8004f14:	bfbe      	ittt	lt
 8004f16:	460b      	movlt	r3, r1
 8004f18:	464c      	movlt	r4, r9
 8004f1a:	4699      	movlt	r9, r3
 8004f1c:	6927      	ldr	r7, [r4, #16]
 8004f1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	6861      	ldr	r1, [r4, #4]
 8004f26:	eb07 060a 	add.w	r6, r7, sl
 8004f2a:	42b3      	cmp	r3, r6
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	bfb8      	it	lt
 8004f30:	3101      	addlt	r1, #1
 8004f32:	f7ff fedb 	bl	8004cec <_Balloc>
 8004f36:	b930      	cbnz	r0, 8004f46 <__multiply+0x42>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f240 115d 	movw	r1, #349	; 0x15d
 8004f3e:	4b43      	ldr	r3, [pc, #268]	; (800504c <__multiply+0x148>)
 8004f40:	4843      	ldr	r0, [pc, #268]	; (8005050 <__multiply+0x14c>)
 8004f42:	f000 fd03 	bl	800594c <__assert_func>
 8004f46:	f100 0514 	add.w	r5, r0, #20
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f52:	4543      	cmp	r3, r8
 8004f54:	d321      	bcc.n	8004f9a <__multiply+0x96>
 8004f56:	f104 0314 	add.w	r3, r4, #20
 8004f5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004f5e:	f109 0314 	add.w	r3, r9, #20
 8004f62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004f66:	9202      	str	r2, [sp, #8]
 8004f68:	1b3a      	subs	r2, r7, r4
 8004f6a:	3a15      	subs	r2, #21
 8004f6c:	f022 0203 	bic.w	r2, r2, #3
 8004f70:	3204      	adds	r2, #4
 8004f72:	f104 0115 	add.w	r1, r4, #21
 8004f76:	428f      	cmp	r7, r1
 8004f78:	bf38      	it	cc
 8004f7a:	2204      	movcc	r2, #4
 8004f7c:	9201      	str	r2, [sp, #4]
 8004f7e:	9a02      	ldr	r2, [sp, #8]
 8004f80:	9303      	str	r3, [sp, #12]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d80c      	bhi.n	8004fa0 <__multiply+0x9c>
 8004f86:	2e00      	cmp	r6, #0
 8004f88:	dd03      	ble.n	8004f92 <__multiply+0x8e>
 8004f8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d059      	beq.n	8005046 <__multiply+0x142>
 8004f92:	6106      	str	r6, [r0, #16]
 8004f94:	b005      	add	sp, #20
 8004f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9a:	f843 2b04 	str.w	r2, [r3], #4
 8004f9e:	e7d8      	b.n	8004f52 <__multiply+0x4e>
 8004fa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004fa4:	f1ba 0f00 	cmp.w	sl, #0
 8004fa8:	d023      	beq.n	8004ff2 <__multiply+0xee>
 8004faa:	46a9      	mov	r9, r5
 8004fac:	f04f 0c00 	mov.w	ip, #0
 8004fb0:	f104 0e14 	add.w	lr, r4, #20
 8004fb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004fb8:	f8d9 1000 	ldr.w	r1, [r9]
 8004fbc:	fa1f fb82 	uxth.w	fp, r2
 8004fc0:	b289      	uxth	r1, r1
 8004fc2:	fb0a 110b 	mla	r1, sl, fp, r1
 8004fc6:	4461      	add	r1, ip
 8004fc8:	f8d9 c000 	ldr.w	ip, [r9]
 8004fcc:	0c12      	lsrs	r2, r2, #16
 8004fce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004fd2:	fb0a c202 	mla	r2, sl, r2, ip
 8004fd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004fda:	b289      	uxth	r1, r1
 8004fdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004fe0:	4577      	cmp	r7, lr
 8004fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004fe6:	f849 1b04 	str.w	r1, [r9], #4
 8004fea:	d8e3      	bhi.n	8004fb4 <__multiply+0xb0>
 8004fec:	9a01      	ldr	r2, [sp, #4]
 8004fee:	f845 c002 	str.w	ip, [r5, r2]
 8004ff2:	9a03      	ldr	r2, [sp, #12]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ffa:	f1b9 0f00 	cmp.w	r9, #0
 8004ffe:	d020      	beq.n	8005042 <__multiply+0x13e>
 8005000:	46ae      	mov	lr, r5
 8005002:	f04f 0a00 	mov.w	sl, #0
 8005006:	6829      	ldr	r1, [r5, #0]
 8005008:	f104 0c14 	add.w	ip, r4, #20
 800500c:	f8bc b000 	ldrh.w	fp, [ip]
 8005010:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005014:	b289      	uxth	r1, r1
 8005016:	fb09 220b 	mla	r2, r9, fp, r2
 800501a:	4492      	add	sl, r2
 800501c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005020:	f84e 1b04 	str.w	r1, [lr], #4
 8005024:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005028:	f8be 1000 	ldrh.w	r1, [lr]
 800502c:	0c12      	lsrs	r2, r2, #16
 800502e:	fb09 1102 	mla	r1, r9, r2, r1
 8005032:	4567      	cmp	r7, ip
 8005034:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005038:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800503c:	d8e6      	bhi.n	800500c <__multiply+0x108>
 800503e:	9a01      	ldr	r2, [sp, #4]
 8005040:	50a9      	str	r1, [r5, r2]
 8005042:	3504      	adds	r5, #4
 8005044:	e79b      	b.n	8004f7e <__multiply+0x7a>
 8005046:	3e01      	subs	r6, #1
 8005048:	e79d      	b.n	8004f86 <__multiply+0x82>
 800504a:	bf00      	nop
 800504c:	08005ceb 	.word	0x08005ceb
 8005050:	08005d5c 	.word	0x08005d5c

08005054 <__pow5mult>:
 8005054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005058:	4615      	mov	r5, r2
 800505a:	f012 0203 	ands.w	r2, r2, #3
 800505e:	4606      	mov	r6, r0
 8005060:	460f      	mov	r7, r1
 8005062:	d007      	beq.n	8005074 <__pow5mult+0x20>
 8005064:	4c25      	ldr	r4, [pc, #148]	; (80050fc <__pow5mult+0xa8>)
 8005066:	3a01      	subs	r2, #1
 8005068:	2300      	movs	r3, #0
 800506a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800506e:	f7ff fe9f 	bl	8004db0 <__multadd>
 8005072:	4607      	mov	r7, r0
 8005074:	10ad      	asrs	r5, r5, #2
 8005076:	d03d      	beq.n	80050f4 <__pow5mult+0xa0>
 8005078:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800507a:	b97c      	cbnz	r4, 800509c <__pow5mult+0x48>
 800507c:	2010      	movs	r0, #16
 800507e:	f7ff fe11 	bl	8004ca4 <malloc>
 8005082:	4602      	mov	r2, r0
 8005084:	6270      	str	r0, [r6, #36]	; 0x24
 8005086:	b928      	cbnz	r0, 8005094 <__pow5mult+0x40>
 8005088:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800508c:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <__pow5mult+0xac>)
 800508e:	481d      	ldr	r0, [pc, #116]	; (8005104 <__pow5mult+0xb0>)
 8005090:	f000 fc5c 	bl	800594c <__assert_func>
 8005094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005098:	6004      	str	r4, [r0, #0]
 800509a:	60c4      	str	r4, [r0, #12]
 800509c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80050a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050a4:	b94c      	cbnz	r4, 80050ba <__pow5mult+0x66>
 80050a6:	f240 2171 	movw	r1, #625	; 0x271
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7ff ff14 	bl	8004ed8 <__i2b>
 80050b0:	2300      	movs	r3, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80050b8:	6003      	str	r3, [r0, #0]
 80050ba:	f04f 0900 	mov.w	r9, #0
 80050be:	07eb      	lsls	r3, r5, #31
 80050c0:	d50a      	bpl.n	80050d8 <__pow5mult+0x84>
 80050c2:	4639      	mov	r1, r7
 80050c4:	4622      	mov	r2, r4
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7ff ff1c 	bl	8004f04 <__multiply>
 80050cc:	4680      	mov	r8, r0
 80050ce:	4639      	mov	r1, r7
 80050d0:	4630      	mov	r0, r6
 80050d2:	f7ff fe4b 	bl	8004d6c <_Bfree>
 80050d6:	4647      	mov	r7, r8
 80050d8:	106d      	asrs	r5, r5, #1
 80050da:	d00b      	beq.n	80050f4 <__pow5mult+0xa0>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	b938      	cbnz	r0, 80050f0 <__pow5mult+0x9c>
 80050e0:	4622      	mov	r2, r4
 80050e2:	4621      	mov	r1, r4
 80050e4:	4630      	mov	r0, r6
 80050e6:	f7ff ff0d 	bl	8004f04 <__multiply>
 80050ea:	6020      	str	r0, [r4, #0]
 80050ec:	f8c0 9000 	str.w	r9, [r0]
 80050f0:	4604      	mov	r4, r0
 80050f2:	e7e4      	b.n	80050be <__pow5mult+0x6a>
 80050f4:	4638      	mov	r0, r7
 80050f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050fa:	bf00      	nop
 80050fc:	08005ea8 	.word	0x08005ea8
 8005100:	08005c79 	.word	0x08005c79
 8005104:	08005d5c 	.word	0x08005d5c

08005108 <__lshift>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	460c      	mov	r4, r1
 800510e:	4607      	mov	r7, r0
 8005110:	4691      	mov	r9, r2
 8005112:	6923      	ldr	r3, [r4, #16]
 8005114:	6849      	ldr	r1, [r1, #4]
 8005116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800511a:	68a3      	ldr	r3, [r4, #8]
 800511c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005120:	f108 0601 	add.w	r6, r8, #1
 8005124:	42b3      	cmp	r3, r6
 8005126:	db0b      	blt.n	8005140 <__lshift+0x38>
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff fddf 	bl	8004cec <_Balloc>
 800512e:	4605      	mov	r5, r0
 8005130:	b948      	cbnz	r0, 8005146 <__lshift+0x3e>
 8005132:	4602      	mov	r2, r0
 8005134:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005138:	4b29      	ldr	r3, [pc, #164]	; (80051e0 <__lshift+0xd8>)
 800513a:	482a      	ldr	r0, [pc, #168]	; (80051e4 <__lshift+0xdc>)
 800513c:	f000 fc06 	bl	800594c <__assert_func>
 8005140:	3101      	adds	r1, #1
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	e7ee      	b.n	8005124 <__lshift+0x1c>
 8005146:	2300      	movs	r3, #0
 8005148:	f100 0114 	add.w	r1, r0, #20
 800514c:	f100 0210 	add.w	r2, r0, #16
 8005150:	4618      	mov	r0, r3
 8005152:	4553      	cmp	r3, sl
 8005154:	db37      	blt.n	80051c6 <__lshift+0xbe>
 8005156:	6920      	ldr	r0, [r4, #16]
 8005158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800515c:	f104 0314 	add.w	r3, r4, #20
 8005160:	f019 091f 	ands.w	r9, r9, #31
 8005164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005168:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800516c:	d02f      	beq.n	80051ce <__lshift+0xc6>
 800516e:	468a      	mov	sl, r1
 8005170:	f04f 0c00 	mov.w	ip, #0
 8005174:	f1c9 0e20 	rsb	lr, r9, #32
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	fa02 f209 	lsl.w	r2, r2, r9
 800517e:	ea42 020c 	orr.w	r2, r2, ip
 8005182:	f84a 2b04 	str.w	r2, [sl], #4
 8005186:	f853 2b04 	ldr.w	r2, [r3], #4
 800518a:	4298      	cmp	r0, r3
 800518c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005190:	d8f2      	bhi.n	8005178 <__lshift+0x70>
 8005192:	1b03      	subs	r3, r0, r4
 8005194:	3b15      	subs	r3, #21
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	3304      	adds	r3, #4
 800519c:	f104 0215 	add.w	r2, r4, #21
 80051a0:	4290      	cmp	r0, r2
 80051a2:	bf38      	it	cc
 80051a4:	2304      	movcc	r3, #4
 80051a6:	f841 c003 	str.w	ip, [r1, r3]
 80051aa:	f1bc 0f00 	cmp.w	ip, #0
 80051ae:	d001      	beq.n	80051b4 <__lshift+0xac>
 80051b0:	f108 0602 	add.w	r6, r8, #2
 80051b4:	3e01      	subs	r6, #1
 80051b6:	4638      	mov	r0, r7
 80051b8:	4621      	mov	r1, r4
 80051ba:	612e      	str	r6, [r5, #16]
 80051bc:	f7ff fdd6 	bl	8004d6c <_Bfree>
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80051ca:	3301      	adds	r3, #1
 80051cc:	e7c1      	b.n	8005152 <__lshift+0x4a>
 80051ce:	3904      	subs	r1, #4
 80051d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d4:	4298      	cmp	r0, r3
 80051d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80051da:	d8f9      	bhi.n	80051d0 <__lshift+0xc8>
 80051dc:	e7ea      	b.n	80051b4 <__lshift+0xac>
 80051de:	bf00      	nop
 80051e0:	08005ceb 	.word	0x08005ceb
 80051e4:	08005d5c 	.word	0x08005d5c

080051e8 <__mcmp>:
 80051e8:	4603      	mov	r3, r0
 80051ea:	690a      	ldr	r2, [r1, #16]
 80051ec:	6900      	ldr	r0, [r0, #16]
 80051ee:	b530      	push	{r4, r5, lr}
 80051f0:	1a80      	subs	r0, r0, r2
 80051f2:	d10d      	bne.n	8005210 <__mcmp+0x28>
 80051f4:	3314      	adds	r3, #20
 80051f6:	3114      	adds	r1, #20
 80051f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80051fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005200:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005208:	4295      	cmp	r5, r2
 800520a:	d002      	beq.n	8005212 <__mcmp+0x2a>
 800520c:	d304      	bcc.n	8005218 <__mcmp+0x30>
 800520e:	2001      	movs	r0, #1
 8005210:	bd30      	pop	{r4, r5, pc}
 8005212:	42a3      	cmp	r3, r4
 8005214:	d3f4      	bcc.n	8005200 <__mcmp+0x18>
 8005216:	e7fb      	b.n	8005210 <__mcmp+0x28>
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e7f8      	b.n	8005210 <__mcmp+0x28>
	...

08005220 <__mdiff>:
 8005220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	460d      	mov	r5, r1
 8005226:	4607      	mov	r7, r0
 8005228:	4611      	mov	r1, r2
 800522a:	4628      	mov	r0, r5
 800522c:	4614      	mov	r4, r2
 800522e:	f7ff ffdb 	bl	80051e8 <__mcmp>
 8005232:	1e06      	subs	r6, r0, #0
 8005234:	d111      	bne.n	800525a <__mdiff+0x3a>
 8005236:	4631      	mov	r1, r6
 8005238:	4638      	mov	r0, r7
 800523a:	f7ff fd57 	bl	8004cec <_Balloc>
 800523e:	4602      	mov	r2, r0
 8005240:	b928      	cbnz	r0, 800524e <__mdiff+0x2e>
 8005242:	f240 2132 	movw	r1, #562	; 0x232
 8005246:	4b3a      	ldr	r3, [pc, #232]	; (8005330 <__mdiff+0x110>)
 8005248:	483a      	ldr	r0, [pc, #232]	; (8005334 <__mdiff+0x114>)
 800524a:	f000 fb7f 	bl	800594c <__assert_func>
 800524e:	2301      	movs	r3, #1
 8005250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005254:	4610      	mov	r0, r2
 8005256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	bfa4      	itt	ge
 800525c:	4623      	movge	r3, r4
 800525e:	462c      	movge	r4, r5
 8005260:	4638      	mov	r0, r7
 8005262:	6861      	ldr	r1, [r4, #4]
 8005264:	bfa6      	itte	ge
 8005266:	461d      	movge	r5, r3
 8005268:	2600      	movge	r6, #0
 800526a:	2601      	movlt	r6, #1
 800526c:	f7ff fd3e 	bl	8004cec <_Balloc>
 8005270:	4602      	mov	r2, r0
 8005272:	b918      	cbnz	r0, 800527c <__mdiff+0x5c>
 8005274:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005278:	4b2d      	ldr	r3, [pc, #180]	; (8005330 <__mdiff+0x110>)
 800527a:	e7e5      	b.n	8005248 <__mdiff+0x28>
 800527c:	f102 0814 	add.w	r8, r2, #20
 8005280:	46c2      	mov	sl, r8
 8005282:	f04f 0c00 	mov.w	ip, #0
 8005286:	6927      	ldr	r7, [r4, #16]
 8005288:	60c6      	str	r6, [r0, #12]
 800528a:	692e      	ldr	r6, [r5, #16]
 800528c:	f104 0014 	add.w	r0, r4, #20
 8005290:	f105 0914 	add.w	r9, r5, #20
 8005294:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005298:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800529c:	3410      	adds	r4, #16
 800529e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80052a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80052a6:	fa1f f18b 	uxth.w	r1, fp
 80052aa:	448c      	add	ip, r1
 80052ac:	b299      	uxth	r1, r3
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	ebac 0101 	sub.w	r1, ip, r1
 80052b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80052b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80052bc:	b289      	uxth	r1, r1
 80052be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80052c2:	454e      	cmp	r6, r9
 80052c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80052c8:	f84a 3b04 	str.w	r3, [sl], #4
 80052cc:	d8e7      	bhi.n	800529e <__mdiff+0x7e>
 80052ce:	1b73      	subs	r3, r6, r5
 80052d0:	3b15      	subs	r3, #21
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	3515      	adds	r5, #21
 80052d8:	3304      	adds	r3, #4
 80052da:	42ae      	cmp	r6, r5
 80052dc:	bf38      	it	cc
 80052de:	2304      	movcc	r3, #4
 80052e0:	4418      	add	r0, r3
 80052e2:	4443      	add	r3, r8
 80052e4:	461e      	mov	r6, r3
 80052e6:	4605      	mov	r5, r0
 80052e8:	4575      	cmp	r5, lr
 80052ea:	d30e      	bcc.n	800530a <__mdiff+0xea>
 80052ec:	f10e 0103 	add.w	r1, lr, #3
 80052f0:	1a09      	subs	r1, r1, r0
 80052f2:	f021 0103 	bic.w	r1, r1, #3
 80052f6:	3803      	subs	r0, #3
 80052f8:	4586      	cmp	lr, r0
 80052fa:	bf38      	it	cc
 80052fc:	2100      	movcc	r1, #0
 80052fe:	4419      	add	r1, r3
 8005300:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005304:	b18b      	cbz	r3, 800532a <__mdiff+0x10a>
 8005306:	6117      	str	r7, [r2, #16]
 8005308:	e7a4      	b.n	8005254 <__mdiff+0x34>
 800530a:	f855 8b04 	ldr.w	r8, [r5], #4
 800530e:	fa1f f188 	uxth.w	r1, r8
 8005312:	4461      	add	r1, ip
 8005314:	140c      	asrs	r4, r1, #16
 8005316:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800531a:	b289      	uxth	r1, r1
 800531c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005320:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005324:	f846 1b04 	str.w	r1, [r6], #4
 8005328:	e7de      	b.n	80052e8 <__mdiff+0xc8>
 800532a:	3f01      	subs	r7, #1
 800532c:	e7e8      	b.n	8005300 <__mdiff+0xe0>
 800532e:	bf00      	nop
 8005330:	08005ceb 	.word	0x08005ceb
 8005334:	08005d5c 	.word	0x08005d5c

08005338 <__d2b>:
 8005338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800533c:	2101      	movs	r1, #1
 800533e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005342:	4690      	mov	r8, r2
 8005344:	461d      	mov	r5, r3
 8005346:	f7ff fcd1 	bl	8004cec <_Balloc>
 800534a:	4604      	mov	r4, r0
 800534c:	b930      	cbnz	r0, 800535c <__d2b+0x24>
 800534e:	4602      	mov	r2, r0
 8005350:	f240 310a 	movw	r1, #778	; 0x30a
 8005354:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <__d2b+0xb0>)
 8005356:	4825      	ldr	r0, [pc, #148]	; (80053ec <__d2b+0xb4>)
 8005358:	f000 faf8 	bl	800594c <__assert_func>
 800535c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005360:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005364:	bb2d      	cbnz	r5, 80053b2 <__d2b+0x7a>
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	f1b8 0300 	subs.w	r3, r8, #0
 800536c:	d026      	beq.n	80053bc <__d2b+0x84>
 800536e:	4668      	mov	r0, sp
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	f7ff fd83 	bl	8004e7c <__lo0bits>
 8005376:	9900      	ldr	r1, [sp, #0]
 8005378:	b1f0      	cbz	r0, 80053b8 <__d2b+0x80>
 800537a:	9a01      	ldr	r2, [sp, #4]
 800537c:	f1c0 0320 	rsb	r3, r0, #32
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	430b      	orrs	r3, r1
 8005386:	40c2      	lsrs	r2, r0
 8005388:	6163      	str	r3, [r4, #20]
 800538a:	9201      	str	r2, [sp, #4]
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf14      	ite	ne
 8005392:	2102      	movne	r1, #2
 8005394:	2101      	moveq	r1, #1
 8005396:	61a3      	str	r3, [r4, #24]
 8005398:	6121      	str	r1, [r4, #16]
 800539a:	b1c5      	cbz	r5, 80053ce <__d2b+0x96>
 800539c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053a0:	4405      	add	r5, r0
 80053a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053a6:	603d      	str	r5, [r7, #0]
 80053a8:	6030      	str	r0, [r6, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	b002      	add	sp, #8
 80053ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b6:	e7d6      	b.n	8005366 <__d2b+0x2e>
 80053b8:	6161      	str	r1, [r4, #20]
 80053ba:	e7e7      	b.n	800538c <__d2b+0x54>
 80053bc:	a801      	add	r0, sp, #4
 80053be:	f7ff fd5d 	bl	8004e7c <__lo0bits>
 80053c2:	2101      	movs	r1, #1
 80053c4:	9b01      	ldr	r3, [sp, #4]
 80053c6:	6121      	str	r1, [r4, #16]
 80053c8:	6163      	str	r3, [r4, #20]
 80053ca:	3020      	adds	r0, #32
 80053cc:	e7e5      	b.n	800539a <__d2b+0x62>
 80053ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80053d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053d6:	6038      	str	r0, [r7, #0]
 80053d8:	6918      	ldr	r0, [r3, #16]
 80053da:	f7ff fd2f 	bl	8004e3c <__hi0bits>
 80053de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80053e2:	6031      	str	r1, [r6, #0]
 80053e4:	e7e1      	b.n	80053aa <__d2b+0x72>
 80053e6:	bf00      	nop
 80053e8:	08005ceb 	.word	0x08005ceb
 80053ec:	08005d5c 	.word	0x08005d5c

080053f0 <_calloc_r>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	fba1 5402 	umull	r5, r4, r1, r2
 80053f6:	b934      	cbnz	r4, 8005406 <_calloc_r+0x16>
 80053f8:	4629      	mov	r1, r5
 80053fa:	f000 f875 	bl	80054e8 <_malloc_r>
 80053fe:	4606      	mov	r6, r0
 8005400:	b928      	cbnz	r0, 800540e <_calloc_r+0x1e>
 8005402:	4630      	mov	r0, r6
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	220c      	movs	r2, #12
 8005408:	2600      	movs	r6, #0
 800540a:	6002      	str	r2, [r0, #0]
 800540c:	e7f9      	b.n	8005402 <_calloc_r+0x12>
 800540e:	462a      	mov	r2, r5
 8005410:	4621      	mov	r1, r4
 8005412:	f7fd fdf5 	bl	8003000 <memset>
 8005416:	e7f4      	b.n	8005402 <_calloc_r+0x12>

08005418 <_free_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4605      	mov	r5, r0
 800541c:	2900      	cmp	r1, #0
 800541e:	d040      	beq.n	80054a2 <_free_r+0x8a>
 8005420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005424:	1f0c      	subs	r4, r1, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfb8      	it	lt
 800542a:	18e4      	addlt	r4, r4, r3
 800542c:	f000 fb14 	bl	8005a58 <__malloc_lock>
 8005430:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <_free_r+0x8c>)
 8005432:	6813      	ldr	r3, [r2, #0]
 8005434:	b933      	cbnz	r3, 8005444 <_free_r+0x2c>
 8005436:	6063      	str	r3, [r4, #4]
 8005438:	6014      	str	r4, [r2, #0]
 800543a:	4628      	mov	r0, r5
 800543c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005440:	f000 bb10 	b.w	8005a64 <__malloc_unlock>
 8005444:	42a3      	cmp	r3, r4
 8005446:	d908      	bls.n	800545a <_free_r+0x42>
 8005448:	6820      	ldr	r0, [r4, #0]
 800544a:	1821      	adds	r1, r4, r0
 800544c:	428b      	cmp	r3, r1
 800544e:	bf01      	itttt	eq
 8005450:	6819      	ldreq	r1, [r3, #0]
 8005452:	685b      	ldreq	r3, [r3, #4]
 8005454:	1809      	addeq	r1, r1, r0
 8005456:	6021      	streq	r1, [r4, #0]
 8005458:	e7ed      	b.n	8005436 <_free_r+0x1e>
 800545a:	461a      	mov	r2, r3
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	b10b      	cbz	r3, 8005464 <_free_r+0x4c>
 8005460:	42a3      	cmp	r3, r4
 8005462:	d9fa      	bls.n	800545a <_free_r+0x42>
 8005464:	6811      	ldr	r1, [r2, #0]
 8005466:	1850      	adds	r0, r2, r1
 8005468:	42a0      	cmp	r0, r4
 800546a:	d10b      	bne.n	8005484 <_free_r+0x6c>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	4401      	add	r1, r0
 8005470:	1850      	adds	r0, r2, r1
 8005472:	4283      	cmp	r3, r0
 8005474:	6011      	str	r1, [r2, #0]
 8005476:	d1e0      	bne.n	800543a <_free_r+0x22>
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4401      	add	r1, r0
 800547e:	6011      	str	r1, [r2, #0]
 8005480:	6053      	str	r3, [r2, #4]
 8005482:	e7da      	b.n	800543a <_free_r+0x22>
 8005484:	d902      	bls.n	800548c <_free_r+0x74>
 8005486:	230c      	movs	r3, #12
 8005488:	602b      	str	r3, [r5, #0]
 800548a:	e7d6      	b.n	800543a <_free_r+0x22>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	1821      	adds	r1, r4, r0
 8005490:	428b      	cmp	r3, r1
 8005492:	bf01      	itttt	eq
 8005494:	6819      	ldreq	r1, [r3, #0]
 8005496:	685b      	ldreq	r3, [r3, #4]
 8005498:	1809      	addeq	r1, r1, r0
 800549a:	6021      	streq	r1, [r4, #0]
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6054      	str	r4, [r2, #4]
 80054a0:	e7cb      	b.n	800543a <_free_r+0x22>
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	200002a0 	.word	0x200002a0

080054a8 <sbrk_aligned>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4e0e      	ldr	r6, [pc, #56]	; (80054e4 <sbrk_aligned+0x3c>)
 80054ac:	460c      	mov	r4, r1
 80054ae:	6831      	ldr	r1, [r6, #0]
 80054b0:	4605      	mov	r5, r0
 80054b2:	b911      	cbnz	r1, 80054ba <sbrk_aligned+0x12>
 80054b4:	f000 f9e4 	bl	8005880 <_sbrk_r>
 80054b8:	6030      	str	r0, [r6, #0]
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 f9df 	bl	8005880 <_sbrk_r>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	d00a      	beq.n	80054dc <sbrk_aligned+0x34>
 80054c6:	1cc4      	adds	r4, r0, #3
 80054c8:	f024 0403 	bic.w	r4, r4, #3
 80054cc:	42a0      	cmp	r0, r4
 80054ce:	d007      	beq.n	80054e0 <sbrk_aligned+0x38>
 80054d0:	1a21      	subs	r1, r4, r0
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 f9d4 	bl	8005880 <_sbrk_r>
 80054d8:	3001      	adds	r0, #1
 80054da:	d101      	bne.n	80054e0 <sbrk_aligned+0x38>
 80054dc:	f04f 34ff 	mov.w	r4, #4294967295
 80054e0:	4620      	mov	r0, r4
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	200002a4 	.word	0x200002a4

080054e8 <_malloc_r>:
 80054e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ec:	1ccd      	adds	r5, r1, #3
 80054ee:	f025 0503 	bic.w	r5, r5, #3
 80054f2:	3508      	adds	r5, #8
 80054f4:	2d0c      	cmp	r5, #12
 80054f6:	bf38      	it	cc
 80054f8:	250c      	movcc	r5, #12
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	4607      	mov	r7, r0
 80054fe:	db01      	blt.n	8005504 <_malloc_r+0x1c>
 8005500:	42a9      	cmp	r1, r5
 8005502:	d905      	bls.n	8005510 <_malloc_r+0x28>
 8005504:	230c      	movs	r3, #12
 8005506:	2600      	movs	r6, #0
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4630      	mov	r0, r6
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005510:	4e2e      	ldr	r6, [pc, #184]	; (80055cc <_malloc_r+0xe4>)
 8005512:	f000 faa1 	bl	8005a58 <__malloc_lock>
 8005516:	6833      	ldr	r3, [r6, #0]
 8005518:	461c      	mov	r4, r3
 800551a:	bb34      	cbnz	r4, 800556a <_malloc_r+0x82>
 800551c:	4629      	mov	r1, r5
 800551e:	4638      	mov	r0, r7
 8005520:	f7ff ffc2 	bl	80054a8 <sbrk_aligned>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	4604      	mov	r4, r0
 8005528:	d14d      	bne.n	80055c6 <_malloc_r+0xde>
 800552a:	6834      	ldr	r4, [r6, #0]
 800552c:	4626      	mov	r6, r4
 800552e:	2e00      	cmp	r6, #0
 8005530:	d140      	bne.n	80055b4 <_malloc_r+0xcc>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	4631      	mov	r1, r6
 8005536:	4638      	mov	r0, r7
 8005538:	eb04 0803 	add.w	r8, r4, r3
 800553c:	f000 f9a0 	bl	8005880 <_sbrk_r>
 8005540:	4580      	cmp	r8, r0
 8005542:	d13a      	bne.n	80055ba <_malloc_r+0xd2>
 8005544:	6821      	ldr	r1, [r4, #0]
 8005546:	3503      	adds	r5, #3
 8005548:	1a6d      	subs	r5, r5, r1
 800554a:	f025 0503 	bic.w	r5, r5, #3
 800554e:	3508      	adds	r5, #8
 8005550:	2d0c      	cmp	r5, #12
 8005552:	bf38      	it	cc
 8005554:	250c      	movcc	r5, #12
 8005556:	4638      	mov	r0, r7
 8005558:	4629      	mov	r1, r5
 800555a:	f7ff ffa5 	bl	80054a8 <sbrk_aligned>
 800555e:	3001      	adds	r0, #1
 8005560:	d02b      	beq.n	80055ba <_malloc_r+0xd2>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	442b      	add	r3, r5
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	e00e      	b.n	8005588 <_malloc_r+0xa0>
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	1b52      	subs	r2, r2, r5
 800556e:	d41e      	bmi.n	80055ae <_malloc_r+0xc6>
 8005570:	2a0b      	cmp	r2, #11
 8005572:	d916      	bls.n	80055a2 <_malloc_r+0xba>
 8005574:	1961      	adds	r1, r4, r5
 8005576:	42a3      	cmp	r3, r4
 8005578:	6025      	str	r5, [r4, #0]
 800557a:	bf18      	it	ne
 800557c:	6059      	strne	r1, [r3, #4]
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	bf08      	it	eq
 8005582:	6031      	streq	r1, [r6, #0]
 8005584:	5162      	str	r2, [r4, r5]
 8005586:	604b      	str	r3, [r1, #4]
 8005588:	4638      	mov	r0, r7
 800558a:	f104 060b 	add.w	r6, r4, #11
 800558e:	f000 fa69 	bl	8005a64 <__malloc_unlock>
 8005592:	f026 0607 	bic.w	r6, r6, #7
 8005596:	1d23      	adds	r3, r4, #4
 8005598:	1af2      	subs	r2, r6, r3
 800559a:	d0b6      	beq.n	800550a <_malloc_r+0x22>
 800559c:	1b9b      	subs	r3, r3, r6
 800559e:	50a3      	str	r3, [r4, r2]
 80055a0:	e7b3      	b.n	800550a <_malloc_r+0x22>
 80055a2:	6862      	ldr	r2, [r4, #4]
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	bf0c      	ite	eq
 80055a8:	6032      	streq	r2, [r6, #0]
 80055aa:	605a      	strne	r2, [r3, #4]
 80055ac:	e7ec      	b.n	8005588 <_malloc_r+0xa0>
 80055ae:	4623      	mov	r3, r4
 80055b0:	6864      	ldr	r4, [r4, #4]
 80055b2:	e7b2      	b.n	800551a <_malloc_r+0x32>
 80055b4:	4634      	mov	r4, r6
 80055b6:	6876      	ldr	r6, [r6, #4]
 80055b8:	e7b9      	b.n	800552e <_malloc_r+0x46>
 80055ba:	230c      	movs	r3, #12
 80055bc:	4638      	mov	r0, r7
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	f000 fa50 	bl	8005a64 <__malloc_unlock>
 80055c4:	e7a1      	b.n	800550a <_malloc_r+0x22>
 80055c6:	6025      	str	r5, [r4, #0]
 80055c8:	e7de      	b.n	8005588 <_malloc_r+0xa0>
 80055ca:	bf00      	nop
 80055cc:	200002a0 	.word	0x200002a0

080055d0 <__sfputc_r>:
 80055d0:	6893      	ldr	r3, [r2, #8]
 80055d2:	b410      	push	{r4}
 80055d4:	3b01      	subs	r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	6093      	str	r3, [r2, #8]
 80055da:	da07      	bge.n	80055ec <__sfputc_r+0x1c>
 80055dc:	6994      	ldr	r4, [r2, #24]
 80055de:	42a3      	cmp	r3, r4
 80055e0:	db01      	blt.n	80055e6 <__sfputc_r+0x16>
 80055e2:	290a      	cmp	r1, #10
 80055e4:	d102      	bne.n	80055ec <__sfputc_r+0x1c>
 80055e6:	bc10      	pop	{r4}
 80055e8:	f7fe ba00 	b.w	80039ec <__swbuf_r>
 80055ec:	6813      	ldr	r3, [r2, #0]
 80055ee:	1c58      	adds	r0, r3, #1
 80055f0:	6010      	str	r0, [r2, #0]
 80055f2:	7019      	strb	r1, [r3, #0]
 80055f4:	4608      	mov	r0, r1
 80055f6:	bc10      	pop	{r4}
 80055f8:	4770      	bx	lr

080055fa <__sfputs_r>:
 80055fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fc:	4606      	mov	r6, r0
 80055fe:	460f      	mov	r7, r1
 8005600:	4614      	mov	r4, r2
 8005602:	18d5      	adds	r5, r2, r3
 8005604:	42ac      	cmp	r4, r5
 8005606:	d101      	bne.n	800560c <__sfputs_r+0x12>
 8005608:	2000      	movs	r0, #0
 800560a:	e007      	b.n	800561c <__sfputs_r+0x22>
 800560c:	463a      	mov	r2, r7
 800560e:	4630      	mov	r0, r6
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	f7ff ffdc 	bl	80055d0 <__sfputc_r>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d1f3      	bne.n	8005604 <__sfputs_r+0xa>
 800561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005620 <_vfiprintf_r>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	460d      	mov	r5, r1
 8005626:	4614      	mov	r4, r2
 8005628:	4698      	mov	r8, r3
 800562a:	4606      	mov	r6, r0
 800562c:	b09d      	sub	sp, #116	; 0x74
 800562e:	b118      	cbz	r0, 8005638 <_vfiprintf_r+0x18>
 8005630:	6983      	ldr	r3, [r0, #24]
 8005632:	b90b      	cbnz	r3, 8005638 <_vfiprintf_r+0x18>
 8005634:	f7ff fa2c 	bl	8004a90 <__sinit>
 8005638:	4b89      	ldr	r3, [pc, #548]	; (8005860 <_vfiprintf_r+0x240>)
 800563a:	429d      	cmp	r5, r3
 800563c:	d11b      	bne.n	8005676 <_vfiprintf_r+0x56>
 800563e:	6875      	ldr	r5, [r6, #4]
 8005640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005642:	07d9      	lsls	r1, r3, #31
 8005644:	d405      	bmi.n	8005652 <_vfiprintf_r+0x32>
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	059a      	lsls	r2, r3, #22
 800564a:	d402      	bmi.n	8005652 <_vfiprintf_r+0x32>
 800564c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800564e:	f7ff fac2 	bl	8004bd6 <__retarget_lock_acquire_recursive>
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	071b      	lsls	r3, r3, #28
 8005656:	d501      	bpl.n	800565c <_vfiprintf_r+0x3c>
 8005658:	692b      	ldr	r3, [r5, #16]
 800565a:	b9eb      	cbnz	r3, 8005698 <_vfiprintf_r+0x78>
 800565c:	4629      	mov	r1, r5
 800565e:	4630      	mov	r0, r6
 8005660:	f7fe fa16 	bl	8003a90 <__swsetup_r>
 8005664:	b1c0      	cbz	r0, 8005698 <_vfiprintf_r+0x78>
 8005666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005668:	07dc      	lsls	r4, r3, #31
 800566a:	d50e      	bpl.n	800568a <_vfiprintf_r+0x6a>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	b01d      	add	sp, #116	; 0x74
 8005672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005676:	4b7b      	ldr	r3, [pc, #492]	; (8005864 <_vfiprintf_r+0x244>)
 8005678:	429d      	cmp	r5, r3
 800567a:	d101      	bne.n	8005680 <_vfiprintf_r+0x60>
 800567c:	68b5      	ldr	r5, [r6, #8]
 800567e:	e7df      	b.n	8005640 <_vfiprintf_r+0x20>
 8005680:	4b79      	ldr	r3, [pc, #484]	; (8005868 <_vfiprintf_r+0x248>)
 8005682:	429d      	cmp	r5, r3
 8005684:	bf08      	it	eq
 8005686:	68f5      	ldreq	r5, [r6, #12]
 8005688:	e7da      	b.n	8005640 <_vfiprintf_r+0x20>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	0598      	lsls	r0, r3, #22
 800568e:	d4ed      	bmi.n	800566c <_vfiprintf_r+0x4c>
 8005690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005692:	f7ff faa1 	bl	8004bd8 <__retarget_lock_release_recursive>
 8005696:	e7e9      	b.n	800566c <_vfiprintf_r+0x4c>
 8005698:	2300      	movs	r3, #0
 800569a:	9309      	str	r3, [sp, #36]	; 0x24
 800569c:	2320      	movs	r3, #32
 800569e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a2:	2330      	movs	r3, #48	; 0x30
 80056a4:	f04f 0901 	mov.w	r9, #1
 80056a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800586c <_vfiprintf_r+0x24c>
 80056b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056b4:	4623      	mov	r3, r4
 80056b6:	469a      	mov	sl, r3
 80056b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056bc:	b10a      	cbz	r2, 80056c2 <_vfiprintf_r+0xa2>
 80056be:	2a25      	cmp	r2, #37	; 0x25
 80056c0:	d1f9      	bne.n	80056b6 <_vfiprintf_r+0x96>
 80056c2:	ebba 0b04 	subs.w	fp, sl, r4
 80056c6:	d00b      	beq.n	80056e0 <_vfiprintf_r+0xc0>
 80056c8:	465b      	mov	r3, fp
 80056ca:	4622      	mov	r2, r4
 80056cc:	4629      	mov	r1, r5
 80056ce:	4630      	mov	r0, r6
 80056d0:	f7ff ff93 	bl	80055fa <__sfputs_r>
 80056d4:	3001      	adds	r0, #1
 80056d6:	f000 80aa 	beq.w	800582e <_vfiprintf_r+0x20e>
 80056da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056dc:	445a      	add	r2, fp
 80056de:	9209      	str	r2, [sp, #36]	; 0x24
 80056e0:	f89a 3000 	ldrb.w	r3, [sl]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a2 	beq.w	800582e <_vfiprintf_r+0x20e>
 80056ea:	2300      	movs	r3, #0
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f4:	f10a 0a01 	add.w	sl, sl, #1
 80056f8:	9304      	str	r3, [sp, #16]
 80056fa:	9307      	str	r3, [sp, #28]
 80056fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005700:	931a      	str	r3, [sp, #104]	; 0x68
 8005702:	4654      	mov	r4, sl
 8005704:	2205      	movs	r2, #5
 8005706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570a:	4858      	ldr	r0, [pc, #352]	; (800586c <_vfiprintf_r+0x24c>)
 800570c:	f7ff fad2 	bl	8004cb4 <memchr>
 8005710:	9a04      	ldr	r2, [sp, #16]
 8005712:	b9d8      	cbnz	r0, 800574c <_vfiprintf_r+0x12c>
 8005714:	06d1      	lsls	r1, r2, #27
 8005716:	bf44      	itt	mi
 8005718:	2320      	movmi	r3, #32
 800571a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800571e:	0713      	lsls	r3, r2, #28
 8005720:	bf44      	itt	mi
 8005722:	232b      	movmi	r3, #43	; 0x2b
 8005724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005728:	f89a 3000 	ldrb.w	r3, [sl]
 800572c:	2b2a      	cmp	r3, #42	; 0x2a
 800572e:	d015      	beq.n	800575c <_vfiprintf_r+0x13c>
 8005730:	4654      	mov	r4, sl
 8005732:	2000      	movs	r0, #0
 8005734:	f04f 0c0a 	mov.w	ip, #10
 8005738:	9a07      	ldr	r2, [sp, #28]
 800573a:	4621      	mov	r1, r4
 800573c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005740:	3b30      	subs	r3, #48	; 0x30
 8005742:	2b09      	cmp	r3, #9
 8005744:	d94e      	bls.n	80057e4 <_vfiprintf_r+0x1c4>
 8005746:	b1b0      	cbz	r0, 8005776 <_vfiprintf_r+0x156>
 8005748:	9207      	str	r2, [sp, #28]
 800574a:	e014      	b.n	8005776 <_vfiprintf_r+0x156>
 800574c:	eba0 0308 	sub.w	r3, r0, r8
 8005750:	fa09 f303 	lsl.w	r3, r9, r3
 8005754:	4313      	orrs	r3, r2
 8005756:	46a2      	mov	sl, r4
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	e7d2      	b.n	8005702 <_vfiprintf_r+0xe2>
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	1d19      	adds	r1, r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	9103      	str	r1, [sp, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	bfbb      	ittet	lt
 8005768:	425b      	neglt	r3, r3
 800576a:	f042 0202 	orrlt.w	r2, r2, #2
 800576e:	9307      	strge	r3, [sp, #28]
 8005770:	9307      	strlt	r3, [sp, #28]
 8005772:	bfb8      	it	lt
 8005774:	9204      	strlt	r2, [sp, #16]
 8005776:	7823      	ldrb	r3, [r4, #0]
 8005778:	2b2e      	cmp	r3, #46	; 0x2e
 800577a:	d10c      	bne.n	8005796 <_vfiprintf_r+0x176>
 800577c:	7863      	ldrb	r3, [r4, #1]
 800577e:	2b2a      	cmp	r3, #42	; 0x2a
 8005780:	d135      	bne.n	80057ee <_vfiprintf_r+0x1ce>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	3402      	adds	r4, #2
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	9203      	str	r2, [sp, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfb8      	it	lt
 8005790:	f04f 33ff 	movlt.w	r3, #4294967295
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005870 <_vfiprintf_r+0x250>
 800579a:	2203      	movs	r2, #3
 800579c:	4650      	mov	r0, sl
 800579e:	7821      	ldrb	r1, [r4, #0]
 80057a0:	f7ff fa88 	bl	8004cb4 <memchr>
 80057a4:	b140      	cbz	r0, 80057b8 <_vfiprintf_r+0x198>
 80057a6:	2340      	movs	r3, #64	; 0x40
 80057a8:	eba0 000a 	sub.w	r0, r0, sl
 80057ac:	fa03 f000 	lsl.w	r0, r3, r0
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	3401      	adds	r4, #1
 80057b4:	4303      	orrs	r3, r0
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057bc:	2206      	movs	r2, #6
 80057be:	482d      	ldr	r0, [pc, #180]	; (8005874 <_vfiprintf_r+0x254>)
 80057c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c4:	f7ff fa76 	bl	8004cb4 <memchr>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d03f      	beq.n	800584c <_vfiprintf_r+0x22c>
 80057cc:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <_vfiprintf_r+0x258>)
 80057ce:	bb1b      	cbnz	r3, 8005818 <_vfiprintf_r+0x1f8>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	3307      	adds	r3, #7
 80057d4:	f023 0307 	bic.w	r3, r3, #7
 80057d8:	3308      	adds	r3, #8
 80057da:	9303      	str	r3, [sp, #12]
 80057dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057de:	443b      	add	r3, r7
 80057e0:	9309      	str	r3, [sp, #36]	; 0x24
 80057e2:	e767      	b.n	80056b4 <_vfiprintf_r+0x94>
 80057e4:	460c      	mov	r4, r1
 80057e6:	2001      	movs	r0, #1
 80057e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ec:	e7a5      	b.n	800573a <_vfiprintf_r+0x11a>
 80057ee:	2300      	movs	r3, #0
 80057f0:	f04f 0c0a 	mov.w	ip, #10
 80057f4:	4619      	mov	r1, r3
 80057f6:	3401      	adds	r4, #1
 80057f8:	9305      	str	r3, [sp, #20]
 80057fa:	4620      	mov	r0, r4
 80057fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005800:	3a30      	subs	r2, #48	; 0x30
 8005802:	2a09      	cmp	r2, #9
 8005804:	d903      	bls.n	800580e <_vfiprintf_r+0x1ee>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0c5      	beq.n	8005796 <_vfiprintf_r+0x176>
 800580a:	9105      	str	r1, [sp, #20]
 800580c:	e7c3      	b.n	8005796 <_vfiprintf_r+0x176>
 800580e:	4604      	mov	r4, r0
 8005810:	2301      	movs	r3, #1
 8005812:	fb0c 2101 	mla	r1, ip, r1, r2
 8005816:	e7f0      	b.n	80057fa <_vfiprintf_r+0x1da>
 8005818:	ab03      	add	r3, sp, #12
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	462a      	mov	r2, r5
 800581e:	4630      	mov	r0, r6
 8005820:	4b16      	ldr	r3, [pc, #88]	; (800587c <_vfiprintf_r+0x25c>)
 8005822:	a904      	add	r1, sp, #16
 8005824:	f7fd fc92 	bl	800314c <_printf_float>
 8005828:	4607      	mov	r7, r0
 800582a:	1c78      	adds	r0, r7, #1
 800582c:	d1d6      	bne.n	80057dc <_vfiprintf_r+0x1bc>
 800582e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005830:	07d9      	lsls	r1, r3, #31
 8005832:	d405      	bmi.n	8005840 <_vfiprintf_r+0x220>
 8005834:	89ab      	ldrh	r3, [r5, #12]
 8005836:	059a      	lsls	r2, r3, #22
 8005838:	d402      	bmi.n	8005840 <_vfiprintf_r+0x220>
 800583a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800583c:	f7ff f9cc 	bl	8004bd8 <__retarget_lock_release_recursive>
 8005840:	89ab      	ldrh	r3, [r5, #12]
 8005842:	065b      	lsls	r3, r3, #25
 8005844:	f53f af12 	bmi.w	800566c <_vfiprintf_r+0x4c>
 8005848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584a:	e711      	b.n	8005670 <_vfiprintf_r+0x50>
 800584c:	ab03      	add	r3, sp, #12
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	462a      	mov	r2, r5
 8005852:	4630      	mov	r0, r6
 8005854:	4b09      	ldr	r3, [pc, #36]	; (800587c <_vfiprintf_r+0x25c>)
 8005856:	a904      	add	r1, sp, #16
 8005858:	f7fd ff14 	bl	8003684 <_printf_i>
 800585c:	e7e4      	b.n	8005828 <_vfiprintf_r+0x208>
 800585e:	bf00      	nop
 8005860:	08005d1c 	.word	0x08005d1c
 8005864:	08005d3c 	.word	0x08005d3c
 8005868:	08005cfc 	.word	0x08005cfc
 800586c:	08005eb4 	.word	0x08005eb4
 8005870:	08005eba 	.word	0x08005eba
 8005874:	08005ebe 	.word	0x08005ebe
 8005878:	0800314d 	.word	0x0800314d
 800587c:	080055fb 	.word	0x080055fb

08005880 <_sbrk_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	2300      	movs	r3, #0
 8005884:	4d05      	ldr	r5, [pc, #20]	; (800589c <_sbrk_r+0x1c>)
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb ff88 	bl	80017a0 <_sbrk>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_sbrk_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_sbrk_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	200002a8 	.word	0x200002a8

080058a0 <__sread>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	460c      	mov	r4, r1
 80058a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a8:	f000 f8e2 	bl	8005a70 <_read_r>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	bfab      	itete	ge
 80058b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058b2:	89a3      	ldrhlt	r3, [r4, #12]
 80058b4:	181b      	addge	r3, r3, r0
 80058b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ba:	bfac      	ite	ge
 80058bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80058be:	81a3      	strhlt	r3, [r4, #12]
 80058c0:	bd10      	pop	{r4, pc}

080058c2 <__swrite>:
 80058c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c6:	461f      	mov	r7, r3
 80058c8:	898b      	ldrh	r3, [r1, #12]
 80058ca:	4605      	mov	r5, r0
 80058cc:	05db      	lsls	r3, r3, #23
 80058ce:	460c      	mov	r4, r1
 80058d0:	4616      	mov	r6, r2
 80058d2:	d505      	bpl.n	80058e0 <__swrite+0x1e>
 80058d4:	2302      	movs	r3, #2
 80058d6:	2200      	movs	r2, #0
 80058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058dc:	f000 f898 	bl	8005a10 <_lseek_r>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	4632      	mov	r2, r6
 80058e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	4628      	mov	r0, r5
 80058ec:	463b      	mov	r3, r7
 80058ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f6:	f000 b817 	b.w	8005928 <_write_r>

080058fa <__sseek>:
 80058fa:	b510      	push	{r4, lr}
 80058fc:	460c      	mov	r4, r1
 80058fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005902:	f000 f885 	bl	8005a10 <_lseek_r>
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	bf15      	itete	ne
 800590c:	6560      	strne	r0, [r4, #84]	; 0x54
 800590e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005916:	81a3      	strheq	r3, [r4, #12]
 8005918:	bf18      	it	ne
 800591a:	81a3      	strhne	r3, [r4, #12]
 800591c:	bd10      	pop	{r4, pc}

0800591e <__sclose>:
 800591e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005922:	f000 b831 	b.w	8005988 <_close_r>
	...

08005928 <_write_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	2200      	movs	r2, #0
 8005932:	4d05      	ldr	r5, [pc, #20]	; (8005948 <_write_r+0x20>)
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fb fee6 	bl	8001708 <_write>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_write_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_write_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	200002a8 	.word	0x200002a8

0800594c <__assert_func>:
 800594c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800594e:	4614      	mov	r4, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <__assert_func+0x2c>)
 8005954:	4605      	mov	r5, r0
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68d8      	ldr	r0, [r3, #12]
 800595a:	b14c      	cbz	r4, 8005970 <__assert_func+0x24>
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <__assert_func+0x30>)
 800595e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005962:	9100      	str	r1, [sp, #0]
 8005964:	462b      	mov	r3, r5
 8005966:	4906      	ldr	r1, [pc, #24]	; (8005980 <__assert_func+0x34>)
 8005968:	f000 f81e 	bl	80059a8 <fiprintf>
 800596c:	f000 f89f 	bl	8005aae <abort>
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <__assert_func+0x38>)
 8005972:	461c      	mov	r4, r3
 8005974:	e7f3      	b.n	800595e <__assert_func+0x12>
 8005976:	bf00      	nop
 8005978:	2000000c 	.word	0x2000000c
 800597c:	08005ec5 	.word	0x08005ec5
 8005980:	08005ed2 	.word	0x08005ed2
 8005984:	08005f00 	.word	0x08005f00

08005988 <_close_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	2300      	movs	r3, #0
 800598c:	4d05      	ldr	r5, [pc, #20]	; (80059a4 <_close_r+0x1c>)
 800598e:	4604      	mov	r4, r0
 8005990:	4608      	mov	r0, r1
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	f7fb fed4 	bl	8001740 <_close>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_close_r+0x1a>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_close_r+0x1a>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	200002a8 	.word	0x200002a8

080059a8 <fiprintf>:
 80059a8:	b40e      	push	{r1, r2, r3}
 80059aa:	b503      	push	{r0, r1, lr}
 80059ac:	4601      	mov	r1, r0
 80059ae:	ab03      	add	r3, sp, #12
 80059b0:	4805      	ldr	r0, [pc, #20]	; (80059c8 <fiprintf+0x20>)
 80059b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b6:	6800      	ldr	r0, [r0, #0]
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	f7ff fe31 	bl	8005620 <_vfiprintf_r>
 80059be:	b002      	add	sp, #8
 80059c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c4:	b003      	add	sp, #12
 80059c6:	4770      	bx	lr
 80059c8:	2000000c 	.word	0x2000000c

080059cc <_fstat_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	2300      	movs	r3, #0
 80059d0:	4d06      	ldr	r5, [pc, #24]	; (80059ec <_fstat_r+0x20>)
 80059d2:	4604      	mov	r4, r0
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	f7fb febc 	bl	8001756 <_fstat>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	d102      	bne.n	80059e8 <_fstat_r+0x1c>
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	b103      	cbz	r3, 80059e8 <_fstat_r+0x1c>
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	bd38      	pop	{r3, r4, r5, pc}
 80059ea:	bf00      	nop
 80059ec:	200002a8 	.word	0x200002a8

080059f0 <_isatty_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	2300      	movs	r3, #0
 80059f4:	4d05      	ldr	r5, [pc, #20]	; (8005a0c <_isatty_r+0x1c>)
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fb feba 	bl	8001774 <_isatty>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_isatty_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_isatty_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	200002a8 	.word	0x200002a8

08005a10 <_lseek_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4d05      	ldr	r5, [pc, #20]	; (8005a30 <_lseek_r+0x20>)
 8005a1c:	602a      	str	r2, [r5, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f7fb feb2 	bl	8001788 <_lseek>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_lseek_r+0x1e>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_lseek_r+0x1e>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200002a8 	.word	0x200002a8

08005a34 <__ascii_mbtowc>:
 8005a34:	b082      	sub	sp, #8
 8005a36:	b901      	cbnz	r1, 8005a3a <__ascii_mbtowc+0x6>
 8005a38:	a901      	add	r1, sp, #4
 8005a3a:	b142      	cbz	r2, 8005a4e <__ascii_mbtowc+0x1a>
 8005a3c:	b14b      	cbz	r3, 8005a52 <__ascii_mbtowc+0x1e>
 8005a3e:	7813      	ldrb	r3, [r2, #0]
 8005a40:	600b      	str	r3, [r1, #0]
 8005a42:	7812      	ldrb	r2, [r2, #0]
 8005a44:	1e10      	subs	r0, r2, #0
 8005a46:	bf18      	it	ne
 8005a48:	2001      	movne	r0, #1
 8005a4a:	b002      	add	sp, #8
 8005a4c:	4770      	bx	lr
 8005a4e:	4610      	mov	r0, r2
 8005a50:	e7fb      	b.n	8005a4a <__ascii_mbtowc+0x16>
 8005a52:	f06f 0001 	mvn.w	r0, #1
 8005a56:	e7f8      	b.n	8005a4a <__ascii_mbtowc+0x16>

08005a58 <__malloc_lock>:
 8005a58:	4801      	ldr	r0, [pc, #4]	; (8005a60 <__malloc_lock+0x8>)
 8005a5a:	f7ff b8bc 	b.w	8004bd6 <__retarget_lock_acquire_recursive>
 8005a5e:	bf00      	nop
 8005a60:	2000029c 	.word	0x2000029c

08005a64 <__malloc_unlock>:
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <__malloc_unlock+0x8>)
 8005a66:	f7ff b8b7 	b.w	8004bd8 <__retarget_lock_release_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	2000029c 	.word	0x2000029c

08005a70 <_read_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4604      	mov	r4, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4d05      	ldr	r5, [pc, #20]	; (8005a90 <_read_r+0x20>)
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fb fe25 	bl	80016ce <_read>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_read_r+0x1e>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_read_r+0x1e>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	200002a8 	.word	0x200002a8

08005a94 <__ascii_wctomb>:
 8005a94:	4603      	mov	r3, r0
 8005a96:	4608      	mov	r0, r1
 8005a98:	b141      	cbz	r1, 8005aac <__ascii_wctomb+0x18>
 8005a9a:	2aff      	cmp	r2, #255	; 0xff
 8005a9c:	d904      	bls.n	8005aa8 <__ascii_wctomb+0x14>
 8005a9e:	228a      	movs	r2, #138	; 0x8a
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	4770      	bx	lr
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	700a      	strb	r2, [r1, #0]
 8005aac:	4770      	bx	lr

08005aae <abort>:
 8005aae:	2006      	movs	r0, #6
 8005ab0:	b508      	push	{r3, lr}
 8005ab2:	f000 f82b 	bl	8005b0c <raise>
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f7fb fdff 	bl	80016ba <_exit>

08005abc <_raise_r>:
 8005abc:	291f      	cmp	r1, #31
 8005abe:	b538      	push	{r3, r4, r5, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	460d      	mov	r5, r1
 8005ac4:	d904      	bls.n	8005ad0 <_raise_r+0x14>
 8005ac6:	2316      	movs	r3, #22
 8005ac8:	6003      	str	r3, [r0, #0]
 8005aca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ad2:	b112      	cbz	r2, 8005ada <_raise_r+0x1e>
 8005ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ad8:	b94b      	cbnz	r3, 8005aee <_raise_r+0x32>
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 f830 	bl	8005b40 <_getpid_r>
 8005ae0:	462a      	mov	r2, r5
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aea:	f000 b817 	b.w	8005b1c <_kill_r>
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d00a      	beq.n	8005b08 <_raise_r+0x4c>
 8005af2:	1c59      	adds	r1, r3, #1
 8005af4:	d103      	bne.n	8005afe <_raise_r+0x42>
 8005af6:	2316      	movs	r3, #22
 8005af8:	6003      	str	r3, [r0, #0]
 8005afa:	2001      	movs	r0, #1
 8005afc:	e7e7      	b.n	8005ace <_raise_r+0x12>
 8005afe:	2400      	movs	r4, #0
 8005b00:	4628      	mov	r0, r5
 8005b02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b06:	4798      	blx	r3
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e7e0      	b.n	8005ace <_raise_r+0x12>

08005b0c <raise>:
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <raise+0xc>)
 8005b0e:	4601      	mov	r1, r0
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	f7ff bfd3 	b.w	8005abc <_raise_r>
 8005b16:	bf00      	nop
 8005b18:	2000000c 	.word	0x2000000c

08005b1c <_kill_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	2300      	movs	r3, #0
 8005b20:	4d06      	ldr	r5, [pc, #24]	; (8005b3c <_kill_r+0x20>)
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	f7fb fdb6 	bl	800169a <_kill>
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	d102      	bne.n	8005b38 <_kill_r+0x1c>
 8005b32:	682b      	ldr	r3, [r5, #0]
 8005b34:	b103      	cbz	r3, 8005b38 <_kill_r+0x1c>
 8005b36:	6023      	str	r3, [r4, #0]
 8005b38:	bd38      	pop	{r3, r4, r5, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200002a8 	.word	0x200002a8

08005b40 <_getpid_r>:
 8005b40:	f7fb bda4 	b.w	800168c <_getpid>

08005b44 <_init>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr

08005b50 <_fini>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr
