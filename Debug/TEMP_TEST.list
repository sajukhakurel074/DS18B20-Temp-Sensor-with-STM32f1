
TEMP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08005eb0  08005eb0  00015eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e4  080063e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080063e4  080063e4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063e4  080063e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200001e0  080065c8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080065c8  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0e9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019dc  00000000  00000000  0002a2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0002c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a9  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3ae  00000000  00000000  00045b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b836  00000000  00000000  00051f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004520  00000000  00000000  000dd7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e94 	.word	0x08005e94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005e94 	.word	0x08005e94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <delay>:
int Search_ROM();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <delay+0x2c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < delay) {
 8000f54:	bf00      	nop
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <delay+0x2c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f9      	bhi.n	8000f56 <delay+0x12>

	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001fc 	.word	0x200001fc

08000f74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f78:	f000 fe1c 	bl	8001bb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f7c:	f000 f82c 	bl	8000fd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f80:	f000 f8e6 	bl	8001150 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f84:	f000 f8ba 	bl	80010fc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000f88:	f000 f86c 	bl	8001064 <MX_TIM2_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	if (Temp_init() != 1) {
 8000f8c:	f000 f956 	bl	800123c <Temp_init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d002      	beq.n	8000f9c <main+0x28>
		printf("Temp Sensor Initialization failed\n");
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <main+0x54>)
 8000f98:	f002 fec8 	bl	8003d2c <puts>
	}

	Find_Temp_devices();
 8000f9c:	f000 fbb4 	bl	8001708 <Find_Temp_devices>
	printf("Number of devices on bus = %u\n", count);
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <main+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <main+0x5c>)
 8000fa8:	f002 fe3a 	bl	8003c20 <iprintf>

	while (1) {
		printf("\n\n");
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <main+0x60>)
 8000fae:	f002 febd 	bl	8003d2c <puts>
		Read_Temp(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f000 fb38 	bl	8001628 <Read_Temp>
		Read_Temp(2);
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f000 fb35 	bl	8001628 <Read_Temp>
		HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f000 fe59 	bl	8001c78 <HAL_Delay>
		printf("\n\n");
 8000fc6:	e7f1      	b.n	8000fac <main+0x38>
 8000fc8:	08005eb0 	.word	0x08005eb0
 8000fcc:	200002f7 	.word	0x200002f7
 8000fd0:	08005ed4 	.word	0x08005ed4
 8000fd4:	08005ef4 	.word	0x08005ef4

08000fd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
 8000fdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2228      	movs	r2, #40	; 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 f9b2 	bl	8003350 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001002:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001016:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f8e5 	bl	80021f0 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x58>
		Error_Handler();
 800102c:	f000 fbfc 	bl	8001828 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001040:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fb52 	bl	80026f4 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x82>
		Error_Handler();
 8001056:	f000 fbe7 	bl	8001828 <Error_Handler>
	}
}
 800105a:	bf00      	nop
 800105c:	3740      	adds	r7, #64	; 0x40
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001082:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001086:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_TIM2_Init+0x94>)
 800108a:	2247      	movs	r2, #71	; 0x47
 800108c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800109a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_TIM2_Init+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010aa:	f001 fcbb 	bl	8002a24 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80010b4:	f000 fbb8 	bl	8001828 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010c6:	f001 fd47 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80010d0:	f000 fbaa 	bl	8001828 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010e2:	f001 fef5 	bl	8002ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80010ec:	f000 fb9c 	bl	8001828 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001fc 	.word	0x200001fc

080010fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_USART1_UART_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001134:	f001 ff2a 	bl	8002f8c <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800113e:	f000 fb73 	bl	8001828 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000244 	.word	0x20000244
 800114c:	40013800 	.word	0x40013800

08001150 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <MX_GPIO_Init+0xbc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a28      	ldr	r2, [pc, #160]	; (800120c <MX_GPIO_Init+0xbc>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_GPIO_Init+0xbc>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_GPIO_Init+0xbc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a22      	ldr	r2, [pc, #136]	; (800120c <MX_GPIO_Init+0xbc>)
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_GPIO_Init+0xbc>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0320 	and.w	r3, r3, #32
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_GPIO_Init+0xbc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_GPIO_Init+0xbc>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_GPIO_Init+0xbc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_GPIO_Init+0xbc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a16      	ldr	r2, [pc, #88]	; (800120c <MX_GPIO_Init+0xbc>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_GPIO_Init+0xbc>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	4811      	ldr	r0, [pc, #68]	; (8001210 <MX_GPIO_Init+0xc0>)
 80011cc:	f000 fff7 	bl	80021be <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2302      	movs	r3, #2
 80011e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <MX_GPIO_Init+0xc0>)
 80011ea:	f000 fe4d 	bl	8001e88 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ee:	2302      	movs	r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_GPIO_Init+0xc4>)
 80011fe:	f000 fe43 	bl	8001e88 <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40011000 	.word	0x40011000
 8001214:	40010c00 	.word	0x40010c00

08001218 <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001220:	1d39      	adds	r1, r7, #4
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	2201      	movs	r2, #1
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <__io_putchar+0x20>)
 800122a:	f001 fefc 	bl	8003026 <HAL_UART_Transmit>
	return ch;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000244 	.word	0x20000244

0800123c <Temp_init>:

int Temp_init() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	printf("\n\n\n\n\n\nFrom TEMP Sensor Test\r\n");
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <Temp_init+0x34>)
 8001242:	f002 fd73 	bl	8003d2c <puts>
	HAL_TIM_Base_Start(&htim2);  // Start the timer
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <Temp_init+0x38>)
 8001248:	f001 fc3c 	bl	8002ac4 <HAL_TIM_Base_Start>

	Presence = DS18B20_Start();
 800124c:	f000 f818 	bl	8001280 <DS18B20_Start>
 8001250:	4603      	mov	r3, r0
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <Temp_init+0x3c>)
 8001254:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <Temp_init+0x3c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d004      	beq.n	8001268 <Temp_init+0x2c>
		printf("Presence not detected\n");
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <Temp_init+0x40>)
 8001260:	f002 fd64 	bl	8003d2c <puts>
		return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <Temp_init+0x2e>
	}
	return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08005ef8 	.word	0x08005ef8
 8001274:	200001fc 	.word	0x200001fc
 8001278:	20000288 	.word	0x20000288
 800127c:	08005f18 	.word	0x08005f18

08001280 <DS18B20_Start>:

int DS18B20_Start(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	int Response = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800128a:	2102      	movs	r1, #2
 800128c:	4814      	ldr	r0, [pc, #80]	; (80012e0 <DS18B20_Start+0x60>)
 800128e:	f000 fa91 	bl	80017b4 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin low
 8001292:	2200      	movs	r2, #0
 8001294:	2102      	movs	r1, #2
 8001296:	4812      	ldr	r0, [pc, #72]	; (80012e0 <DS18B20_Start+0x60>)
 8001298:	f000 ff91 	bl	80021be <HAL_GPIO_WritePin>
	delay(480);   // delay according to data sheet
 800129c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80012a0:	f7ff fe50 	bl	8000f44 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80012a4:	2102      	movs	r1, #2
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <DS18B20_Start+0x60>)
 80012a8:	f000 faa1 	bl	80017ee <Set_Pin_Input>
	delay(80);    // delay according to data sheet
 80012ac:	2050      	movs	r0, #80	; 0x50
 80012ae:	f7ff fe49 	bl	8000f44 <delay>

	if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 80012b2:	2102      	movs	r1, #2
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <DS18B20_Start+0x60>)
 80012b6:	f000 ff6b 	bl	8002190 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <DS18B20_Start+0x46>
		Response = 1; // if the pin is low i.e the presence pulse is detected
 80012c0:	2301      	movs	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	e002      	b.n	80012cc <DS18B20_Start+0x4c>
	else
		Response = -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	607b      	str	r3, [r7, #4]

	delay(400); // Waiting to complete the response cycle
 80012cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012d0:	f7ff fe38 	bl	8000f44 <delay>

	return Response;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <DS18B20_Write>:

void DS18B20_Write(uint8_t data, uint8_t bit) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]
	int loop = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
	if (bit == 1) {
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d102      	bne.n	8001304 <DS18B20_Write+0x20>
		loop = 1; // Bit write
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e001      	b.n	8001308 <DS18B20_Write+0x24>
	} else {
		loop = 8; // Byte write
 8001304:	2308      	movs	r3, #8
 8001306:	60fb      	str	r3, [r7, #12]
	}
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001308:	2102      	movs	r1, #2
 800130a:	481f      	ldr	r0, [pc, #124]	; (8001388 <DS18B20_Write+0xa4>)
 800130c:	f000 fa52 	bl	80017b4 <Set_Pin_Output>

	for (int i = 0; i < loop; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	e02e      	b.n	8001374 <DS18B20_Write+0x90>

		if ((data & (1 << i)) != 0)  // if the bit is high
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	fa42 f303 	asr.w	r3, r2, r3
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d013      	beq.n	800134e <DS18B20_Write+0x6a>
				{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001326:	2102      	movs	r1, #2
 8001328:	4817      	ldr	r0, [pc, #92]	; (8001388 <DS18B20_Write+0xa4>)
 800132a:	f000 fa43 	bl	80017b4 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 800132e:	2200      	movs	r2, #0
 8001330:	2102      	movs	r1, #2
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <DS18B20_Write+0xa4>)
 8001334:	f000 ff43 	bl	80021be <HAL_GPIO_WritePin>
			delay(1);  // wait for 1 us
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fe03 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800133e:	2102      	movs	r1, #2
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <DS18B20_Write+0xa4>)
 8001342:	f000 fa54 	bl	80017ee <Set_Pin_Input>
			delay(60);  // wait for 60 us
 8001346:	203c      	movs	r0, #60	; 0x3c
 8001348:	f7ff fdfc 	bl	8000f44 <delay>
 800134c:	e00f      	b.n	800136e <DS18B20_Write+0x8a>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800134e:	2102      	movs	r1, #2
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <DS18B20_Write+0xa4>)
 8001352:	f000 fa2f 	bl	80017b4 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 8001356:	2200      	movs	r2, #0
 8001358:	2102      	movs	r1, #2
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <DS18B20_Write+0xa4>)
 800135c:	f000 ff2f 	bl	80021be <HAL_GPIO_WritePin>
			delay(60);  // wait for 60 us
 8001360:	203c      	movs	r0, #60	; 0x3c
 8001362:	f7ff fdef 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001366:	2102      	movs	r1, #2
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <DS18B20_Write+0xa4>)
 800136a:	f000 fa40 	bl	80017ee <Set_Pin_Input>
	for (int i = 0; i < loop; i++) {
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3301      	adds	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbcc      	blt.n	8001316 <DS18B20_Write+0x32>
		}
	}
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010c00 	.word	0x40010c00

0800138c <DS18B20_Read>:

uint8_t DS18B20_Read(uint8_t bit) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	int loop = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
	if (bit == 1) {  // Bit read
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d102      	bne.n	80013a6 <DS18B20_Read+0x1a>
		loop = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e001      	b.n	80013aa <DS18B20_Read+0x1e>
	} else {
		loop = 8; // Byte read
 80013a6:	2308      	movs	r3, #8
 80013a8:	617b      	str	r3, [r7, #20]
	}

	uint8_t value = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	74fb      	strb	r3, [r7, #19]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80013ae:	2102      	movs	r1, #2
 80013b0:	481a      	ldr	r0, [pc, #104]	; (800141c <DS18B20_Read+0x90>)
 80013b2:	f000 fa1c 	bl	80017ee <Set_Pin_Input>

	for (int i = 0; i < loop; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e026      	b.n	800140a <DS18B20_Read+0x7e>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80013bc:	2102      	movs	r1, #2
 80013be:	4817      	ldr	r0, [pc, #92]	; (800141c <DS18B20_Read+0x90>)
 80013c0:	f000 f9f8 	bl	80017b4 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the data pin LOW
 80013c4:	2200      	movs	r2, #0
 80013c6:	2102      	movs	r1, #2
 80013c8:	4814      	ldr	r0, [pc, #80]	; (800141c <DS18B20_Read+0x90>)
 80013ca:	f000 fef8 	bl	80021be <HAL_GPIO_WritePin>
		delay(5);  // wait for 5 us
 80013ce:	2005      	movs	r0, #5
 80013d0:	f7ff fdb8 	bl	8000f44 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80013d4:	2102      	movs	r1, #2
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <DS18B20_Read+0x90>)
 80013d8:	f000 fa09 	bl	80017ee <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80013dc:	2102      	movs	r1, #2
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <DS18B20_Read+0x90>)
 80013e0:	f000 fed6 	bl	8002190 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <DS18B20_Read+0x72>
				{
			value |= 1 << i;  // read = 1
 80013ea:	2201      	movs	r2, #1
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	b25a      	sxtb	r2, r3
 80013f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	74fb      	strb	r3, [r7, #19]
		}
		delay(60);  // wait for 60 us
 80013fe:	203c      	movs	r0, #60	; 0x3c
 8001400:	f7ff fda0 	bl	8000f44 <delay>
	for (int i = 0; i < loop; i++) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	429a      	cmp	r2, r3
 8001410:	dbd4      	blt.n	80013bc <DS18B20_Read+0x30>
	}
	return value;
 8001412:	7cfb      	ldrb	r3, [r7, #19]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010c00 	.word	0x40010c00

08001420 <Search_ROM>:

int Search_ROM() {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

	Presence = DS18B20_Start();
 8001424:	f7ff ff2c 	bl	8001280 <DS18B20_Start>
 8001428:	4603      	mov	r3, r0
 800142a:	4a5f      	ldr	r2, [pc, #380]	; (80015a8 <Search_ROM+0x188>)
 800142c:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 800142e:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <Search_ROM+0x188>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d004      	beq.n	8001440 <Search_ROM+0x20>
		printf("Presence not detected\n");
 8001436:	485d      	ldr	r0, [pc, #372]	; (80015ac <Search_ROM+0x18c>)
 8001438:	f002 fc78 	bl	8003d2c <puts>
		return 0;
 800143c:	2300      	movs	r3, #0
 800143e:	e0b1      	b.n	80015a4 <Search_ROM+0x184>
	}

	if (FLAG_DONE == SET) {
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <Search_ROM+0x190>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <Search_ROM+0x2c>
		return 0;
 8001448:	2300      	movs	r3, #0
 800144a:	e0ab      	b.n	80015a4 <Search_ROM+0x184>
	}
	HAL_Delay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f000 fc13 	bl	8001c78 <HAL_Delay>

	bit_number = 1;
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <Search_ROM+0x194>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
	counts = 0;
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <Search_ROM+0x198>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
	discrepancy_marker = 0;
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <Search_ROM+0x19c>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
	DS18B20_Write(0xF0, 0);  // Send Search ROM command
 8001464:	2100      	movs	r1, #0
 8001466:	20f0      	movs	r0, #240	; 0xf0
 8001468:	f7ff ff3c 	bl	80012e4 <DS18B20_Write>
	bit_counter = 0;
 800146c:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <Search_ROM+0x1a0>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]

	do {

		bit_id = DS18B20_Read(1);				// read LSB bit value
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ff8a 	bl	800138c <DS18B20_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <Search_ROM+0x1a4>)
 800147e:	701a      	strb	r2, [r3, #0]
		bit_id_comp = DS18B20_Read(1);  // read LSB bit value complement
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff ff83 	bl	800138c <DS18B20_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <Search_ROM+0x1a8>)
 800148c:	701a      	strb	r2, [r3, #0]

		if (bit_id && bit_id_comp) { // 11 is the case for false value indicating no more devices
 800148e:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <Search_ROM+0x1a4>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <Search_ROM+0x88>
 8001496:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <Search_ROM+0x1a8>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <Search_ROM+0x88>
			printf("No more devices\n");
 800149e:	484b      	ldr	r0, [pc, #300]	; (80015cc <Search_ROM+0x1ac>)
 80014a0:	f002 fc44 	bl	8003d2c <puts>
			return 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e07d      	b.n	80015a4 <Search_ROM+0x184>
		} else {
			if (bit_id == bit_id_comp) // 00 indicates both 0 and 1 bit value at LSB of available devices
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <Search_ROM+0x1a4>)
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <Search_ROM+0x1a8>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d120      	bne.n	80014f6 <Search_ROM+0xd6>
					{
				if (bit_number == last_discrepancy) {
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <Search_ROM+0x194>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <Search_ROM+0x1b0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d103      	bne.n	80014c8 <Search_ROM+0xa8>
					search_value = 1;
 80014c0:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <Search_ROM+0x1b4>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	e01a      	b.n	80014fe <Search_ROM+0xde>
				} else {
					if (bit_number > last_discrepancy) {
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <Search_ROM+0x194>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <Search_ROM+0x1b0>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d907      	bls.n	80014e4 <Search_ROM+0xc4>
						search_value = 0;
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <Search_ROM+0x1b4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
						discrepancy_marker = bit_number;
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <Search_ROM+0x194>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	4b37      	ldr	r3, [pc, #220]	; (80015bc <Search_ROM+0x19c>)
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	e00c      	b.n	80014fe <Search_ROM+0xde>

					} else {
						if (search_value == 0) {
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <Search_ROM+0x1b4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <Search_ROM+0xde>
							discrepancy_marker = bit_number;
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <Search_ROM+0x194>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <Search_ROM+0x19c>)
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e003      	b.n	80014fe <Search_ROM+0xde>

					}
				}

			} else { // this indicates same 0 or 1 value at LSB of available devices
				search_value = bit_id;   // setting either 0 or 1 search
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <Search_ROM+0x1a4>)
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <Search_ROM+0x1b4>)
 80014fc:	701a      	strb	r2, [r3, #0]
			}
			DS18B20_Write(search_value, 1);	// Selecting the devices having ongoing-LSB value as search value (0 or 1)
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <Search_ROM+0x1b4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2101      	movs	r1, #1
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff feed 	bl	80012e4 <DS18B20_Write>
			new_rom_id[counts] |= search_value << bit_counter;
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <Search_ROM+0x198>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <Search_ROM+0x1b8>)
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	b25a      	sxtb	r2, r3
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <Search_ROM+0x1b4>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <Search_ROM+0x1a0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b259      	sxtb	r1, r3
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <Search_ROM+0x198>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	b2c9      	uxtb	r1, r1
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <Search_ROM+0x1b8>)
 8001534:	5499      	strb	r1, [r3, r2]

			if (bit_number % 8 == 0) {
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <Search_ROM+0x194>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <Search_ROM+0x130>
				counts++;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <Search_ROM+0x198>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <Search_ROM+0x198>)
 800154e:	701a      	strb	r2, [r3, #0]

			}
			bit_counter++;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <Search_ROM+0x1a0>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <Search_ROM+0x1a0>)
 800155a:	701a      	strb	r2, [r3, #0]
			if (bit_counter >= 8) {
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <Search_ROM+0x1a0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b07      	cmp	r3, #7
 8001562:	d902      	bls.n	800156a <Search_ROM+0x14a>
				bit_counter = 0;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <Search_ROM+0x1a0>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
			}

		}

		bit_number++;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <Search_ROM+0x194>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <Search_ROM+0x194>)
 8001574:	701a      	strb	r2, [r3, #0]

	} while (bit_number < 65);
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <Search_ROM+0x194>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b40      	cmp	r3, #64	; 0x40
 800157c:	f67f af79 	bls.w	8001472 <Search_ROM+0x52>

	last_discrepancy = discrepancy_marker;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <Search_ROM+0x19c>)
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <Search_ROM+0x1b0>)
 8001586:	701a      	strb	r2, [r3, #0]

	if (last_discrepancy == 0) {
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <Search_ROM+0x1b0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <Search_ROM+0x176>
		FLAG_DONE = SET;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <Search_ROM+0x190>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
//		printf("Done Flag is SET\n");
	}
	count = count + 1;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <Search_ROM+0x1bc>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <Search_ROM+0x1bc>)
 80015a0:	701a      	strb	r2, [r3, #0]

	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000288 	.word	0x20000288
 80015ac:	08005f18 	.word	0x08005f18
 80015b0:	200002f6 	.word	0x200002f6
 80015b4:	200002f3 	.word	0x200002f3
 80015b8:	200002f8 	.word	0x200002f8
 80015bc:	200002f4 	.word	0x200002f4
 80015c0:	200002f9 	.word	0x200002f9
 80015c4:	200002f0 	.word	0x200002f0
 80015c8:	200002f1 	.word	0x200002f1
 80015cc:	08005f30 	.word	0x08005f30
 80015d0:	200002f5 	.word	0x200002f5
 80015d4:	200002f2 	.word	0x200002f2
 80015d8:	200002e8 	.word	0x200002e8
 80015dc:	200002f7 	.word	0x200002f7

080015e0 <Match_ROM>:

void Match_ROM(int device) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

	DS18B20_Write(0x55, 0);
 80015e8:	2100      	movs	r1, #0
 80015ea:	2055      	movs	r0, #85	; 0x55
 80015ec:	f7ff fe7a 	bl	80012e4 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e00e      	b.n	8001614 <Match_ROM+0x34>
		DS18B20_Write(((uint8_t*) &ROM_id[device - 1])[i], 0);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4a09      	ldr	r2, [pc, #36]	; (8001624 <Match_ROM+0x44>)
 80015fe:	441a      	add	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fe6b 	bl	80012e4 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b07      	cmp	r3, #7
 8001618:	dded      	ble.n	80015f6 <Match_ROM+0x16>
	}

}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000298 	.word	0x20000298

08001628 <Read_Temp>:

void Read_Temp(int select) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	Presence = DS18B20_Start();
 8001630:	f7ff fe26 	bl	8001280 <DS18B20_Start>
 8001634:	4603      	mov	r3, r0
 8001636:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <Read_Temp+0xcc>)
 8001638:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <Read_Temp+0xcc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d002      	beq.n	8001648 <Read_Temp+0x20>
		printf("Presence not detected\n");
 8001642:	482d      	ldr	r0, [pc, #180]	; (80016f8 <Read_Temp+0xd0>)
 8001644:	f002 fb72 	bl	8003d2c <puts>
	}

	Match_ROM(select);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffc9 	bl	80015e0 <Match_ROM>
	DS18B20_Write(0x44, 0);		// Convert T
 800164e:	2100      	movs	r1, #0
 8001650:	2044      	movs	r0, #68	; 0x44
 8001652:	f7ff fe47 	bl	80012e4 <DS18B20_Write>
	Presence = DS18B20_Start();
 8001656:	f7ff fe13 	bl	8001280 <DS18B20_Start>
 800165a:	4603      	mov	r3, r0
 800165c:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <Read_Temp+0xcc>)
 800165e:	6013      	str	r3, [r2, #0]

	Match_ROM(select);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ffbd 	bl	80015e0 <Match_ROM>
	DS18B20_Write(0xBE, 0);		// Read Scratch pad
 8001666:	2100      	movs	r1, #0
 8001668:	20be      	movs	r0, #190	; 0xbe
 800166a:	f7ff fe3b 	bl	80012e4 <DS18B20_Write>
	uint8_t data[9] = { 0 };
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	711a      	strb	r2, [r3, #4]

	for (int i = 0; i < 9; i++) {
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e00d      	b.n	800169e <Read_Temp+0x76>
		data[i] = DS18B20_Read(0);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff fe82 	bl	800138c <DS18B20_Read>
 8001688:	4603      	mov	r3, r0
 800168a:	4619      	mov	r1, r3
 800168c:	f107 0208 	add.w	r2, r7, #8
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4413      	add	r3, r2
 8001694:	460a      	mov	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	ddee      	ble.n	8001682 <Read_Temp+0x5a>
	}

	TEMP = (data[1] << 8) | data[0];
 80016a4:	7a7b      	ldrb	r3, [r7, #9]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	7a3b      	ldrb	r3, [r7, #8]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <Read_Temp+0xd4>)
 80016b6:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP / 16;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <Read_Temp+0xd4>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fa99 	bl	8000bf4 <__aeabi_ui2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fb9f 	bl	8000e0c <__aeabi_fdiv>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <Read_Temp+0xd8>)
 80016d4:	601a      	str	r2, [r3, #0]

	printf("Temperature of device %d = %f \n", select, Temperature);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <Read_Temp+0xd8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fea4 	bl	8000428 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <Read_Temp+0xdc>)
 80016e8:	f002 fa9a 	bl	8003c20 <iprintf>
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000288 	.word	0x20000288
 80016f8:	08005f18 	.word	0x08005f18
 80016fc:	20000290 	.word	0x20000290
 8001700:	2000028c 	.word	0x2000028c
 8001704:	08005f40 	.word	0x08005f40

08001708 <Find_Temp_devices>:

void Find_Temp_devices() {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	last_discrepancy = 0;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <Find_Temp_devices+0x8c>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
	while (Search_ROM()) {
 8001714:	e033      	b.n	800177e <Find_Temp_devices+0x76>

		memcpy((uint8_t*) &ROM_id[count - 1], new_rom_id, sizeof(new_rom_id));
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <Find_Temp_devices+0x90>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3b01      	subs	r3, #1
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <Find_Temp_devices+0x94>)
 8001720:	4413      	add	r3, r2
 8001722:	491f      	ldr	r1, [pc, #124]	; (80017a0 <Find_Temp_devices+0x98>)
 8001724:	461a      	mov	r2, r3
 8001726:	460b      	mov	r3, r1
 8001728:	cb03      	ldmia	r3!, {r0, r1}
 800172a:	6010      	str	r0, [r2, #0]
 800172c:	6051      	str	r1, [r2, #4]
//		printf("\n\n");
		printf("Room id of the sensor= %d\n{ ", count);
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <Find_Temp_devices+0x90>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	481b      	ldr	r0, [pc, #108]	; (80017a4 <Find_Temp_devices+0x9c>)
 8001736:	f002 fa73 	bl	8003c20 <iprintf>
		for (int i = 0; i < 8; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e00f      	b.n	8001760 <Find_Temp_devices+0x58>
			printf("0x%x ", ((uint8_t*) &ROM_id[count - 1])[i]);
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <Find_Temp_devices+0x90>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	3b01      	subs	r3, #1
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <Find_Temp_devices+0x94>)
 800174a:	441a      	add	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4814      	ldr	r0, [pc, #80]	; (80017a8 <Find_Temp_devices+0xa0>)
 8001756:	f002 fa63 	bl	8003c20 <iprintf>
		for (int i = 0; i < 8; i++) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b07      	cmp	r3, #7
 8001764:	ddec      	ble.n	8001740 <Find_Temp_devices+0x38>
		}
		printf("}\n\n");
 8001766:	4811      	ldr	r0, [pc, #68]	; (80017ac <Find_Temp_devices+0xa4>)
 8001768:	f002 fae0 	bl	8003d2c <puts>

		if (FLAG_DONE == 1) {
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <Find_Temp_devices+0xa8>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d00a      	beq.n	800178a <Find_Temp_devices+0x82>
			break;
		}
		memset(new_rom_id, 0, sizeof(new_rom_id));
 8001774:	2208      	movs	r2, #8
 8001776:	2100      	movs	r1, #0
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <Find_Temp_devices+0x98>)
 800177a:	f001 fde9 	bl	8003350 <memset>
	while (Search_ROM()) {
 800177e:	f7ff fe4f 	bl	8001420 <Search_ROM>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1c6      	bne.n	8001716 <Find_Temp_devices+0xe>

	}

}
 8001788:	e000      	b.n	800178c <Find_Temp_devices+0x84>
			break;
 800178a:	bf00      	nop
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200002f5 	.word	0x200002f5
 8001798:	200002f7 	.word	0x200002f7
 800179c:	20000298 	.word	0x20000298
 80017a0:	200002e8 	.word	0x200002e8
 80017a4:	08005f60 	.word	0x08005f60
 80017a8:	08005f80 	.word	0x08005f80
 80017ac:	08005f88 	.word	0x08005f88
 80017b0:	200002f6 	.word	0x200002f6

080017b4 <Set_Pin_Output>:
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fb51 	bl	8001e88 <HAL_GPIO_Init>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001810:	2301      	movs	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4619      	mov	r1, r3
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fb34 	bl	8001e88 <HAL_GPIO_Init>
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("From the error handler\n");
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <Error_Handler+0x10>)
 800182e:	f002 fa7d 	bl	8003d2c <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001832:	b672      	cpsid	i
}
 8001834:	bf00      	nop
	__disable_irq();
	while (1) {
 8001836:	e7fe      	b.n	8001836 <Error_Handler+0xe>
 8001838:	08005f8c 	.word	0x08005f8c

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_MspInit+0x5c>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_MspInit+0x5c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_MspInit+0x5c>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_MspInit+0x5c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_MspInit+0x5c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_MspInit+0x5c>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_MspInit+0x60>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_MspInit+0x60>)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d10b      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_TIM_Base_MspInit+0x34>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_TIM_Base_MspInit+0x34>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_TIM_Base_MspInit+0x34>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_UART_MspInit+0x8c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d131      	bne.n	800195c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_UART_MspInit+0x90>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <HAL_UART_MspInit+0x90>)
 80018fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_UART_MspInit+0x90>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_UART_MspInit+0x90>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_UART_MspInit+0x90>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_UART_MspInit+0x90>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	4619      	mov	r1, r3
 800193c:	480b      	ldr	r0, [pc, #44]	; (800196c <HAL_UART_MspInit+0x94>)
 800193e:	f000 faa3 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_UART_MspInit+0x94>)
 8001958:	f000 fa96 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013800 	.word	0x40013800
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	printf("From NMI Handler\n");
 8001974:	4801      	ldr	r0, [pc, #4]	; (800197c <NMI_Handler+0xc>)
 8001976:	f002 f9d9 	bl	8003d2c <puts>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800197a:	e7fe      	b.n	800197a <NMI_Handler+0xa>
 800197c:	08005fa4 	.word	0x08005fa4

08001980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault handler\n");
 8001984:	4801      	ldr	r0, [pc, #4]	; (800198c <HardFault_Handler+0xc>)
 8001986:	f002 f9d1 	bl	8003d2c <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0xa>
 800198c:	08005fb8 	.word	0x08005fb8

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemMange Handler\n");
 8001994:	4801      	ldr	r0, [pc, #4]	; (800199c <MemManage_Handler+0xc>)
 8001996:	f002 f9c9 	bl	8003d2c <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <MemManage_Handler+0xa>
 800199c:	08005fcc 	.word	0x08005fcc

080019a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <BusFault_Handler+0x4>

080019a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <UsageFault_Handler+0x4>

080019ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 f934 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
	return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <_kill>:

int _kill(int pid, int sig)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019f4:	f001 fc82 	bl	80032fc <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2216      	movs	r2, #22
 80019fc:	601a      	str	r2, [r3, #0]
	return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_exit>:

void _exit (int status)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a12:	f04f 31ff 	mov.w	r1, #4294967295
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffe7 	bl	80019ea <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a1c:	e7fe      	b.n	8001a1c <_exit+0x12>

08001a1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e00a      	b.n	8001a46 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a30:	f3af 8000 	nop.w
 8001a34:	4601      	mov	r1, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	b2ca      	uxtb	r2, r1
 8001a3e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbf0      	blt.n	8001a30 <_read+0x12>
	}

return len;
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e009      	b.n	8001a7e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	60ba      	str	r2, [r7, #8]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fbd0 	bl	8001218 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dbf1      	blt.n	8001a6a <_write+0x12>
	}
	return len;
 8001a86:	687b      	ldr	r3, [r7, #4]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_close>:

int _close(int file)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_isatty>:

int _isatty(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f001 fbec 	bl	80032fc <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20005000 	.word	0x20005000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	200002fc 	.word	0x200002fc
 8001b58:	20000318 	.word	0x20000318

08001b5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	; (8001bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b8e:	f7ff ffe5 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f001 fbb9 	bl	8003308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b96:	f7ff f9ed 	bl	8000f74 <main>
  bx lr
 8001b9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ba4:	080063ec 	.word	0x080063ec
  ldr r2, =_sbss
 8001ba8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bac:	20000314 	.word	0x20000314

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_Init+0x28>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_Init+0x28>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f92b 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff fe34 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f935 	bl	8001e6e <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f000 f90b 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_IncTick+0x1c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x20>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <HAL_IncTick+0x20>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000300 	.word	0x20000300

08001c64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <HAL_GetTick+0x10>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000300 	.word	0x20000300

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffe0 	bl	8001c64 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff90 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff49 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff5e 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff90 	bl	8001d78 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5f 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffb0 	bl	8001ddc <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b08b      	sub	sp, #44	; 0x2c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e169      	b.n	8002170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8158 	bne.w	800216a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a9a      	ldr	r2, [pc, #616]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d05e      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a98      	ldr	r2, [pc, #608]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d875      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eca:	4a98      	ldr	r2, [pc, #608]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d058      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a96      	ldr	r2, [pc, #600]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d86f      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a96      	ldr	r2, [pc, #600]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d052      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001edc:	4a94      	ldr	r2, [pc, #592]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d869      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a94      	ldr	r2, [pc, #592]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d04c      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d863      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eee:	4a92      	ldr	r2, [pc, #584]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d046      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a90      	ldr	r2, [pc, #576]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d85d      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d82a      	bhi.n	8001f54 <HAL_GPIO_Init+0xcc>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d859      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <HAL_GPIO_Init+0x80>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f5d 	.word	0x08001f5d
 8001f10:	08001f6f 	.word	0x08001f6f
 8001f14:	08001fb1 	.word	0x08001fb1
 8001f18:	08001fb7 	.word	0x08001fb7
 8001f1c:	08001fb7 	.word	0x08001fb7
 8001f20:	08001fb7 	.word	0x08001fb7
 8001f24:	08001fb7 	.word	0x08001fb7
 8001f28:	08001fb7 	.word	0x08001fb7
 8001f2c:	08001fb7 	.word	0x08001fb7
 8001f30:	08001fb7 	.word	0x08001fb7
 8001f34:	08001fb7 	.word	0x08001fb7
 8001f38:	08001fb7 	.word	0x08001fb7
 8001f3c:	08001fb7 	.word	0x08001fb7
 8001f40:	08001fb7 	.word	0x08001fb7
 8001f44:	08001fb7 	.word	0x08001fb7
 8001f48:	08001fb7 	.word	0x08001fb7
 8001f4c:	08001f65 	.word	0x08001f65
 8001f50:	08001f79 	.word	0x08001f79
 8001f54:	4a79      	ldr	r2, [pc, #484]	; (800213c <HAL_GPIO_Init+0x2b4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5a:	e02c      	b.n	8001fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e029      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e024      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	3308      	adds	r3, #8
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e01f      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e01a      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e013      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	611a      	str	r2, [r3, #16]
          break;
 8001fa2:	e009      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	615a      	str	r2, [r3, #20]
          break;
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          break;
 8001fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d801      	bhi.n	8001fc2 <HAL_GPIO_Init+0x13a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	e001      	b.n	8001fc6 <HAL_GPIO_Init+0x13e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_GPIO_Init+0x14c>
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x152>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3b08      	subs	r3, #8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80b1 	beq.w	800216a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002020:	4a48      	ldr	r2, [pc, #288]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_GPIO_Init+0x2c0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1ec>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_GPIO_Init+0x2c4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1e8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_GPIO_Init+0x2c8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1e4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <HAL_GPIO_Init+0x2cc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1e0>
 8002064:	2303      	movs	r3, #3
 8002066:	e006      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002068:	2304      	movs	r3, #4
 800206a:	e004      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 800206c:	2302      	movs	r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002074:	2300      	movs	r3, #0
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	f002 0203 	and.w	r2, r2, #3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4093      	lsls	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002086:	492f      	ldr	r1, [pc, #188]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	492c      	ldr	r1, [pc, #176]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4928      	ldr	r1, [pc, #160]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4922      	ldr	r1, [pc, #136]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	491e      	ldr	r1, [pc, #120]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	4918      	ldr	r1, [pc, #96]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	43db      	mvns	r3, r3
 8002106:	4914      	ldr	r1, [pc, #80]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002108:	4013      	ands	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d021      	beq.n	800215c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
 8002124:	e021      	b.n	800216a <HAL_GPIO_Init+0x2e2>
 8002126:	bf00      	nop
 8002128:	10320000 	.word	0x10320000
 800212c:	10310000 	.word	0x10310000
 8002130:	10220000 	.word	0x10220000
 8002134:	10210000 	.word	0x10210000
 8002138:	10120000 	.word	0x10120000
 800213c:	10110000 	.word	0x10110000
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	40010800 	.word	0x40010800
 800214c:	40010c00 	.word	0x40010c00
 8002150:	40011000 	.word	0x40011000
 8002154:	40011400 	.word	0x40011400
 8002158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_GPIO_Init+0x304>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	43db      	mvns	r3, r3
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <HAL_GPIO_Init+0x304>)
 8002166:	4013      	ands	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	3301      	adds	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f ae8e 	bne.w	8001e9c <HAL_GPIO_Init+0x14>
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	372c      	adds	r7, #44	; 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ce:	787b      	ldrb	r3, [r7, #1]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021da:	e003      	b.n	80021e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e272      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8087 	beq.w	800231e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002210:	4b92      	ldr	r3, [pc, #584]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b04      	cmp	r3, #4
 800221a:	d00c      	beq.n	8002236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800221c:	4b8f      	ldr	r3, [pc, #572]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d112      	bne.n	800224e <HAL_RCC_OscConfig+0x5e>
 8002228:	4b8c      	ldr	r3, [pc, #560]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d10b      	bne.n	800224e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d06c      	beq.n	800231c <HAL_RCC_OscConfig+0x12c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d168      	bne.n	800231c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e24c      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x76>
 8002258:	4b80      	ldr	r3, [pc, #512]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a7f      	ldr	r2, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800225e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e02e      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b7b      	ldr	r3, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7a      	ldr	r2, [pc, #488]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b78      	ldr	r3, [pc, #480]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a77      	ldr	r2, [pc, #476]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e01d      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0xbc>
 8002292:	4b72      	ldr	r3, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a71      	ldr	r2, [pc, #452]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6e      	ldr	r2, [pc, #440]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 80022ac:	4b6b      	ldr	r3, [pc, #428]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6a      	ldr	r2, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a67      	ldr	r2, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fcca 	bl	8001c64 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fcc6 	bl	8001c64 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e200      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b5d      	ldr	r3, [pc, #372]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xe4>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fcb6 	bl	8001c64 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fcb2 	bl	8001c64 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1ec      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x10c>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d063      	beq.n	80023f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800232a:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002336:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b08      	cmp	r3, #8
 8002340:	d11c      	bne.n	800237c <HAL_RCC_OscConfig+0x18c>
 8002342:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d116      	bne.n	800237c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b43      	ldr	r3, [pc, #268]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x176>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e1c0      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4939      	ldr	r1, [pc, #228]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	e03a      	b.n	80023f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b36      	ldr	r3, [pc, #216]	; (8002460 <HAL_RCC_OscConfig+0x270>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff fc6b 	bl	8001c64 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7ff fc67 	bl	8001c64 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1a1      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4927      	ldr	r1, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_RCC_OscConfig+0x270>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fc4a 	bl	8001c64 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7ff fc46 	bl	8001c64 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e180      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d03a      	beq.n	8002474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d019      	beq.n	800243a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_RCC_OscConfig+0x274>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff fc2a 	bl	8001c64 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fc26 	bl	8001c64 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e160      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f000 fad8 	bl	80029e8 <RCC_Delay>
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_OscConfig+0x274>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7ff fc10 	bl	8001c64 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002446:	e00f      	b.n	8002468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7ff fc0c 	bl	8001c64 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d908      	bls.n	8002468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e146      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	42420000 	.word	0x42420000
 8002464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e9      	bne.n	8002448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a6 	beq.w	80025ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10d      	bne.n	80024ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a87      	ldr	r2, [pc, #540]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]
 800249e:	4b85      	ldr	r3, [pc, #532]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ba:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7e      	ldr	r2, [pc, #504]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7ff fbcd 	bl	8001c64 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ce:	f7ff fbc9 	bl	8001c64 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	; 0x64
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e103      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	4b75      	ldr	r3, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x312>
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e02d      	b.n	800255e <HAL_RCC_OscConfig+0x36e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x334>
 800250a:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a69      	ldr	r2, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	e01c      	b.n	800255e <HAL_RCC_OscConfig+0x36e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x356>
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0x36e>
 8002546:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a5a      	ldr	r2, [pc, #360]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d015      	beq.n	8002592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7ff fb7d 	bl	8001c64 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7ff fb79 	bl	8001c64 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0b1      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ee      	beq.n	800256e <HAL_RCC_OscConfig+0x37e>
 8002590:	e014      	b.n	80025bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff fb67 	bl	8001c64 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff fb63 	bl	8001c64 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e09b      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ee      	bne.n	800259a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8087 	beq.w	80026e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d061      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d146      	bne.n	800267a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7ff fb37 	bl	8001c64 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff fb33 	bl	8001c64 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e06d      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002620:	d108      	bne.n	8002634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4921      	ldr	r1, [pc, #132]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a19      	ldr	r1, [r3, #32]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	430b      	orrs	r3, r1
 8002646:	491b      	ldr	r1, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fb07 	bl	8001c64 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fb03 	bl	8001c64 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e03d      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x46a>
 8002678:	e035      	b.n	80026e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff faf0 	bl	8001c64 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff faec 	bl	8001c64 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e026      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x498>
 80026a6:	e01e      	b.n	80026e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e019      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x500>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d0      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d910      	bls.n	8002738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4965      	ldr	r1, [pc, #404]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800275a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002772:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	494d      	ldr	r1, [pc, #308]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d040      	beq.n	8002814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d115      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e073      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06b      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4936      	ldr	r1, [pc, #216]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e4:	f7ff fa3e 	bl	8001c64 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7ff fa3a 	bl	8001c64 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e053      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002814:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d210      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4922      	ldr	r1, [pc, #136]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e032      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4916      	ldr	r1, [pc, #88]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	490e      	ldr	r1, [pc, #56]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002882:	f000 f821 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002886:	4602      	mov	r2, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	490a      	ldr	r1, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	5ccb      	ldrb	r3, [r1, r3]
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1cc>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1d0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f99c 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08005ff0 	.word	0x08005ff0
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	b490      	push	{r4, r7}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_GetSysClockFreq+0xac>)
 80028d0:	1d3c      	adds	r4, r7, #4
 80028d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028d8:	f240 2301 	movw	r3, #513	; 0x201
 80028dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d002      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x40>
 8002902:	2b08      	cmp	r3, #8
 8002904:	d003      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x46>
 8002906:	e02b      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_RCC_GetSysClockFreq+0xb4>)
 800290a:	623b      	str	r3, [r7, #32]
      break;
 800290c:	e02b      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	0c9b      	lsrs	r3, r3, #18
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3328      	adds	r3, #40	; 0x28
 8002918:	443b      	add	r3, r7
 800291a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800291e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d012      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb0>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0c5b      	lsrs	r3, r3, #17
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	3328      	adds	r3, #40	; 0x28
 8002936:	443b      	add	r3, r7
 8002938:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800293c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002942:	fb03 f202 	mul.w	r2, r3, r2
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	e004      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	623b      	str	r3, [r7, #32]
      break;
 800295e:	e002      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002962:	623b      	str	r3, [r7, #32]
      break;
 8002964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002966:	6a3b      	ldr	r3, [r7, #32]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc90      	pop	{r4, r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	08005fe0 	.word	0x08005fe0
 8002978:	40021000 	.word	0x40021000
 800297c:	007a1200 	.word	0x007a1200
 8002980:	003d0900 	.word	0x003d0900

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b02      	ldr	r3, [pc, #8]	; (8002994 <HAL_RCC_GetHCLKFreq+0x10>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff2 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08006000 	.word	0x08006000

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffde 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08006000 	.word	0x08006000

080029e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCC_Delay+0x34>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <RCC_Delay+0x38>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a04:	bf00      	nop
  }
  while (Delay --);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	60fa      	str	r2, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <RCC_Delay+0x1c>
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe ff28 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 f93c 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d001      	beq.n	8002adc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_TIM_Base_Start+0x88>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00e      	beq.n	8002b0c <HAL_TIM_Base_Start+0x48>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d009      	beq.n	8002b0c <HAL_TIM_Base_Start+0x48>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_TIM_Base_Start+0x8c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIM_Base_Start+0x48>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <HAL_TIM_Base_Start+0x90>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d111      	bne.n	8002b30 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d010      	beq.n	8002b40 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2e:	e007      	b.n	8002b40 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800

08002b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0b3      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x180>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba8:	d03e      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xd0>
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	f200 8087 	bhi.w	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	f000 8085 	beq.w	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	d87f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d01a      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xa2>
 8002bc4:	2b70      	cmp	r3, #112	; 0x70
 8002bc6:	d87b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d050      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x116>
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d877      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d03c      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xf6>
 8002bd4:	2b50      	cmp	r3, #80	; 0x50
 8002bd6:	d873      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d058      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x136>
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d86f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d064      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002be4:	2b30      	cmp	r3, #48	; 0x30
 8002be6:	d86b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d060      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d867      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d05a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bf8:	e062      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f000 f942 	bl	8002e92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	609a      	str	r2, [r3, #8]
      break;
 8002c26:	e04e      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f000 f92b 	bl	8002e92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e03b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 f8a2 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2150      	movs	r1, #80	; 0x50
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f8f9 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e02b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f8c0 	bl	8002e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2160      	movs	r1, #96	; 0x60
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f8e9 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e01b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f882 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f8d9 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002cac:	e00b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4610      	mov	r0, r2
 8002cba:	f000 f8d0 	bl	8002e5e <TIM_ITRx_SetConfig>
        break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f023 030a 	bic.w	r3, r3, #10
 8002de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 0210 	bic.w	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	031b      	lsls	r3, r3, #12
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f043 0307 	orr.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e046      	b.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d009      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10c      	bne.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800

08002f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e03f      	b.n	800301e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fc90 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f905 	bl	80031e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b08a      	sub	sp, #40	; 0x28
 800302a:	af02      	add	r7, sp, #8
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	d17c      	bne.n	8003140 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_UART_Transmit+0x2c>
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e075      	b.n	8003142 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_UART_Transmit+0x3e>
 8003060:	2302      	movs	r3, #2
 8003062:	e06e      	b.n	8003142 <HAL_UART_Transmit+0x11c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2221      	movs	r2, #33	; 0x21
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800307a:	f7fe fdf3 	bl	8001c64 <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	88fa      	ldrh	r2, [r7, #6]
 800308a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d108      	bne.n	80030a8 <HAL_UART_Transmit+0x82>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e003      	b.n	80030b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030b8:	e02a      	b.n	8003110 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f840 	bl	800314a <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e036      	b.n	8003142 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3302      	adds	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e007      	b.n	8003102 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1cf      	bne.n	80030ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f810 	bl	800314a <UART_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e006      	b.n	8003142 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315a:	e02c      	b.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d028      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <UART_WaitOnFlagUntilTimeout+0x30>
 800316a:	f7fe fd7b 	bl	8001c64 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	429a      	cmp	r2, r3
 8003178:	d21d      	bcs.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003188:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0201 	bic.w	r2, r2, #1
 8003198:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e00f      	b.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4013      	ands	r3, r2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d0c3      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800321a:	f023 030c 	bic.w	r3, r3, #12
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	430b      	orrs	r3, r1
 8003226:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <UART_SetConfig+0x114>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7ff fbba 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	e002      	b.n	8003256 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003250:	f7ff fba2 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003254:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009a      	lsls	r2, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <UART_SetConfig+0x118>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	0119      	lsls	r1, r3, #4
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009a      	lsls	r2, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fbb2 f2f3 	udiv	r2, r2, r3
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <UART_SetConfig+0x118>)
 800328e:	fba3 0302 	umull	r0, r3, r3, r2
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2064      	movs	r0, #100	; 0x64
 8003296:	fb00 f303 	mul.w	r3, r0, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	3332      	adds	r3, #50	; 0x32
 80032a0:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <UART_SetConfig+0x118>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ac:	4419      	add	r1, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009a      	lsls	r2, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <UART_SetConfig+0x118>)
 80032c6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2064      	movs	r0, #100	; 0x64
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	3332      	adds	r3, #50	; 0x32
 80032d8:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <UART_SetConfig+0x118>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	440a      	add	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40013800 	.word	0x40013800
 80032f8:	51eb851f 	.word	0x51eb851f

080032fc <__errno>:
 80032fc:	4b01      	ldr	r3, [pc, #4]	; (8003304 <__errno+0x8>)
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	2000000c 	.word	0x2000000c

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	2600      	movs	r6, #0
 800330c:	4d0c      	ldr	r5, [pc, #48]	; (8003340 <__libc_init_array+0x38>)
 800330e:	4c0d      	ldr	r4, [pc, #52]	; (8003344 <__libc_init_array+0x3c>)
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	f002 fdbc 	bl	8005e94 <_init>
 800331c:	2600      	movs	r6, #0
 800331e:	4d0a      	ldr	r5, [pc, #40]	; (8003348 <__libc_init_array+0x40>)
 8003320:	4c0a      	ldr	r4, [pc, #40]	; (800334c <__libc_init_array+0x44>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	f855 3b04 	ldr.w	r3, [r5], #4
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	080063e4 	.word	0x080063e4
 8003344:	080063e4 	.word	0x080063e4
 8003348:	080063e4 	.word	0x080063e4
 800334c:	080063e8 	.word	0x080063e8

08003350 <memset>:
 8003350:	4603      	mov	r3, r0
 8003352:	4402      	add	r2, r0
 8003354:	4293      	cmp	r3, r2
 8003356:	d100      	bne.n	800335a <memset+0xa>
 8003358:	4770      	bx	lr
 800335a:	f803 1b01 	strb.w	r1, [r3], #1
 800335e:	e7f9      	b.n	8003354 <memset+0x4>

08003360 <__cvt>:
 8003360:	2b00      	cmp	r3, #0
 8003362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003366:	461f      	mov	r7, r3
 8003368:	bfbb      	ittet	lt
 800336a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800336e:	461f      	movlt	r7, r3
 8003370:	2300      	movge	r3, #0
 8003372:	232d      	movlt	r3, #45	; 0x2d
 8003374:	b088      	sub	sp, #32
 8003376:	4614      	mov	r4, r2
 8003378:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800337a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800337c:	7013      	strb	r3, [r2, #0]
 800337e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003380:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003384:	f023 0820 	bic.w	r8, r3, #32
 8003388:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800338c:	d005      	beq.n	800339a <__cvt+0x3a>
 800338e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003392:	d100      	bne.n	8003396 <__cvt+0x36>
 8003394:	3501      	adds	r5, #1
 8003396:	2302      	movs	r3, #2
 8003398:	e000      	b.n	800339c <__cvt+0x3c>
 800339a:	2303      	movs	r3, #3
 800339c:	aa07      	add	r2, sp, #28
 800339e:	9204      	str	r2, [sp, #16]
 80033a0:	aa06      	add	r2, sp, #24
 80033a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80033a6:	e9cd 3500 	strd	r3, r5, [sp]
 80033aa:	4622      	mov	r2, r4
 80033ac:	463b      	mov	r3, r7
 80033ae:	f000 fe13 	bl	8003fd8 <_dtoa_r>
 80033b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033b6:	4606      	mov	r6, r0
 80033b8:	d102      	bne.n	80033c0 <__cvt+0x60>
 80033ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033bc:	07db      	lsls	r3, r3, #31
 80033be:	d522      	bpl.n	8003406 <__cvt+0xa6>
 80033c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80033c4:	eb06 0905 	add.w	r9, r6, r5
 80033c8:	d110      	bne.n	80033ec <__cvt+0x8c>
 80033ca:	7833      	ldrb	r3, [r6, #0]
 80033cc:	2b30      	cmp	r3, #48	; 0x30
 80033ce:	d10a      	bne.n	80033e6 <__cvt+0x86>
 80033d0:	2200      	movs	r2, #0
 80033d2:	2300      	movs	r3, #0
 80033d4:	4620      	mov	r0, r4
 80033d6:	4639      	mov	r1, r7
 80033d8:	f7fd fae6 	bl	80009a8 <__aeabi_dcmpeq>
 80033dc:	b918      	cbnz	r0, 80033e6 <__cvt+0x86>
 80033de:	f1c5 0501 	rsb	r5, r5, #1
 80033e2:	f8ca 5000 	str.w	r5, [sl]
 80033e6:	f8da 3000 	ldr.w	r3, [sl]
 80033ea:	4499      	add	r9, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	2300      	movs	r3, #0
 80033f0:	4620      	mov	r0, r4
 80033f2:	4639      	mov	r1, r7
 80033f4:	f7fd fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80033f8:	b108      	cbz	r0, 80033fe <__cvt+0x9e>
 80033fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80033fe:	2230      	movs	r2, #48	; 0x30
 8003400:	9b07      	ldr	r3, [sp, #28]
 8003402:	454b      	cmp	r3, r9
 8003404:	d307      	bcc.n	8003416 <__cvt+0xb6>
 8003406:	4630      	mov	r0, r6
 8003408:	9b07      	ldr	r3, [sp, #28]
 800340a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800340c:	1b9b      	subs	r3, r3, r6
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	b008      	add	sp, #32
 8003412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003416:	1c59      	adds	r1, r3, #1
 8003418:	9107      	str	r1, [sp, #28]
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e7f0      	b.n	8003400 <__cvt+0xa0>

0800341e <__exponent>:
 800341e:	4603      	mov	r3, r0
 8003420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003422:	2900      	cmp	r1, #0
 8003424:	f803 2b02 	strb.w	r2, [r3], #2
 8003428:	bfb6      	itet	lt
 800342a:	222d      	movlt	r2, #45	; 0x2d
 800342c:	222b      	movge	r2, #43	; 0x2b
 800342e:	4249      	neglt	r1, r1
 8003430:	2909      	cmp	r1, #9
 8003432:	7042      	strb	r2, [r0, #1]
 8003434:	dd2b      	ble.n	800348e <__exponent+0x70>
 8003436:	f10d 0407 	add.w	r4, sp, #7
 800343a:	46a4      	mov	ip, r4
 800343c:	270a      	movs	r7, #10
 800343e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003442:	460a      	mov	r2, r1
 8003444:	46a6      	mov	lr, r4
 8003446:	fb07 1516 	mls	r5, r7, r6, r1
 800344a:	2a63      	cmp	r2, #99	; 0x63
 800344c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003450:	4631      	mov	r1, r6
 8003452:	f104 34ff 	add.w	r4, r4, #4294967295
 8003456:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800345a:	dcf0      	bgt.n	800343e <__exponent+0x20>
 800345c:	3130      	adds	r1, #48	; 0x30
 800345e:	f1ae 0502 	sub.w	r5, lr, #2
 8003462:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003466:	4629      	mov	r1, r5
 8003468:	1c44      	adds	r4, r0, #1
 800346a:	4561      	cmp	r1, ip
 800346c:	d30a      	bcc.n	8003484 <__exponent+0x66>
 800346e:	f10d 0209 	add.w	r2, sp, #9
 8003472:	eba2 020e 	sub.w	r2, r2, lr
 8003476:	4565      	cmp	r5, ip
 8003478:	bf88      	it	hi
 800347a:	2200      	movhi	r2, #0
 800347c:	4413      	add	r3, r2
 800347e:	1a18      	subs	r0, r3, r0
 8003480:	b003      	add	sp, #12
 8003482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003484:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003488:	f804 2f01 	strb.w	r2, [r4, #1]!
 800348c:	e7ed      	b.n	800346a <__exponent+0x4c>
 800348e:	2330      	movs	r3, #48	; 0x30
 8003490:	3130      	adds	r1, #48	; 0x30
 8003492:	7083      	strb	r3, [r0, #2]
 8003494:	70c1      	strb	r1, [r0, #3]
 8003496:	1d03      	adds	r3, r0, #4
 8003498:	e7f1      	b.n	800347e <__exponent+0x60>
	...

0800349c <_printf_float>:
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a0:	b091      	sub	sp, #68	; 0x44
 80034a2:	460c      	mov	r4, r1
 80034a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80034a8:	4616      	mov	r6, r2
 80034aa:	461f      	mov	r7, r3
 80034ac:	4605      	mov	r5, r0
 80034ae:	f001 fd35 	bl	8004f1c <_localeconv_r>
 80034b2:	6803      	ldr	r3, [r0, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	9309      	str	r3, [sp, #36]	; 0x24
 80034b8:	f7fc fe4a 	bl	8000150 <strlen>
 80034bc:	2300      	movs	r3, #0
 80034be:	930e      	str	r3, [sp, #56]	; 0x38
 80034c0:	f8d8 3000 	ldr.w	r3, [r8]
 80034c4:	900a      	str	r0, [sp, #40]	; 0x28
 80034c6:	3307      	adds	r3, #7
 80034c8:	f023 0307 	bic.w	r3, r3, #7
 80034cc:	f103 0208 	add.w	r2, r3, #8
 80034d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034d4:	f8d4 b000 	ldr.w	fp, [r4]
 80034d8:	f8c8 2000 	str.w	r2, [r8]
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80034e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80034ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295
 80034f2:	4640      	mov	r0, r8
 80034f4:	4b9c      	ldr	r3, [pc, #624]	; (8003768 <_printf_float+0x2cc>)
 80034f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034f8:	f7fd fa88 	bl	8000a0c <__aeabi_dcmpun>
 80034fc:	bb70      	cbnz	r0, 800355c <_printf_float+0xc0>
 80034fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003502:	4640      	mov	r0, r8
 8003504:	4b98      	ldr	r3, [pc, #608]	; (8003768 <_printf_float+0x2cc>)
 8003506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003508:	f7fd fa62 	bl	80009d0 <__aeabi_dcmple>
 800350c:	bb30      	cbnz	r0, 800355c <_printf_float+0xc0>
 800350e:	2200      	movs	r2, #0
 8003510:	2300      	movs	r3, #0
 8003512:	4640      	mov	r0, r8
 8003514:	4651      	mov	r1, sl
 8003516:	f7fd fa51 	bl	80009bc <__aeabi_dcmplt>
 800351a:	b110      	cbz	r0, 8003522 <_printf_float+0x86>
 800351c:	232d      	movs	r3, #45	; 0x2d
 800351e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003522:	4b92      	ldr	r3, [pc, #584]	; (800376c <_printf_float+0x2d0>)
 8003524:	4892      	ldr	r0, [pc, #584]	; (8003770 <_printf_float+0x2d4>)
 8003526:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800352a:	bf94      	ite	ls
 800352c:	4698      	movls	r8, r3
 800352e:	4680      	movhi	r8, r0
 8003530:	2303      	movs	r3, #3
 8003532:	f04f 0a00 	mov.w	sl, #0
 8003536:	6123      	str	r3, [r4, #16]
 8003538:	f02b 0304 	bic.w	r3, fp, #4
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	4633      	mov	r3, r6
 8003540:	4621      	mov	r1, r4
 8003542:	4628      	mov	r0, r5
 8003544:	9700      	str	r7, [sp, #0]
 8003546:	aa0f      	add	r2, sp, #60	; 0x3c
 8003548:	f000 f9d4 	bl	80038f4 <_printf_common>
 800354c:	3001      	adds	r0, #1
 800354e:	f040 8090 	bne.w	8003672 <_printf_float+0x1d6>
 8003552:	f04f 30ff 	mov.w	r0, #4294967295
 8003556:	b011      	add	sp, #68	; 0x44
 8003558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355c:	4642      	mov	r2, r8
 800355e:	4653      	mov	r3, sl
 8003560:	4640      	mov	r0, r8
 8003562:	4651      	mov	r1, sl
 8003564:	f7fd fa52 	bl	8000a0c <__aeabi_dcmpun>
 8003568:	b148      	cbz	r0, 800357e <_printf_float+0xe2>
 800356a:	f1ba 0f00 	cmp.w	sl, #0
 800356e:	bfb8      	it	lt
 8003570:	232d      	movlt	r3, #45	; 0x2d
 8003572:	4880      	ldr	r0, [pc, #512]	; (8003774 <_printf_float+0x2d8>)
 8003574:	bfb8      	it	lt
 8003576:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800357a:	4b7f      	ldr	r3, [pc, #508]	; (8003778 <_printf_float+0x2dc>)
 800357c:	e7d3      	b.n	8003526 <_printf_float+0x8a>
 800357e:	6863      	ldr	r3, [r4, #4]
 8003580:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	d142      	bne.n	800360e <_printf_float+0x172>
 8003588:	2306      	movs	r3, #6
 800358a:	6063      	str	r3, [r4, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	9206      	str	r2, [sp, #24]
 8003590:	aa0e      	add	r2, sp, #56	; 0x38
 8003592:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003596:	aa0d      	add	r2, sp, #52	; 0x34
 8003598:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800359c:	9203      	str	r2, [sp, #12]
 800359e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80035a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	6863      	ldr	r3, [r4, #4]
 80035aa:	4642      	mov	r2, r8
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4628      	mov	r0, r5
 80035b0:	4653      	mov	r3, sl
 80035b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80035b4:	f7ff fed4 	bl	8003360 <__cvt>
 80035b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035ba:	4680      	mov	r8, r0
 80035bc:	2947      	cmp	r1, #71	; 0x47
 80035be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035c0:	d108      	bne.n	80035d4 <_printf_float+0x138>
 80035c2:	1cc8      	adds	r0, r1, #3
 80035c4:	db02      	blt.n	80035cc <_printf_float+0x130>
 80035c6:	6863      	ldr	r3, [r4, #4]
 80035c8:	4299      	cmp	r1, r3
 80035ca:	dd40      	ble.n	800364e <_printf_float+0x1b2>
 80035cc:	f1a9 0902 	sub.w	r9, r9, #2
 80035d0:	fa5f f989 	uxtb.w	r9, r9
 80035d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035d8:	d81f      	bhi.n	800361a <_printf_float+0x17e>
 80035da:	464a      	mov	r2, r9
 80035dc:	3901      	subs	r1, #1
 80035de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035e2:	910d      	str	r1, [sp, #52]	; 0x34
 80035e4:	f7ff ff1b 	bl	800341e <__exponent>
 80035e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035ea:	4682      	mov	sl, r0
 80035ec:	1813      	adds	r3, r2, r0
 80035ee:	2a01      	cmp	r2, #1
 80035f0:	6123      	str	r3, [r4, #16]
 80035f2:	dc02      	bgt.n	80035fa <_printf_float+0x15e>
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	07d2      	lsls	r2, r2, #31
 80035f8:	d501      	bpl.n	80035fe <_printf_float+0x162>
 80035fa:	3301      	adds	r3, #1
 80035fc:	6123      	str	r3, [r4, #16]
 80035fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003602:	2b00      	cmp	r3, #0
 8003604:	d09b      	beq.n	800353e <_printf_float+0xa2>
 8003606:	232d      	movs	r3, #45	; 0x2d
 8003608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360c:	e797      	b.n	800353e <_printf_float+0xa2>
 800360e:	2947      	cmp	r1, #71	; 0x47
 8003610:	d1bc      	bne.n	800358c <_printf_float+0xf0>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ba      	bne.n	800358c <_printf_float+0xf0>
 8003616:	2301      	movs	r3, #1
 8003618:	e7b7      	b.n	800358a <_printf_float+0xee>
 800361a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800361e:	d118      	bne.n	8003652 <_printf_float+0x1b6>
 8003620:	2900      	cmp	r1, #0
 8003622:	6863      	ldr	r3, [r4, #4]
 8003624:	dd0b      	ble.n	800363e <_printf_float+0x1a2>
 8003626:	6121      	str	r1, [r4, #16]
 8003628:	b913      	cbnz	r3, 8003630 <_printf_float+0x194>
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	07d0      	lsls	r0, r2, #31
 800362e:	d502      	bpl.n	8003636 <_printf_float+0x19a>
 8003630:	3301      	adds	r3, #1
 8003632:	440b      	add	r3, r1
 8003634:	6123      	str	r3, [r4, #16]
 8003636:	f04f 0a00 	mov.w	sl, #0
 800363a:	65a1      	str	r1, [r4, #88]	; 0x58
 800363c:	e7df      	b.n	80035fe <_printf_float+0x162>
 800363e:	b913      	cbnz	r3, 8003646 <_printf_float+0x1aa>
 8003640:	6822      	ldr	r2, [r4, #0]
 8003642:	07d2      	lsls	r2, r2, #31
 8003644:	d501      	bpl.n	800364a <_printf_float+0x1ae>
 8003646:	3302      	adds	r3, #2
 8003648:	e7f4      	b.n	8003634 <_printf_float+0x198>
 800364a:	2301      	movs	r3, #1
 800364c:	e7f2      	b.n	8003634 <_printf_float+0x198>
 800364e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003654:	4299      	cmp	r1, r3
 8003656:	db05      	blt.n	8003664 <_printf_float+0x1c8>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	6121      	str	r1, [r4, #16]
 800365c:	07d8      	lsls	r0, r3, #31
 800365e:	d5ea      	bpl.n	8003636 <_printf_float+0x19a>
 8003660:	1c4b      	adds	r3, r1, #1
 8003662:	e7e7      	b.n	8003634 <_printf_float+0x198>
 8003664:	2900      	cmp	r1, #0
 8003666:	bfcc      	ite	gt
 8003668:	2201      	movgt	r2, #1
 800366a:	f1c1 0202 	rsble	r2, r1, #2
 800366e:	4413      	add	r3, r2
 8003670:	e7e0      	b.n	8003634 <_printf_float+0x198>
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	055a      	lsls	r2, r3, #21
 8003676:	d407      	bmi.n	8003688 <_printf_float+0x1ec>
 8003678:	6923      	ldr	r3, [r4, #16]
 800367a:	4642      	mov	r2, r8
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	d12b      	bne.n	80036de <_printf_float+0x242>
 8003686:	e764      	b.n	8003552 <_printf_float+0xb6>
 8003688:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800368c:	f240 80dd 	bls.w	800384a <_printf_float+0x3ae>
 8003690:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003694:	2200      	movs	r2, #0
 8003696:	2300      	movs	r3, #0
 8003698:	f7fd f986 	bl	80009a8 <__aeabi_dcmpeq>
 800369c:	2800      	cmp	r0, #0
 800369e:	d033      	beq.n	8003708 <_printf_float+0x26c>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4631      	mov	r1, r6
 80036a4:	4628      	mov	r0, r5
 80036a6:	4a35      	ldr	r2, [pc, #212]	; (800377c <_printf_float+0x2e0>)
 80036a8:	47b8      	blx	r7
 80036aa:	3001      	adds	r0, #1
 80036ac:	f43f af51 	beq.w	8003552 <_printf_float+0xb6>
 80036b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036b4:	429a      	cmp	r2, r3
 80036b6:	db02      	blt.n	80036be <_printf_float+0x222>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	07d8      	lsls	r0, r3, #31
 80036bc:	d50f      	bpl.n	80036de <_printf_float+0x242>
 80036be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	47b8      	blx	r7
 80036c8:	3001      	adds	r0, #1
 80036ca:	f43f af42 	beq.w	8003552 <_printf_float+0xb6>
 80036ce:	f04f 0800 	mov.w	r8, #0
 80036d2:	f104 091a 	add.w	r9, r4, #26
 80036d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036d8:	3b01      	subs	r3, #1
 80036da:	4543      	cmp	r3, r8
 80036dc:	dc09      	bgt.n	80036f2 <_printf_float+0x256>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	079b      	lsls	r3, r3, #30
 80036e2:	f100 8102 	bmi.w	80038ea <_printf_float+0x44e>
 80036e6:	68e0      	ldr	r0, [r4, #12]
 80036e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036ea:	4298      	cmp	r0, r3
 80036ec:	bfb8      	it	lt
 80036ee:	4618      	movlt	r0, r3
 80036f0:	e731      	b.n	8003556 <_printf_float+0xba>
 80036f2:	2301      	movs	r3, #1
 80036f4:	464a      	mov	r2, r9
 80036f6:	4631      	mov	r1, r6
 80036f8:	4628      	mov	r0, r5
 80036fa:	47b8      	blx	r7
 80036fc:	3001      	adds	r0, #1
 80036fe:	f43f af28 	beq.w	8003552 <_printf_float+0xb6>
 8003702:	f108 0801 	add.w	r8, r8, #1
 8003706:	e7e6      	b.n	80036d6 <_printf_float+0x23a>
 8003708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800370a:	2b00      	cmp	r3, #0
 800370c:	dc38      	bgt.n	8003780 <_printf_float+0x2e4>
 800370e:	2301      	movs	r3, #1
 8003710:	4631      	mov	r1, r6
 8003712:	4628      	mov	r0, r5
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <_printf_float+0x2e0>)
 8003716:	47b8      	blx	r7
 8003718:	3001      	adds	r0, #1
 800371a:	f43f af1a 	beq.w	8003552 <_printf_float+0xb6>
 800371e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003722:	4313      	orrs	r3, r2
 8003724:	d102      	bne.n	800372c <_printf_float+0x290>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	07d9      	lsls	r1, r3, #31
 800372a:	d5d8      	bpl.n	80036de <_printf_float+0x242>
 800372c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	47b8      	blx	r7
 8003736:	3001      	adds	r0, #1
 8003738:	f43f af0b 	beq.w	8003552 <_printf_float+0xb6>
 800373c:	f04f 0900 	mov.w	r9, #0
 8003740:	f104 0a1a 	add.w	sl, r4, #26
 8003744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003746:	425b      	negs	r3, r3
 8003748:	454b      	cmp	r3, r9
 800374a:	dc01      	bgt.n	8003750 <_printf_float+0x2b4>
 800374c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800374e:	e794      	b.n	800367a <_printf_float+0x1de>
 8003750:	2301      	movs	r3, #1
 8003752:	4652      	mov	r2, sl
 8003754:	4631      	mov	r1, r6
 8003756:	4628      	mov	r0, r5
 8003758:	47b8      	blx	r7
 800375a:	3001      	adds	r0, #1
 800375c:	f43f aef9 	beq.w	8003552 <_printf_float+0xb6>
 8003760:	f109 0901 	add.w	r9, r9, #1
 8003764:	e7ee      	b.n	8003744 <_printf_float+0x2a8>
 8003766:	bf00      	nop
 8003768:	7fefffff 	.word	0x7fefffff
 800376c:	0800600c 	.word	0x0800600c
 8003770:	08006010 	.word	0x08006010
 8003774:	08006018 	.word	0x08006018
 8003778:	08006014 	.word	0x08006014
 800377c:	0800601c 	.word	0x0800601c
 8003780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003784:	429a      	cmp	r2, r3
 8003786:	bfa8      	it	ge
 8003788:	461a      	movge	r2, r3
 800378a:	2a00      	cmp	r2, #0
 800378c:	4691      	mov	r9, r2
 800378e:	dc37      	bgt.n	8003800 <_printf_float+0x364>
 8003790:	f04f 0b00 	mov.w	fp, #0
 8003794:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003798:	f104 021a 	add.w	r2, r4, #26
 800379c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80037a0:	ebaa 0309 	sub.w	r3, sl, r9
 80037a4:	455b      	cmp	r3, fp
 80037a6:	dc33      	bgt.n	8003810 <_printf_float+0x374>
 80037a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037ac:	429a      	cmp	r2, r3
 80037ae:	db3b      	blt.n	8003828 <_printf_float+0x38c>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	07da      	lsls	r2, r3, #31
 80037b4:	d438      	bmi.n	8003828 <_printf_float+0x38c>
 80037b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80037ba:	eba3 020a 	sub.w	r2, r3, sl
 80037be:	eba3 0901 	sub.w	r9, r3, r1
 80037c2:	4591      	cmp	r9, r2
 80037c4:	bfa8      	it	ge
 80037c6:	4691      	movge	r9, r2
 80037c8:	f1b9 0f00 	cmp.w	r9, #0
 80037cc:	dc34      	bgt.n	8003838 <_printf_float+0x39c>
 80037ce:	f04f 0800 	mov.w	r8, #0
 80037d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037d6:	f104 0a1a 	add.w	sl, r4, #26
 80037da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	eba3 0309 	sub.w	r3, r3, r9
 80037e4:	4543      	cmp	r3, r8
 80037e6:	f77f af7a 	ble.w	80036de <_printf_float+0x242>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4652      	mov	r2, sl
 80037ee:	4631      	mov	r1, r6
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b8      	blx	r7
 80037f4:	3001      	adds	r0, #1
 80037f6:	f43f aeac 	beq.w	8003552 <_printf_float+0xb6>
 80037fa:	f108 0801 	add.w	r8, r8, #1
 80037fe:	e7ec      	b.n	80037da <_printf_float+0x33e>
 8003800:	4613      	mov	r3, r2
 8003802:	4631      	mov	r1, r6
 8003804:	4642      	mov	r2, r8
 8003806:	4628      	mov	r0, r5
 8003808:	47b8      	blx	r7
 800380a:	3001      	adds	r0, #1
 800380c:	d1c0      	bne.n	8003790 <_printf_float+0x2f4>
 800380e:	e6a0      	b.n	8003552 <_printf_float+0xb6>
 8003810:	2301      	movs	r3, #1
 8003812:	4631      	mov	r1, r6
 8003814:	4628      	mov	r0, r5
 8003816:	920b      	str	r2, [sp, #44]	; 0x2c
 8003818:	47b8      	blx	r7
 800381a:	3001      	adds	r0, #1
 800381c:	f43f ae99 	beq.w	8003552 <_printf_float+0xb6>
 8003820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003822:	f10b 0b01 	add.w	fp, fp, #1
 8003826:	e7b9      	b.n	800379c <_printf_float+0x300>
 8003828:	4631      	mov	r1, r6
 800382a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800382e:	4628      	mov	r0, r5
 8003830:	47b8      	blx	r7
 8003832:	3001      	adds	r0, #1
 8003834:	d1bf      	bne.n	80037b6 <_printf_float+0x31a>
 8003836:	e68c      	b.n	8003552 <_printf_float+0xb6>
 8003838:	464b      	mov	r3, r9
 800383a:	4631      	mov	r1, r6
 800383c:	4628      	mov	r0, r5
 800383e:	eb08 020a 	add.w	r2, r8, sl
 8003842:	47b8      	blx	r7
 8003844:	3001      	adds	r0, #1
 8003846:	d1c2      	bne.n	80037ce <_printf_float+0x332>
 8003848:	e683      	b.n	8003552 <_printf_float+0xb6>
 800384a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800384c:	2a01      	cmp	r2, #1
 800384e:	dc01      	bgt.n	8003854 <_printf_float+0x3b8>
 8003850:	07db      	lsls	r3, r3, #31
 8003852:	d537      	bpl.n	80038c4 <_printf_float+0x428>
 8003854:	2301      	movs	r3, #1
 8003856:	4642      	mov	r2, r8
 8003858:	4631      	mov	r1, r6
 800385a:	4628      	mov	r0, r5
 800385c:	47b8      	blx	r7
 800385e:	3001      	adds	r0, #1
 8003860:	f43f ae77 	beq.w	8003552 <_printf_float+0xb6>
 8003864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003868:	4631      	mov	r1, r6
 800386a:	4628      	mov	r0, r5
 800386c:	47b8      	blx	r7
 800386e:	3001      	adds	r0, #1
 8003870:	f43f ae6f 	beq.w	8003552 <_printf_float+0xb6>
 8003874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003878:	2200      	movs	r2, #0
 800387a:	2300      	movs	r3, #0
 800387c:	f7fd f894 	bl	80009a8 <__aeabi_dcmpeq>
 8003880:	b9d8      	cbnz	r0, 80038ba <_printf_float+0x41e>
 8003882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003884:	f108 0201 	add.w	r2, r8, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	d10e      	bne.n	80038b2 <_printf_float+0x416>
 8003894:	e65d      	b.n	8003552 <_printf_float+0xb6>
 8003896:	2301      	movs	r3, #1
 8003898:	464a      	mov	r2, r9
 800389a:	4631      	mov	r1, r6
 800389c:	4628      	mov	r0, r5
 800389e:	47b8      	blx	r7
 80038a0:	3001      	adds	r0, #1
 80038a2:	f43f ae56 	beq.w	8003552 <_printf_float+0xb6>
 80038a6:	f108 0801 	add.w	r8, r8, #1
 80038aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038ac:	3b01      	subs	r3, #1
 80038ae:	4543      	cmp	r3, r8
 80038b0:	dcf1      	bgt.n	8003896 <_printf_float+0x3fa>
 80038b2:	4653      	mov	r3, sl
 80038b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80038b8:	e6e0      	b.n	800367c <_printf_float+0x1e0>
 80038ba:	f04f 0800 	mov.w	r8, #0
 80038be:	f104 091a 	add.w	r9, r4, #26
 80038c2:	e7f2      	b.n	80038aa <_printf_float+0x40e>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4642      	mov	r2, r8
 80038c8:	e7df      	b.n	800388a <_printf_float+0x3ee>
 80038ca:	2301      	movs	r3, #1
 80038cc:	464a      	mov	r2, r9
 80038ce:	4631      	mov	r1, r6
 80038d0:	4628      	mov	r0, r5
 80038d2:	47b8      	blx	r7
 80038d4:	3001      	adds	r0, #1
 80038d6:	f43f ae3c 	beq.w	8003552 <_printf_float+0xb6>
 80038da:	f108 0801 	add.w	r8, r8, #1
 80038de:	68e3      	ldr	r3, [r4, #12]
 80038e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038e2:	1a5b      	subs	r3, r3, r1
 80038e4:	4543      	cmp	r3, r8
 80038e6:	dcf0      	bgt.n	80038ca <_printf_float+0x42e>
 80038e8:	e6fd      	b.n	80036e6 <_printf_float+0x24a>
 80038ea:	f04f 0800 	mov.w	r8, #0
 80038ee:	f104 0919 	add.w	r9, r4, #25
 80038f2:	e7f4      	b.n	80038de <_printf_float+0x442>

080038f4 <_printf_common>:
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	4616      	mov	r6, r2
 80038fa:	4699      	mov	r9, r3
 80038fc:	688a      	ldr	r2, [r1, #8]
 80038fe:	690b      	ldr	r3, [r1, #16]
 8003900:	4607      	mov	r7, r0
 8003902:	4293      	cmp	r3, r2
 8003904:	bfb8      	it	lt
 8003906:	4613      	movlt	r3, r2
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800390e:	460c      	mov	r4, r1
 8003910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003914:	b10a      	cbz	r2, 800391a <_printf_common+0x26>
 8003916:	3301      	adds	r3, #1
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	0699      	lsls	r1, r3, #26
 800391e:	bf42      	ittt	mi
 8003920:	6833      	ldrmi	r3, [r6, #0]
 8003922:	3302      	addmi	r3, #2
 8003924:	6033      	strmi	r3, [r6, #0]
 8003926:	6825      	ldr	r5, [r4, #0]
 8003928:	f015 0506 	ands.w	r5, r5, #6
 800392c:	d106      	bne.n	800393c <_printf_common+0x48>
 800392e:	f104 0a19 	add.w	sl, r4, #25
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	6832      	ldr	r2, [r6, #0]
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	42ab      	cmp	r3, r5
 800393a:	dc28      	bgt.n	800398e <_printf_common+0x9a>
 800393c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003940:	1e13      	subs	r3, r2, #0
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	bf18      	it	ne
 8003946:	2301      	movne	r3, #1
 8003948:	0692      	lsls	r2, r2, #26
 800394a:	d42d      	bmi.n	80039a8 <_printf_common+0xb4>
 800394c:	4649      	mov	r1, r9
 800394e:	4638      	mov	r0, r7
 8003950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003954:	47c0      	blx	r8
 8003956:	3001      	adds	r0, #1
 8003958:	d020      	beq.n	800399c <_printf_common+0xa8>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	68e5      	ldr	r5, [r4, #12]
 800395e:	f003 0306 	and.w	r3, r3, #6
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf18      	it	ne
 8003966:	2500      	movne	r5, #0
 8003968:	6832      	ldr	r2, [r6, #0]
 800396a:	f04f 0600 	mov.w	r6, #0
 800396e:	68a3      	ldr	r3, [r4, #8]
 8003970:	bf08      	it	eq
 8003972:	1aad      	subeq	r5, r5, r2
 8003974:	6922      	ldr	r2, [r4, #16]
 8003976:	bf08      	it	eq
 8003978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800397c:	4293      	cmp	r3, r2
 800397e:	bfc4      	itt	gt
 8003980:	1a9b      	subgt	r3, r3, r2
 8003982:	18ed      	addgt	r5, r5, r3
 8003984:	341a      	adds	r4, #26
 8003986:	42b5      	cmp	r5, r6
 8003988:	d11a      	bne.n	80039c0 <_printf_common+0xcc>
 800398a:	2000      	movs	r0, #0
 800398c:	e008      	b.n	80039a0 <_printf_common+0xac>
 800398e:	2301      	movs	r3, #1
 8003990:	4652      	mov	r2, sl
 8003992:	4649      	mov	r1, r9
 8003994:	4638      	mov	r0, r7
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d103      	bne.n	80039a4 <_printf_common+0xb0>
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a4:	3501      	adds	r5, #1
 80039a6:	e7c4      	b.n	8003932 <_printf_common+0x3e>
 80039a8:	2030      	movs	r0, #48	; 0x30
 80039aa:	18e1      	adds	r1, r4, r3
 80039ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b6:	4422      	add	r2, r4
 80039b8:	3302      	adds	r3, #2
 80039ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039be:	e7c5      	b.n	800394c <_printf_common+0x58>
 80039c0:	2301      	movs	r3, #1
 80039c2:	4622      	mov	r2, r4
 80039c4:	4649      	mov	r1, r9
 80039c6:	4638      	mov	r0, r7
 80039c8:	47c0      	blx	r8
 80039ca:	3001      	adds	r0, #1
 80039cc:	d0e6      	beq.n	800399c <_printf_common+0xa8>
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7d9      	b.n	8003986 <_printf_common+0x92>
	...

080039d4 <_printf_i>:
 80039d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	7e0f      	ldrb	r7, [r1, #24]
 80039da:	4691      	mov	r9, r2
 80039dc:	2f78      	cmp	r7, #120	; 0x78
 80039de:	4680      	mov	r8, r0
 80039e0:	460c      	mov	r4, r1
 80039e2:	469a      	mov	sl, r3
 80039e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ea:	d807      	bhi.n	80039fc <_printf_i+0x28>
 80039ec:	2f62      	cmp	r7, #98	; 0x62
 80039ee:	d80a      	bhi.n	8003a06 <_printf_i+0x32>
 80039f0:	2f00      	cmp	r7, #0
 80039f2:	f000 80d9 	beq.w	8003ba8 <_printf_i+0x1d4>
 80039f6:	2f58      	cmp	r7, #88	; 0x58
 80039f8:	f000 80a4 	beq.w	8003b44 <_printf_i+0x170>
 80039fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a04:	e03a      	b.n	8003a7c <_printf_i+0xa8>
 8003a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a0a:	2b15      	cmp	r3, #21
 8003a0c:	d8f6      	bhi.n	80039fc <_printf_i+0x28>
 8003a0e:	a101      	add	r1, pc, #4	; (adr r1, 8003a14 <_printf_i+0x40>)
 8003a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a81 	.word	0x08003a81
 8003a1c:	080039fd 	.word	0x080039fd
 8003a20:	080039fd 	.word	0x080039fd
 8003a24:	080039fd 	.word	0x080039fd
 8003a28:	080039fd 	.word	0x080039fd
 8003a2c:	08003a81 	.word	0x08003a81
 8003a30:	080039fd 	.word	0x080039fd
 8003a34:	080039fd 	.word	0x080039fd
 8003a38:	080039fd 	.word	0x080039fd
 8003a3c:	080039fd 	.word	0x080039fd
 8003a40:	08003b8f 	.word	0x08003b8f
 8003a44:	08003ab1 	.word	0x08003ab1
 8003a48:	08003b71 	.word	0x08003b71
 8003a4c:	080039fd 	.word	0x080039fd
 8003a50:	080039fd 	.word	0x080039fd
 8003a54:	08003bb1 	.word	0x08003bb1
 8003a58:	080039fd 	.word	0x080039fd
 8003a5c:	08003ab1 	.word	0x08003ab1
 8003a60:	080039fd 	.word	0x080039fd
 8003a64:	080039fd 	.word	0x080039fd
 8003a68:	08003b79 	.word	0x08003b79
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	602a      	str	r2, [r5, #0]
 8003a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0a4      	b.n	8003bca <_printf_i+0x1f6>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	6829      	ldr	r1, [r5, #0]
 8003a84:	0606      	lsls	r6, r0, #24
 8003a86:	f101 0304 	add.w	r3, r1, #4
 8003a8a:	d50a      	bpl.n	8003aa2 <_printf_i+0xce>
 8003a8c:	680e      	ldr	r6, [r1, #0]
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	2e00      	cmp	r6, #0
 8003a92:	da03      	bge.n	8003a9c <_printf_i+0xc8>
 8003a94:	232d      	movs	r3, #45	; 0x2d
 8003a96:	4276      	negs	r6, r6
 8003a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a9c:	230a      	movs	r3, #10
 8003a9e:	485e      	ldr	r0, [pc, #376]	; (8003c18 <_printf_i+0x244>)
 8003aa0:	e019      	b.n	8003ad6 <_printf_i+0x102>
 8003aa2:	680e      	ldr	r6, [r1, #0]
 8003aa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	bf18      	it	ne
 8003aac:	b236      	sxthne	r6, r6
 8003aae:	e7ef      	b.n	8003a90 <_printf_i+0xbc>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	1d19      	adds	r1, r3, #4
 8003ab6:	6029      	str	r1, [r5, #0]
 8003ab8:	0601      	lsls	r1, r0, #24
 8003aba:	d501      	bpl.n	8003ac0 <_printf_i+0xec>
 8003abc:	681e      	ldr	r6, [r3, #0]
 8003abe:	e002      	b.n	8003ac6 <_printf_i+0xf2>
 8003ac0:	0646      	lsls	r6, r0, #25
 8003ac2:	d5fb      	bpl.n	8003abc <_printf_i+0xe8>
 8003ac4:	881e      	ldrh	r6, [r3, #0]
 8003ac6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac8:	bf0c      	ite	eq
 8003aca:	2308      	moveq	r3, #8
 8003acc:	230a      	movne	r3, #10
 8003ace:	4852      	ldr	r0, [pc, #328]	; (8003c18 <_printf_i+0x244>)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ad6:	6865      	ldr	r5, [r4, #4]
 8003ad8:	2d00      	cmp	r5, #0
 8003ada:	bfa8      	it	ge
 8003adc:	6821      	ldrge	r1, [r4, #0]
 8003ade:	60a5      	str	r5, [r4, #8]
 8003ae0:	bfa4      	itt	ge
 8003ae2:	f021 0104 	bicge.w	r1, r1, #4
 8003ae6:	6021      	strge	r1, [r4, #0]
 8003ae8:	b90e      	cbnz	r6, 8003aee <_printf_i+0x11a>
 8003aea:	2d00      	cmp	r5, #0
 8003aec:	d04d      	beq.n	8003b8a <_printf_i+0x1b6>
 8003aee:	4615      	mov	r5, r2
 8003af0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003af4:	fb03 6711 	mls	r7, r3, r1, r6
 8003af8:	5dc7      	ldrb	r7, [r0, r7]
 8003afa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003afe:	4637      	mov	r7, r6
 8003b00:	42bb      	cmp	r3, r7
 8003b02:	460e      	mov	r6, r1
 8003b04:	d9f4      	bls.n	8003af0 <_printf_i+0x11c>
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d10b      	bne.n	8003b22 <_printf_i+0x14e>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	07de      	lsls	r6, r3, #31
 8003b0e:	d508      	bpl.n	8003b22 <_printf_i+0x14e>
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	6861      	ldr	r1, [r4, #4]
 8003b14:	4299      	cmp	r1, r3
 8003b16:	bfde      	ittt	le
 8003b18:	2330      	movle	r3, #48	; 0x30
 8003b1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b22:	1b52      	subs	r2, r2, r5
 8003b24:	6122      	str	r2, [r4, #16]
 8003b26:	464b      	mov	r3, r9
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f8cd a000 	str.w	sl, [sp]
 8003b30:	aa03      	add	r2, sp, #12
 8003b32:	f7ff fedf 	bl	80038f4 <_printf_common>
 8003b36:	3001      	adds	r0, #1
 8003b38:	d14c      	bne.n	8003bd4 <_printf_i+0x200>
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3e:	b004      	add	sp, #16
 8003b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b44:	4834      	ldr	r0, [pc, #208]	; (8003c18 <_printf_i+0x244>)
 8003b46:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b4a:	6829      	ldr	r1, [r5, #0]
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b52:	6029      	str	r1, [r5, #0]
 8003b54:	061d      	lsls	r5, r3, #24
 8003b56:	d514      	bpl.n	8003b82 <_printf_i+0x1ae>
 8003b58:	07df      	lsls	r7, r3, #31
 8003b5a:	bf44      	itt	mi
 8003b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b60:	6023      	strmi	r3, [r4, #0]
 8003b62:	b91e      	cbnz	r6, 8003b6c <_printf_i+0x198>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	f023 0320 	bic.w	r3, r3, #32
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	e7af      	b.n	8003ad0 <_printf_i+0xfc>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	2378      	movs	r3, #120	; 0x78
 8003b7a:	4828      	ldr	r0, [pc, #160]	; (8003c1c <_printf_i+0x248>)
 8003b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b80:	e7e3      	b.n	8003b4a <_printf_i+0x176>
 8003b82:	0659      	lsls	r1, r3, #25
 8003b84:	bf48      	it	mi
 8003b86:	b2b6      	uxthmi	r6, r6
 8003b88:	e7e6      	b.n	8003b58 <_printf_i+0x184>
 8003b8a:	4615      	mov	r5, r2
 8003b8c:	e7bb      	b.n	8003b06 <_printf_i+0x132>
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	6826      	ldr	r6, [r4, #0]
 8003b92:	1d18      	adds	r0, r3, #4
 8003b94:	6961      	ldr	r1, [r4, #20]
 8003b96:	6028      	str	r0, [r5, #0]
 8003b98:	0635      	lsls	r5, r6, #24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	d501      	bpl.n	8003ba2 <_printf_i+0x1ce>
 8003b9e:	6019      	str	r1, [r3, #0]
 8003ba0:	e002      	b.n	8003ba8 <_printf_i+0x1d4>
 8003ba2:	0670      	lsls	r0, r6, #25
 8003ba4:	d5fb      	bpl.n	8003b9e <_printf_i+0x1ca>
 8003ba6:	8019      	strh	r1, [r3, #0]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4615      	mov	r5, r2
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	e7ba      	b.n	8003b26 <_printf_i+0x152>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	602a      	str	r2, [r5, #0]
 8003bb8:	681d      	ldr	r5, [r3, #0]
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f001 fa21 	bl	8005004 <memchr>
 8003bc2:	b108      	cbz	r0, 8003bc8 <_printf_i+0x1f4>
 8003bc4:	1b40      	subs	r0, r0, r5
 8003bc6:	6060      	str	r0, [r4, #4]
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	6123      	str	r3, [r4, #16]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd2:	e7a8      	b.n	8003b26 <_printf_i+0x152>
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	4640      	mov	r0, r8
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	47d0      	blx	sl
 8003bde:	3001      	adds	r0, #1
 8003be0:	d0ab      	beq.n	8003b3a <_printf_i+0x166>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	079b      	lsls	r3, r3, #30
 8003be6:	d413      	bmi.n	8003c10 <_printf_i+0x23c>
 8003be8:	68e0      	ldr	r0, [r4, #12]
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	4298      	cmp	r0, r3
 8003bee:	bfb8      	it	lt
 8003bf0:	4618      	movlt	r0, r3
 8003bf2:	e7a4      	b.n	8003b3e <_printf_i+0x16a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4632      	mov	r2, r6
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	47d0      	blx	sl
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d09b      	beq.n	8003b3a <_printf_i+0x166>
 8003c02:	3501      	adds	r5, #1
 8003c04:	68e3      	ldr	r3, [r4, #12]
 8003c06:	9903      	ldr	r1, [sp, #12]
 8003c08:	1a5b      	subs	r3, r3, r1
 8003c0a:	42ab      	cmp	r3, r5
 8003c0c:	dcf2      	bgt.n	8003bf4 <_printf_i+0x220>
 8003c0e:	e7eb      	b.n	8003be8 <_printf_i+0x214>
 8003c10:	2500      	movs	r5, #0
 8003c12:	f104 0619 	add.w	r6, r4, #25
 8003c16:	e7f5      	b.n	8003c04 <_printf_i+0x230>
 8003c18:	0800601e 	.word	0x0800601e
 8003c1c:	0800602f 	.word	0x0800602f

08003c20 <iprintf>:
 8003c20:	b40f      	push	{r0, r1, r2, r3}
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <iprintf+0x2c>)
 8003c24:	b513      	push	{r0, r1, r4, lr}
 8003c26:	681c      	ldr	r4, [r3, #0]
 8003c28:	b124      	cbz	r4, 8003c34 <iprintf+0x14>
 8003c2a:	69a3      	ldr	r3, [r4, #24]
 8003c2c:	b913      	cbnz	r3, 8003c34 <iprintf+0x14>
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f001 f8d6 	bl	8004de0 <__sinit>
 8003c34:	ab05      	add	r3, sp, #20
 8003c36:	4620      	mov	r0, r4
 8003c38:	9a04      	ldr	r2, [sp, #16]
 8003c3a:	68a1      	ldr	r1, [r4, #8]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	f001 fe97 	bl	8005970 <_vfiprintf_r>
 8003c42:	b002      	add	sp, #8
 8003c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c48:	b004      	add	sp, #16
 8003c4a:	4770      	bx	lr
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <_puts_r>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	460e      	mov	r6, r1
 8003c54:	4605      	mov	r5, r0
 8003c56:	b118      	cbz	r0, 8003c60 <_puts_r+0x10>
 8003c58:	6983      	ldr	r3, [r0, #24]
 8003c5a:	b90b      	cbnz	r3, 8003c60 <_puts_r+0x10>
 8003c5c:	f001 f8c0 	bl	8004de0 <__sinit>
 8003c60:	69ab      	ldr	r3, [r5, #24]
 8003c62:	68ac      	ldr	r4, [r5, #8]
 8003c64:	b913      	cbnz	r3, 8003c6c <_puts_r+0x1c>
 8003c66:	4628      	mov	r0, r5
 8003c68:	f001 f8ba 	bl	8004de0 <__sinit>
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <_puts_r+0xd0>)
 8003c6e:	429c      	cmp	r4, r3
 8003c70:	d120      	bne.n	8003cb4 <_puts_r+0x64>
 8003c72:	686c      	ldr	r4, [r5, #4]
 8003c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c76:	07db      	lsls	r3, r3, #31
 8003c78:	d405      	bmi.n	8003c86 <_puts_r+0x36>
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	0598      	lsls	r0, r3, #22
 8003c7e:	d402      	bmi.n	8003c86 <_puts_r+0x36>
 8003c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c82:	f001 f950 	bl	8004f26 <__retarget_lock_acquire_recursive>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	0719      	lsls	r1, r3, #28
 8003c8a:	d51d      	bpl.n	8003cc8 <_puts_r+0x78>
 8003c8c:	6923      	ldr	r3, [r4, #16]
 8003c8e:	b1db      	cbz	r3, 8003cc8 <_puts_r+0x78>
 8003c90:	3e01      	subs	r6, #1
 8003c92:	68a3      	ldr	r3, [r4, #8]
 8003c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	60a3      	str	r3, [r4, #8]
 8003c9c:	bb39      	cbnz	r1, 8003cee <_puts_r+0x9e>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da38      	bge.n	8003d14 <_puts_r+0xc4>
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	210a      	movs	r1, #10
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f000 f848 	bl	8003d3c <__swbuf_r>
 8003cac:	3001      	adds	r0, #1
 8003cae:	d011      	beq.n	8003cd4 <_puts_r+0x84>
 8003cb0:	250a      	movs	r5, #10
 8003cb2:	e011      	b.n	8003cd8 <_puts_r+0x88>
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <_puts_r+0xd4>)
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d101      	bne.n	8003cbe <_puts_r+0x6e>
 8003cba:	68ac      	ldr	r4, [r5, #8]
 8003cbc:	e7da      	b.n	8003c74 <_puts_r+0x24>
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <_puts_r+0xd8>)
 8003cc0:	429c      	cmp	r4, r3
 8003cc2:	bf08      	it	eq
 8003cc4:	68ec      	ldreq	r4, [r5, #12]
 8003cc6:	e7d5      	b.n	8003c74 <_puts_r+0x24>
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 f888 	bl	8003de0 <__swsetup_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d0dd      	beq.n	8003c90 <_puts_r+0x40>
 8003cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8003cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cda:	07da      	lsls	r2, r3, #31
 8003cdc:	d405      	bmi.n	8003cea <_puts_r+0x9a>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	059b      	lsls	r3, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <_puts_r+0x9a>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce6:	f001 f91f 	bl	8004f28 <__retarget_lock_release_recursive>
 8003cea:	4628      	mov	r0, r5
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da04      	bge.n	8003cfc <_puts_r+0xac>
 8003cf2:	69a2      	ldr	r2, [r4, #24]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dc06      	bgt.n	8003d06 <_puts_r+0xb6>
 8003cf8:	290a      	cmp	r1, #10
 8003cfa:	d004      	beq.n	8003d06 <_puts_r+0xb6>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	6022      	str	r2, [r4, #0]
 8003d02:	7019      	strb	r1, [r3, #0]
 8003d04:	e7c5      	b.n	8003c92 <_puts_r+0x42>
 8003d06:	4622      	mov	r2, r4
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 f817 	bl	8003d3c <__swbuf_r>
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d1bf      	bne.n	8003c92 <_puts_r+0x42>
 8003d12:	e7df      	b.n	8003cd4 <_puts_r+0x84>
 8003d14:	250a      	movs	r5, #10
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	6022      	str	r2, [r4, #0]
 8003d1c:	701d      	strb	r5, [r3, #0]
 8003d1e:	e7db      	b.n	8003cd8 <_puts_r+0x88>
 8003d20:	080060f0 	.word	0x080060f0
 8003d24:	08006110 	.word	0x08006110
 8003d28:	080060d0 	.word	0x080060d0

08003d2c <puts>:
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <puts+0xc>)
 8003d2e:	4601      	mov	r1, r0
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	f7ff bf8d 	b.w	8003c50 <_puts_r>
 8003d36:	bf00      	nop
 8003d38:	2000000c 	.word	0x2000000c

08003d3c <__swbuf_r>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	460e      	mov	r6, r1
 8003d40:	4614      	mov	r4, r2
 8003d42:	4605      	mov	r5, r0
 8003d44:	b118      	cbz	r0, 8003d4e <__swbuf_r+0x12>
 8003d46:	6983      	ldr	r3, [r0, #24]
 8003d48:	b90b      	cbnz	r3, 8003d4e <__swbuf_r+0x12>
 8003d4a:	f001 f849 	bl	8004de0 <__sinit>
 8003d4e:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <__swbuf_r+0x98>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	d12b      	bne.n	8003dac <__swbuf_r+0x70>
 8003d54:	686c      	ldr	r4, [r5, #4]
 8003d56:	69a3      	ldr	r3, [r4, #24]
 8003d58:	60a3      	str	r3, [r4, #8]
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	071a      	lsls	r2, r3, #28
 8003d5e:	d52f      	bpl.n	8003dc0 <__swbuf_r+0x84>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	b36b      	cbz	r3, 8003dc0 <__swbuf_r+0x84>
 8003d64:	6923      	ldr	r3, [r4, #16]
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	b2f6      	uxtb	r6, r6
 8003d6a:	1ac0      	subs	r0, r0, r3
 8003d6c:	6963      	ldr	r3, [r4, #20]
 8003d6e:	4637      	mov	r7, r6
 8003d70:	4283      	cmp	r3, r0
 8003d72:	dc04      	bgt.n	8003d7e <__swbuf_r+0x42>
 8003d74:	4621      	mov	r1, r4
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 ff9e 	bl	8004cb8 <_fflush_r>
 8003d7c:	bb30      	cbnz	r0, 8003dcc <__swbuf_r+0x90>
 8003d7e:	68a3      	ldr	r3, [r4, #8]
 8003d80:	3001      	adds	r0, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	6022      	str	r2, [r4, #0]
 8003d8c:	701e      	strb	r6, [r3, #0]
 8003d8e:	6963      	ldr	r3, [r4, #20]
 8003d90:	4283      	cmp	r3, r0
 8003d92:	d004      	beq.n	8003d9e <__swbuf_r+0x62>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	07db      	lsls	r3, r3, #31
 8003d98:	d506      	bpl.n	8003da8 <__swbuf_r+0x6c>
 8003d9a:	2e0a      	cmp	r6, #10
 8003d9c:	d104      	bne.n	8003da8 <__swbuf_r+0x6c>
 8003d9e:	4621      	mov	r1, r4
 8003da0:	4628      	mov	r0, r5
 8003da2:	f000 ff89 	bl	8004cb8 <_fflush_r>
 8003da6:	b988      	cbnz	r0, 8003dcc <__swbuf_r+0x90>
 8003da8:	4638      	mov	r0, r7
 8003daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <__swbuf_r+0x9c>)
 8003dae:	429c      	cmp	r4, r3
 8003db0:	d101      	bne.n	8003db6 <__swbuf_r+0x7a>
 8003db2:	68ac      	ldr	r4, [r5, #8]
 8003db4:	e7cf      	b.n	8003d56 <__swbuf_r+0x1a>
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <__swbuf_r+0xa0>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	bf08      	it	eq
 8003dbc:	68ec      	ldreq	r4, [r5, #12]
 8003dbe:	e7ca      	b.n	8003d56 <__swbuf_r+0x1a>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f80c 	bl	8003de0 <__swsetup_r>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d0cb      	beq.n	8003d64 <__swbuf_r+0x28>
 8003dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8003dd0:	e7ea      	b.n	8003da8 <__swbuf_r+0x6c>
 8003dd2:	bf00      	nop
 8003dd4:	080060f0 	.word	0x080060f0
 8003dd8:	08006110 	.word	0x08006110
 8003ddc:	080060d0 	.word	0x080060d0

08003de0 <__swsetup_r>:
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <__swsetup_r+0xcc>)
 8003de2:	b570      	push	{r4, r5, r6, lr}
 8003de4:	681d      	ldr	r5, [r3, #0]
 8003de6:	4606      	mov	r6, r0
 8003de8:	460c      	mov	r4, r1
 8003dea:	b125      	cbz	r5, 8003df6 <__swsetup_r+0x16>
 8003dec:	69ab      	ldr	r3, [r5, #24]
 8003dee:	b913      	cbnz	r3, 8003df6 <__swsetup_r+0x16>
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 fff5 	bl	8004de0 <__sinit>
 8003df6:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <__swsetup_r+0xd0>)
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	d10f      	bne.n	8003e1c <__swsetup_r+0x3c>
 8003dfc:	686c      	ldr	r4, [r5, #4]
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e04:	0719      	lsls	r1, r3, #28
 8003e06:	d42c      	bmi.n	8003e62 <__swsetup_r+0x82>
 8003e08:	06dd      	lsls	r5, r3, #27
 8003e0a:	d411      	bmi.n	8003e30 <__swsetup_r+0x50>
 8003e0c:	2309      	movs	r3, #9
 8003e0e:	6033      	str	r3, [r6, #0]
 8003e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	81a3      	strh	r3, [r4, #12]
 8003e1a:	e03e      	b.n	8003e9a <__swsetup_r+0xba>
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <__swsetup_r+0xd4>)
 8003e1e:	429c      	cmp	r4, r3
 8003e20:	d101      	bne.n	8003e26 <__swsetup_r+0x46>
 8003e22:	68ac      	ldr	r4, [r5, #8]
 8003e24:	e7eb      	b.n	8003dfe <__swsetup_r+0x1e>
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <__swsetup_r+0xd8>)
 8003e28:	429c      	cmp	r4, r3
 8003e2a:	bf08      	it	eq
 8003e2c:	68ec      	ldreq	r4, [r5, #12]
 8003e2e:	e7e6      	b.n	8003dfe <__swsetup_r+0x1e>
 8003e30:	0758      	lsls	r0, r3, #29
 8003e32:	d512      	bpl.n	8003e5a <__swsetup_r+0x7a>
 8003e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e36:	b141      	cbz	r1, 8003e4a <__swsetup_r+0x6a>
 8003e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	d002      	beq.n	8003e46 <__swsetup_r+0x66>
 8003e40:	4630      	mov	r0, r6
 8003e42:	f001 fc91 	bl	8005768 <_free_r>
 8003e46:	2300      	movs	r3, #0
 8003e48:	6363      	str	r3, [r4, #52]	; 0x34
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	2300      	movs	r3, #0
 8003e54:	6063      	str	r3, [r4, #4]
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	f043 0308 	orr.w	r3, r3, #8
 8003e60:	81a3      	strh	r3, [r4, #12]
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	b94b      	cbnz	r3, 8003e7a <__swsetup_r+0x9a>
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d003      	beq.n	8003e7a <__swsetup_r+0x9a>
 8003e72:	4621      	mov	r1, r4
 8003e74:	4630      	mov	r0, r6
 8003e76:	f001 f87d 	bl	8004f74 <__smakebuf_r>
 8003e7a:	89a0      	ldrh	r0, [r4, #12]
 8003e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e80:	f010 0301 	ands.w	r3, r0, #1
 8003e84:	d00a      	beq.n	8003e9c <__swsetup_r+0xbc>
 8003e86:	2300      	movs	r3, #0
 8003e88:	60a3      	str	r3, [r4, #8]
 8003e8a:	6963      	ldr	r3, [r4, #20]
 8003e8c:	425b      	negs	r3, r3
 8003e8e:	61a3      	str	r3, [r4, #24]
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	b943      	cbnz	r3, 8003ea6 <__swsetup_r+0xc6>
 8003e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e98:	d1ba      	bne.n	8003e10 <__swsetup_r+0x30>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	0781      	lsls	r1, r0, #30
 8003e9e:	bf58      	it	pl
 8003ea0:	6963      	ldrpl	r3, [r4, #20]
 8003ea2:	60a3      	str	r3, [r4, #8]
 8003ea4:	e7f4      	b.n	8003e90 <__swsetup_r+0xb0>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e7f7      	b.n	8003e9a <__swsetup_r+0xba>
 8003eaa:	bf00      	nop
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	080060f0 	.word	0x080060f0
 8003eb4:	08006110 	.word	0x08006110
 8003eb8:	080060d0 	.word	0x080060d0

08003ebc <quorem>:
 8003ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec0:	6903      	ldr	r3, [r0, #16]
 8003ec2:	690c      	ldr	r4, [r1, #16]
 8003ec4:	4607      	mov	r7, r0
 8003ec6:	42a3      	cmp	r3, r4
 8003ec8:	f2c0 8082 	blt.w	8003fd0 <quorem+0x114>
 8003ecc:	3c01      	subs	r4, #1
 8003ece:	f100 0514 	add.w	r5, r0, #20
 8003ed2:	f101 0814 	add.w	r8, r1, #20
 8003ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003eec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ef4:	d331      	bcc.n	8003f5a <quorem+0x9e>
 8003ef6:	f04f 0e00 	mov.w	lr, #0
 8003efa:	4640      	mov	r0, r8
 8003efc:	46ac      	mov	ip, r5
 8003efe:	46f2      	mov	sl, lr
 8003f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f04:	b293      	uxth	r3, r2
 8003f06:	fb06 e303 	mla	r3, r6, r3, lr
 8003f0a:	0c12      	lsrs	r2, r2, #16
 8003f0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	fb06 e202 	mla	r2, r6, r2, lr
 8003f16:	ebaa 0303 	sub.w	r3, sl, r3
 8003f1a:	f8dc a000 	ldr.w	sl, [ip]
 8003f1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f22:	fa1f fa8a 	uxth.w	sl, sl
 8003f26:	4453      	add	r3, sl
 8003f28:	f8dc a000 	ldr.w	sl, [ip]
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f3c:	4581      	cmp	r9, r0
 8003f3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f42:	f84c 3b04 	str.w	r3, [ip], #4
 8003f46:	d2db      	bcs.n	8003f00 <quorem+0x44>
 8003f48:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f4c:	b92b      	cbnz	r3, 8003f5a <quorem+0x9e>
 8003f4e:	9b01      	ldr	r3, [sp, #4]
 8003f50:	3b04      	subs	r3, #4
 8003f52:	429d      	cmp	r5, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	d32f      	bcc.n	8003fb8 <quorem+0xfc>
 8003f58:	613c      	str	r4, [r7, #16]
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f001 faec 	bl	8005538 <__mcmp>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	db25      	blt.n	8003fb0 <quorem+0xf4>
 8003f64:	4628      	mov	r0, r5
 8003f66:	f04f 0c00 	mov.w	ip, #0
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	f858 1b04 	ldr.w	r1, [r8], #4
 8003f70:	f8d0 e000 	ldr.w	lr, [r0]
 8003f74:	b28b      	uxth	r3, r1
 8003f76:	ebac 0303 	sub.w	r3, ip, r3
 8003f7a:	fa1f f28e 	uxth.w	r2, lr
 8003f7e:	4413      	add	r3, r2
 8003f80:	0c0a      	lsrs	r2, r1, #16
 8003f82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f90:	45c1      	cmp	r9, r8
 8003f92:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f96:	f840 3b04 	str.w	r3, [r0], #4
 8003f9a:	d2e7      	bcs.n	8003f6c <quorem+0xb0>
 8003f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fa4:	b922      	cbnz	r2, 8003fb0 <quorem+0xf4>
 8003fa6:	3b04      	subs	r3, #4
 8003fa8:	429d      	cmp	r5, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	d30a      	bcc.n	8003fc4 <quorem+0x108>
 8003fae:	613c      	str	r4, [r7, #16]
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	b003      	add	sp, #12
 8003fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	2a00      	cmp	r2, #0
 8003fbe:	d1cb      	bne.n	8003f58 <quorem+0x9c>
 8003fc0:	3c01      	subs	r4, #1
 8003fc2:	e7c6      	b.n	8003f52 <quorem+0x96>
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	3b04      	subs	r3, #4
 8003fc8:	2a00      	cmp	r2, #0
 8003fca:	d1f0      	bne.n	8003fae <quorem+0xf2>
 8003fcc:	3c01      	subs	r4, #1
 8003fce:	e7eb      	b.n	8003fa8 <quorem+0xec>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e7ee      	b.n	8003fb2 <quorem+0xf6>
 8003fd4:	0000      	movs	r0, r0
	...

08003fd8 <_dtoa_r>:
 8003fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fdc:	4616      	mov	r6, r2
 8003fde:	461f      	mov	r7, r3
 8003fe0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003fe2:	b099      	sub	sp, #100	; 0x64
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003fee:	b974      	cbnz	r4, 800400e <_dtoa_r+0x36>
 8003ff0:	2010      	movs	r0, #16
 8003ff2:	f000 ffff 	bl	8004ff4 <malloc>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6268      	str	r0, [r5, #36]	; 0x24
 8003ffa:	b920      	cbnz	r0, 8004006 <_dtoa_r+0x2e>
 8003ffc:	21ea      	movs	r1, #234	; 0xea
 8003ffe:	4ba8      	ldr	r3, [pc, #672]	; (80042a0 <_dtoa_r+0x2c8>)
 8004000:	48a8      	ldr	r0, [pc, #672]	; (80042a4 <_dtoa_r+0x2cc>)
 8004002:	f001 fe4b 	bl	8005c9c <__assert_func>
 8004006:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800400a:	6004      	str	r4, [r0, #0]
 800400c:	60c4      	str	r4, [r0, #12]
 800400e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	b151      	cbz	r1, 800402a <_dtoa_r+0x52>
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	2301      	movs	r3, #1
 8004018:	4093      	lsls	r3, r2
 800401a:	604a      	str	r2, [r1, #4]
 800401c:	608b      	str	r3, [r1, #8]
 800401e:	4628      	mov	r0, r5
 8004020:	f001 f84c 	bl	80050bc <_Bfree>
 8004024:	2200      	movs	r2, #0
 8004026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	1e3b      	subs	r3, r7, #0
 800402c:	bfaf      	iteee	ge
 800402e:	2300      	movge	r3, #0
 8004030:	2201      	movlt	r2, #1
 8004032:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004036:	9305      	strlt	r3, [sp, #20]
 8004038:	bfa8      	it	ge
 800403a:	f8c8 3000 	strge.w	r3, [r8]
 800403e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004042:	4b99      	ldr	r3, [pc, #612]	; (80042a8 <_dtoa_r+0x2d0>)
 8004044:	bfb8      	it	lt
 8004046:	f8c8 2000 	strlt.w	r2, [r8]
 800404a:	ea33 0309 	bics.w	r3, r3, r9
 800404e:	d119      	bne.n	8004084 <_dtoa_r+0xac>
 8004050:	f242 730f 	movw	r3, #9999	; 0x270f
 8004054:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800405c:	4333      	orrs	r3, r6
 800405e:	f000 857f 	beq.w	8004b60 <_dtoa_r+0xb88>
 8004062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004064:	b953      	cbnz	r3, 800407c <_dtoa_r+0xa4>
 8004066:	4b91      	ldr	r3, [pc, #580]	; (80042ac <_dtoa_r+0x2d4>)
 8004068:	e022      	b.n	80040b0 <_dtoa_r+0xd8>
 800406a:	4b91      	ldr	r3, [pc, #580]	; (80042b0 <_dtoa_r+0x2d8>)
 800406c:	9303      	str	r3, [sp, #12]
 800406e:	3308      	adds	r3, #8
 8004070:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	9803      	ldr	r0, [sp, #12]
 8004076:	b019      	add	sp, #100	; 0x64
 8004078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407c:	4b8b      	ldr	r3, [pc, #556]	; (80042ac <_dtoa_r+0x2d4>)
 800407e:	9303      	str	r3, [sp, #12]
 8004080:	3303      	adds	r3, #3
 8004082:	e7f5      	b.n	8004070 <_dtoa_r+0x98>
 8004084:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004088:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800408c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	2300      	movs	r3, #0
 8004094:	f7fc fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8004098:	4680      	mov	r8, r0
 800409a:	b158      	cbz	r0, 80040b4 <_dtoa_r+0xdc>
 800409c:	2301      	movs	r3, #1
 800409e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8558 	beq.w	8004b5a <_dtoa_r+0xb82>
 80040aa:	4882      	ldr	r0, [pc, #520]	; (80042b4 <_dtoa_r+0x2dc>)
 80040ac:	6018      	str	r0, [r3, #0]
 80040ae:	1e43      	subs	r3, r0, #1
 80040b0:	9303      	str	r3, [sp, #12]
 80040b2:	e7df      	b.n	8004074 <_dtoa_r+0x9c>
 80040b4:	ab16      	add	r3, sp, #88	; 0x58
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	ab17      	add	r3, sp, #92	; 0x5c
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4628      	mov	r0, r5
 80040be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80040c2:	f001 fae1 	bl	8005688 <__d2b>
 80040c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80040ca:	4683      	mov	fp, r0
 80040cc:	2c00      	cmp	r4, #0
 80040ce:	d07f      	beq.n	80041d0 <_dtoa_r+0x1f8>
 80040d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80040da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80040e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80040e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80040ea:	2200      	movs	r2, #0
 80040ec:	4b72      	ldr	r3, [pc, #456]	; (80042b8 <_dtoa_r+0x2e0>)
 80040ee:	f7fc f83b 	bl	8000168 <__aeabi_dsub>
 80040f2:	a365      	add	r3, pc, #404	; (adr r3, 8004288 <_dtoa_r+0x2b0>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc f9ee 	bl	80004d8 <__aeabi_dmul>
 80040fc:	a364      	add	r3, pc, #400	; (adr r3, 8004290 <_dtoa_r+0x2b8>)
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f7fc f833 	bl	800016c <__adddf3>
 8004106:	4606      	mov	r6, r0
 8004108:	4620      	mov	r0, r4
 800410a:	460f      	mov	r7, r1
 800410c:	f7fc f97a 	bl	8000404 <__aeabi_i2d>
 8004110:	a361      	add	r3, pc, #388	; (adr r3, 8004298 <_dtoa_r+0x2c0>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f7fc f9df 	bl	80004d8 <__aeabi_dmul>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4630      	mov	r0, r6
 8004120:	4639      	mov	r1, r7
 8004122:	f7fc f823 	bl	800016c <__adddf3>
 8004126:	4606      	mov	r6, r0
 8004128:	460f      	mov	r7, r1
 800412a:	f7fc fc85 	bl	8000a38 <__aeabi_d2iz>
 800412e:	2200      	movs	r2, #0
 8004130:	4682      	mov	sl, r0
 8004132:	2300      	movs	r3, #0
 8004134:	4630      	mov	r0, r6
 8004136:	4639      	mov	r1, r7
 8004138:	f7fc fc40 	bl	80009bc <__aeabi_dcmplt>
 800413c:	b148      	cbz	r0, 8004152 <_dtoa_r+0x17a>
 800413e:	4650      	mov	r0, sl
 8004140:	f7fc f960 	bl	8000404 <__aeabi_i2d>
 8004144:	4632      	mov	r2, r6
 8004146:	463b      	mov	r3, r7
 8004148:	f7fc fc2e 	bl	80009a8 <__aeabi_dcmpeq>
 800414c:	b908      	cbnz	r0, 8004152 <_dtoa_r+0x17a>
 800414e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004152:	f1ba 0f16 	cmp.w	sl, #22
 8004156:	d858      	bhi.n	800420a <_dtoa_r+0x232>
 8004158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800415c:	4b57      	ldr	r3, [pc, #348]	; (80042bc <_dtoa_r+0x2e4>)
 800415e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f7fc fc29 	bl	80009bc <__aeabi_dcmplt>
 800416a:	2800      	cmp	r0, #0
 800416c:	d04f      	beq.n	800420e <_dtoa_r+0x236>
 800416e:	2300      	movs	r3, #0
 8004170:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004174:	930f      	str	r3, [sp, #60]	; 0x3c
 8004176:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004178:	1b1c      	subs	r4, r3, r4
 800417a:	1e63      	subs	r3, r4, #1
 800417c:	9309      	str	r3, [sp, #36]	; 0x24
 800417e:	bf49      	itett	mi
 8004180:	f1c4 0301 	rsbmi	r3, r4, #1
 8004184:	2300      	movpl	r3, #0
 8004186:	9306      	strmi	r3, [sp, #24]
 8004188:	2300      	movmi	r3, #0
 800418a:	bf54      	ite	pl
 800418c:	9306      	strpl	r3, [sp, #24]
 800418e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004190:	f1ba 0f00 	cmp.w	sl, #0
 8004194:	db3d      	blt.n	8004212 <_dtoa_r+0x23a>
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800419c:	4453      	add	r3, sl
 800419e:	9309      	str	r3, [sp, #36]	; 0x24
 80041a0:	2300      	movs	r3, #0
 80041a2:	930a      	str	r3, [sp, #40]	; 0x28
 80041a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	f200 808c 	bhi.w	80042c4 <_dtoa_r+0x2ec>
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	bfc4      	itt	gt
 80041b0:	3b04      	subgt	r3, #4
 80041b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80041b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041b6:	bfc8      	it	gt
 80041b8:	2400      	movgt	r4, #0
 80041ba:	f1a3 0302 	sub.w	r3, r3, #2
 80041be:	bfd8      	it	le
 80041c0:	2401      	movle	r4, #1
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	f200 808a 	bhi.w	80042dc <_dtoa_r+0x304>
 80041c8:	e8df f003 	tbb	[pc, r3]
 80041cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80041d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80041d4:	441c      	add	r4, r3
 80041d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80041da:	2b20      	cmp	r3, #32
 80041dc:	bfc3      	ittte	gt
 80041de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80041e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80041ea:	f1c3 0320 	rsble	r3, r3, #32
 80041ee:	bfc6      	itte	gt
 80041f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80041f4:	4318      	orrgt	r0, r3
 80041f6:	fa06 f003 	lslle.w	r0, r6, r3
 80041fa:	f7fc f8f3 	bl	80003e4 <__aeabi_ui2d>
 80041fe:	2301      	movs	r3, #1
 8004200:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004204:	3c01      	subs	r4, #1
 8004206:	9313      	str	r3, [sp, #76]	; 0x4c
 8004208:	e76f      	b.n	80040ea <_dtoa_r+0x112>
 800420a:	2301      	movs	r3, #1
 800420c:	e7b2      	b.n	8004174 <_dtoa_r+0x19c>
 800420e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004210:	e7b1      	b.n	8004176 <_dtoa_r+0x19e>
 8004212:	9b06      	ldr	r3, [sp, #24]
 8004214:	eba3 030a 	sub.w	r3, r3, sl
 8004218:	9306      	str	r3, [sp, #24]
 800421a:	f1ca 0300 	rsb	r3, sl, #0
 800421e:	930a      	str	r3, [sp, #40]	; 0x28
 8004220:	2300      	movs	r3, #0
 8004222:	930e      	str	r3, [sp, #56]	; 0x38
 8004224:	e7be      	b.n	80041a4 <_dtoa_r+0x1cc>
 8004226:	2300      	movs	r3, #0
 8004228:	930b      	str	r3, [sp, #44]	; 0x2c
 800422a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800422c:	2b00      	cmp	r3, #0
 800422e:	dc58      	bgt.n	80042e2 <_dtoa_r+0x30a>
 8004230:	f04f 0901 	mov.w	r9, #1
 8004234:	464b      	mov	r3, r9
 8004236:	f8cd 9020 	str.w	r9, [sp, #32]
 800423a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800423e:	2200      	movs	r2, #0
 8004240:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004242:	6042      	str	r2, [r0, #4]
 8004244:	2204      	movs	r2, #4
 8004246:	f102 0614 	add.w	r6, r2, #20
 800424a:	429e      	cmp	r6, r3
 800424c:	6841      	ldr	r1, [r0, #4]
 800424e:	d94e      	bls.n	80042ee <_dtoa_r+0x316>
 8004250:	4628      	mov	r0, r5
 8004252:	f000 fef3 	bl	800503c <_Balloc>
 8004256:	9003      	str	r0, [sp, #12]
 8004258:	2800      	cmp	r0, #0
 800425a:	d14c      	bne.n	80042f6 <_dtoa_r+0x31e>
 800425c:	4602      	mov	r2, r0
 800425e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <_dtoa_r+0x2e8>)
 8004264:	e6cc      	b.n	8004000 <_dtoa_r+0x28>
 8004266:	2301      	movs	r3, #1
 8004268:	e7de      	b.n	8004228 <_dtoa_r+0x250>
 800426a:	2300      	movs	r3, #0
 800426c:	930b      	str	r3, [sp, #44]	; 0x2c
 800426e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004270:	eb0a 0903 	add.w	r9, sl, r3
 8004274:	f109 0301 	add.w	r3, r9, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	9308      	str	r3, [sp, #32]
 800427c:	bfb8      	it	lt
 800427e:	2301      	movlt	r3, #1
 8004280:	e7dd      	b.n	800423e <_dtoa_r+0x266>
 8004282:	2301      	movs	r3, #1
 8004284:	e7f2      	b.n	800426c <_dtoa_r+0x294>
 8004286:	bf00      	nop
 8004288:	636f4361 	.word	0x636f4361
 800428c:	3fd287a7 	.word	0x3fd287a7
 8004290:	8b60c8b3 	.word	0x8b60c8b3
 8004294:	3fc68a28 	.word	0x3fc68a28
 8004298:	509f79fb 	.word	0x509f79fb
 800429c:	3fd34413 	.word	0x3fd34413
 80042a0:	0800604d 	.word	0x0800604d
 80042a4:	08006064 	.word	0x08006064
 80042a8:	7ff00000 	.word	0x7ff00000
 80042ac:	08006049 	.word	0x08006049
 80042b0:	08006040 	.word	0x08006040
 80042b4:	0800601d 	.word	0x0800601d
 80042b8:	3ff80000 	.word	0x3ff80000
 80042bc:	080061b8 	.word	0x080061b8
 80042c0:	080060bf 	.word	0x080060bf
 80042c4:	2401      	movs	r4, #1
 80042c6:	2300      	movs	r3, #0
 80042c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80042ca:	9322      	str	r3, [sp, #136]	; 0x88
 80042cc:	f04f 39ff 	mov.w	r9, #4294967295
 80042d0:	2200      	movs	r2, #0
 80042d2:	2312      	movs	r3, #18
 80042d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80042d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80042da:	e7b0      	b.n	800423e <_dtoa_r+0x266>
 80042dc:	2301      	movs	r3, #1
 80042de:	930b      	str	r3, [sp, #44]	; 0x2c
 80042e0:	e7f4      	b.n	80042cc <_dtoa_r+0x2f4>
 80042e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80042e6:	464b      	mov	r3, r9
 80042e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80042ec:	e7a7      	b.n	800423e <_dtoa_r+0x266>
 80042ee:	3101      	adds	r1, #1
 80042f0:	6041      	str	r1, [r0, #4]
 80042f2:	0052      	lsls	r2, r2, #1
 80042f4:	e7a7      	b.n	8004246 <_dtoa_r+0x26e>
 80042f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042f8:	9a03      	ldr	r2, [sp, #12]
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	9b08      	ldr	r3, [sp, #32]
 80042fe:	2b0e      	cmp	r3, #14
 8004300:	f200 80a8 	bhi.w	8004454 <_dtoa_r+0x47c>
 8004304:	2c00      	cmp	r4, #0
 8004306:	f000 80a5 	beq.w	8004454 <_dtoa_r+0x47c>
 800430a:	f1ba 0f00 	cmp.w	sl, #0
 800430e:	dd34      	ble.n	800437a <_dtoa_r+0x3a2>
 8004310:	4a9a      	ldr	r2, [pc, #616]	; (800457c <_dtoa_r+0x5a4>)
 8004312:	f00a 030f 	and.w	r3, sl, #15
 8004316:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800431a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800431e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004322:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004326:	ea4f 142a 	mov.w	r4, sl, asr #4
 800432a:	d016      	beq.n	800435a <_dtoa_r+0x382>
 800432c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004330:	4b93      	ldr	r3, [pc, #588]	; (8004580 <_dtoa_r+0x5a8>)
 8004332:	2703      	movs	r7, #3
 8004334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004338:	f7fc f9f8 	bl	800072c <__aeabi_ddiv>
 800433c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004340:	f004 040f 	and.w	r4, r4, #15
 8004344:	4e8e      	ldr	r6, [pc, #568]	; (8004580 <_dtoa_r+0x5a8>)
 8004346:	b954      	cbnz	r4, 800435e <_dtoa_r+0x386>
 8004348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800434c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004350:	f7fc f9ec 	bl	800072c <__aeabi_ddiv>
 8004354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004358:	e029      	b.n	80043ae <_dtoa_r+0x3d6>
 800435a:	2702      	movs	r7, #2
 800435c:	e7f2      	b.n	8004344 <_dtoa_r+0x36c>
 800435e:	07e1      	lsls	r1, r4, #31
 8004360:	d508      	bpl.n	8004374 <_dtoa_r+0x39c>
 8004362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004366:	e9d6 2300 	ldrd	r2, r3, [r6]
 800436a:	f7fc f8b5 	bl	80004d8 <__aeabi_dmul>
 800436e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004372:	3701      	adds	r7, #1
 8004374:	1064      	asrs	r4, r4, #1
 8004376:	3608      	adds	r6, #8
 8004378:	e7e5      	b.n	8004346 <_dtoa_r+0x36e>
 800437a:	f000 80a5 	beq.w	80044c8 <_dtoa_r+0x4f0>
 800437e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004382:	f1ca 0400 	rsb	r4, sl, #0
 8004386:	4b7d      	ldr	r3, [pc, #500]	; (800457c <_dtoa_r+0x5a4>)
 8004388:	f004 020f 	and.w	r2, r4, #15
 800438c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fc f8a0 	bl	80004d8 <__aeabi_dmul>
 8004398:	2702      	movs	r7, #2
 800439a:	2300      	movs	r3, #0
 800439c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043a0:	4e77      	ldr	r6, [pc, #476]	; (8004580 <_dtoa_r+0x5a8>)
 80043a2:	1124      	asrs	r4, r4, #4
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	f040 8084 	bne.w	80044b2 <_dtoa_r+0x4da>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1d2      	bne.n	8004354 <_dtoa_r+0x37c>
 80043ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 808b 	beq.w	80044cc <_dtoa_r+0x4f4>
 80043b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043c2:	2200      	movs	r2, #0
 80043c4:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <_dtoa_r+0x5ac>)
 80043c6:	f7fc faf9 	bl	80009bc <__aeabi_dcmplt>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d07e      	beq.n	80044cc <_dtoa_r+0x4f4>
 80043ce:	9b08      	ldr	r3, [sp, #32]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d07b      	beq.n	80044cc <_dtoa_r+0x4f4>
 80043d4:	f1b9 0f00 	cmp.w	r9, #0
 80043d8:	dd38      	ble.n	800444c <_dtoa_r+0x474>
 80043da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043de:	2200      	movs	r2, #0
 80043e0:	4b69      	ldr	r3, [pc, #420]	; (8004588 <_dtoa_r+0x5b0>)
 80043e2:	f7fc f879 	bl	80004d8 <__aeabi_dmul>
 80043e6:	464c      	mov	r4, r9
 80043e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80043f0:	3701      	adds	r7, #1
 80043f2:	4638      	mov	r0, r7
 80043f4:	f7fc f806 	bl	8000404 <__aeabi_i2d>
 80043f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043fc:	f7fc f86c 	bl	80004d8 <__aeabi_dmul>
 8004400:	2200      	movs	r2, #0
 8004402:	4b62      	ldr	r3, [pc, #392]	; (800458c <_dtoa_r+0x5b4>)
 8004404:	f7fb feb2 	bl	800016c <__adddf3>
 8004408:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800440c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004410:	9611      	str	r6, [sp, #68]	; 0x44
 8004412:	2c00      	cmp	r4, #0
 8004414:	d15d      	bne.n	80044d2 <_dtoa_r+0x4fa>
 8004416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800441a:	2200      	movs	r2, #0
 800441c:	4b5c      	ldr	r3, [pc, #368]	; (8004590 <_dtoa_r+0x5b8>)
 800441e:	f7fb fea3 	bl	8000168 <__aeabi_dsub>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800442a:	4633      	mov	r3, r6
 800442c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800442e:	f7fc fae3 	bl	80009f8 <__aeabi_dcmpgt>
 8004432:	2800      	cmp	r0, #0
 8004434:	f040 829c 	bne.w	8004970 <_dtoa_r+0x998>
 8004438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800443c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800443e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004442:	f7fc fabb 	bl	80009bc <__aeabi_dcmplt>
 8004446:	2800      	cmp	r0, #0
 8004448:	f040 8290 	bne.w	800496c <_dtoa_r+0x994>
 800444c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004456:	2b00      	cmp	r3, #0
 8004458:	f2c0 8152 	blt.w	8004700 <_dtoa_r+0x728>
 800445c:	f1ba 0f0e 	cmp.w	sl, #14
 8004460:	f300 814e 	bgt.w	8004700 <_dtoa_r+0x728>
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <_dtoa_r+0x5a4>)
 8004466:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800446a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800446e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004472:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004474:	2b00      	cmp	r3, #0
 8004476:	f280 80db 	bge.w	8004630 <_dtoa_r+0x658>
 800447a:	9b08      	ldr	r3, [sp, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f300 80d7 	bgt.w	8004630 <_dtoa_r+0x658>
 8004482:	f040 8272 	bne.w	800496a <_dtoa_r+0x992>
 8004486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800448a:	2200      	movs	r2, #0
 800448c:	4b40      	ldr	r3, [pc, #256]	; (8004590 <_dtoa_r+0x5b8>)
 800448e:	f7fc f823 	bl	80004d8 <__aeabi_dmul>
 8004492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004496:	f7fc faa5 	bl	80009e4 <__aeabi_dcmpge>
 800449a:	9c08      	ldr	r4, [sp, #32]
 800449c:	4626      	mov	r6, r4
 800449e:	2800      	cmp	r0, #0
 80044a0:	f040 8248 	bne.w	8004934 <_dtoa_r+0x95c>
 80044a4:	2331      	movs	r3, #49	; 0x31
 80044a6:	9f03      	ldr	r7, [sp, #12]
 80044a8:	f10a 0a01 	add.w	sl, sl, #1
 80044ac:	f807 3b01 	strb.w	r3, [r7], #1
 80044b0:	e244      	b.n	800493c <_dtoa_r+0x964>
 80044b2:	07e2      	lsls	r2, r4, #31
 80044b4:	d505      	bpl.n	80044c2 <_dtoa_r+0x4ea>
 80044b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044ba:	f7fc f80d 	bl	80004d8 <__aeabi_dmul>
 80044be:	2301      	movs	r3, #1
 80044c0:	3701      	adds	r7, #1
 80044c2:	1064      	asrs	r4, r4, #1
 80044c4:	3608      	adds	r6, #8
 80044c6:	e76d      	b.n	80043a4 <_dtoa_r+0x3cc>
 80044c8:	2702      	movs	r7, #2
 80044ca:	e770      	b.n	80043ae <_dtoa_r+0x3d6>
 80044cc:	46d0      	mov	r8, sl
 80044ce:	9c08      	ldr	r4, [sp, #32]
 80044d0:	e78f      	b.n	80043f2 <_dtoa_r+0x41a>
 80044d2:	9903      	ldr	r1, [sp, #12]
 80044d4:	4b29      	ldr	r3, [pc, #164]	; (800457c <_dtoa_r+0x5a4>)
 80044d6:	4421      	add	r1, r4
 80044d8:	9112      	str	r1, [sp, #72]	; 0x48
 80044da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80044e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044e8:	2900      	cmp	r1, #0
 80044ea:	d055      	beq.n	8004598 <_dtoa_r+0x5c0>
 80044ec:	2000      	movs	r0, #0
 80044ee:	4929      	ldr	r1, [pc, #164]	; (8004594 <_dtoa_r+0x5bc>)
 80044f0:	f7fc f91c 	bl	800072c <__aeabi_ddiv>
 80044f4:	463b      	mov	r3, r7
 80044f6:	4632      	mov	r2, r6
 80044f8:	f7fb fe36 	bl	8000168 <__aeabi_dsub>
 80044fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004500:	9f03      	ldr	r7, [sp, #12]
 8004502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004506:	f7fc fa97 	bl	8000a38 <__aeabi_d2iz>
 800450a:	4604      	mov	r4, r0
 800450c:	f7fb ff7a 	bl	8000404 <__aeabi_i2d>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004518:	f7fb fe26 	bl	8000168 <__aeabi_dsub>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	3430      	adds	r4, #48	; 0x30
 8004522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800452a:	f807 4b01 	strb.w	r4, [r7], #1
 800452e:	f7fc fa45 	bl	80009bc <__aeabi_dcmplt>
 8004532:	2800      	cmp	r0, #0
 8004534:	d174      	bne.n	8004620 <_dtoa_r+0x648>
 8004536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800453a:	2000      	movs	r0, #0
 800453c:	4911      	ldr	r1, [pc, #68]	; (8004584 <_dtoa_r+0x5ac>)
 800453e:	f7fb fe13 	bl	8000168 <__aeabi_dsub>
 8004542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004546:	f7fc fa39 	bl	80009bc <__aeabi_dcmplt>
 800454a:	2800      	cmp	r0, #0
 800454c:	f040 80b7 	bne.w	80046be <_dtoa_r+0x6e6>
 8004550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004552:	429f      	cmp	r7, r3
 8004554:	f43f af7a 	beq.w	800444c <_dtoa_r+0x474>
 8004558:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800455c:	2200      	movs	r2, #0
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <_dtoa_r+0x5b0>)
 8004560:	f7fb ffba 	bl	80004d8 <__aeabi_dmul>
 8004564:	2200      	movs	r2, #0
 8004566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800456a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <_dtoa_r+0x5b0>)
 8004570:	f7fb ffb2 	bl	80004d8 <__aeabi_dmul>
 8004574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004578:	e7c3      	b.n	8004502 <_dtoa_r+0x52a>
 800457a:	bf00      	nop
 800457c:	080061b8 	.word	0x080061b8
 8004580:	08006190 	.word	0x08006190
 8004584:	3ff00000 	.word	0x3ff00000
 8004588:	40240000 	.word	0x40240000
 800458c:	401c0000 	.word	0x401c0000
 8004590:	40140000 	.word	0x40140000
 8004594:	3fe00000 	.word	0x3fe00000
 8004598:	4630      	mov	r0, r6
 800459a:	4639      	mov	r1, r7
 800459c:	f7fb ff9c 	bl	80004d8 <__aeabi_dmul>
 80045a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045a6:	9c03      	ldr	r4, [sp, #12]
 80045a8:	9314      	str	r3, [sp, #80]	; 0x50
 80045aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ae:	f7fc fa43 	bl	8000a38 <__aeabi_d2iz>
 80045b2:	9015      	str	r0, [sp, #84]	; 0x54
 80045b4:	f7fb ff26 	bl	8000404 <__aeabi_i2d>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045c0:	f7fb fdd2 	bl	8000168 <__aeabi_dsub>
 80045c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045c6:	4606      	mov	r6, r0
 80045c8:	3330      	adds	r3, #48	; 0x30
 80045ca:	f804 3b01 	strb.w	r3, [r4], #1
 80045ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045d0:	460f      	mov	r7, r1
 80045d2:	429c      	cmp	r4, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	d124      	bne.n	8004624 <_dtoa_r+0x64c>
 80045da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045de:	4bb0      	ldr	r3, [pc, #704]	; (80048a0 <_dtoa_r+0x8c8>)
 80045e0:	f7fb fdc4 	bl	800016c <__adddf3>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4630      	mov	r0, r6
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fc fa04 	bl	80009f8 <__aeabi_dcmpgt>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d163      	bne.n	80046bc <_dtoa_r+0x6e4>
 80045f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045f8:	2000      	movs	r0, #0
 80045fa:	49a9      	ldr	r1, [pc, #676]	; (80048a0 <_dtoa_r+0x8c8>)
 80045fc:	f7fb fdb4 	bl	8000168 <__aeabi_dsub>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4630      	mov	r0, r6
 8004606:	4639      	mov	r1, r7
 8004608:	f7fc f9d8 	bl	80009bc <__aeabi_dcmplt>
 800460c:	2800      	cmp	r0, #0
 800460e:	f43f af1d 	beq.w	800444c <_dtoa_r+0x474>
 8004612:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004614:	1e7b      	subs	r3, r7, #1
 8004616:	9314      	str	r3, [sp, #80]	; 0x50
 8004618:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800461c:	2b30      	cmp	r3, #48	; 0x30
 800461e:	d0f8      	beq.n	8004612 <_dtoa_r+0x63a>
 8004620:	46c2      	mov	sl, r8
 8004622:	e03b      	b.n	800469c <_dtoa_r+0x6c4>
 8004624:	4b9f      	ldr	r3, [pc, #636]	; (80048a4 <_dtoa_r+0x8cc>)
 8004626:	f7fb ff57 	bl	80004d8 <__aeabi_dmul>
 800462a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800462e:	e7bc      	b.n	80045aa <_dtoa_r+0x5d2>
 8004630:	9f03      	ldr	r7, [sp, #12]
 8004632:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800463a:	4640      	mov	r0, r8
 800463c:	4649      	mov	r1, r9
 800463e:	f7fc f875 	bl	800072c <__aeabi_ddiv>
 8004642:	f7fc f9f9 	bl	8000a38 <__aeabi_d2iz>
 8004646:	4604      	mov	r4, r0
 8004648:	f7fb fedc 	bl	8000404 <__aeabi_i2d>
 800464c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004650:	f7fb ff42 	bl	80004d8 <__aeabi_dmul>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	f7fb fd84 	bl	8000168 <__aeabi_dsub>
 8004660:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004664:	f807 6b01 	strb.w	r6, [r7], #1
 8004668:	9e03      	ldr	r6, [sp, #12]
 800466a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800466e:	1bbe      	subs	r6, r7, r6
 8004670:	45b4      	cmp	ip, r6
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	d136      	bne.n	80046e6 <_dtoa_r+0x70e>
 8004678:	f7fb fd78 	bl	800016c <__adddf3>
 800467c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004680:	4680      	mov	r8, r0
 8004682:	4689      	mov	r9, r1
 8004684:	f7fc f9b8 	bl	80009f8 <__aeabi_dcmpgt>
 8004688:	bb58      	cbnz	r0, 80046e2 <_dtoa_r+0x70a>
 800468a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f7fc f989 	bl	80009a8 <__aeabi_dcmpeq>
 8004696:	b108      	cbz	r0, 800469c <_dtoa_r+0x6c4>
 8004698:	07e1      	lsls	r1, r4, #31
 800469a:	d422      	bmi.n	80046e2 <_dtoa_r+0x70a>
 800469c:	4628      	mov	r0, r5
 800469e:	4659      	mov	r1, fp
 80046a0:	f000 fd0c 	bl	80050bc <_Bfree>
 80046a4:	2300      	movs	r3, #0
 80046a6:	703b      	strb	r3, [r7, #0]
 80046a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80046aa:	f10a 0001 	add.w	r0, sl, #1
 80046ae:	6018      	str	r0, [r3, #0]
 80046b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f43f acde 	beq.w	8004074 <_dtoa_r+0x9c>
 80046b8:	601f      	str	r7, [r3, #0]
 80046ba:	e4db      	b.n	8004074 <_dtoa_r+0x9c>
 80046bc:	4627      	mov	r7, r4
 80046be:	463b      	mov	r3, r7
 80046c0:	461f      	mov	r7, r3
 80046c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046c6:	2a39      	cmp	r2, #57	; 0x39
 80046c8:	d107      	bne.n	80046da <_dtoa_r+0x702>
 80046ca:	9a03      	ldr	r2, [sp, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1f7      	bne.n	80046c0 <_dtoa_r+0x6e8>
 80046d0:	2230      	movs	r2, #48	; 0x30
 80046d2:	9903      	ldr	r1, [sp, #12]
 80046d4:	f108 0801 	add.w	r8, r8, #1
 80046d8:	700a      	strb	r2, [r1, #0]
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	3201      	adds	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e79e      	b.n	8004620 <_dtoa_r+0x648>
 80046e2:	46d0      	mov	r8, sl
 80046e4:	e7eb      	b.n	80046be <_dtoa_r+0x6e6>
 80046e6:	2200      	movs	r2, #0
 80046e8:	4b6e      	ldr	r3, [pc, #440]	; (80048a4 <_dtoa_r+0x8cc>)
 80046ea:	f7fb fef5 	bl	80004d8 <__aeabi_dmul>
 80046ee:	2200      	movs	r2, #0
 80046f0:	2300      	movs	r3, #0
 80046f2:	4680      	mov	r8, r0
 80046f4:	4689      	mov	r9, r1
 80046f6:	f7fc f957 	bl	80009a8 <__aeabi_dcmpeq>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d09b      	beq.n	8004636 <_dtoa_r+0x65e>
 80046fe:	e7cd      	b.n	800469c <_dtoa_r+0x6c4>
 8004700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004702:	2a00      	cmp	r2, #0
 8004704:	f000 80d0 	beq.w	80048a8 <_dtoa_r+0x8d0>
 8004708:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800470a:	2a01      	cmp	r2, #1
 800470c:	f300 80ae 	bgt.w	800486c <_dtoa_r+0x894>
 8004710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004712:	2a00      	cmp	r2, #0
 8004714:	f000 80a6 	beq.w	8004864 <_dtoa_r+0x88c>
 8004718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800471c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800471e:	9f06      	ldr	r7, [sp, #24]
 8004720:	9a06      	ldr	r2, [sp, #24]
 8004722:	2101      	movs	r1, #1
 8004724:	441a      	add	r2, r3
 8004726:	9206      	str	r2, [sp, #24]
 8004728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800472a:	4628      	mov	r0, r5
 800472c:	441a      	add	r2, r3
 800472e:	9209      	str	r2, [sp, #36]	; 0x24
 8004730:	f000 fd7a 	bl	8005228 <__i2b>
 8004734:	4606      	mov	r6, r0
 8004736:	2f00      	cmp	r7, #0
 8004738:	dd0c      	ble.n	8004754 <_dtoa_r+0x77c>
 800473a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	dd09      	ble.n	8004754 <_dtoa_r+0x77c>
 8004740:	42bb      	cmp	r3, r7
 8004742:	bfa8      	it	ge
 8004744:	463b      	movge	r3, r7
 8004746:	9a06      	ldr	r2, [sp, #24]
 8004748:	1aff      	subs	r7, r7, r3
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	9206      	str	r2, [sp, #24]
 800474e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004756:	b1f3      	cbz	r3, 8004796 <_dtoa_r+0x7be>
 8004758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80a8 	beq.w	80048b0 <_dtoa_r+0x8d8>
 8004760:	2c00      	cmp	r4, #0
 8004762:	dd10      	ble.n	8004786 <_dtoa_r+0x7ae>
 8004764:	4631      	mov	r1, r6
 8004766:	4622      	mov	r2, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 fe1b 	bl	80053a4 <__pow5mult>
 800476e:	465a      	mov	r2, fp
 8004770:	4601      	mov	r1, r0
 8004772:	4606      	mov	r6, r0
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fd6d 	bl	8005254 <__multiply>
 800477a:	4680      	mov	r8, r0
 800477c:	4659      	mov	r1, fp
 800477e:	4628      	mov	r0, r5
 8004780:	f000 fc9c 	bl	80050bc <_Bfree>
 8004784:	46c3      	mov	fp, r8
 8004786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004788:	1b1a      	subs	r2, r3, r4
 800478a:	d004      	beq.n	8004796 <_dtoa_r+0x7be>
 800478c:	4659      	mov	r1, fp
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fe08 	bl	80053a4 <__pow5mult>
 8004794:	4683      	mov	fp, r0
 8004796:	2101      	movs	r1, #1
 8004798:	4628      	mov	r0, r5
 800479a:	f000 fd45 	bl	8005228 <__i2b>
 800479e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047a0:	4604      	mov	r4, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f340 8086 	ble.w	80048b4 <_dtoa_r+0x8dc>
 80047a8:	461a      	mov	r2, r3
 80047aa:	4601      	mov	r1, r0
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 fdf9 	bl	80053a4 <__pow5mult>
 80047b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047b4:	4604      	mov	r4, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	dd7f      	ble.n	80048ba <_dtoa_r+0x8e2>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047c4:	6918      	ldr	r0, [r3, #16]
 80047c6:	f000 fce1 	bl	800518c <__hi0bits>
 80047ca:	f1c0 0020 	rsb	r0, r0, #32
 80047ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d0:	4418      	add	r0, r3
 80047d2:	f010 001f 	ands.w	r0, r0, #31
 80047d6:	f000 8092 	beq.w	80048fe <_dtoa_r+0x926>
 80047da:	f1c0 0320 	rsb	r3, r0, #32
 80047de:	2b04      	cmp	r3, #4
 80047e0:	f340 808a 	ble.w	80048f8 <_dtoa_r+0x920>
 80047e4:	f1c0 001c 	rsb	r0, r0, #28
 80047e8:	9b06      	ldr	r3, [sp, #24]
 80047ea:	4407      	add	r7, r0
 80047ec:	4403      	add	r3, r0
 80047ee:	9306      	str	r3, [sp, #24]
 80047f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f2:	4403      	add	r3, r0
 80047f4:	9309      	str	r3, [sp, #36]	; 0x24
 80047f6:	9b06      	ldr	r3, [sp, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	dd05      	ble.n	8004808 <_dtoa_r+0x830>
 80047fc:	4659      	mov	r1, fp
 80047fe:	461a      	mov	r2, r3
 8004800:	4628      	mov	r0, r5
 8004802:	f000 fe29 	bl	8005458 <__lshift>
 8004806:	4683      	mov	fp, r0
 8004808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	dd05      	ble.n	800481a <_dtoa_r+0x842>
 800480e:	4621      	mov	r1, r4
 8004810:	461a      	mov	r2, r3
 8004812:	4628      	mov	r0, r5
 8004814:	f000 fe20 	bl	8005458 <__lshift>
 8004818:	4604      	mov	r4, r0
 800481a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d070      	beq.n	8004902 <_dtoa_r+0x92a>
 8004820:	4621      	mov	r1, r4
 8004822:	4658      	mov	r0, fp
 8004824:	f000 fe88 	bl	8005538 <__mcmp>
 8004828:	2800      	cmp	r0, #0
 800482a:	da6a      	bge.n	8004902 <_dtoa_r+0x92a>
 800482c:	2300      	movs	r3, #0
 800482e:	4659      	mov	r1, fp
 8004830:	220a      	movs	r2, #10
 8004832:	4628      	mov	r0, r5
 8004834:	f000 fc64 	bl	8005100 <__multadd>
 8004838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800483a:	4683      	mov	fp, r0
 800483c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8194 	beq.w	8004b6e <_dtoa_r+0xb96>
 8004846:	4631      	mov	r1, r6
 8004848:	2300      	movs	r3, #0
 800484a:	220a      	movs	r2, #10
 800484c:	4628      	mov	r0, r5
 800484e:	f000 fc57 	bl	8005100 <__multadd>
 8004852:	f1b9 0f00 	cmp.w	r9, #0
 8004856:	4606      	mov	r6, r0
 8004858:	f300 8093 	bgt.w	8004982 <_dtoa_r+0x9aa>
 800485c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800485e:	2b02      	cmp	r3, #2
 8004860:	dc57      	bgt.n	8004912 <_dtoa_r+0x93a>
 8004862:	e08e      	b.n	8004982 <_dtoa_r+0x9aa>
 8004864:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800486a:	e757      	b.n	800471c <_dtoa_r+0x744>
 800486c:	9b08      	ldr	r3, [sp, #32]
 800486e:	1e5c      	subs	r4, r3, #1
 8004870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004872:	42a3      	cmp	r3, r4
 8004874:	bfb7      	itett	lt
 8004876:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004878:	1b1c      	subge	r4, r3, r4
 800487a:	1ae2      	sublt	r2, r4, r3
 800487c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800487e:	bfbe      	ittt	lt
 8004880:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004882:	189b      	addlt	r3, r3, r2
 8004884:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004886:	9b08      	ldr	r3, [sp, #32]
 8004888:	bfb8      	it	lt
 800488a:	2400      	movlt	r4, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	bfbb      	ittet	lt
 8004890:	9b06      	ldrlt	r3, [sp, #24]
 8004892:	9a08      	ldrlt	r2, [sp, #32]
 8004894:	9f06      	ldrge	r7, [sp, #24]
 8004896:	1a9f      	sublt	r7, r3, r2
 8004898:	bfac      	ite	ge
 800489a:	9b08      	ldrge	r3, [sp, #32]
 800489c:	2300      	movlt	r3, #0
 800489e:	e73f      	b.n	8004720 <_dtoa_r+0x748>
 80048a0:	3fe00000 	.word	0x3fe00000
 80048a4:	40240000 	.word	0x40240000
 80048a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80048aa:	9f06      	ldr	r7, [sp, #24]
 80048ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80048ae:	e742      	b.n	8004736 <_dtoa_r+0x75e>
 80048b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048b2:	e76b      	b.n	800478c <_dtoa_r+0x7b4>
 80048b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	dc19      	bgt.n	80048ee <_dtoa_r+0x916>
 80048ba:	9b04      	ldr	r3, [sp, #16]
 80048bc:	b9bb      	cbnz	r3, 80048ee <_dtoa_r+0x916>
 80048be:	9b05      	ldr	r3, [sp, #20]
 80048c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c4:	b99b      	cbnz	r3, 80048ee <_dtoa_r+0x916>
 80048c6:	9b05      	ldr	r3, [sp, #20]
 80048c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048cc:	0d1b      	lsrs	r3, r3, #20
 80048ce:	051b      	lsls	r3, r3, #20
 80048d0:	b183      	cbz	r3, 80048f4 <_dtoa_r+0x91c>
 80048d2:	f04f 0801 	mov.w	r8, #1
 80048d6:	9b06      	ldr	r3, [sp, #24]
 80048d8:	3301      	adds	r3, #1
 80048da:	9306      	str	r3, [sp, #24]
 80048dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048de:	3301      	adds	r3, #1
 80048e0:	9309      	str	r3, [sp, #36]	; 0x24
 80048e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f47f af6a 	bne.w	80047be <_dtoa_r+0x7e6>
 80048ea:	2001      	movs	r0, #1
 80048ec:	e76f      	b.n	80047ce <_dtoa_r+0x7f6>
 80048ee:	f04f 0800 	mov.w	r8, #0
 80048f2:	e7f6      	b.n	80048e2 <_dtoa_r+0x90a>
 80048f4:	4698      	mov	r8, r3
 80048f6:	e7f4      	b.n	80048e2 <_dtoa_r+0x90a>
 80048f8:	f43f af7d 	beq.w	80047f6 <_dtoa_r+0x81e>
 80048fc:	4618      	mov	r0, r3
 80048fe:	301c      	adds	r0, #28
 8004900:	e772      	b.n	80047e8 <_dtoa_r+0x810>
 8004902:	9b08      	ldr	r3, [sp, #32]
 8004904:	2b00      	cmp	r3, #0
 8004906:	dc36      	bgt.n	8004976 <_dtoa_r+0x99e>
 8004908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800490a:	2b02      	cmp	r3, #2
 800490c:	dd33      	ble.n	8004976 <_dtoa_r+0x99e>
 800490e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004912:	f1b9 0f00 	cmp.w	r9, #0
 8004916:	d10d      	bne.n	8004934 <_dtoa_r+0x95c>
 8004918:	4621      	mov	r1, r4
 800491a:	464b      	mov	r3, r9
 800491c:	2205      	movs	r2, #5
 800491e:	4628      	mov	r0, r5
 8004920:	f000 fbee 	bl	8005100 <__multadd>
 8004924:	4601      	mov	r1, r0
 8004926:	4604      	mov	r4, r0
 8004928:	4658      	mov	r0, fp
 800492a:	f000 fe05 	bl	8005538 <__mcmp>
 800492e:	2800      	cmp	r0, #0
 8004930:	f73f adb8 	bgt.w	80044a4 <_dtoa_r+0x4cc>
 8004934:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004936:	9f03      	ldr	r7, [sp, #12]
 8004938:	ea6f 0a03 	mvn.w	sl, r3
 800493c:	f04f 0800 	mov.w	r8, #0
 8004940:	4621      	mov	r1, r4
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fbba 	bl	80050bc <_Bfree>
 8004948:	2e00      	cmp	r6, #0
 800494a:	f43f aea7 	beq.w	800469c <_dtoa_r+0x6c4>
 800494e:	f1b8 0f00 	cmp.w	r8, #0
 8004952:	d005      	beq.n	8004960 <_dtoa_r+0x988>
 8004954:	45b0      	cmp	r8, r6
 8004956:	d003      	beq.n	8004960 <_dtoa_r+0x988>
 8004958:	4641      	mov	r1, r8
 800495a:	4628      	mov	r0, r5
 800495c:	f000 fbae 	bl	80050bc <_Bfree>
 8004960:	4631      	mov	r1, r6
 8004962:	4628      	mov	r0, r5
 8004964:	f000 fbaa 	bl	80050bc <_Bfree>
 8004968:	e698      	b.n	800469c <_dtoa_r+0x6c4>
 800496a:	2400      	movs	r4, #0
 800496c:	4626      	mov	r6, r4
 800496e:	e7e1      	b.n	8004934 <_dtoa_r+0x95c>
 8004970:	46c2      	mov	sl, r8
 8004972:	4626      	mov	r6, r4
 8004974:	e596      	b.n	80044a4 <_dtoa_r+0x4cc>
 8004976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80fd 	beq.w	8004b7c <_dtoa_r+0xba4>
 8004982:	2f00      	cmp	r7, #0
 8004984:	dd05      	ble.n	8004992 <_dtoa_r+0x9ba>
 8004986:	4631      	mov	r1, r6
 8004988:	463a      	mov	r2, r7
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fd64 	bl	8005458 <__lshift>
 8004990:	4606      	mov	r6, r0
 8004992:	f1b8 0f00 	cmp.w	r8, #0
 8004996:	d05c      	beq.n	8004a52 <_dtoa_r+0xa7a>
 8004998:	4628      	mov	r0, r5
 800499a:	6871      	ldr	r1, [r6, #4]
 800499c:	f000 fb4e 	bl	800503c <_Balloc>
 80049a0:	4607      	mov	r7, r0
 80049a2:	b928      	cbnz	r0, 80049b0 <_dtoa_r+0x9d8>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80049aa:	4b7f      	ldr	r3, [pc, #508]	; (8004ba8 <_dtoa_r+0xbd0>)
 80049ac:	f7ff bb28 	b.w	8004000 <_dtoa_r+0x28>
 80049b0:	6932      	ldr	r2, [r6, #16]
 80049b2:	f106 010c 	add.w	r1, r6, #12
 80049b6:	3202      	adds	r2, #2
 80049b8:	0092      	lsls	r2, r2, #2
 80049ba:	300c      	adds	r0, #12
 80049bc:	f000 fb30 	bl	8005020 <memcpy>
 80049c0:	2201      	movs	r2, #1
 80049c2:	4639      	mov	r1, r7
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 fd47 	bl	8005458 <__lshift>
 80049ca:	46b0      	mov	r8, r6
 80049cc:	4606      	mov	r6, r0
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	9308      	str	r3, [sp, #32]
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	444b      	add	r3, r9
 80049d8:	930a      	str	r3, [sp, #40]	; 0x28
 80049da:	9b04      	ldr	r3, [sp, #16]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	9309      	str	r3, [sp, #36]	; 0x24
 80049e2:	9b08      	ldr	r3, [sp, #32]
 80049e4:	4621      	mov	r1, r4
 80049e6:	3b01      	subs	r3, #1
 80049e8:	4658      	mov	r0, fp
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	f7ff fa66 	bl	8003ebc <quorem>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4641      	mov	r1, r8
 80049f4:	3330      	adds	r3, #48	; 0x30
 80049f6:	9006      	str	r0, [sp, #24]
 80049f8:	4658      	mov	r0, fp
 80049fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80049fc:	f000 fd9c 	bl	8005538 <__mcmp>
 8004a00:	4632      	mov	r2, r6
 8004a02:	4681      	mov	r9, r0
 8004a04:	4621      	mov	r1, r4
 8004a06:	4628      	mov	r0, r5
 8004a08:	f000 fdb2 	bl	8005570 <__mdiff>
 8004a0c:	68c2      	ldr	r2, [r0, #12]
 8004a0e:	4607      	mov	r7, r0
 8004a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a12:	bb02      	cbnz	r2, 8004a56 <_dtoa_r+0xa7e>
 8004a14:	4601      	mov	r1, r0
 8004a16:	4658      	mov	r0, fp
 8004a18:	f000 fd8e 	bl	8005538 <__mcmp>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a20:	4639      	mov	r1, r7
 8004a22:	4628      	mov	r0, r5
 8004a24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004a28:	f000 fb48 	bl	80050bc <_Bfree>
 8004a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a30:	9f08      	ldr	r7, [sp, #32]
 8004a32:	ea43 0102 	orr.w	r1, r3, r2
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a3c:	d10d      	bne.n	8004a5a <_dtoa_r+0xa82>
 8004a3e:	2b39      	cmp	r3, #57	; 0x39
 8004a40:	d029      	beq.n	8004a96 <_dtoa_r+0xabe>
 8004a42:	f1b9 0f00 	cmp.w	r9, #0
 8004a46:	dd01      	ble.n	8004a4c <_dtoa_r+0xa74>
 8004a48:	9b06      	ldr	r3, [sp, #24]
 8004a4a:	3331      	adds	r3, #49	; 0x31
 8004a4c:	9a04      	ldr	r2, [sp, #16]
 8004a4e:	7013      	strb	r3, [r2, #0]
 8004a50:	e776      	b.n	8004940 <_dtoa_r+0x968>
 8004a52:	4630      	mov	r0, r6
 8004a54:	e7b9      	b.n	80049ca <_dtoa_r+0x9f2>
 8004a56:	2201      	movs	r2, #1
 8004a58:	e7e2      	b.n	8004a20 <_dtoa_r+0xa48>
 8004a5a:	f1b9 0f00 	cmp.w	r9, #0
 8004a5e:	db06      	blt.n	8004a6e <_dtoa_r+0xa96>
 8004a60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004a62:	ea41 0909 	orr.w	r9, r1, r9
 8004a66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a68:	ea59 0101 	orrs.w	r1, r9, r1
 8004a6c:	d120      	bne.n	8004ab0 <_dtoa_r+0xad8>
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	ddec      	ble.n	8004a4c <_dtoa_r+0xa74>
 8004a72:	4659      	mov	r1, fp
 8004a74:	2201      	movs	r2, #1
 8004a76:	4628      	mov	r0, r5
 8004a78:	9308      	str	r3, [sp, #32]
 8004a7a:	f000 fced 	bl	8005458 <__lshift>
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4683      	mov	fp, r0
 8004a82:	f000 fd59 	bl	8005538 <__mcmp>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	9b08      	ldr	r3, [sp, #32]
 8004a8a:	dc02      	bgt.n	8004a92 <_dtoa_r+0xaba>
 8004a8c:	d1de      	bne.n	8004a4c <_dtoa_r+0xa74>
 8004a8e:	07da      	lsls	r2, r3, #31
 8004a90:	d5dc      	bpl.n	8004a4c <_dtoa_r+0xa74>
 8004a92:	2b39      	cmp	r3, #57	; 0x39
 8004a94:	d1d8      	bne.n	8004a48 <_dtoa_r+0xa70>
 8004a96:	2339      	movs	r3, #57	; 0x39
 8004a98:	9a04      	ldr	r2, [sp, #16]
 8004a9a:	7013      	strb	r3, [r2, #0]
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	2a39      	cmp	r2, #57	; 0x39
 8004aa8:	d050      	beq.n	8004b4c <_dtoa_r+0xb74>
 8004aaa:	3201      	adds	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e747      	b.n	8004940 <_dtoa_r+0x968>
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	dd03      	ble.n	8004abc <_dtoa_r+0xae4>
 8004ab4:	2b39      	cmp	r3, #57	; 0x39
 8004ab6:	d0ee      	beq.n	8004a96 <_dtoa_r+0xabe>
 8004ab8:	3301      	adds	r3, #1
 8004aba:	e7c7      	b.n	8004a4c <_dtoa_r+0xa74>
 8004abc:	9a08      	ldr	r2, [sp, #32]
 8004abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ac0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004ac4:	428a      	cmp	r2, r1
 8004ac6:	d02a      	beq.n	8004b1e <_dtoa_r+0xb46>
 8004ac8:	4659      	mov	r1, fp
 8004aca:	2300      	movs	r3, #0
 8004acc:	220a      	movs	r2, #10
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 fb16 	bl	8005100 <__multadd>
 8004ad4:	45b0      	cmp	r8, r6
 8004ad6:	4683      	mov	fp, r0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	f04f 020a 	mov.w	r2, #10
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	d107      	bne.n	8004af6 <_dtoa_r+0xb1e>
 8004ae6:	f000 fb0b 	bl	8005100 <__multadd>
 8004aea:	4680      	mov	r8, r0
 8004aec:	4606      	mov	r6, r0
 8004aee:	9b08      	ldr	r3, [sp, #32]
 8004af0:	3301      	adds	r3, #1
 8004af2:	9308      	str	r3, [sp, #32]
 8004af4:	e775      	b.n	80049e2 <_dtoa_r+0xa0a>
 8004af6:	f000 fb03 	bl	8005100 <__multadd>
 8004afa:	4631      	mov	r1, r6
 8004afc:	4680      	mov	r8, r0
 8004afe:	2300      	movs	r3, #0
 8004b00:	220a      	movs	r2, #10
 8004b02:	4628      	mov	r0, r5
 8004b04:	f000 fafc 	bl	8005100 <__multadd>
 8004b08:	4606      	mov	r6, r0
 8004b0a:	e7f0      	b.n	8004aee <_dtoa_r+0xb16>
 8004b0c:	f1b9 0f00 	cmp.w	r9, #0
 8004b10:	bfcc      	ite	gt
 8004b12:	464f      	movgt	r7, r9
 8004b14:	2701      	movle	r7, #1
 8004b16:	f04f 0800 	mov.w	r8, #0
 8004b1a:	9a03      	ldr	r2, [sp, #12]
 8004b1c:	4417      	add	r7, r2
 8004b1e:	4659      	mov	r1, fp
 8004b20:	2201      	movs	r2, #1
 8004b22:	4628      	mov	r0, r5
 8004b24:	9308      	str	r3, [sp, #32]
 8004b26:	f000 fc97 	bl	8005458 <__lshift>
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4683      	mov	fp, r0
 8004b2e:	f000 fd03 	bl	8005538 <__mcmp>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	dcb2      	bgt.n	8004a9c <_dtoa_r+0xac4>
 8004b36:	d102      	bne.n	8004b3e <_dtoa_r+0xb66>
 8004b38:	9b08      	ldr	r3, [sp, #32]
 8004b3a:	07db      	lsls	r3, r3, #31
 8004b3c:	d4ae      	bmi.n	8004a9c <_dtoa_r+0xac4>
 8004b3e:	463b      	mov	r3, r7
 8004b40:	461f      	mov	r7, r3
 8004b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b46:	2a30      	cmp	r2, #48	; 0x30
 8004b48:	d0fa      	beq.n	8004b40 <_dtoa_r+0xb68>
 8004b4a:	e6f9      	b.n	8004940 <_dtoa_r+0x968>
 8004b4c:	9a03      	ldr	r2, [sp, #12]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d1a5      	bne.n	8004a9e <_dtoa_r+0xac6>
 8004b52:	2331      	movs	r3, #49	; 0x31
 8004b54:	f10a 0a01 	add.w	sl, sl, #1
 8004b58:	e779      	b.n	8004a4e <_dtoa_r+0xa76>
 8004b5a:	4b14      	ldr	r3, [pc, #80]	; (8004bac <_dtoa_r+0xbd4>)
 8004b5c:	f7ff baa8 	b.w	80040b0 <_dtoa_r+0xd8>
 8004b60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f47f aa81 	bne.w	800406a <_dtoa_r+0x92>
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <_dtoa_r+0xbd8>)
 8004b6a:	f7ff baa1 	b.w	80040b0 <_dtoa_r+0xd8>
 8004b6e:	f1b9 0f00 	cmp.w	r9, #0
 8004b72:	dc03      	bgt.n	8004b7c <_dtoa_r+0xba4>
 8004b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	f73f aecb 	bgt.w	8004912 <_dtoa_r+0x93a>
 8004b7c:	9f03      	ldr	r7, [sp, #12]
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4658      	mov	r0, fp
 8004b82:	f7ff f99b 	bl	8003ebc <quorem>
 8004b86:	9a03      	ldr	r2, [sp, #12]
 8004b88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004b8c:	f807 3b01 	strb.w	r3, [r7], #1
 8004b90:	1aba      	subs	r2, r7, r2
 8004b92:	4591      	cmp	r9, r2
 8004b94:	ddba      	ble.n	8004b0c <_dtoa_r+0xb34>
 8004b96:	4659      	mov	r1, fp
 8004b98:	2300      	movs	r3, #0
 8004b9a:	220a      	movs	r2, #10
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f000 faaf 	bl	8005100 <__multadd>
 8004ba2:	4683      	mov	fp, r0
 8004ba4:	e7eb      	b.n	8004b7e <_dtoa_r+0xba6>
 8004ba6:	bf00      	nop
 8004ba8:	080060bf 	.word	0x080060bf
 8004bac:	0800601c 	.word	0x0800601c
 8004bb0:	08006040 	.word	0x08006040

08004bb4 <__sflush_r>:
 8004bb4:	898a      	ldrh	r2, [r1, #12]
 8004bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb8:	4605      	mov	r5, r0
 8004bba:	0710      	lsls	r0, r2, #28
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	d457      	bmi.n	8004c70 <__sflush_r+0xbc>
 8004bc0:	684b      	ldr	r3, [r1, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	dc04      	bgt.n	8004bd0 <__sflush_r+0x1c>
 8004bc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	dc01      	bgt.n	8004bd0 <__sflush_r+0x1c>
 8004bcc:	2000      	movs	r0, #0
 8004bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bd2:	2e00      	cmp	r6, #0
 8004bd4:	d0fa      	beq.n	8004bcc <__sflush_r+0x18>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bdc:	682f      	ldr	r7, [r5, #0]
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	d032      	beq.n	8004c48 <__sflush_r+0x94>
 8004be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	075a      	lsls	r2, r3, #29
 8004be8:	d505      	bpl.n	8004bf6 <__sflush_r+0x42>
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	1ac0      	subs	r0, r0, r3
 8004bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf0:	b10b      	cbz	r3, 8004bf6 <__sflush_r+0x42>
 8004bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bf4:	1ac0      	subs	r0, r0, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	6a21      	ldr	r1, [r4, #32]
 8004c00:	47b0      	blx	r6
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	d106      	bne.n	8004c16 <__sflush_r+0x62>
 8004c08:	6829      	ldr	r1, [r5, #0]
 8004c0a:	291d      	cmp	r1, #29
 8004c0c:	d82c      	bhi.n	8004c68 <__sflush_r+0xb4>
 8004c0e:	4a29      	ldr	r2, [pc, #164]	; (8004cb4 <__sflush_r+0x100>)
 8004c10:	40ca      	lsrs	r2, r1
 8004c12:	07d6      	lsls	r6, r2, #31
 8004c14:	d528      	bpl.n	8004c68 <__sflush_r+0xb4>
 8004c16:	2200      	movs	r2, #0
 8004c18:	6062      	str	r2, [r4, #4]
 8004c1a:	6922      	ldr	r2, [r4, #16]
 8004c1c:	04d9      	lsls	r1, r3, #19
 8004c1e:	6022      	str	r2, [r4, #0]
 8004c20:	d504      	bpl.n	8004c2c <__sflush_r+0x78>
 8004c22:	1c42      	adds	r2, r0, #1
 8004c24:	d101      	bne.n	8004c2a <__sflush_r+0x76>
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	b903      	cbnz	r3, 8004c2c <__sflush_r+0x78>
 8004c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8004c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2e:	602f      	str	r7, [r5, #0]
 8004c30:	2900      	cmp	r1, #0
 8004c32:	d0cb      	beq.n	8004bcc <__sflush_r+0x18>
 8004c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c38:	4299      	cmp	r1, r3
 8004c3a:	d002      	beq.n	8004c42 <__sflush_r+0x8e>
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 fd93 	bl	8005768 <_free_r>
 8004c42:	2000      	movs	r0, #0
 8004c44:	6360      	str	r0, [r4, #52]	; 0x34
 8004c46:	e7c2      	b.n	8004bce <__sflush_r+0x1a>
 8004c48:	6a21      	ldr	r1, [r4, #32]
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b0      	blx	r6
 8004c50:	1c41      	adds	r1, r0, #1
 8004c52:	d1c7      	bne.n	8004be4 <__sflush_r+0x30>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0c4      	beq.n	8004be4 <__sflush_r+0x30>
 8004c5a:	2b1d      	cmp	r3, #29
 8004c5c:	d001      	beq.n	8004c62 <__sflush_r+0xae>
 8004c5e:	2b16      	cmp	r3, #22
 8004c60:	d101      	bne.n	8004c66 <__sflush_r+0xb2>
 8004c62:	602f      	str	r7, [r5, #0]
 8004c64:	e7b2      	b.n	8004bcc <__sflush_r+0x18>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	e7ae      	b.n	8004bce <__sflush_r+0x1a>
 8004c70:	690f      	ldr	r7, [r1, #16]
 8004c72:	2f00      	cmp	r7, #0
 8004c74:	d0aa      	beq.n	8004bcc <__sflush_r+0x18>
 8004c76:	0793      	lsls	r3, r2, #30
 8004c78:	bf18      	it	ne
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	680e      	ldr	r6, [r1, #0]
 8004c7e:	bf08      	it	eq
 8004c80:	694b      	ldreq	r3, [r1, #20]
 8004c82:	1bf6      	subs	r6, r6, r7
 8004c84:	600f      	str	r7, [r1, #0]
 8004c86:	608b      	str	r3, [r1, #8]
 8004c88:	2e00      	cmp	r6, #0
 8004c8a:	dd9f      	ble.n	8004bcc <__sflush_r+0x18>
 8004c8c:	4633      	mov	r3, r6
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4628      	mov	r0, r5
 8004c92:	6a21      	ldr	r1, [r4, #32]
 8004c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c98:	47e0      	blx	ip
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	dc06      	bgt.n	8004cac <__sflush_r+0xf8>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	e790      	b.n	8004bce <__sflush_r+0x1a>
 8004cac:	4407      	add	r7, r0
 8004cae:	1a36      	subs	r6, r6, r0
 8004cb0:	e7ea      	b.n	8004c88 <__sflush_r+0xd4>
 8004cb2:	bf00      	nop
 8004cb4:	20400001 	.word	0x20400001

08004cb8 <_fflush_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	690b      	ldr	r3, [r1, #16]
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	b913      	cbnz	r3, 8004cc8 <_fflush_r+0x10>
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	b118      	cbz	r0, 8004cd2 <_fflush_r+0x1a>
 8004cca:	6983      	ldr	r3, [r0, #24]
 8004ccc:	b90b      	cbnz	r3, 8004cd2 <_fflush_r+0x1a>
 8004cce:	f000 f887 	bl	8004de0 <__sinit>
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <_fflush_r+0x6c>)
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	d11b      	bne.n	8004d10 <_fflush_r+0x58>
 8004cd8:	686c      	ldr	r4, [r5, #4]
 8004cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0ef      	beq.n	8004cc2 <_fflush_r+0xa>
 8004ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ce4:	07d0      	lsls	r0, r2, #31
 8004ce6:	d404      	bmi.n	8004cf2 <_fflush_r+0x3a>
 8004ce8:	0599      	lsls	r1, r3, #22
 8004cea:	d402      	bmi.n	8004cf2 <_fflush_r+0x3a>
 8004cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cee:	f000 f91a 	bl	8004f26 <__retarget_lock_acquire_recursive>
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	f7ff ff5d 	bl	8004bb4 <__sflush_r>
 8004cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	07da      	lsls	r2, r3, #31
 8004d00:	d4e0      	bmi.n	8004cc4 <_fflush_r+0xc>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	059b      	lsls	r3, r3, #22
 8004d06:	d4dd      	bmi.n	8004cc4 <_fflush_r+0xc>
 8004d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d0a:	f000 f90d 	bl	8004f28 <__retarget_lock_release_recursive>
 8004d0e:	e7d9      	b.n	8004cc4 <_fflush_r+0xc>
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <_fflush_r+0x70>)
 8004d12:	429c      	cmp	r4, r3
 8004d14:	d101      	bne.n	8004d1a <_fflush_r+0x62>
 8004d16:	68ac      	ldr	r4, [r5, #8]
 8004d18:	e7df      	b.n	8004cda <_fflush_r+0x22>
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <_fflush_r+0x74>)
 8004d1c:	429c      	cmp	r4, r3
 8004d1e:	bf08      	it	eq
 8004d20:	68ec      	ldreq	r4, [r5, #12]
 8004d22:	e7da      	b.n	8004cda <_fflush_r+0x22>
 8004d24:	080060f0 	.word	0x080060f0
 8004d28:	08006110 	.word	0x08006110
 8004d2c:	080060d0 	.word	0x080060d0

08004d30 <std>:
 8004d30:	2300      	movs	r3, #0
 8004d32:	b510      	push	{r4, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	e9c0 3300 	strd	r3, r3, [r0]
 8004d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d3e:	6083      	str	r3, [r0, #8]
 8004d40:	8181      	strh	r1, [r0, #12]
 8004d42:	6643      	str	r3, [r0, #100]	; 0x64
 8004d44:	81c2      	strh	r2, [r0, #14]
 8004d46:	6183      	str	r3, [r0, #24]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	305c      	adds	r0, #92	; 0x5c
 8004d4e:	f7fe faff 	bl	8003350 <memset>
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <std+0x38>)
 8004d54:	6224      	str	r4, [r4, #32]
 8004d56:	6263      	str	r3, [r4, #36]	; 0x24
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <std+0x3c>)
 8004d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <std+0x40>)
 8004d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <std+0x44>)
 8004d62:	6323      	str	r3, [r4, #48]	; 0x30
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	08005bf1 	.word	0x08005bf1
 8004d6c:	08005c13 	.word	0x08005c13
 8004d70:	08005c4b 	.word	0x08005c4b
 8004d74:	08005c6f 	.word	0x08005c6f

08004d78 <_cleanup_r>:
 8004d78:	4901      	ldr	r1, [pc, #4]	; (8004d80 <_cleanup_r+0x8>)
 8004d7a:	f000 b8af 	b.w	8004edc <_fwalk_reent>
 8004d7e:	bf00      	nop
 8004d80:	08004cb9 	.word	0x08004cb9

08004d84 <__sfmoreglue>:
 8004d84:	2268      	movs	r2, #104	; 0x68
 8004d86:	b570      	push	{r4, r5, r6, lr}
 8004d88:	1e4d      	subs	r5, r1, #1
 8004d8a:	4355      	muls	r5, r2
 8004d8c:	460e      	mov	r6, r1
 8004d8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d92:	f000 fd51 	bl	8005838 <_malloc_r>
 8004d96:	4604      	mov	r4, r0
 8004d98:	b140      	cbz	r0, 8004dac <__sfmoreglue+0x28>
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8004da0:	300c      	adds	r0, #12
 8004da2:	60a0      	str	r0, [r4, #8]
 8004da4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004da8:	f7fe fad2 	bl	8003350 <memset>
 8004dac:	4620      	mov	r0, r4
 8004dae:	bd70      	pop	{r4, r5, r6, pc}

08004db0 <__sfp_lock_acquire>:
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <__sfp_lock_acquire+0x8>)
 8004db2:	f000 b8b8 	b.w	8004f26 <__retarget_lock_acquire_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000305 	.word	0x20000305

08004dbc <__sfp_lock_release>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	; (8004dc4 <__sfp_lock_release+0x8>)
 8004dbe:	f000 b8b3 	b.w	8004f28 <__retarget_lock_release_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20000305 	.word	0x20000305

08004dc8 <__sinit_lock_acquire>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	; (8004dd0 <__sinit_lock_acquire+0x8>)
 8004dca:	f000 b8ac 	b.w	8004f26 <__retarget_lock_acquire_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20000306 	.word	0x20000306

08004dd4 <__sinit_lock_release>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <__sinit_lock_release+0x8>)
 8004dd6:	f000 b8a7 	b.w	8004f28 <__retarget_lock_release_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20000306 	.word	0x20000306

08004de0 <__sinit>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	4604      	mov	r4, r0
 8004de4:	f7ff fff0 	bl	8004dc8 <__sinit_lock_acquire>
 8004de8:	69a3      	ldr	r3, [r4, #24]
 8004dea:	b11b      	cbz	r3, 8004df4 <__sinit+0x14>
 8004dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df0:	f7ff bff0 	b.w	8004dd4 <__sinit_lock_release>
 8004df4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004df8:	6523      	str	r3, [r4, #80]	; 0x50
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <__sinit+0x68>)
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <__sinit+0x6c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	bf08      	it	eq
 8004e06:	2301      	moveq	r3, #1
 8004e08:	4620      	mov	r0, r4
 8004e0a:	bf08      	it	eq
 8004e0c:	61a3      	streq	r3, [r4, #24]
 8004e0e:	f000 f81f 	bl	8004e50 <__sfp>
 8004e12:	6060      	str	r0, [r4, #4]
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 f81b 	bl	8004e50 <__sfp>
 8004e1a:	60a0      	str	r0, [r4, #8]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 f817 	bl	8004e50 <__sfp>
 8004e22:	2200      	movs	r2, #0
 8004e24:	2104      	movs	r1, #4
 8004e26:	60e0      	str	r0, [r4, #12]
 8004e28:	6860      	ldr	r0, [r4, #4]
 8004e2a:	f7ff ff81 	bl	8004d30 <std>
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2109      	movs	r1, #9
 8004e32:	68a0      	ldr	r0, [r4, #8]
 8004e34:	f7ff ff7c 	bl	8004d30 <std>
 8004e38:	2202      	movs	r2, #2
 8004e3a:	2112      	movs	r1, #18
 8004e3c:	68e0      	ldr	r0, [r4, #12]
 8004e3e:	f7ff ff77 	bl	8004d30 <std>
 8004e42:	2301      	movs	r3, #1
 8004e44:	61a3      	str	r3, [r4, #24]
 8004e46:	e7d1      	b.n	8004dec <__sinit+0xc>
 8004e48:	08006008 	.word	0x08006008
 8004e4c:	08004d79 	.word	0x08004d79

08004e50 <__sfp>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	4607      	mov	r7, r0
 8004e54:	f7ff ffac 	bl	8004db0 <__sfp_lock_acquire>
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <__sfp+0x84>)
 8004e5a:	681e      	ldr	r6, [r3, #0]
 8004e5c:	69b3      	ldr	r3, [r6, #24]
 8004e5e:	b913      	cbnz	r3, 8004e66 <__sfp+0x16>
 8004e60:	4630      	mov	r0, r6
 8004e62:	f7ff ffbd 	bl	8004de0 <__sinit>
 8004e66:	3648      	adds	r6, #72	; 0x48
 8004e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	d503      	bpl.n	8004e78 <__sfp+0x28>
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	b30b      	cbz	r3, 8004eb8 <__sfp+0x68>
 8004e74:	6836      	ldr	r6, [r6, #0]
 8004e76:	e7f7      	b.n	8004e68 <__sfp+0x18>
 8004e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e7c:	b9d5      	cbnz	r5, 8004eb4 <__sfp+0x64>
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <__sfp+0x88>)
 8004e80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e84:	60e3      	str	r3, [r4, #12]
 8004e86:	6665      	str	r5, [r4, #100]	; 0x64
 8004e88:	f000 f84c 	bl	8004f24 <__retarget_lock_init_recursive>
 8004e8c:	f7ff ff96 	bl	8004dbc <__sfp_lock_release>
 8004e90:	2208      	movs	r2, #8
 8004e92:	4629      	mov	r1, r5
 8004e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e9c:	6025      	str	r5, [r4, #0]
 8004e9e:	61a5      	str	r5, [r4, #24]
 8004ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ea4:	f7fe fa54 	bl	8003350 <memset>
 8004ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb4:	3468      	adds	r4, #104	; 0x68
 8004eb6:	e7d9      	b.n	8004e6c <__sfp+0x1c>
 8004eb8:	2104      	movs	r1, #4
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f7ff ff62 	bl	8004d84 <__sfmoreglue>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	6030      	str	r0, [r6, #0]
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d1d5      	bne.n	8004e74 <__sfp+0x24>
 8004ec8:	f7ff ff78 	bl	8004dbc <__sfp_lock_release>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	e7ee      	b.n	8004eb0 <__sfp+0x60>
 8004ed2:	bf00      	nop
 8004ed4:	08006008 	.word	0x08006008
 8004ed8:	ffff0001 	.word	0xffff0001

08004edc <_fwalk_reent>:
 8004edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	4688      	mov	r8, r1
 8004ee4:	2700      	movs	r7, #0
 8004ee6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eee:	f1b9 0901 	subs.w	r9, r9, #1
 8004ef2:	d505      	bpl.n	8004f00 <_fwalk_reent+0x24>
 8004ef4:	6824      	ldr	r4, [r4, #0]
 8004ef6:	2c00      	cmp	r4, #0
 8004ef8:	d1f7      	bne.n	8004eea <_fwalk_reent+0xe>
 8004efa:	4638      	mov	r0, r7
 8004efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f00:	89ab      	ldrh	r3, [r5, #12]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d907      	bls.n	8004f16 <_fwalk_reent+0x3a>
 8004f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	d003      	beq.n	8004f16 <_fwalk_reent+0x3a>
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4630      	mov	r0, r6
 8004f12:	47c0      	blx	r8
 8004f14:	4307      	orrs	r7, r0
 8004f16:	3568      	adds	r5, #104	; 0x68
 8004f18:	e7e9      	b.n	8004eee <_fwalk_reent+0x12>
	...

08004f1c <_localeconv_r>:
 8004f1c:	4800      	ldr	r0, [pc, #0]	; (8004f20 <_localeconv_r+0x4>)
 8004f1e:	4770      	bx	lr
 8004f20:	20000160 	.word	0x20000160

08004f24 <__retarget_lock_init_recursive>:
 8004f24:	4770      	bx	lr

08004f26 <__retarget_lock_acquire_recursive>:
 8004f26:	4770      	bx	lr

08004f28 <__retarget_lock_release_recursive>:
 8004f28:	4770      	bx	lr

08004f2a <__swhatbuf_r>:
 8004f2a:	b570      	push	{r4, r5, r6, lr}
 8004f2c:	460e      	mov	r6, r1
 8004f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f32:	4614      	mov	r4, r2
 8004f34:	2900      	cmp	r1, #0
 8004f36:	461d      	mov	r5, r3
 8004f38:	b096      	sub	sp, #88	; 0x58
 8004f3a:	da08      	bge.n	8004f4e <__swhatbuf_r+0x24>
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f42:	602a      	str	r2, [r5, #0]
 8004f44:	061a      	lsls	r2, r3, #24
 8004f46:	d410      	bmi.n	8004f6a <__swhatbuf_r+0x40>
 8004f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4c:	e00e      	b.n	8004f6c <__swhatbuf_r+0x42>
 8004f4e:	466a      	mov	r2, sp
 8004f50:	f000 fee4 	bl	8005d1c <_fstat_r>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	dbf1      	blt.n	8004f3c <__swhatbuf_r+0x12>
 8004f58:	9a01      	ldr	r2, [sp, #4]
 8004f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f62:	425a      	negs	r2, r3
 8004f64:	415a      	adcs	r2, r3
 8004f66:	602a      	str	r2, [r5, #0]
 8004f68:	e7ee      	b.n	8004f48 <__swhatbuf_r+0x1e>
 8004f6a:	2340      	movs	r3, #64	; 0x40
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	b016      	add	sp, #88	; 0x58
 8004f72:	bd70      	pop	{r4, r5, r6, pc}

08004f74 <__smakebuf_r>:
 8004f74:	898b      	ldrh	r3, [r1, #12]
 8004f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f78:	079d      	lsls	r5, r3, #30
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	d507      	bpl.n	8004f90 <__smakebuf_r+0x1c>
 8004f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	6123      	str	r3, [r4, #16]
 8004f88:	2301      	movs	r3, #1
 8004f8a:	6163      	str	r3, [r4, #20]
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	466a      	mov	r2, sp
 8004f92:	ab01      	add	r3, sp, #4
 8004f94:	f7ff ffc9 	bl	8004f2a <__swhatbuf_r>
 8004f98:	9900      	ldr	r1, [sp, #0]
 8004f9a:	4605      	mov	r5, r0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f000 fc4b 	bl	8005838 <_malloc_r>
 8004fa2:	b948      	cbnz	r0, 8004fb8 <__smakebuf_r+0x44>
 8004fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa8:	059a      	lsls	r2, r3, #22
 8004faa:	d4ef      	bmi.n	8004f8c <__smakebuf_r+0x18>
 8004fac:	f023 0303 	bic.w	r3, r3, #3
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	e7e3      	b.n	8004f80 <__smakebuf_r+0xc>
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <__smakebuf_r+0x7c>)
 8004fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	6020      	str	r0, [r4, #0]
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc4:	81a3      	strh	r3, [r4, #12]
 8004fc6:	9b00      	ldr	r3, [sp, #0]
 8004fc8:	6120      	str	r0, [r4, #16]
 8004fca:	6163      	str	r3, [r4, #20]
 8004fcc:	9b01      	ldr	r3, [sp, #4]
 8004fce:	b15b      	cbz	r3, 8004fe8 <__smakebuf_r+0x74>
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fd6:	f000 feb3 	bl	8005d40 <_isatty_r>
 8004fda:	b128      	cbz	r0, 8004fe8 <__smakebuf_r+0x74>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	89a0      	ldrh	r0, [r4, #12]
 8004fea:	4305      	orrs	r5, r0
 8004fec:	81a5      	strh	r5, [r4, #12]
 8004fee:	e7cd      	b.n	8004f8c <__smakebuf_r+0x18>
 8004ff0:	08004d79 	.word	0x08004d79

08004ff4 <malloc>:
 8004ff4:	4b02      	ldr	r3, [pc, #8]	; (8005000 <malloc+0xc>)
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f000 bc1d 	b.w	8005838 <_malloc_r>
 8004ffe:	bf00      	nop
 8005000:	2000000c 	.word	0x2000000c

08005004 <memchr>:
 8005004:	4603      	mov	r3, r0
 8005006:	b510      	push	{r4, lr}
 8005008:	b2c9      	uxtb	r1, r1
 800500a:	4402      	add	r2, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	4618      	mov	r0, r3
 8005010:	d101      	bne.n	8005016 <memchr+0x12>
 8005012:	2000      	movs	r0, #0
 8005014:	e003      	b.n	800501e <memchr+0x1a>
 8005016:	7804      	ldrb	r4, [r0, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	428c      	cmp	r4, r1
 800501c:	d1f6      	bne.n	800500c <memchr+0x8>
 800501e:	bd10      	pop	{r4, pc}

08005020 <memcpy>:
 8005020:	440a      	add	r2, r1
 8005022:	4291      	cmp	r1, r2
 8005024:	f100 33ff 	add.w	r3, r0, #4294967295
 8005028:	d100      	bne.n	800502c <memcpy+0xc>
 800502a:	4770      	bx	lr
 800502c:	b510      	push	{r4, lr}
 800502e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005032:	4291      	cmp	r1, r2
 8005034:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005038:	d1f9      	bne.n	800502e <memcpy+0xe>
 800503a:	bd10      	pop	{r4, pc}

0800503c <_Balloc>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005040:	4604      	mov	r4, r0
 8005042:	460d      	mov	r5, r1
 8005044:	b976      	cbnz	r6, 8005064 <_Balloc+0x28>
 8005046:	2010      	movs	r0, #16
 8005048:	f7ff ffd4 	bl	8004ff4 <malloc>
 800504c:	4602      	mov	r2, r0
 800504e:	6260      	str	r0, [r4, #36]	; 0x24
 8005050:	b920      	cbnz	r0, 800505c <_Balloc+0x20>
 8005052:	2166      	movs	r1, #102	; 0x66
 8005054:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <_Balloc+0x78>)
 8005056:	4818      	ldr	r0, [pc, #96]	; (80050b8 <_Balloc+0x7c>)
 8005058:	f000 fe20 	bl	8005c9c <__assert_func>
 800505c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005060:	6006      	str	r6, [r0, #0]
 8005062:	60c6      	str	r6, [r0, #12]
 8005064:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005066:	68f3      	ldr	r3, [r6, #12]
 8005068:	b183      	cbz	r3, 800508c <_Balloc+0x50>
 800506a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005072:	b9b8      	cbnz	r0, 80050a4 <_Balloc+0x68>
 8005074:	2101      	movs	r1, #1
 8005076:	fa01 f605 	lsl.w	r6, r1, r5
 800507a:	1d72      	adds	r2, r6, #5
 800507c:	4620      	mov	r0, r4
 800507e:	0092      	lsls	r2, r2, #2
 8005080:	f000 fb5e 	bl	8005740 <_calloc_r>
 8005084:	b160      	cbz	r0, 80050a0 <_Balloc+0x64>
 8005086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800508a:	e00e      	b.n	80050aa <_Balloc+0x6e>
 800508c:	2221      	movs	r2, #33	; 0x21
 800508e:	2104      	movs	r1, #4
 8005090:	4620      	mov	r0, r4
 8005092:	f000 fb55 	bl	8005740 <_calloc_r>
 8005096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005098:	60f0      	str	r0, [r6, #12]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e4      	bne.n	800506a <_Balloc+0x2e>
 80050a0:	2000      	movs	r0, #0
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	6802      	ldr	r2, [r0, #0]
 80050a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050aa:	2300      	movs	r3, #0
 80050ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050b0:	e7f7      	b.n	80050a2 <_Balloc+0x66>
 80050b2:	bf00      	nop
 80050b4:	0800604d 	.word	0x0800604d
 80050b8:	08006130 	.word	0x08006130

080050bc <_Bfree>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b976      	cbnz	r6, 80050e4 <_Bfree+0x28>
 80050c6:	2010      	movs	r0, #16
 80050c8:	f7ff ff94 	bl	8004ff4 <malloc>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6268      	str	r0, [r5, #36]	; 0x24
 80050d0:	b920      	cbnz	r0, 80050dc <_Bfree+0x20>
 80050d2:	218a      	movs	r1, #138	; 0x8a
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <_Bfree+0x3c>)
 80050d6:	4809      	ldr	r0, [pc, #36]	; (80050fc <_Bfree+0x40>)
 80050d8:	f000 fde0 	bl	8005c9c <__assert_func>
 80050dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050e0:	6006      	str	r6, [r0, #0]
 80050e2:	60c6      	str	r6, [r0, #12]
 80050e4:	b13c      	cbz	r4, 80050f6 <_Bfree+0x3a>
 80050e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050f0:	6021      	str	r1, [r4, #0]
 80050f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	0800604d 	.word	0x0800604d
 80050fc:	08006130 	.word	0x08006130

08005100 <__multadd>:
 8005100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005104:	4607      	mov	r7, r0
 8005106:	460c      	mov	r4, r1
 8005108:	461e      	mov	r6, r3
 800510a:	2000      	movs	r0, #0
 800510c:	690d      	ldr	r5, [r1, #16]
 800510e:	f101 0c14 	add.w	ip, r1, #20
 8005112:	f8dc 3000 	ldr.w	r3, [ip]
 8005116:	3001      	adds	r0, #1
 8005118:	b299      	uxth	r1, r3
 800511a:	fb02 6101 	mla	r1, r2, r1, r6
 800511e:	0c1e      	lsrs	r6, r3, #16
 8005120:	0c0b      	lsrs	r3, r1, #16
 8005122:	fb02 3306 	mla	r3, r2, r6, r3
 8005126:	b289      	uxth	r1, r1
 8005128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800512c:	4285      	cmp	r5, r0
 800512e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005132:	f84c 1b04 	str.w	r1, [ip], #4
 8005136:	dcec      	bgt.n	8005112 <__multadd+0x12>
 8005138:	b30e      	cbz	r6, 800517e <__multadd+0x7e>
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	42ab      	cmp	r3, r5
 800513e:	dc19      	bgt.n	8005174 <__multadd+0x74>
 8005140:	6861      	ldr	r1, [r4, #4]
 8005142:	4638      	mov	r0, r7
 8005144:	3101      	adds	r1, #1
 8005146:	f7ff ff79 	bl	800503c <_Balloc>
 800514a:	4680      	mov	r8, r0
 800514c:	b928      	cbnz	r0, 800515a <__multadd+0x5a>
 800514e:	4602      	mov	r2, r0
 8005150:	21b5      	movs	r1, #181	; 0xb5
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <__multadd+0x84>)
 8005154:	480c      	ldr	r0, [pc, #48]	; (8005188 <__multadd+0x88>)
 8005156:	f000 fda1 	bl	8005c9c <__assert_func>
 800515a:	6922      	ldr	r2, [r4, #16]
 800515c:	f104 010c 	add.w	r1, r4, #12
 8005160:	3202      	adds	r2, #2
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	300c      	adds	r0, #12
 8005166:	f7ff ff5b 	bl	8005020 <memcpy>
 800516a:	4621      	mov	r1, r4
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff ffa5 	bl	80050bc <_Bfree>
 8005172:	4644      	mov	r4, r8
 8005174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005178:	3501      	adds	r5, #1
 800517a:	615e      	str	r6, [r3, #20]
 800517c:	6125      	str	r5, [r4, #16]
 800517e:	4620      	mov	r0, r4
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	080060bf 	.word	0x080060bf
 8005188:	08006130 	.word	0x08006130

0800518c <__hi0bits>:
 800518c:	0c02      	lsrs	r2, r0, #16
 800518e:	0412      	lsls	r2, r2, #16
 8005190:	4603      	mov	r3, r0
 8005192:	b9ca      	cbnz	r2, 80051c8 <__hi0bits+0x3c>
 8005194:	0403      	lsls	r3, r0, #16
 8005196:	2010      	movs	r0, #16
 8005198:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800519c:	bf04      	itt	eq
 800519e:	021b      	lsleq	r3, r3, #8
 80051a0:	3008      	addeq	r0, #8
 80051a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80051a6:	bf04      	itt	eq
 80051a8:	011b      	lsleq	r3, r3, #4
 80051aa:	3004      	addeq	r0, #4
 80051ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80051b0:	bf04      	itt	eq
 80051b2:	009b      	lsleq	r3, r3, #2
 80051b4:	3002      	addeq	r0, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	db05      	blt.n	80051c6 <__hi0bits+0x3a>
 80051ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80051be:	f100 0001 	add.w	r0, r0, #1
 80051c2:	bf08      	it	eq
 80051c4:	2020      	moveq	r0, #32
 80051c6:	4770      	bx	lr
 80051c8:	2000      	movs	r0, #0
 80051ca:	e7e5      	b.n	8005198 <__hi0bits+0xc>

080051cc <__lo0bits>:
 80051cc:	6803      	ldr	r3, [r0, #0]
 80051ce:	4602      	mov	r2, r0
 80051d0:	f013 0007 	ands.w	r0, r3, #7
 80051d4:	d00b      	beq.n	80051ee <__lo0bits+0x22>
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	d421      	bmi.n	800521e <__lo0bits+0x52>
 80051da:	0798      	lsls	r0, r3, #30
 80051dc:	bf49      	itett	mi
 80051de:	085b      	lsrmi	r3, r3, #1
 80051e0:	089b      	lsrpl	r3, r3, #2
 80051e2:	2001      	movmi	r0, #1
 80051e4:	6013      	strmi	r3, [r2, #0]
 80051e6:	bf5c      	itt	pl
 80051e8:	2002      	movpl	r0, #2
 80051ea:	6013      	strpl	r3, [r2, #0]
 80051ec:	4770      	bx	lr
 80051ee:	b299      	uxth	r1, r3
 80051f0:	b909      	cbnz	r1, 80051f6 <__lo0bits+0x2a>
 80051f2:	2010      	movs	r0, #16
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	b2d9      	uxtb	r1, r3
 80051f8:	b909      	cbnz	r1, 80051fe <__lo0bits+0x32>
 80051fa:	3008      	adds	r0, #8
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	0719      	lsls	r1, r3, #28
 8005200:	bf04      	itt	eq
 8005202:	091b      	lsreq	r3, r3, #4
 8005204:	3004      	addeq	r0, #4
 8005206:	0799      	lsls	r1, r3, #30
 8005208:	bf04      	itt	eq
 800520a:	089b      	lsreq	r3, r3, #2
 800520c:	3002      	addeq	r0, #2
 800520e:	07d9      	lsls	r1, r3, #31
 8005210:	d403      	bmi.n	800521a <__lo0bits+0x4e>
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	f100 0001 	add.w	r0, r0, #1
 8005218:	d003      	beq.n	8005222 <__lo0bits+0x56>
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4770      	bx	lr
 800521e:	2000      	movs	r0, #0
 8005220:	4770      	bx	lr
 8005222:	2020      	movs	r0, #32
 8005224:	4770      	bx	lr
	...

08005228 <__i2b>:
 8005228:	b510      	push	{r4, lr}
 800522a:	460c      	mov	r4, r1
 800522c:	2101      	movs	r1, #1
 800522e:	f7ff ff05 	bl	800503c <_Balloc>
 8005232:	4602      	mov	r2, r0
 8005234:	b928      	cbnz	r0, 8005242 <__i2b+0x1a>
 8005236:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800523a:	4b04      	ldr	r3, [pc, #16]	; (800524c <__i2b+0x24>)
 800523c:	4804      	ldr	r0, [pc, #16]	; (8005250 <__i2b+0x28>)
 800523e:	f000 fd2d 	bl	8005c9c <__assert_func>
 8005242:	2301      	movs	r3, #1
 8005244:	6144      	str	r4, [r0, #20]
 8005246:	6103      	str	r3, [r0, #16]
 8005248:	bd10      	pop	{r4, pc}
 800524a:	bf00      	nop
 800524c:	080060bf 	.word	0x080060bf
 8005250:	08006130 	.word	0x08006130

08005254 <__multiply>:
 8005254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005258:	4691      	mov	r9, r2
 800525a:	690a      	ldr	r2, [r1, #16]
 800525c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005260:	460c      	mov	r4, r1
 8005262:	429a      	cmp	r2, r3
 8005264:	bfbe      	ittt	lt
 8005266:	460b      	movlt	r3, r1
 8005268:	464c      	movlt	r4, r9
 800526a:	4699      	movlt	r9, r3
 800526c:	6927      	ldr	r7, [r4, #16]
 800526e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005272:	68a3      	ldr	r3, [r4, #8]
 8005274:	6861      	ldr	r1, [r4, #4]
 8005276:	eb07 060a 	add.w	r6, r7, sl
 800527a:	42b3      	cmp	r3, r6
 800527c:	b085      	sub	sp, #20
 800527e:	bfb8      	it	lt
 8005280:	3101      	addlt	r1, #1
 8005282:	f7ff fedb 	bl	800503c <_Balloc>
 8005286:	b930      	cbnz	r0, 8005296 <__multiply+0x42>
 8005288:	4602      	mov	r2, r0
 800528a:	f240 115d 	movw	r1, #349	; 0x15d
 800528e:	4b43      	ldr	r3, [pc, #268]	; (800539c <__multiply+0x148>)
 8005290:	4843      	ldr	r0, [pc, #268]	; (80053a0 <__multiply+0x14c>)
 8005292:	f000 fd03 	bl	8005c9c <__assert_func>
 8005296:	f100 0514 	add.w	r5, r0, #20
 800529a:	462b      	mov	r3, r5
 800529c:	2200      	movs	r2, #0
 800529e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052a2:	4543      	cmp	r3, r8
 80052a4:	d321      	bcc.n	80052ea <__multiply+0x96>
 80052a6:	f104 0314 	add.w	r3, r4, #20
 80052aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052ae:	f109 0314 	add.w	r3, r9, #20
 80052b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052b6:	9202      	str	r2, [sp, #8]
 80052b8:	1b3a      	subs	r2, r7, r4
 80052ba:	3a15      	subs	r2, #21
 80052bc:	f022 0203 	bic.w	r2, r2, #3
 80052c0:	3204      	adds	r2, #4
 80052c2:	f104 0115 	add.w	r1, r4, #21
 80052c6:	428f      	cmp	r7, r1
 80052c8:	bf38      	it	cc
 80052ca:	2204      	movcc	r2, #4
 80052cc:	9201      	str	r2, [sp, #4]
 80052ce:	9a02      	ldr	r2, [sp, #8]
 80052d0:	9303      	str	r3, [sp, #12]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d80c      	bhi.n	80052f0 <__multiply+0x9c>
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	dd03      	ble.n	80052e2 <__multiply+0x8e>
 80052da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d059      	beq.n	8005396 <__multiply+0x142>
 80052e2:	6106      	str	r6, [r0, #16]
 80052e4:	b005      	add	sp, #20
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ea:	f843 2b04 	str.w	r2, [r3], #4
 80052ee:	e7d8      	b.n	80052a2 <__multiply+0x4e>
 80052f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80052f4:	f1ba 0f00 	cmp.w	sl, #0
 80052f8:	d023      	beq.n	8005342 <__multiply+0xee>
 80052fa:	46a9      	mov	r9, r5
 80052fc:	f04f 0c00 	mov.w	ip, #0
 8005300:	f104 0e14 	add.w	lr, r4, #20
 8005304:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005308:	f8d9 1000 	ldr.w	r1, [r9]
 800530c:	fa1f fb82 	uxth.w	fp, r2
 8005310:	b289      	uxth	r1, r1
 8005312:	fb0a 110b 	mla	r1, sl, fp, r1
 8005316:	4461      	add	r1, ip
 8005318:	f8d9 c000 	ldr.w	ip, [r9]
 800531c:	0c12      	lsrs	r2, r2, #16
 800531e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005322:	fb0a c202 	mla	r2, sl, r2, ip
 8005326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800532a:	b289      	uxth	r1, r1
 800532c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005330:	4577      	cmp	r7, lr
 8005332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005336:	f849 1b04 	str.w	r1, [r9], #4
 800533a:	d8e3      	bhi.n	8005304 <__multiply+0xb0>
 800533c:	9a01      	ldr	r2, [sp, #4]
 800533e:	f845 c002 	str.w	ip, [r5, r2]
 8005342:	9a03      	ldr	r2, [sp, #12]
 8005344:	3304      	adds	r3, #4
 8005346:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800534a:	f1b9 0f00 	cmp.w	r9, #0
 800534e:	d020      	beq.n	8005392 <__multiply+0x13e>
 8005350:	46ae      	mov	lr, r5
 8005352:	f04f 0a00 	mov.w	sl, #0
 8005356:	6829      	ldr	r1, [r5, #0]
 8005358:	f104 0c14 	add.w	ip, r4, #20
 800535c:	f8bc b000 	ldrh.w	fp, [ip]
 8005360:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005364:	b289      	uxth	r1, r1
 8005366:	fb09 220b 	mla	r2, r9, fp, r2
 800536a:	4492      	add	sl, r2
 800536c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005370:	f84e 1b04 	str.w	r1, [lr], #4
 8005374:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005378:	f8be 1000 	ldrh.w	r1, [lr]
 800537c:	0c12      	lsrs	r2, r2, #16
 800537e:	fb09 1102 	mla	r1, r9, r2, r1
 8005382:	4567      	cmp	r7, ip
 8005384:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005388:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800538c:	d8e6      	bhi.n	800535c <__multiply+0x108>
 800538e:	9a01      	ldr	r2, [sp, #4]
 8005390:	50a9      	str	r1, [r5, r2]
 8005392:	3504      	adds	r5, #4
 8005394:	e79b      	b.n	80052ce <__multiply+0x7a>
 8005396:	3e01      	subs	r6, #1
 8005398:	e79d      	b.n	80052d6 <__multiply+0x82>
 800539a:	bf00      	nop
 800539c:	080060bf 	.word	0x080060bf
 80053a0:	08006130 	.word	0x08006130

080053a4 <__pow5mult>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	4615      	mov	r5, r2
 80053aa:	f012 0203 	ands.w	r2, r2, #3
 80053ae:	4606      	mov	r6, r0
 80053b0:	460f      	mov	r7, r1
 80053b2:	d007      	beq.n	80053c4 <__pow5mult+0x20>
 80053b4:	4c25      	ldr	r4, [pc, #148]	; (800544c <__pow5mult+0xa8>)
 80053b6:	3a01      	subs	r2, #1
 80053b8:	2300      	movs	r3, #0
 80053ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053be:	f7ff fe9f 	bl	8005100 <__multadd>
 80053c2:	4607      	mov	r7, r0
 80053c4:	10ad      	asrs	r5, r5, #2
 80053c6:	d03d      	beq.n	8005444 <__pow5mult+0xa0>
 80053c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053ca:	b97c      	cbnz	r4, 80053ec <__pow5mult+0x48>
 80053cc:	2010      	movs	r0, #16
 80053ce:	f7ff fe11 	bl	8004ff4 <malloc>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6270      	str	r0, [r6, #36]	; 0x24
 80053d6:	b928      	cbnz	r0, 80053e4 <__pow5mult+0x40>
 80053d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80053dc:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <__pow5mult+0xac>)
 80053de:	481d      	ldr	r0, [pc, #116]	; (8005454 <__pow5mult+0xb0>)
 80053e0:	f000 fc5c 	bl	8005c9c <__assert_func>
 80053e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053e8:	6004      	str	r4, [r0, #0]
 80053ea:	60c4      	str	r4, [r0, #12]
 80053ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053f4:	b94c      	cbnz	r4, 800540a <__pow5mult+0x66>
 80053f6:	f240 2171 	movw	r1, #625	; 0x271
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ff14 	bl	8005228 <__i2b>
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	f8c8 0008 	str.w	r0, [r8, #8]
 8005408:	6003      	str	r3, [r0, #0]
 800540a:	f04f 0900 	mov.w	r9, #0
 800540e:	07eb      	lsls	r3, r5, #31
 8005410:	d50a      	bpl.n	8005428 <__pow5mult+0x84>
 8005412:	4639      	mov	r1, r7
 8005414:	4622      	mov	r2, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff ff1c 	bl	8005254 <__multiply>
 800541c:	4680      	mov	r8, r0
 800541e:	4639      	mov	r1, r7
 8005420:	4630      	mov	r0, r6
 8005422:	f7ff fe4b 	bl	80050bc <_Bfree>
 8005426:	4647      	mov	r7, r8
 8005428:	106d      	asrs	r5, r5, #1
 800542a:	d00b      	beq.n	8005444 <__pow5mult+0xa0>
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	b938      	cbnz	r0, 8005440 <__pow5mult+0x9c>
 8005430:	4622      	mov	r2, r4
 8005432:	4621      	mov	r1, r4
 8005434:	4630      	mov	r0, r6
 8005436:	f7ff ff0d 	bl	8005254 <__multiply>
 800543a:	6020      	str	r0, [r4, #0]
 800543c:	f8c0 9000 	str.w	r9, [r0]
 8005440:	4604      	mov	r4, r0
 8005442:	e7e4      	b.n	800540e <__pow5mult+0x6a>
 8005444:	4638      	mov	r0, r7
 8005446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544a:	bf00      	nop
 800544c:	08006280 	.word	0x08006280
 8005450:	0800604d 	.word	0x0800604d
 8005454:	08006130 	.word	0x08006130

08005458 <__lshift>:
 8005458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	460c      	mov	r4, r1
 800545e:	4607      	mov	r7, r0
 8005460:	4691      	mov	r9, r2
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	6849      	ldr	r1, [r1, #4]
 8005466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800546a:	68a3      	ldr	r3, [r4, #8]
 800546c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005470:	f108 0601 	add.w	r6, r8, #1
 8005474:	42b3      	cmp	r3, r6
 8005476:	db0b      	blt.n	8005490 <__lshift+0x38>
 8005478:	4638      	mov	r0, r7
 800547a:	f7ff fddf 	bl	800503c <_Balloc>
 800547e:	4605      	mov	r5, r0
 8005480:	b948      	cbnz	r0, 8005496 <__lshift+0x3e>
 8005482:	4602      	mov	r2, r0
 8005484:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005488:	4b29      	ldr	r3, [pc, #164]	; (8005530 <__lshift+0xd8>)
 800548a:	482a      	ldr	r0, [pc, #168]	; (8005534 <__lshift+0xdc>)
 800548c:	f000 fc06 	bl	8005c9c <__assert_func>
 8005490:	3101      	adds	r1, #1
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	e7ee      	b.n	8005474 <__lshift+0x1c>
 8005496:	2300      	movs	r3, #0
 8005498:	f100 0114 	add.w	r1, r0, #20
 800549c:	f100 0210 	add.w	r2, r0, #16
 80054a0:	4618      	mov	r0, r3
 80054a2:	4553      	cmp	r3, sl
 80054a4:	db37      	blt.n	8005516 <__lshift+0xbe>
 80054a6:	6920      	ldr	r0, [r4, #16]
 80054a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054ac:	f104 0314 	add.w	r3, r4, #20
 80054b0:	f019 091f 	ands.w	r9, r9, #31
 80054b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054bc:	d02f      	beq.n	800551e <__lshift+0xc6>
 80054be:	468a      	mov	sl, r1
 80054c0:	f04f 0c00 	mov.w	ip, #0
 80054c4:	f1c9 0e20 	rsb	lr, r9, #32
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	fa02 f209 	lsl.w	r2, r2, r9
 80054ce:	ea42 020c 	orr.w	r2, r2, ip
 80054d2:	f84a 2b04 	str.w	r2, [sl], #4
 80054d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054da:	4298      	cmp	r0, r3
 80054dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80054e0:	d8f2      	bhi.n	80054c8 <__lshift+0x70>
 80054e2:	1b03      	subs	r3, r0, r4
 80054e4:	3b15      	subs	r3, #21
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	3304      	adds	r3, #4
 80054ec:	f104 0215 	add.w	r2, r4, #21
 80054f0:	4290      	cmp	r0, r2
 80054f2:	bf38      	it	cc
 80054f4:	2304      	movcc	r3, #4
 80054f6:	f841 c003 	str.w	ip, [r1, r3]
 80054fa:	f1bc 0f00 	cmp.w	ip, #0
 80054fe:	d001      	beq.n	8005504 <__lshift+0xac>
 8005500:	f108 0602 	add.w	r6, r8, #2
 8005504:	3e01      	subs	r6, #1
 8005506:	4638      	mov	r0, r7
 8005508:	4621      	mov	r1, r4
 800550a:	612e      	str	r6, [r5, #16]
 800550c:	f7ff fdd6 	bl	80050bc <_Bfree>
 8005510:	4628      	mov	r0, r5
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	f842 0f04 	str.w	r0, [r2, #4]!
 800551a:	3301      	adds	r3, #1
 800551c:	e7c1      	b.n	80054a2 <__lshift+0x4a>
 800551e:	3904      	subs	r1, #4
 8005520:	f853 2b04 	ldr.w	r2, [r3], #4
 8005524:	4298      	cmp	r0, r3
 8005526:	f841 2f04 	str.w	r2, [r1, #4]!
 800552a:	d8f9      	bhi.n	8005520 <__lshift+0xc8>
 800552c:	e7ea      	b.n	8005504 <__lshift+0xac>
 800552e:	bf00      	nop
 8005530:	080060bf 	.word	0x080060bf
 8005534:	08006130 	.word	0x08006130

08005538 <__mcmp>:
 8005538:	4603      	mov	r3, r0
 800553a:	690a      	ldr	r2, [r1, #16]
 800553c:	6900      	ldr	r0, [r0, #16]
 800553e:	b530      	push	{r4, r5, lr}
 8005540:	1a80      	subs	r0, r0, r2
 8005542:	d10d      	bne.n	8005560 <__mcmp+0x28>
 8005544:	3314      	adds	r3, #20
 8005546:	3114      	adds	r1, #20
 8005548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800554c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005558:	4295      	cmp	r5, r2
 800555a:	d002      	beq.n	8005562 <__mcmp+0x2a>
 800555c:	d304      	bcc.n	8005568 <__mcmp+0x30>
 800555e:	2001      	movs	r0, #1
 8005560:	bd30      	pop	{r4, r5, pc}
 8005562:	42a3      	cmp	r3, r4
 8005564:	d3f4      	bcc.n	8005550 <__mcmp+0x18>
 8005566:	e7fb      	b.n	8005560 <__mcmp+0x28>
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	e7f8      	b.n	8005560 <__mcmp+0x28>
	...

08005570 <__mdiff>:
 8005570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	460d      	mov	r5, r1
 8005576:	4607      	mov	r7, r0
 8005578:	4611      	mov	r1, r2
 800557a:	4628      	mov	r0, r5
 800557c:	4614      	mov	r4, r2
 800557e:	f7ff ffdb 	bl	8005538 <__mcmp>
 8005582:	1e06      	subs	r6, r0, #0
 8005584:	d111      	bne.n	80055aa <__mdiff+0x3a>
 8005586:	4631      	mov	r1, r6
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff fd57 	bl	800503c <_Balloc>
 800558e:	4602      	mov	r2, r0
 8005590:	b928      	cbnz	r0, 800559e <__mdiff+0x2e>
 8005592:	f240 2132 	movw	r1, #562	; 0x232
 8005596:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <__mdiff+0x110>)
 8005598:	483a      	ldr	r0, [pc, #232]	; (8005684 <__mdiff+0x114>)
 800559a:	f000 fb7f 	bl	8005c9c <__assert_func>
 800559e:	2301      	movs	r3, #1
 80055a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80055a4:	4610      	mov	r0, r2
 80055a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055aa:	bfa4      	itt	ge
 80055ac:	4623      	movge	r3, r4
 80055ae:	462c      	movge	r4, r5
 80055b0:	4638      	mov	r0, r7
 80055b2:	6861      	ldr	r1, [r4, #4]
 80055b4:	bfa6      	itte	ge
 80055b6:	461d      	movge	r5, r3
 80055b8:	2600      	movge	r6, #0
 80055ba:	2601      	movlt	r6, #1
 80055bc:	f7ff fd3e 	bl	800503c <_Balloc>
 80055c0:	4602      	mov	r2, r0
 80055c2:	b918      	cbnz	r0, 80055cc <__mdiff+0x5c>
 80055c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80055c8:	4b2d      	ldr	r3, [pc, #180]	; (8005680 <__mdiff+0x110>)
 80055ca:	e7e5      	b.n	8005598 <__mdiff+0x28>
 80055cc:	f102 0814 	add.w	r8, r2, #20
 80055d0:	46c2      	mov	sl, r8
 80055d2:	f04f 0c00 	mov.w	ip, #0
 80055d6:	6927      	ldr	r7, [r4, #16]
 80055d8:	60c6      	str	r6, [r0, #12]
 80055da:	692e      	ldr	r6, [r5, #16]
 80055dc:	f104 0014 	add.w	r0, r4, #20
 80055e0:	f105 0914 	add.w	r9, r5, #20
 80055e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80055e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055ec:	3410      	adds	r4, #16
 80055ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80055f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80055f6:	fa1f f18b 	uxth.w	r1, fp
 80055fa:	448c      	add	ip, r1
 80055fc:	b299      	uxth	r1, r3
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	ebac 0101 	sub.w	r1, ip, r1
 8005604:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005608:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800560c:	b289      	uxth	r1, r1
 800560e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005612:	454e      	cmp	r6, r9
 8005614:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005618:	f84a 3b04 	str.w	r3, [sl], #4
 800561c:	d8e7      	bhi.n	80055ee <__mdiff+0x7e>
 800561e:	1b73      	subs	r3, r6, r5
 8005620:	3b15      	subs	r3, #21
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	3515      	adds	r5, #21
 8005628:	3304      	adds	r3, #4
 800562a:	42ae      	cmp	r6, r5
 800562c:	bf38      	it	cc
 800562e:	2304      	movcc	r3, #4
 8005630:	4418      	add	r0, r3
 8005632:	4443      	add	r3, r8
 8005634:	461e      	mov	r6, r3
 8005636:	4605      	mov	r5, r0
 8005638:	4575      	cmp	r5, lr
 800563a:	d30e      	bcc.n	800565a <__mdiff+0xea>
 800563c:	f10e 0103 	add.w	r1, lr, #3
 8005640:	1a09      	subs	r1, r1, r0
 8005642:	f021 0103 	bic.w	r1, r1, #3
 8005646:	3803      	subs	r0, #3
 8005648:	4586      	cmp	lr, r0
 800564a:	bf38      	it	cc
 800564c:	2100      	movcc	r1, #0
 800564e:	4419      	add	r1, r3
 8005650:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005654:	b18b      	cbz	r3, 800567a <__mdiff+0x10a>
 8005656:	6117      	str	r7, [r2, #16]
 8005658:	e7a4      	b.n	80055a4 <__mdiff+0x34>
 800565a:	f855 8b04 	ldr.w	r8, [r5], #4
 800565e:	fa1f f188 	uxth.w	r1, r8
 8005662:	4461      	add	r1, ip
 8005664:	140c      	asrs	r4, r1, #16
 8005666:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800566a:	b289      	uxth	r1, r1
 800566c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005670:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005674:	f846 1b04 	str.w	r1, [r6], #4
 8005678:	e7de      	b.n	8005638 <__mdiff+0xc8>
 800567a:	3f01      	subs	r7, #1
 800567c:	e7e8      	b.n	8005650 <__mdiff+0xe0>
 800567e:	bf00      	nop
 8005680:	080060bf 	.word	0x080060bf
 8005684:	08006130 	.word	0x08006130

08005688 <__d2b>:
 8005688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800568c:	2101      	movs	r1, #1
 800568e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005692:	4690      	mov	r8, r2
 8005694:	461d      	mov	r5, r3
 8005696:	f7ff fcd1 	bl	800503c <_Balloc>
 800569a:	4604      	mov	r4, r0
 800569c:	b930      	cbnz	r0, 80056ac <__d2b+0x24>
 800569e:	4602      	mov	r2, r0
 80056a0:	f240 310a 	movw	r1, #778	; 0x30a
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <__d2b+0xb0>)
 80056a6:	4825      	ldr	r0, [pc, #148]	; (800573c <__d2b+0xb4>)
 80056a8:	f000 faf8 	bl	8005c9c <__assert_func>
 80056ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80056b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80056b4:	bb2d      	cbnz	r5, 8005702 <__d2b+0x7a>
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	f1b8 0300 	subs.w	r3, r8, #0
 80056bc:	d026      	beq.n	800570c <__d2b+0x84>
 80056be:	4668      	mov	r0, sp
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	f7ff fd83 	bl	80051cc <__lo0bits>
 80056c6:	9900      	ldr	r1, [sp, #0]
 80056c8:	b1f0      	cbz	r0, 8005708 <__d2b+0x80>
 80056ca:	9a01      	ldr	r2, [sp, #4]
 80056cc:	f1c0 0320 	rsb	r3, r0, #32
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	430b      	orrs	r3, r1
 80056d6:	40c2      	lsrs	r2, r0
 80056d8:	6163      	str	r3, [r4, #20]
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bf14      	ite	ne
 80056e2:	2102      	movne	r1, #2
 80056e4:	2101      	moveq	r1, #1
 80056e6:	61a3      	str	r3, [r4, #24]
 80056e8:	6121      	str	r1, [r4, #16]
 80056ea:	b1c5      	cbz	r5, 800571e <__d2b+0x96>
 80056ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80056f0:	4405      	add	r5, r0
 80056f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056f6:	603d      	str	r5, [r7, #0]
 80056f8:	6030      	str	r0, [r6, #0]
 80056fa:	4620      	mov	r0, r4
 80056fc:	b002      	add	sp, #8
 80056fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005706:	e7d6      	b.n	80056b6 <__d2b+0x2e>
 8005708:	6161      	str	r1, [r4, #20]
 800570a:	e7e7      	b.n	80056dc <__d2b+0x54>
 800570c:	a801      	add	r0, sp, #4
 800570e:	f7ff fd5d 	bl	80051cc <__lo0bits>
 8005712:	2101      	movs	r1, #1
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	6121      	str	r1, [r4, #16]
 8005718:	6163      	str	r3, [r4, #20]
 800571a:	3020      	adds	r0, #32
 800571c:	e7e5      	b.n	80056ea <__d2b+0x62>
 800571e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005722:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005726:	6038      	str	r0, [r7, #0]
 8005728:	6918      	ldr	r0, [r3, #16]
 800572a:	f7ff fd2f 	bl	800518c <__hi0bits>
 800572e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005732:	6031      	str	r1, [r6, #0]
 8005734:	e7e1      	b.n	80056fa <__d2b+0x72>
 8005736:	bf00      	nop
 8005738:	080060bf 	.word	0x080060bf
 800573c:	08006130 	.word	0x08006130

08005740 <_calloc_r>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	fba1 5402 	umull	r5, r4, r1, r2
 8005746:	b934      	cbnz	r4, 8005756 <_calloc_r+0x16>
 8005748:	4629      	mov	r1, r5
 800574a:	f000 f875 	bl	8005838 <_malloc_r>
 800574e:	4606      	mov	r6, r0
 8005750:	b928      	cbnz	r0, 800575e <_calloc_r+0x1e>
 8005752:	4630      	mov	r0, r6
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	220c      	movs	r2, #12
 8005758:	2600      	movs	r6, #0
 800575a:	6002      	str	r2, [r0, #0]
 800575c:	e7f9      	b.n	8005752 <_calloc_r+0x12>
 800575e:	462a      	mov	r2, r5
 8005760:	4621      	mov	r1, r4
 8005762:	f7fd fdf5 	bl	8003350 <memset>
 8005766:	e7f4      	b.n	8005752 <_calloc_r+0x12>

08005768 <_free_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4605      	mov	r5, r0
 800576c:	2900      	cmp	r1, #0
 800576e:	d040      	beq.n	80057f2 <_free_r+0x8a>
 8005770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005774:	1f0c      	subs	r4, r1, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfb8      	it	lt
 800577a:	18e4      	addlt	r4, r4, r3
 800577c:	f000 fb14 	bl	8005da8 <__malloc_lock>
 8005780:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <_free_r+0x8c>)
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	b933      	cbnz	r3, 8005794 <_free_r+0x2c>
 8005786:	6063      	str	r3, [r4, #4]
 8005788:	6014      	str	r4, [r2, #0]
 800578a:	4628      	mov	r0, r5
 800578c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005790:	f000 bb10 	b.w	8005db4 <__malloc_unlock>
 8005794:	42a3      	cmp	r3, r4
 8005796:	d908      	bls.n	80057aa <_free_r+0x42>
 8005798:	6820      	ldr	r0, [r4, #0]
 800579a:	1821      	adds	r1, r4, r0
 800579c:	428b      	cmp	r3, r1
 800579e:	bf01      	itttt	eq
 80057a0:	6819      	ldreq	r1, [r3, #0]
 80057a2:	685b      	ldreq	r3, [r3, #4]
 80057a4:	1809      	addeq	r1, r1, r0
 80057a6:	6021      	streq	r1, [r4, #0]
 80057a8:	e7ed      	b.n	8005786 <_free_r+0x1e>
 80057aa:	461a      	mov	r2, r3
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	b10b      	cbz	r3, 80057b4 <_free_r+0x4c>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d9fa      	bls.n	80057aa <_free_r+0x42>
 80057b4:	6811      	ldr	r1, [r2, #0]
 80057b6:	1850      	adds	r0, r2, r1
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d10b      	bne.n	80057d4 <_free_r+0x6c>
 80057bc:	6820      	ldr	r0, [r4, #0]
 80057be:	4401      	add	r1, r0
 80057c0:	1850      	adds	r0, r2, r1
 80057c2:	4283      	cmp	r3, r0
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	d1e0      	bne.n	800578a <_free_r+0x22>
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4401      	add	r1, r0
 80057ce:	6011      	str	r1, [r2, #0]
 80057d0:	6053      	str	r3, [r2, #4]
 80057d2:	e7da      	b.n	800578a <_free_r+0x22>
 80057d4:	d902      	bls.n	80057dc <_free_r+0x74>
 80057d6:	230c      	movs	r3, #12
 80057d8:	602b      	str	r3, [r5, #0]
 80057da:	e7d6      	b.n	800578a <_free_r+0x22>
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	1821      	adds	r1, r4, r0
 80057e0:	428b      	cmp	r3, r1
 80057e2:	bf01      	itttt	eq
 80057e4:	6819      	ldreq	r1, [r3, #0]
 80057e6:	685b      	ldreq	r3, [r3, #4]
 80057e8:	1809      	addeq	r1, r1, r0
 80057ea:	6021      	streq	r1, [r4, #0]
 80057ec:	6063      	str	r3, [r4, #4]
 80057ee:	6054      	str	r4, [r2, #4]
 80057f0:	e7cb      	b.n	800578a <_free_r+0x22>
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	20000308 	.word	0x20000308

080057f8 <sbrk_aligned>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4e0e      	ldr	r6, [pc, #56]	; (8005834 <sbrk_aligned+0x3c>)
 80057fc:	460c      	mov	r4, r1
 80057fe:	6831      	ldr	r1, [r6, #0]
 8005800:	4605      	mov	r5, r0
 8005802:	b911      	cbnz	r1, 800580a <sbrk_aligned+0x12>
 8005804:	f000 f9e4 	bl	8005bd0 <_sbrk_r>
 8005808:	6030      	str	r0, [r6, #0]
 800580a:	4621      	mov	r1, r4
 800580c:	4628      	mov	r0, r5
 800580e:	f000 f9df 	bl	8005bd0 <_sbrk_r>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d00a      	beq.n	800582c <sbrk_aligned+0x34>
 8005816:	1cc4      	adds	r4, r0, #3
 8005818:	f024 0403 	bic.w	r4, r4, #3
 800581c:	42a0      	cmp	r0, r4
 800581e:	d007      	beq.n	8005830 <sbrk_aligned+0x38>
 8005820:	1a21      	subs	r1, r4, r0
 8005822:	4628      	mov	r0, r5
 8005824:	f000 f9d4 	bl	8005bd0 <_sbrk_r>
 8005828:	3001      	adds	r0, #1
 800582a:	d101      	bne.n	8005830 <sbrk_aligned+0x38>
 800582c:	f04f 34ff 	mov.w	r4, #4294967295
 8005830:	4620      	mov	r0, r4
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	2000030c 	.word	0x2000030c

08005838 <_malloc_r>:
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583c:	1ccd      	adds	r5, r1, #3
 800583e:	f025 0503 	bic.w	r5, r5, #3
 8005842:	3508      	adds	r5, #8
 8005844:	2d0c      	cmp	r5, #12
 8005846:	bf38      	it	cc
 8005848:	250c      	movcc	r5, #12
 800584a:	2d00      	cmp	r5, #0
 800584c:	4607      	mov	r7, r0
 800584e:	db01      	blt.n	8005854 <_malloc_r+0x1c>
 8005850:	42a9      	cmp	r1, r5
 8005852:	d905      	bls.n	8005860 <_malloc_r+0x28>
 8005854:	230c      	movs	r3, #12
 8005856:	2600      	movs	r6, #0
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4630      	mov	r0, r6
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005860:	4e2e      	ldr	r6, [pc, #184]	; (800591c <_malloc_r+0xe4>)
 8005862:	f000 faa1 	bl	8005da8 <__malloc_lock>
 8005866:	6833      	ldr	r3, [r6, #0]
 8005868:	461c      	mov	r4, r3
 800586a:	bb34      	cbnz	r4, 80058ba <_malloc_r+0x82>
 800586c:	4629      	mov	r1, r5
 800586e:	4638      	mov	r0, r7
 8005870:	f7ff ffc2 	bl	80057f8 <sbrk_aligned>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	4604      	mov	r4, r0
 8005878:	d14d      	bne.n	8005916 <_malloc_r+0xde>
 800587a:	6834      	ldr	r4, [r6, #0]
 800587c:	4626      	mov	r6, r4
 800587e:	2e00      	cmp	r6, #0
 8005880:	d140      	bne.n	8005904 <_malloc_r+0xcc>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	4631      	mov	r1, r6
 8005886:	4638      	mov	r0, r7
 8005888:	eb04 0803 	add.w	r8, r4, r3
 800588c:	f000 f9a0 	bl	8005bd0 <_sbrk_r>
 8005890:	4580      	cmp	r8, r0
 8005892:	d13a      	bne.n	800590a <_malloc_r+0xd2>
 8005894:	6821      	ldr	r1, [r4, #0]
 8005896:	3503      	adds	r5, #3
 8005898:	1a6d      	subs	r5, r5, r1
 800589a:	f025 0503 	bic.w	r5, r5, #3
 800589e:	3508      	adds	r5, #8
 80058a0:	2d0c      	cmp	r5, #12
 80058a2:	bf38      	it	cc
 80058a4:	250c      	movcc	r5, #12
 80058a6:	4638      	mov	r0, r7
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7ff ffa5 	bl	80057f8 <sbrk_aligned>
 80058ae:	3001      	adds	r0, #1
 80058b0:	d02b      	beq.n	800590a <_malloc_r+0xd2>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	442b      	add	r3, r5
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	e00e      	b.n	80058d8 <_malloc_r+0xa0>
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	1b52      	subs	r2, r2, r5
 80058be:	d41e      	bmi.n	80058fe <_malloc_r+0xc6>
 80058c0:	2a0b      	cmp	r2, #11
 80058c2:	d916      	bls.n	80058f2 <_malloc_r+0xba>
 80058c4:	1961      	adds	r1, r4, r5
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	6025      	str	r5, [r4, #0]
 80058ca:	bf18      	it	ne
 80058cc:	6059      	strne	r1, [r3, #4]
 80058ce:	6863      	ldr	r3, [r4, #4]
 80058d0:	bf08      	it	eq
 80058d2:	6031      	streq	r1, [r6, #0]
 80058d4:	5162      	str	r2, [r4, r5]
 80058d6:	604b      	str	r3, [r1, #4]
 80058d8:	4638      	mov	r0, r7
 80058da:	f104 060b 	add.w	r6, r4, #11
 80058de:	f000 fa69 	bl	8005db4 <__malloc_unlock>
 80058e2:	f026 0607 	bic.w	r6, r6, #7
 80058e6:	1d23      	adds	r3, r4, #4
 80058e8:	1af2      	subs	r2, r6, r3
 80058ea:	d0b6      	beq.n	800585a <_malloc_r+0x22>
 80058ec:	1b9b      	subs	r3, r3, r6
 80058ee:	50a3      	str	r3, [r4, r2]
 80058f0:	e7b3      	b.n	800585a <_malloc_r+0x22>
 80058f2:	6862      	ldr	r2, [r4, #4]
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	bf0c      	ite	eq
 80058f8:	6032      	streq	r2, [r6, #0]
 80058fa:	605a      	strne	r2, [r3, #4]
 80058fc:	e7ec      	b.n	80058d8 <_malloc_r+0xa0>
 80058fe:	4623      	mov	r3, r4
 8005900:	6864      	ldr	r4, [r4, #4]
 8005902:	e7b2      	b.n	800586a <_malloc_r+0x32>
 8005904:	4634      	mov	r4, r6
 8005906:	6876      	ldr	r6, [r6, #4]
 8005908:	e7b9      	b.n	800587e <_malloc_r+0x46>
 800590a:	230c      	movs	r3, #12
 800590c:	4638      	mov	r0, r7
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	f000 fa50 	bl	8005db4 <__malloc_unlock>
 8005914:	e7a1      	b.n	800585a <_malloc_r+0x22>
 8005916:	6025      	str	r5, [r4, #0]
 8005918:	e7de      	b.n	80058d8 <_malloc_r+0xa0>
 800591a:	bf00      	nop
 800591c:	20000308 	.word	0x20000308

08005920 <__sfputc_r>:
 8005920:	6893      	ldr	r3, [r2, #8]
 8005922:	b410      	push	{r4}
 8005924:	3b01      	subs	r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	6093      	str	r3, [r2, #8]
 800592a:	da07      	bge.n	800593c <__sfputc_r+0x1c>
 800592c:	6994      	ldr	r4, [r2, #24]
 800592e:	42a3      	cmp	r3, r4
 8005930:	db01      	blt.n	8005936 <__sfputc_r+0x16>
 8005932:	290a      	cmp	r1, #10
 8005934:	d102      	bne.n	800593c <__sfputc_r+0x1c>
 8005936:	bc10      	pop	{r4}
 8005938:	f7fe ba00 	b.w	8003d3c <__swbuf_r>
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	1c58      	adds	r0, r3, #1
 8005940:	6010      	str	r0, [r2, #0]
 8005942:	7019      	strb	r1, [r3, #0]
 8005944:	4608      	mov	r0, r1
 8005946:	bc10      	pop	{r4}
 8005948:	4770      	bx	lr

0800594a <__sfputs_r>:
 800594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594c:	4606      	mov	r6, r0
 800594e:	460f      	mov	r7, r1
 8005950:	4614      	mov	r4, r2
 8005952:	18d5      	adds	r5, r2, r3
 8005954:	42ac      	cmp	r4, r5
 8005956:	d101      	bne.n	800595c <__sfputs_r+0x12>
 8005958:	2000      	movs	r0, #0
 800595a:	e007      	b.n	800596c <__sfputs_r+0x22>
 800595c:	463a      	mov	r2, r7
 800595e:	4630      	mov	r0, r6
 8005960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005964:	f7ff ffdc 	bl	8005920 <__sfputc_r>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d1f3      	bne.n	8005954 <__sfputs_r+0xa>
 800596c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005970 <_vfiprintf_r>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	460d      	mov	r5, r1
 8005976:	4614      	mov	r4, r2
 8005978:	4698      	mov	r8, r3
 800597a:	4606      	mov	r6, r0
 800597c:	b09d      	sub	sp, #116	; 0x74
 800597e:	b118      	cbz	r0, 8005988 <_vfiprintf_r+0x18>
 8005980:	6983      	ldr	r3, [r0, #24]
 8005982:	b90b      	cbnz	r3, 8005988 <_vfiprintf_r+0x18>
 8005984:	f7ff fa2c 	bl	8004de0 <__sinit>
 8005988:	4b89      	ldr	r3, [pc, #548]	; (8005bb0 <_vfiprintf_r+0x240>)
 800598a:	429d      	cmp	r5, r3
 800598c:	d11b      	bne.n	80059c6 <_vfiprintf_r+0x56>
 800598e:	6875      	ldr	r5, [r6, #4]
 8005990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005992:	07d9      	lsls	r1, r3, #31
 8005994:	d405      	bmi.n	80059a2 <_vfiprintf_r+0x32>
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	059a      	lsls	r2, r3, #22
 800599a:	d402      	bmi.n	80059a2 <_vfiprintf_r+0x32>
 800599c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599e:	f7ff fac2 	bl	8004f26 <__retarget_lock_acquire_recursive>
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	071b      	lsls	r3, r3, #28
 80059a6:	d501      	bpl.n	80059ac <_vfiprintf_r+0x3c>
 80059a8:	692b      	ldr	r3, [r5, #16]
 80059aa:	b9eb      	cbnz	r3, 80059e8 <_vfiprintf_r+0x78>
 80059ac:	4629      	mov	r1, r5
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7fe fa16 	bl	8003de0 <__swsetup_r>
 80059b4:	b1c0      	cbz	r0, 80059e8 <_vfiprintf_r+0x78>
 80059b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b8:	07dc      	lsls	r4, r3, #31
 80059ba:	d50e      	bpl.n	80059da <_vfiprintf_r+0x6a>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	b01d      	add	sp, #116	; 0x74
 80059c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c6:	4b7b      	ldr	r3, [pc, #492]	; (8005bb4 <_vfiprintf_r+0x244>)
 80059c8:	429d      	cmp	r5, r3
 80059ca:	d101      	bne.n	80059d0 <_vfiprintf_r+0x60>
 80059cc:	68b5      	ldr	r5, [r6, #8]
 80059ce:	e7df      	b.n	8005990 <_vfiprintf_r+0x20>
 80059d0:	4b79      	ldr	r3, [pc, #484]	; (8005bb8 <_vfiprintf_r+0x248>)
 80059d2:	429d      	cmp	r5, r3
 80059d4:	bf08      	it	eq
 80059d6:	68f5      	ldreq	r5, [r6, #12]
 80059d8:	e7da      	b.n	8005990 <_vfiprintf_r+0x20>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	0598      	lsls	r0, r3, #22
 80059de:	d4ed      	bmi.n	80059bc <_vfiprintf_r+0x4c>
 80059e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e2:	f7ff faa1 	bl	8004f28 <__retarget_lock_release_recursive>
 80059e6:	e7e9      	b.n	80059bc <_vfiprintf_r+0x4c>
 80059e8:	2300      	movs	r3, #0
 80059ea:	9309      	str	r3, [sp, #36]	; 0x24
 80059ec:	2320      	movs	r3, #32
 80059ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059f2:	2330      	movs	r3, #48	; 0x30
 80059f4:	f04f 0901 	mov.w	r9, #1
 80059f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80059fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005bbc <_vfiprintf_r+0x24c>
 8005a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a04:	4623      	mov	r3, r4
 8005a06:	469a      	mov	sl, r3
 8005a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a0c:	b10a      	cbz	r2, 8005a12 <_vfiprintf_r+0xa2>
 8005a0e:	2a25      	cmp	r2, #37	; 0x25
 8005a10:	d1f9      	bne.n	8005a06 <_vfiprintf_r+0x96>
 8005a12:	ebba 0b04 	subs.w	fp, sl, r4
 8005a16:	d00b      	beq.n	8005a30 <_vfiprintf_r+0xc0>
 8005a18:	465b      	mov	r3, fp
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff ff93 	bl	800594a <__sfputs_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	f000 80aa 	beq.w	8005b7e <_vfiprintf_r+0x20e>
 8005a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a2c:	445a      	add	r2, fp
 8005a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a30:	f89a 3000 	ldrb.w	r3, [sl]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80a2 	beq.w	8005b7e <_vfiprintf_r+0x20e>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a44:	f10a 0a01 	add.w	sl, sl, #1
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	9307      	str	r3, [sp, #28]
 8005a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a50:	931a      	str	r3, [sp, #104]	; 0x68
 8005a52:	4654      	mov	r4, sl
 8005a54:	2205      	movs	r2, #5
 8005a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5a:	4858      	ldr	r0, [pc, #352]	; (8005bbc <_vfiprintf_r+0x24c>)
 8005a5c:	f7ff fad2 	bl	8005004 <memchr>
 8005a60:	9a04      	ldr	r2, [sp, #16]
 8005a62:	b9d8      	cbnz	r0, 8005a9c <_vfiprintf_r+0x12c>
 8005a64:	06d1      	lsls	r1, r2, #27
 8005a66:	bf44      	itt	mi
 8005a68:	2320      	movmi	r3, #32
 8005a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6e:	0713      	lsls	r3, r2, #28
 8005a70:	bf44      	itt	mi
 8005a72:	232b      	movmi	r3, #43	; 0x2b
 8005a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a78:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7e:	d015      	beq.n	8005aac <_vfiprintf_r+0x13c>
 8005a80:	4654      	mov	r4, sl
 8005a82:	2000      	movs	r0, #0
 8005a84:	f04f 0c0a 	mov.w	ip, #10
 8005a88:	9a07      	ldr	r2, [sp, #28]
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a90:	3b30      	subs	r3, #48	; 0x30
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d94e      	bls.n	8005b34 <_vfiprintf_r+0x1c4>
 8005a96:	b1b0      	cbz	r0, 8005ac6 <_vfiprintf_r+0x156>
 8005a98:	9207      	str	r2, [sp, #28]
 8005a9a:	e014      	b.n	8005ac6 <_vfiprintf_r+0x156>
 8005a9c:	eba0 0308 	sub.w	r3, r0, r8
 8005aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	46a2      	mov	sl, r4
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	e7d2      	b.n	8005a52 <_vfiprintf_r+0xe2>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	1d19      	adds	r1, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9103      	str	r1, [sp, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bfbb      	ittet	lt
 8005ab8:	425b      	neglt	r3, r3
 8005aba:	f042 0202 	orrlt.w	r2, r2, #2
 8005abe:	9307      	strge	r3, [sp, #28]
 8005ac0:	9307      	strlt	r3, [sp, #28]
 8005ac2:	bfb8      	it	lt
 8005ac4:	9204      	strlt	r2, [sp, #16]
 8005ac6:	7823      	ldrb	r3, [r4, #0]
 8005ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8005aca:	d10c      	bne.n	8005ae6 <_vfiprintf_r+0x176>
 8005acc:	7863      	ldrb	r3, [r4, #1]
 8005ace:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad0:	d135      	bne.n	8005b3e <_vfiprintf_r+0x1ce>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	3402      	adds	r4, #2
 8005ad6:	1d1a      	adds	r2, r3, #4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	9203      	str	r2, [sp, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bfb8      	it	lt
 8005ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ae4:	9305      	str	r3, [sp, #20]
 8005ae6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005bc0 <_vfiprintf_r+0x250>
 8005aea:	2203      	movs	r2, #3
 8005aec:	4650      	mov	r0, sl
 8005aee:	7821      	ldrb	r1, [r4, #0]
 8005af0:	f7ff fa88 	bl	8005004 <memchr>
 8005af4:	b140      	cbz	r0, 8005b08 <_vfiprintf_r+0x198>
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	eba0 000a 	sub.w	r0, r0, sl
 8005afc:	fa03 f000 	lsl.w	r0, r3, r0
 8005b00:	9b04      	ldr	r3, [sp, #16]
 8005b02:	3401      	adds	r4, #1
 8005b04:	4303      	orrs	r3, r0
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0c:	2206      	movs	r2, #6
 8005b0e:	482d      	ldr	r0, [pc, #180]	; (8005bc4 <_vfiprintf_r+0x254>)
 8005b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b14:	f7ff fa76 	bl	8005004 <memchr>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d03f      	beq.n	8005b9c <_vfiprintf_r+0x22c>
 8005b1c:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <_vfiprintf_r+0x258>)
 8005b1e:	bb1b      	cbnz	r3, 8005b68 <_vfiprintf_r+0x1f8>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	3307      	adds	r3, #7
 8005b24:	f023 0307 	bic.w	r3, r3, #7
 8005b28:	3308      	adds	r3, #8
 8005b2a:	9303      	str	r3, [sp, #12]
 8005b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2e:	443b      	add	r3, r7
 8005b30:	9309      	str	r3, [sp, #36]	; 0x24
 8005b32:	e767      	b.n	8005a04 <_vfiprintf_r+0x94>
 8005b34:	460c      	mov	r4, r1
 8005b36:	2001      	movs	r0, #1
 8005b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b3c:	e7a5      	b.n	8005a8a <_vfiprintf_r+0x11a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f04f 0c0a 	mov.w	ip, #10
 8005b44:	4619      	mov	r1, r3
 8005b46:	3401      	adds	r4, #1
 8005b48:	9305      	str	r3, [sp, #20]
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b50:	3a30      	subs	r2, #48	; 0x30
 8005b52:	2a09      	cmp	r2, #9
 8005b54:	d903      	bls.n	8005b5e <_vfiprintf_r+0x1ee>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0c5      	beq.n	8005ae6 <_vfiprintf_r+0x176>
 8005b5a:	9105      	str	r1, [sp, #20]
 8005b5c:	e7c3      	b.n	8005ae6 <_vfiprintf_r+0x176>
 8005b5e:	4604      	mov	r4, r0
 8005b60:	2301      	movs	r3, #1
 8005b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b66:	e7f0      	b.n	8005b4a <_vfiprintf_r+0x1da>
 8005b68:	ab03      	add	r3, sp, #12
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	462a      	mov	r2, r5
 8005b6e:	4630      	mov	r0, r6
 8005b70:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <_vfiprintf_r+0x25c>)
 8005b72:	a904      	add	r1, sp, #16
 8005b74:	f7fd fc92 	bl	800349c <_printf_float>
 8005b78:	4607      	mov	r7, r0
 8005b7a:	1c78      	adds	r0, r7, #1
 8005b7c:	d1d6      	bne.n	8005b2c <_vfiprintf_r+0x1bc>
 8005b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b80:	07d9      	lsls	r1, r3, #31
 8005b82:	d405      	bmi.n	8005b90 <_vfiprintf_r+0x220>
 8005b84:	89ab      	ldrh	r3, [r5, #12]
 8005b86:	059a      	lsls	r2, r3, #22
 8005b88:	d402      	bmi.n	8005b90 <_vfiprintf_r+0x220>
 8005b8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b8c:	f7ff f9cc 	bl	8004f28 <__retarget_lock_release_recursive>
 8005b90:	89ab      	ldrh	r3, [r5, #12]
 8005b92:	065b      	lsls	r3, r3, #25
 8005b94:	f53f af12 	bmi.w	80059bc <_vfiprintf_r+0x4c>
 8005b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b9a:	e711      	b.n	80059c0 <_vfiprintf_r+0x50>
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <_vfiprintf_r+0x25c>)
 8005ba6:	a904      	add	r1, sp, #16
 8005ba8:	f7fd ff14 	bl	80039d4 <_printf_i>
 8005bac:	e7e4      	b.n	8005b78 <_vfiprintf_r+0x208>
 8005bae:	bf00      	nop
 8005bb0:	080060f0 	.word	0x080060f0
 8005bb4:	08006110 	.word	0x08006110
 8005bb8:	080060d0 	.word	0x080060d0
 8005bbc:	0800628c 	.word	0x0800628c
 8005bc0:	08006292 	.word	0x08006292
 8005bc4:	08006296 	.word	0x08006296
 8005bc8:	0800349d 	.word	0x0800349d
 8005bcc:	0800594b 	.word	0x0800594b

08005bd0 <_sbrk_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4d05      	ldr	r5, [pc, #20]	; (8005bec <_sbrk_r+0x1c>)
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f7fb ff88 	bl	8001af0 <_sbrk>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_sbrk_r+0x1a>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_sbrk_r+0x1a>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20000310 	.word	0x20000310

08005bf0 <__sread>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf8:	f000 f8e2 	bl	8005dc0 <_read_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	bfab      	itete	ge
 8005c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c02:	89a3      	ldrhlt	r3, [r4, #12]
 8005c04:	181b      	addge	r3, r3, r0
 8005c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c0a:	bfac      	ite	ge
 8005c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c0e:	81a3      	strhlt	r3, [r4, #12]
 8005c10:	bd10      	pop	{r4, pc}

08005c12 <__swrite>:
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	461f      	mov	r7, r3
 8005c18:	898b      	ldrh	r3, [r1, #12]
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	05db      	lsls	r3, r3, #23
 8005c1e:	460c      	mov	r4, r1
 8005c20:	4616      	mov	r6, r2
 8005c22:	d505      	bpl.n	8005c30 <__swrite+0x1e>
 8005c24:	2302      	movs	r3, #2
 8005c26:	2200      	movs	r2, #0
 8005c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2c:	f000 f898 	bl	8005d60 <_lseek_r>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	4632      	mov	r2, r6
 8005c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	f000 b817 	b.w	8005c78 <_write_r>

08005c4a <__sseek>:
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	f000 f885 	bl	8005d60 <_lseek_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	bf15      	itete	ne
 8005c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c66:	81a3      	strheq	r3, [r4, #12]
 8005c68:	bf18      	it	ne
 8005c6a:	81a3      	strhne	r3, [r4, #12]
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <__sclose>:
 8005c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c72:	f000 b831 	b.w	8005cd8 <_close_r>
	...

08005c78 <_write_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	2200      	movs	r2, #0
 8005c82:	4d05      	ldr	r5, [pc, #20]	; (8005c98 <_write_r+0x20>)
 8005c84:	602a      	str	r2, [r5, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7fb fee6 	bl	8001a58 <_write>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_write_r+0x1e>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_write_r+0x1e>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	20000310 	.word	0x20000310

08005c9c <__assert_func>:
 8005c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c9e:	4614      	mov	r4, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <__assert_func+0x2c>)
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68d8      	ldr	r0, [r3, #12]
 8005caa:	b14c      	cbz	r4, 8005cc0 <__assert_func+0x24>
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <__assert_func+0x30>)
 8005cae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cb2:	9100      	str	r1, [sp, #0]
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	4906      	ldr	r1, [pc, #24]	; (8005cd0 <__assert_func+0x34>)
 8005cb8:	f000 f81e 	bl	8005cf8 <fiprintf>
 8005cbc:	f000 f89f 	bl	8005dfe <abort>
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <__assert_func+0x38>)
 8005cc2:	461c      	mov	r4, r3
 8005cc4:	e7f3      	b.n	8005cae <__assert_func+0x12>
 8005cc6:	bf00      	nop
 8005cc8:	2000000c 	.word	0x2000000c
 8005ccc:	0800629d 	.word	0x0800629d
 8005cd0:	080062aa 	.word	0x080062aa
 8005cd4:	080062d8 	.word	0x080062d8

08005cd8 <_close_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	2300      	movs	r3, #0
 8005cdc:	4d05      	ldr	r5, [pc, #20]	; (8005cf4 <_close_r+0x1c>)
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fb fed4 	bl	8001a90 <_close>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_close_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_close_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000310 	.word	0x20000310

08005cf8 <fiprintf>:
 8005cf8:	b40e      	push	{r1, r2, r3}
 8005cfa:	b503      	push	{r0, r1, lr}
 8005cfc:	4601      	mov	r1, r0
 8005cfe:	ab03      	add	r3, sp, #12
 8005d00:	4805      	ldr	r0, [pc, #20]	; (8005d18 <fiprintf+0x20>)
 8005d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d06:	6800      	ldr	r0, [r0, #0]
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	f7ff fe31 	bl	8005970 <_vfiprintf_r>
 8005d0e:	b002      	add	sp, #8
 8005d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d14:	b003      	add	sp, #12
 8005d16:	4770      	bx	lr
 8005d18:	2000000c 	.word	0x2000000c

08005d1c <_fstat_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4d06      	ldr	r5, [pc, #24]	; (8005d3c <_fstat_r+0x20>)
 8005d22:	4604      	mov	r4, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	f7fb febc 	bl	8001aa6 <_fstat>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	d102      	bne.n	8005d38 <_fstat_r+0x1c>
 8005d32:	682b      	ldr	r3, [r5, #0]
 8005d34:	b103      	cbz	r3, 8005d38 <_fstat_r+0x1c>
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000310 	.word	0x20000310

08005d40 <_isatty_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	; (8005d5c <_isatty_r+0x1c>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fb feba 	bl	8001ac4 <_isatty>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_isatty_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_isatty_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20000310 	.word	0x20000310

08005d60 <_lseek_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4d05      	ldr	r5, [pc, #20]	; (8005d80 <_lseek_r+0x20>)
 8005d6c:	602a      	str	r2, [r5, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f7fb feb2 	bl	8001ad8 <_lseek>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_lseek_r+0x1e>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_lseek_r+0x1e>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	20000310 	.word	0x20000310

08005d84 <__ascii_mbtowc>:
 8005d84:	b082      	sub	sp, #8
 8005d86:	b901      	cbnz	r1, 8005d8a <__ascii_mbtowc+0x6>
 8005d88:	a901      	add	r1, sp, #4
 8005d8a:	b142      	cbz	r2, 8005d9e <__ascii_mbtowc+0x1a>
 8005d8c:	b14b      	cbz	r3, 8005da2 <__ascii_mbtowc+0x1e>
 8005d8e:	7813      	ldrb	r3, [r2, #0]
 8005d90:	600b      	str	r3, [r1, #0]
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	1e10      	subs	r0, r2, #0
 8005d96:	bf18      	it	ne
 8005d98:	2001      	movne	r0, #1
 8005d9a:	b002      	add	sp, #8
 8005d9c:	4770      	bx	lr
 8005d9e:	4610      	mov	r0, r2
 8005da0:	e7fb      	b.n	8005d9a <__ascii_mbtowc+0x16>
 8005da2:	f06f 0001 	mvn.w	r0, #1
 8005da6:	e7f8      	b.n	8005d9a <__ascii_mbtowc+0x16>

08005da8 <__malloc_lock>:
 8005da8:	4801      	ldr	r0, [pc, #4]	; (8005db0 <__malloc_lock+0x8>)
 8005daa:	f7ff b8bc 	b.w	8004f26 <__retarget_lock_acquire_recursive>
 8005dae:	bf00      	nop
 8005db0:	20000304 	.word	0x20000304

08005db4 <__malloc_unlock>:
 8005db4:	4801      	ldr	r0, [pc, #4]	; (8005dbc <__malloc_unlock+0x8>)
 8005db6:	f7ff b8b7 	b.w	8004f28 <__retarget_lock_release_recursive>
 8005dba:	bf00      	nop
 8005dbc:	20000304 	.word	0x20000304

08005dc0 <_read_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4d05      	ldr	r5, [pc, #20]	; (8005de0 <_read_r+0x20>)
 8005dcc:	602a      	str	r2, [r5, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f7fb fe25 	bl	8001a1e <_read>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_read_r+0x1e>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_read_r+0x1e>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	20000310 	.word	0x20000310

08005de4 <__ascii_wctomb>:
 8005de4:	4603      	mov	r3, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	b141      	cbz	r1, 8005dfc <__ascii_wctomb+0x18>
 8005dea:	2aff      	cmp	r2, #255	; 0xff
 8005dec:	d904      	bls.n	8005df8 <__ascii_wctomb+0x14>
 8005dee:	228a      	movs	r2, #138	; 0x8a
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	4770      	bx	lr
 8005df8:	2001      	movs	r0, #1
 8005dfa:	700a      	strb	r2, [r1, #0]
 8005dfc:	4770      	bx	lr

08005dfe <abort>:
 8005dfe:	2006      	movs	r0, #6
 8005e00:	b508      	push	{r3, lr}
 8005e02:	f000 f82b 	bl	8005e5c <raise>
 8005e06:	2001      	movs	r0, #1
 8005e08:	f7fb fdff 	bl	8001a0a <_exit>

08005e0c <_raise_r>:
 8005e0c:	291f      	cmp	r1, #31
 8005e0e:	b538      	push	{r3, r4, r5, lr}
 8005e10:	4604      	mov	r4, r0
 8005e12:	460d      	mov	r5, r1
 8005e14:	d904      	bls.n	8005e20 <_raise_r+0x14>
 8005e16:	2316      	movs	r3, #22
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e22:	b112      	cbz	r2, 8005e2a <_raise_r+0x1e>
 8005e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e28:	b94b      	cbnz	r3, 8005e3e <_raise_r+0x32>
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f830 	bl	8005e90 <_getpid_r>
 8005e30:	462a      	mov	r2, r5
 8005e32:	4601      	mov	r1, r0
 8005e34:	4620      	mov	r0, r4
 8005e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3a:	f000 b817 	b.w	8005e6c <_kill_r>
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d00a      	beq.n	8005e58 <_raise_r+0x4c>
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	d103      	bne.n	8005e4e <_raise_r+0x42>
 8005e46:	2316      	movs	r3, #22
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	e7e7      	b.n	8005e1e <_raise_r+0x12>
 8005e4e:	2400      	movs	r4, #0
 8005e50:	4628      	mov	r0, r5
 8005e52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e56:	4798      	blx	r3
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e7e0      	b.n	8005e1e <_raise_r+0x12>

08005e5c <raise>:
 8005e5c:	4b02      	ldr	r3, [pc, #8]	; (8005e68 <raise+0xc>)
 8005e5e:	4601      	mov	r1, r0
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f7ff bfd3 	b.w	8005e0c <_raise_r>
 8005e66:	bf00      	nop
 8005e68:	2000000c 	.word	0x2000000c

08005e6c <_kill_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4d06      	ldr	r5, [pc, #24]	; (8005e8c <_kill_r+0x20>)
 8005e72:	4604      	mov	r4, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f7fb fdb6 	bl	80019ea <_kill>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d102      	bne.n	8005e88 <_kill_r+0x1c>
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	b103      	cbz	r3, 8005e88 <_kill_r+0x1c>
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	bd38      	pop	{r3, r4, r5, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000310 	.word	0x20000310

08005e90 <_getpid_r>:
 8005e90:	f7fb bda4 	b.w	80019dc <_getpid>

08005e94 <_init>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr

08005ea0 <_fini>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr
