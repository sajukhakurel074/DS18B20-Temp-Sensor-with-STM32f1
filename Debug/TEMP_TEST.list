
TEMP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004c00  08004c00  00004c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  08004d0c  08004d0c  00004d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080071a0  080071a0  000071a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  00010070  2**0
                  CONTENTS
  4 .ARM          00000000  08007248  08007248  00010070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007248  08007248  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00007248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800724c  0800724c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007250  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080072c0  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080072c0  00010110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f19  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169f  00000000  00000000  00016fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00018658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  00018e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cb8  00000000  00000000  000195d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080e9  00000000  00000000  00031288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d79  00000000  00000000  00039371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf0ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002648  00000000  00000000  000bf13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004d0c <__do_global_dtors_aux>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4c05      	ldr	r4, [pc, #20]	; (8004d24 <__do_global_dtors_aux+0x18>)
 8004d10:	7823      	ldrb	r3, [r4, #0]
 8004d12:	b933      	cbnz	r3, 8004d22 <__do_global_dtors_aux+0x16>
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <__do_global_dtors_aux+0x1c>)
 8004d16:	b113      	cbz	r3, 8004d1e <__do_global_dtors_aux+0x12>
 8004d18:	4804      	ldr	r0, [pc, #16]	; (8004d2c <__do_global_dtors_aux+0x20>)
 8004d1a:	f3af 8000 	nop.w
 8004d1e:	2301      	movs	r3, #1
 8004d20:	7023      	strb	r3, [r4, #0]
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	20000070 	.word	0x20000070
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08007188 	.word	0x08007188

08004d30 <frame_dummy>:
 8004d30:	b508      	push	{r3, lr}
 8004d32:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <frame_dummy+0x10>)
 8004d34:	b11b      	cbz	r3, 8004d3e <frame_dummy+0xe>
 8004d36:	4903      	ldr	r1, [pc, #12]	; (8004d44 <frame_dummy+0x14>)
 8004d38:	4803      	ldr	r0, [pc, #12]	; (8004d48 <frame_dummy+0x18>)
 8004d3a:	f3af 8000 	nop.w
 8004d3e:	bd08      	pop	{r3, pc}
 8004d40:	00000000 	.word	0x00000000
 8004d44:	20000074 	.word	0x20000074
 8004d48:	08007188 	.word	0x08007188

08004d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d50:	f000 fb04 	bl	800535c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d54:	f000 f818 	bl	8004d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d58:	f000 f8b8 	bl	8004ecc <MX_GPIO_Init>
  MX_CAN_Init();
 8004d5c:	f000 f856 	bl	8004e0c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8004d60:	f000 f88a 	bl	8004e78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("From Application version_1\r\n");
 8004d64:	4806      	ldr	r0, [pc, #24]	; (8004d80 <main+0x34>)
 8004d66:	f001 fd87 	bl	8006878 <puts>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d6e:	4805      	ldr	r0, [pc, #20]	; (8004d84 <main+0x38>)
 8004d70:	f000 fef6 	bl	8005b60 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8004d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d78:	f000 fb52 	bl	8005420 <HAL_Delay>
		printf("From Application version_1\r\n");
 8004d7c:	e7f2      	b.n	8004d64 <main+0x18>
 8004d7e:	bf00      	nop
 8004d80:	080071a0 	.word	0x080071a0
 8004d84:	40011000 	.word	0x40011000

08004d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b090      	sub	sp, #64	; 0x40
 8004d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d8e:	f107 0318 	add.w	r3, r7, #24
 8004d92:	2228      	movs	r2, #40	; 0x28
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 fcf8 	bl	800678c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	609a      	str	r2, [r3, #8]
 8004da6:	60da      	str	r2, [r3, #12]
 8004da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004daa:	2302      	movs	r3, #2
 8004dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004dae:	2301      	movs	r3, #1
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004db2:	2310      	movs	r3, #16
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004db6:	2302      	movs	r3, #2
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004dbe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dc4:	f107 0318 	add.w	r3, r7, #24
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fee3 	bl	8005b94 <HAL_RCC_OscConfig>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004dd4:	f000 f8e4 	bl	8004fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dd8:	230f      	movs	r3, #15
 8004dda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	2102      	movs	r1, #2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 f950 	bl	8006098 <HAL_RCC_ClockConfig>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8004dfe:	f000 f8cf 	bl	8004fa0 <Error_Handler>
  }
}
 8004e02:	bf00      	nop
 8004e04:	3740      	adds	r7, #64	; 0x40
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8004e10:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e12:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <MX_CAN_Init+0x68>)
 8004e14:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e18:	2208      	movs	r2, #8
 8004e1a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004e22:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e2a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8004e2e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e36:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004e5c:	4804      	ldr	r0, [pc, #16]	; (8004e70 <MX_CAN_Init+0x64>)
 8004e5e:	f000 fb03 	bl	8005468 <HAL_CAN_Init>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8004e68:	f000 f89a 	bl	8004fa0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	2000008c 	.word	0x2000008c
 8004e74:	40006400 	.word	0x40006400

08004e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e7c:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <MX_USART1_UART_Init+0x50>)
 8004e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e96:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004e9e:	220c      	movs	r2, #12
 8004ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004eae:	4805      	ldr	r0, [pc, #20]	; (8004ec4 <MX_USART1_UART_Init+0x4c>)
 8004eb0:	f001 fa8a 	bl	80063c8 <HAL_UART_Init>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004eba:	f000 f871 	bl	8004fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200000b4 	.word	0x200000b4
 8004ec8:	40013800 	.word	0x40013800

08004ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed2:	f107 0310 	add.w	r3, r7, #16
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee0:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	4a23      	ldr	r2, [pc, #140]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004ee6:	f043 0310 	orr.w	r3, r3, #16
 8004eea:	6193      	str	r3, [r2, #24]
 8004eec:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004efe:	f043 0320 	orr.w	r3, r3, #32
 8004f02:	6193      	str	r3, [r2, #24]
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f10:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4a17      	ldr	r2, [pc, #92]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	6193      	str	r3, [r2, #24]
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004f2e:	f043 0308 	orr.w	r3, r3, #8
 8004f32:	6193      	str	r3, [r2, #24]
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <MX_GPIO_Init+0xa8>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f46:	480c      	ldr	r0, [pc, #48]	; (8004f78 <MX_GPIO_Init+0xac>)
 8004f48:	f000 fdf2 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f52:	2301      	movs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f5e:	f107 0310 	add.w	r3, r7, #16
 8004f62:	4619      	mov	r1, r3
 8004f64:	4804      	ldr	r0, [pc, #16]	; (8004f78 <MX_GPIO_Init+0xac>)
 8004f66:	f000 fc5f 	bl	8005828 <HAL_GPIO_Init>

}
 8004f6a:	bf00      	nop
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40011000 	.word	0x40011000

08004f7c <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8004f84:	1d39      	adds	r1, r7, #4
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4803      	ldr	r0, [pc, #12]	; (8004f9c <__io_putchar+0x20>)
 8004f8e:	f001 fa68 	bl	8006462 <HAL_UART_Transmit>
	return ch;
 8004f92:	687b      	ldr	r3, [r7, #4]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200000b4 	.word	0x200000b4

08004fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fa4:	b672      	cpsid	i
}
 8004fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004fa8:	e7fe      	b.n	8004fa8 <Error_Handler+0x8>
	...

08004fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <HAL_MspInit+0x5c>)
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <HAL_MspInit+0x5c>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	6193      	str	r3, [r2, #24]
 8004fbe:	4b12      	ldr	r3, [pc, #72]	; (8005008 <HAL_MspInit+0x5c>)
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <HAL_MspInit+0x5c>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <HAL_MspInit+0x5c>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	61d3      	str	r3, [r2, #28]
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <HAL_MspInit+0x5c>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_MspInit+0x60>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	4a04      	ldr	r2, [pc, #16]	; (800500c <HAL_MspInit+0x60>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr
 8005008:	40021000 	.word	0x40021000
 800500c:	40010000 	.word	0x40010000

08005010 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <HAL_CAN_MspInit+0xb0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d143      	bne.n	80050b8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_CAN_MspInit+0xb4>)
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <HAL_CAN_MspInit+0xb4>)
 8005036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800503a:	61d3      	str	r3, [r2, #28]
 800503c:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_CAN_MspInit+0xb4>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <HAL_CAN_MspInit+0xb4>)
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <HAL_CAN_MspInit+0xb4>)
 800504e:	f043 0308 	orr.w	r3, r3, #8
 8005052:	6193      	str	r3, [r2, #24]
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <HAL_CAN_MspInit+0xb4>)
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	4619      	mov	r1, r3
 8005074:	4814      	ldr	r0, [pc, #80]	; (80050c8 <HAL_CAN_MspInit+0xb8>)
 8005076:	f000 fbd7 	bl	8005828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800507a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800507e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005080:	2302      	movs	r3, #2
 8005082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005084:	2303      	movs	r3, #3
 8005086:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005088:	f107 0314 	add.w	r3, r7, #20
 800508c:	4619      	mov	r1, r3
 800508e:	480e      	ldr	r0, [pc, #56]	; (80050c8 <HAL_CAN_MspInit+0xb8>)
 8005090:	f000 fbca 	bl	8005828 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <HAL_CAN_MspInit+0xbc>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
 80050b2:	4a06      	ldr	r2, [pc, #24]	; (80050cc <HAL_CAN_MspInit+0xbc>)
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80050b8:	bf00      	nop
 80050ba:	3728      	adds	r7, #40	; 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40006400 	.word	0x40006400
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40010c00 	.word	0x40010c00
 80050cc:	40010000 	.word	0x40010000

080050d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d8:	f107 0310 	add.w	r3, r7, #16
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1c      	ldr	r2, [pc, #112]	; (800515c <HAL_UART_MspInit+0x8c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d131      	bne.n	8005154 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050f0:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <HAL_UART_MspInit+0x90>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	4a1a      	ldr	r2, [pc, #104]	; (8005160 <HAL_UART_MspInit+0x90>)
 80050f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050fa:	6193      	str	r3, [r2, #24]
 80050fc:	4b18      	ldr	r3, [pc, #96]	; (8005160 <HAL_UART_MspInit+0x90>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <HAL_UART_MspInit+0x90>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	4a14      	ldr	r2, [pc, #80]	; (8005160 <HAL_UART_MspInit+0x90>)
 800510e:	f043 0304 	orr.w	r3, r3, #4
 8005112:	6193      	str	r3, [r2, #24]
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_UART_MspInit+0x90>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005126:	2302      	movs	r3, #2
 8005128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800512a:	2303      	movs	r3, #3
 800512c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512e:	f107 0310 	add.w	r3, r7, #16
 8005132:	4619      	mov	r1, r3
 8005134:	480b      	ldr	r0, [pc, #44]	; (8005164 <HAL_UART_MspInit+0x94>)
 8005136:	f000 fb77 	bl	8005828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800513a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005148:	f107 0310 	add.w	r3, r7, #16
 800514c:	4619      	mov	r1, r3
 800514e:	4805      	ldr	r0, [pc, #20]	; (8005164 <HAL_UART_MspInit+0x94>)
 8005150:	f000 fb6a 	bl	8005828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005154:	bf00      	nop
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40013800 	.word	0x40013800
 8005160:	40021000 	.word	0x40021000
 8005164:	40010800 	.word	0x40010800

08005168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800516c:	e7fe      	b.n	800516c <NMI_Handler+0x4>

0800516e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005172:	e7fe      	b.n	8005172 <HardFault_Handler+0x4>

08005174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005178:	e7fe      	b.n	8005178 <MemManage_Handler+0x4>

0800517a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800517a:	b480      	push	{r7}
 800517c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800517e:	e7fe      	b.n	800517e <BusFault_Handler+0x4>

08005180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005184:	e7fe      	b.n	8005184 <UsageFault_Handler+0x4>

08005186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800518a:	bf00      	nop
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005192:	b480      	push	{r7}
 8005194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005196:	bf00      	nop
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051ae:	f000 f91b 	bl	80053e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b086      	sub	sp, #24
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e00a      	b.n	80051de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051c8:	f3af 8000 	nop.w
 80051cc:	4601      	mov	r1, r0
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	60ba      	str	r2, [r7, #8]
 80051d4:	b2ca      	uxtb	r2, r1
 80051d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3301      	adds	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	dbf0      	blt.n	80051c8 <_read+0x12>
	}

return len;
 80051e6:	687b      	ldr	r3, [r7, #4]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e009      	b.n	8005216 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	60ba      	str	r2, [r7, #8]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff feb6 	bl	8004f7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3301      	adds	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	dbf1      	blt.n	8005202 <_write+0x12>
	}
	return len;
 800521e:	687b      	ldr	r3, [r7, #4]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <_close>:

int _close(int file)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	return -1;
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr

0800523e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800524e:	605a      	str	r2, [r3, #4]
	return 0;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <_isatty>:

int _isatty(int file)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	return 1;
 8005264:	2301      	movs	r3, #1
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
	return 0;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <_sbrk+0x5c>)
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <_sbrk+0x60>)
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <_sbrk+0x64>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <_sbrk+0x64>)
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <_sbrk+0x68>)
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d207      	bcs.n	80052c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052b8:	f001 fa3e 	bl	8006738 <__errno>
 80052bc:	4603      	mov	r3, r0
 80052be:	220c      	movs	r2, #12
 80052c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e009      	b.n	80052dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <_sbrk+0x64>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <_sbrk+0x64>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <_sbrk+0x64>)
 80052d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20005000 	.word	0x20005000
 80052e8:	00000400 	.word	0x00000400
 80052ec:	200000f8 	.word	0x200000f8
 80052f0:	20000110 	.word	0x20000110

080052f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <SystemInit+0x14>)
 80052fa:	4a04      	ldr	r2, [pc, #16]	; (800530c <SystemInit+0x18>)
 80052fc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	e000ed00 	.word	0xe000ed00
 800530c:	08004c00 	.word	0x08004c00

08005310 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005310:	480c      	ldr	r0, [pc, #48]	; (8005344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005318:	e002      	b.n	8005320 <LoopCopyDataInit>

0800531a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800531a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800531c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800531e:	3304      	adds	r3, #4

08005320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005324:	d3f9      	bcc.n	800531a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005326:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005328:	4c0a      	ldr	r4, [pc, #40]	; (8005354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800532a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800532c:	e001      	b.n	8005332 <LoopFillZerobss>

0800532e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800532e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005330:	3204      	adds	r2, #4

08005332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005334:	d3fb      	bcc.n	800532e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005336:	f7ff ffdd 	bl	80052f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800533a:	f001 fa03 	bl	8006744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800533e:	f7ff fd05 	bl	8004d4c <main>
  bx lr
 8005342:	4770      	bx	lr
  ldr r0, =_sdata
 8005344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005348:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800534c:	08007250 	.word	0x08007250
  ldr r2, =_sbss
 8005350:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005354:	20000110 	.word	0x20000110

08005358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005358:	e7fe      	b.n	8005358 <ADC1_2_IRQHandler>
	...

0800535c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <HAL_Init+0x28>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a07      	ldr	r2, [pc, #28]	; (8005384 <HAL_Init+0x28>)
 8005366:	f043 0310 	orr.w	r3, r3, #16
 800536a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800536c:	2003      	movs	r0, #3
 800536e:	f000 fa27 	bl	80057c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005372:	2000      	movs	r0, #0
 8005374:	f000 f808 	bl	8005388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005378:	f7ff fe18 	bl	8004fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40022000 	.word	0x40022000

08005388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005390:	4b12      	ldr	r3, [pc, #72]	; (80053dc <HAL_InitTick+0x54>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <HAL_InitTick+0x58>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800539e:	fbb3 f3f1 	udiv	r3, r3, r1
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fa31 	bl	800580e <HAL_SYSTICK_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e00e      	b.n	80053d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b0f      	cmp	r3, #15
 80053ba:	d80a      	bhi.n	80053d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053bc:	2200      	movs	r2, #0
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	f000 fa07 	bl	80057d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053c8:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <HAL_InitTick+0x5c>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000000 	.word	0x20000000
 80053e0:	20000008 	.word	0x20000008
 80053e4:	20000004 	.word	0x20000004

080053e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_IncTick+0x1c>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_IncTick+0x20>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	4a03      	ldr	r2, [pc, #12]	; (8005408 <HAL_IncTick+0x20>)
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	20000008 	.word	0x20000008
 8005408:	200000fc 	.word	0x200000fc

0800540c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return uwTick;
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <HAL_GetTick+0x10>)
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr
 800541c:	200000fc 	.word	0x200000fc

08005420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005428:	f7ff fff0 	bl	800540c <HAL_GetTick>
 800542c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d005      	beq.n	8005446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_Delay+0x44>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005446:	bf00      	nop
 8005448:	f7ff ffe0 	bl	800540c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d8f7      	bhi.n	8005448 <HAL_Delay+0x28>
  {
  }
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000008 	.word	0x20000008

08005468 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0ed      	b.n	8005656 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff fdc2 	bl	8005010 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800549c:	f7ff ffb6 	bl	800540c <HAL_GetTick>
 80054a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054a2:	e012      	b.n	80054ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054a4:	f7ff ffb2 	bl	800540c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b0a      	cmp	r3, #10
 80054b0:	d90b      	bls.n	80054ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2205      	movs	r2, #5
 80054c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e0c5      	b.n	8005656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0e5      	beq.n	80054a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0202 	bic.w	r2, r2, #2
 80054e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054e8:	f7ff ff90 	bl	800540c <HAL_GetTick>
 80054ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80054ee:	e012      	b.n	8005516 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054f0:	f7ff ff8c 	bl	800540c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b0a      	cmp	r3, #10
 80054fc:	d90b      	bls.n	8005516 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2205      	movs	r2, #5
 800550e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e09f      	b.n	8005656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	7e1b      	ldrb	r3, [r3, #24]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d108      	bne.n	800553e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e007      	b.n	800554e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800554c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	7e5b      	ldrb	r3, [r3, #25]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d108      	bne.n	8005568 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e007      	b.n	8005578 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7e9b      	ldrb	r3, [r3, #26]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d108      	bne.n	8005592 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0220 	orr.w	r2, r2, #32
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e007      	b.n	80055a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0220 	bic.w	r2, r2, #32
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7edb      	ldrb	r3, [r3, #27]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d108      	bne.n	80055bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0210 	bic.w	r2, r2, #16
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	e007      	b.n	80055cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0210 	orr.w	r2, r2, #16
 80055ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	7f1b      	ldrb	r3, [r3, #28]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d108      	bne.n	80055e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0208 	orr.w	r2, r2, #8
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e007      	b.n	80055f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0208 	bic.w	r2, r2, #8
 80055f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7f5b      	ldrb	r3, [r3, #29]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d108      	bne.n	8005610 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0204 	orr.w	r2, r2, #4
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e007      	b.n	8005620 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0204 	bic.w	r2, r2, #4
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	ea42 0103 	orr.w	r1, r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800567c:	4013      	ands	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800568c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005692:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	60d3      	str	r3, [r2, #12]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <__NVIC_GetPriorityGrouping+0x18>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	f003 0307 	and.w	r3, r3, #7
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db0a      	blt.n	80056ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	490c      	ldr	r1, [pc, #48]	; (8005710 <__NVIC_SetPriority+0x4c>)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	440b      	add	r3, r1
 80056e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056ec:	e00a      	b.n	8005704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	4908      	ldr	r1, [pc, #32]	; (8005714 <__NVIC_SetPriority+0x50>)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	3b04      	subs	r3, #4
 80056fc:	0112      	lsls	r2, r2, #4
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	440b      	add	r3, r1
 8005702:	761a      	strb	r2, [r3, #24]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e100 	.word	0xe000e100
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	; 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f1c3 0307 	rsb	r3, r3, #7
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf28      	it	cs
 8005736:	2304      	movcs	r3, #4
 8005738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3304      	adds	r3, #4
 800573e:	2b06      	cmp	r3, #6
 8005740:	d902      	bls.n	8005748 <NVIC_EncodePriority+0x30>
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3b03      	subs	r3, #3
 8005746:	e000      	b.n	800574a <NVIC_EncodePriority+0x32>
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	401a      	ands	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005760:	f04f 31ff 	mov.w	r1, #4294967295
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	43d9      	mvns	r1, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005770:	4313      	orrs	r3, r2
         );
}
 8005772:	4618      	mov	r0, r3
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3b01      	subs	r3, #1
 8005788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800578c:	d301      	bcc.n	8005792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800578e:	2301      	movs	r3, #1
 8005790:	e00f      	b.n	80057b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <SysTick_Config+0x40>)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800579a:	210f      	movs	r1, #15
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	f7ff ff90 	bl	80056c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <SysTick_Config+0x40>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057aa:	4b04      	ldr	r3, [pc, #16]	; (80057bc <SysTick_Config+0x40>)
 80057ac:	2207      	movs	r2, #7
 80057ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	e000e010 	.word	0xe000e010

080057c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff49 	bl	8005660 <__NVIC_SetPriorityGrouping>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	4603      	mov	r3, r0
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057e8:	f7ff ff5e 	bl	80056a8 <__NVIC_GetPriorityGrouping>
 80057ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	6978      	ldr	r0, [r7, #20]
 80057f4:	f7ff ff90 	bl	8005718 <NVIC_EncodePriority>
 80057f8:	4602      	mov	r2, r0
 80057fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff ff5f 	bl	80056c4 <__NVIC_SetPriority>
}
 8005806:	bf00      	nop
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ffb0 	bl	800577c <SysTick_Config>
 800581c:	4603      	mov	r3, r0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005828:	b480      	push	{r7}
 800582a:	b08b      	sub	sp, #44	; 0x2c
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005836:	2300      	movs	r3, #0
 8005838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800583a:	e169      	b.n	8005b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800583c:	2201      	movs	r2, #1
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	429a      	cmp	r2, r3
 8005856:	f040 8158 	bne.w	8005b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4a9a      	ldr	r2, [pc, #616]	; (8005ac8 <HAL_GPIO_Init+0x2a0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d05e      	beq.n	8005922 <HAL_GPIO_Init+0xfa>
 8005864:	4a98      	ldr	r2, [pc, #608]	; (8005ac8 <HAL_GPIO_Init+0x2a0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d875      	bhi.n	8005956 <HAL_GPIO_Init+0x12e>
 800586a:	4a98      	ldr	r2, [pc, #608]	; (8005acc <HAL_GPIO_Init+0x2a4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d058      	beq.n	8005922 <HAL_GPIO_Init+0xfa>
 8005870:	4a96      	ldr	r2, [pc, #600]	; (8005acc <HAL_GPIO_Init+0x2a4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d86f      	bhi.n	8005956 <HAL_GPIO_Init+0x12e>
 8005876:	4a96      	ldr	r2, [pc, #600]	; (8005ad0 <HAL_GPIO_Init+0x2a8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d052      	beq.n	8005922 <HAL_GPIO_Init+0xfa>
 800587c:	4a94      	ldr	r2, [pc, #592]	; (8005ad0 <HAL_GPIO_Init+0x2a8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d869      	bhi.n	8005956 <HAL_GPIO_Init+0x12e>
 8005882:	4a94      	ldr	r2, [pc, #592]	; (8005ad4 <HAL_GPIO_Init+0x2ac>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d04c      	beq.n	8005922 <HAL_GPIO_Init+0xfa>
 8005888:	4a92      	ldr	r2, [pc, #584]	; (8005ad4 <HAL_GPIO_Init+0x2ac>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d863      	bhi.n	8005956 <HAL_GPIO_Init+0x12e>
 800588e:	4a92      	ldr	r2, [pc, #584]	; (8005ad8 <HAL_GPIO_Init+0x2b0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d046      	beq.n	8005922 <HAL_GPIO_Init+0xfa>
 8005894:	4a90      	ldr	r2, [pc, #576]	; (8005ad8 <HAL_GPIO_Init+0x2b0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d85d      	bhi.n	8005956 <HAL_GPIO_Init+0x12e>
 800589a:	2b12      	cmp	r3, #18
 800589c:	d82a      	bhi.n	80058f4 <HAL_GPIO_Init+0xcc>
 800589e:	2b12      	cmp	r3, #18
 80058a0:	d859      	bhi.n	8005956 <HAL_GPIO_Init+0x12e>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_GPIO_Init+0x80>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	08005923 	.word	0x08005923
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	0800590f 	.word	0x0800590f
 80058b4:	08005951 	.word	0x08005951
 80058b8:	08005957 	.word	0x08005957
 80058bc:	08005957 	.word	0x08005957
 80058c0:	08005957 	.word	0x08005957
 80058c4:	08005957 	.word	0x08005957
 80058c8:	08005957 	.word	0x08005957
 80058cc:	08005957 	.word	0x08005957
 80058d0:	08005957 	.word	0x08005957
 80058d4:	08005957 	.word	0x08005957
 80058d8:	08005957 	.word	0x08005957
 80058dc:	08005957 	.word	0x08005957
 80058e0:	08005957 	.word	0x08005957
 80058e4:	08005957 	.word	0x08005957
 80058e8:	08005957 	.word	0x08005957
 80058ec:	08005905 	.word	0x08005905
 80058f0:	08005919 	.word	0x08005919
 80058f4:	4a79      	ldr	r2, [pc, #484]	; (8005adc <HAL_GPIO_Init+0x2b4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80058fa:	e02c      	b.n	8005956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	623b      	str	r3, [r7, #32]
          break;
 8005902:	e029      	b.n	8005958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	3304      	adds	r3, #4
 800590a:	623b      	str	r3, [r7, #32]
          break;
 800590c:	e024      	b.n	8005958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	3308      	adds	r3, #8
 8005914:	623b      	str	r3, [r7, #32]
          break;
 8005916:	e01f      	b.n	8005958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	330c      	adds	r3, #12
 800591e:	623b      	str	r3, [r7, #32]
          break;
 8005920:	e01a      	b.n	8005958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800592a:	2304      	movs	r3, #4
 800592c:	623b      	str	r3, [r7, #32]
          break;
 800592e:	e013      	b.n	8005958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d105      	bne.n	8005944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005938:	2308      	movs	r3, #8
 800593a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	611a      	str	r2, [r3, #16]
          break;
 8005942:	e009      	b.n	8005958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005944:	2308      	movs	r3, #8
 8005946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	615a      	str	r2, [r3, #20]
          break;
 800594e:	e003      	b.n	8005958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005950:	2300      	movs	r3, #0
 8005952:	623b      	str	r3, [r7, #32]
          break;
 8005954:	e000      	b.n	8005958 <HAL_GPIO_Init+0x130>
          break;
 8005956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2bff      	cmp	r3, #255	; 0xff
 800595c:	d801      	bhi.n	8005962 <HAL_GPIO_Init+0x13a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	e001      	b.n	8005966 <HAL_GPIO_Init+0x13e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2bff      	cmp	r3, #255	; 0xff
 800596c:	d802      	bhi.n	8005974 <HAL_GPIO_Init+0x14c>
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	e002      	b.n	800597a <HAL_GPIO_Init+0x152>
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	3b08      	subs	r3, #8
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	210f      	movs	r1, #15
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	6a39      	ldr	r1, [r7, #32]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	431a      	orrs	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80b1 	beq.w	8005b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80059a8:	4b4d      	ldr	r3, [pc, #308]	; (8005ae0 <HAL_GPIO_Init+0x2b8>)
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	4a4c      	ldr	r2, [pc, #304]	; (8005ae0 <HAL_GPIO_Init+0x2b8>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6193      	str	r3, [r2, #24]
 80059b4:	4b4a      	ldr	r3, [pc, #296]	; (8005ae0 <HAL_GPIO_Init+0x2b8>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80059c0:	4a48      	ldr	r2, [pc, #288]	; (8005ae4 <HAL_GPIO_Init+0x2bc>)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	3302      	adds	r3, #2
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	220f      	movs	r2, #15
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4013      	ands	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a40      	ldr	r2, [pc, #256]	; (8005ae8 <HAL_GPIO_Init+0x2c0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_GPIO_Init+0x1ec>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3f      	ldr	r2, [pc, #252]	; (8005aec <HAL_GPIO_Init+0x2c4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00d      	beq.n	8005a10 <HAL_GPIO_Init+0x1e8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3e      	ldr	r2, [pc, #248]	; (8005af0 <HAL_GPIO_Init+0x2c8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <HAL_GPIO_Init+0x1e4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3d      	ldr	r2, [pc, #244]	; (8005af4 <HAL_GPIO_Init+0x2cc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d101      	bne.n	8005a08 <HAL_GPIO_Init+0x1e0>
 8005a04:	2303      	movs	r3, #3
 8005a06:	e006      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	e004      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e002      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a14:	2300      	movs	r3, #0
 8005a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a18:	f002 0203 	and.w	r2, r2, #3
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	4093      	lsls	r3, r2
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005a26:	492f      	ldr	r1, [pc, #188]	; (8005ae4 <HAL_GPIO_Init+0x2bc>)
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005a40:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	492c      	ldr	r1, [pc, #176]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]
 8005a4c:	e006      	b.n	8005a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005a4e:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	4928      	ldr	r1, [pc, #160]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d006      	beq.n	8005a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005a68:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	4922      	ldr	r1, [pc, #136]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	604b      	str	r3, [r1, #4]
 8005a74:	e006      	b.n	8005a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	491e      	ldr	r1, [pc, #120]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d006      	beq.n	8005a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005a90:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	4918      	ldr	r1, [pc, #96]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	608b      	str	r3, [r1, #8]
 8005a9c:	e006      	b.n	8005aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005a9e:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	4914      	ldr	r1, [pc, #80]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d021      	beq.n	8005afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	490e      	ldr	r1, [pc, #56]	; (8005af8 <HAL_GPIO_Init+0x2d0>)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60cb      	str	r3, [r1, #12]
 8005ac4:	e021      	b.n	8005b0a <HAL_GPIO_Init+0x2e2>
 8005ac6:	bf00      	nop
 8005ac8:	10320000 	.word	0x10320000
 8005acc:	10310000 	.word	0x10310000
 8005ad0:	10220000 	.word	0x10220000
 8005ad4:	10210000 	.word	0x10210000
 8005ad8:	10120000 	.word	0x10120000
 8005adc:	10110000 	.word	0x10110000
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40010000 	.word	0x40010000
 8005ae8:	40010800 	.word	0x40010800
 8005aec:	40010c00 	.word	0x40010c00
 8005af0:	40011000 	.word	0x40011000
 8005af4:	40011400 	.word	0x40011400
 8005af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	43db      	mvns	r3, r3
 8005b04:	4909      	ldr	r1, [pc, #36]	; (8005b2c <HAL_GPIO_Init+0x304>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f47f ae8e 	bne.w	800583c <HAL_GPIO_Init+0x14>
  }
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	372c      	adds	r7, #44	; 0x2c
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	40010400 	.word	0x40010400

08005b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b40:	787b      	ldrb	r3, [r7, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005b4c:	e003      	b.n	8005b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005b4e:	887b      	ldrh	r3, [r7, #2]
 8005b50:	041a      	lsls	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4013      	ands	r3, r2
 8005b78:	041a      	lsls	r2, r3, #16
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43d9      	mvns	r1, r3
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	400b      	ands	r3, r1
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	611a      	str	r2, [r3, #16]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e272      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8087 	beq.w	8005cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bb4:	4b92      	ldr	r3, [pc, #584]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 030c 	and.w	r3, r3, #12
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d00c      	beq.n	8005bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005bc0:	4b8f      	ldr	r3, [pc, #572]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d112      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x5e>
 8005bcc:	4b8c      	ldr	r3, [pc, #560]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bda:	4b89      	ldr	r3, [pc, #548]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d06c      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x12c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d168      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e24c      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x76>
 8005bfc:	4b80      	ldr	r3, [pc, #512]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a7f      	ldr	r2, [pc, #508]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e02e      	b.n	8005c68 <HAL_RCC_OscConfig+0xd4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x98>
 8005c12:	4b7b      	ldr	r3, [pc, #492]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a7a      	ldr	r2, [pc, #488]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	4b78      	ldr	r3, [pc, #480]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a77      	ldr	r2, [pc, #476]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e01d      	b.n	8005c68 <HAL_RCC_OscConfig+0xd4>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCC_OscConfig+0xbc>
 8005c36:	4b72      	ldr	r3, [pc, #456]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a71      	ldr	r2, [pc, #452]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b6f      	ldr	r3, [pc, #444]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a6e      	ldr	r2, [pc, #440]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCC_OscConfig+0xd4>
 8005c50:	4b6b      	ldr	r3, [pc, #428]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a6a      	ldr	r2, [pc, #424]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	4b68      	ldr	r3, [pc, #416]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a67      	ldr	r2, [pc, #412]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c70:	f7ff fbcc 	bl	800540c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c78:	f7ff fbc8 	bl	800540c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	; 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e200      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8a:	4b5d      	ldr	r3, [pc, #372]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0xe4>
 8005c96:	e014      	b.n	8005cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7ff fbb8 	bl	800540c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7ff fbb4 	bl	800540c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	; 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e1ec      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cb2:	4b53      	ldr	r3, [pc, #332]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x10c>
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d063      	beq.n	8005d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cce:	4b4c      	ldr	r3, [pc, #304]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005cda:	4b49      	ldr	r3, [pc, #292]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d11c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x18c>
 8005ce6:	4b46      	ldr	r3, [pc, #280]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d116      	bne.n	8005d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf2:	4b43      	ldr	r3, [pc, #268]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_RCC_OscConfig+0x176>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e1c0      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0a:	4b3d      	ldr	r3, [pc, #244]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4939      	ldr	r1, [pc, #228]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1e:	e03a      	b.n	8005d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d28:	4b36      	ldr	r3, [pc, #216]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7ff fb6d 	bl	800540c <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d36:	f7ff fb69 	bl	800540c <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e1a1      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d48:	4b2d      	ldr	r3, [pc, #180]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d54:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4927      	ldr	r1, [pc, #156]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]
 8005d68:	e015      	b.n	8005d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d6a:	4b26      	ldr	r3, [pc, #152]	; (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d70:	f7ff fb4c 	bl	800540c <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d78:	f7ff fb48 	bl	800540c <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e180      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d03a      	beq.n	8005e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d019      	beq.n	8005dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005daa:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <HAL_RCC_OscConfig+0x274>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db0:	f7ff fb2c 	bl	800540c <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db8:	f7ff fb28 	bl	800540c <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e160      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	f000 fad8 	bl	800638c <RCC_Delay>
 8005ddc:	e01c      	b.n	8005e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dde:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <HAL_RCC_OscConfig+0x274>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de4:	f7ff fb12 	bl	800540c <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dea:	e00f      	b.n	8005e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dec:	f7ff fb0e 	bl	800540c <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d908      	bls.n	8005e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e146      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
 8005dfe:	bf00      	nop
 8005e00:	40021000 	.word	0x40021000
 8005e04:	42420000 	.word	0x42420000
 8005e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e0c:	4b92      	ldr	r3, [pc, #584]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e9      	bne.n	8005dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a6 	beq.w	8005f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e2a:	4b8b      	ldr	r3, [pc, #556]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10d      	bne.n	8005e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e36:	4b88      	ldr	r3, [pc, #544]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4a87      	ldr	r2, [pc, #540]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e40:	61d3      	str	r3, [r2, #28]
 8005e42:	4b85      	ldr	r3, [pc, #532]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	4b82      	ldr	r3, [pc, #520]	; (800605c <HAL_RCC_OscConfig+0x4c8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d118      	bne.n	8005e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5e:	4b7f      	ldr	r3, [pc, #508]	; (800605c <HAL_RCC_OscConfig+0x4c8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a7e      	ldr	r2, [pc, #504]	; (800605c <HAL_RCC_OscConfig+0x4c8>)
 8005e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e6a:	f7ff facf 	bl	800540c <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e72:	f7ff facb 	bl	800540c <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b64      	cmp	r3, #100	; 0x64
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e103      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e84:	4b75      	ldr	r3, [pc, #468]	; (800605c <HAL_RCC_OscConfig+0x4c8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x312>
 8005e98:	4b6f      	ldr	r3, [pc, #444]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	4a6e      	ldr	r2, [pc, #440]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	6213      	str	r3, [r2, #32]
 8005ea4:	e02d      	b.n	8005f02 <HAL_RCC_OscConfig+0x36e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x334>
 8005eae:	4b6a      	ldr	r3, [pc, #424]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	4a69      	ldr	r2, [pc, #420]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	6213      	str	r3, [r2, #32]
 8005eba:	4b67      	ldr	r3, [pc, #412]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	4a66      	ldr	r2, [pc, #408]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ec0:	f023 0304 	bic.w	r3, r3, #4
 8005ec4:	6213      	str	r3, [r2, #32]
 8005ec6:	e01c      	b.n	8005f02 <HAL_RCC_OscConfig+0x36e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d10c      	bne.n	8005eea <HAL_RCC_OscConfig+0x356>
 8005ed0:	4b61      	ldr	r3, [pc, #388]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	4a60      	ldr	r2, [pc, #384]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ed6:	f043 0304 	orr.w	r3, r3, #4
 8005eda:	6213      	str	r3, [r2, #32]
 8005edc:	4b5e      	ldr	r3, [pc, #376]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	4a5d      	ldr	r2, [pc, #372]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	6213      	str	r3, [r2, #32]
 8005ee8:	e00b      	b.n	8005f02 <HAL_RCC_OscConfig+0x36e>
 8005eea:	4b5b      	ldr	r3, [pc, #364]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	4a5a      	ldr	r2, [pc, #360]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ef0:	f023 0301 	bic.w	r3, r3, #1
 8005ef4:	6213      	str	r3, [r2, #32]
 8005ef6:	4b58      	ldr	r3, [pc, #352]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	4a57      	ldr	r2, [pc, #348]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005efc:	f023 0304 	bic.w	r3, r3, #4
 8005f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d015      	beq.n	8005f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f0a:	f7ff fa7f 	bl	800540c <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f10:	e00a      	b.n	8005f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f12:	f7ff fa7b 	bl	800540c <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e0b1      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f28:	4b4b      	ldr	r3, [pc, #300]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ee      	beq.n	8005f12 <HAL_RCC_OscConfig+0x37e>
 8005f34:	e014      	b.n	8005f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f36:	f7ff fa69 	bl	800540c <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7ff fa65 	bl	800540c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e09b      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f54:	4b40      	ldr	r3, [pc, #256]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ee      	bne.n	8005f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d105      	bne.n	8005f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f66:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8087 	beq.w	800608a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f003 030c 	and.w	r3, r3, #12
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d061      	beq.n	800604c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d146      	bne.n	800601e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f90:	4b33      	ldr	r3, [pc, #204]	; (8006060 <HAL_RCC_OscConfig+0x4cc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f96:	f7ff fa39 	bl	800540c <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9e:	f7ff fa35 	bl	800540c <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e06d      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fb0:	4b29      	ldr	r3, [pc, #164]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f0      	bne.n	8005f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d108      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005fc6:	4b24      	ldr	r3, [pc, #144]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	4921      	ldr	r1, [pc, #132]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd8:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a19      	ldr	r1, [r3, #32]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	491b      	ldr	r1, [pc, #108]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ff0:	4b1b      	ldr	r3, [pc, #108]	; (8006060 <HAL_RCC_OscConfig+0x4cc>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff6:	f7ff fa09 	bl	800540c <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffe:	f7ff fa05 	bl	800540c <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e03d      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006010:	4b11      	ldr	r3, [pc, #68]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x46a>
 800601c:	e035      	b.n	800608a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601e:	4b10      	ldr	r3, [pc, #64]	; (8006060 <HAL_RCC_OscConfig+0x4cc>)
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7ff f9f2 	bl	800540c <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602c:	f7ff f9ee 	bl	800540c <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e026      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <HAL_RCC_OscConfig+0x4c4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x498>
 800604a:	e01e      	b.n	800608a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d107      	bne.n	8006064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e019      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
 8006058:	40021000 	.word	0x40021000
 800605c:	40007000 	.word	0x40007000
 8006060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006064:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <HAL_RCC_OscConfig+0x500>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	429a      	cmp	r2, r3
 8006076:	d106      	bne.n	8006086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d001      	beq.n	800608a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40021000 	.word	0x40021000

08006098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0d0      	b.n	800624e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060ac:	4b6a      	ldr	r3, [pc, #424]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d910      	bls.n	80060dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ba:	4b67      	ldr	r3, [pc, #412]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f023 0207 	bic.w	r2, r3, #7
 80060c2:	4965      	ldr	r1, [pc, #404]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ca:	4b63      	ldr	r3, [pc, #396]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d001      	beq.n	80060dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0b8      	b.n	800624e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d020      	beq.n	800612a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060f4:	4b59      	ldr	r3, [pc, #356]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a58      	ldr	r2, [pc, #352]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 80060fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800610c:	4b53      	ldr	r3, [pc, #332]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4a52      	ldr	r2, [pc, #328]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006118:	4b50      	ldr	r3, [pc, #320]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	494d      	ldr	r1, [pc, #308]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006126:	4313      	orrs	r3, r2
 8006128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d040      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d107      	bne.n	800614e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4b47      	ldr	r3, [pc, #284]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d115      	bne.n	8006176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e07f      	b.n	800624e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d107      	bne.n	8006166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006156:	4b41      	ldr	r3, [pc, #260]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e073      	b.n	800624e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006166:	4b3d      	ldr	r3, [pc, #244]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e06b      	b.n	800624e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006176:	4b39      	ldr	r3, [pc, #228]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f023 0203 	bic.w	r2, r3, #3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	4936      	ldr	r1, [pc, #216]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006188:	f7ff f940 	bl	800540c <HAL_GetTick>
 800618c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006190:	f7ff f93c 	bl	800540c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	; 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e053      	b.n	800624e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a6:	4b2d      	ldr	r3, [pc, #180]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f003 020c 	and.w	r2, r3, #12
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d1eb      	bne.n	8006190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061b8:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d210      	bcs.n	80061e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 0207 	bic.w	r2, r3, #7
 80061ce:	4922      	ldr	r1, [pc, #136]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <HAL_RCC_ClockConfig+0x1c0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e032      	b.n	800624e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061f4:	4b19      	ldr	r3, [pc, #100]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	4916      	ldr	r1, [pc, #88]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006202:	4313      	orrs	r3, r2
 8006204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d009      	beq.n	8006226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006212:	4b12      	ldr	r3, [pc, #72]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	490e      	ldr	r1, [pc, #56]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 8006222:	4313      	orrs	r3, r2
 8006224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006226:	f000 f821 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800622a:	4602      	mov	r2, r0
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_RCC_ClockConfig+0x1c4>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	091b      	lsrs	r3, r3, #4
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	490a      	ldr	r1, [pc, #40]	; (8006260 <HAL_RCC_ClockConfig+0x1c8>)
 8006238:	5ccb      	ldrb	r3, [r1, r3]
 800623a:	fa22 f303 	lsr.w	r3, r2, r3
 800623e:	4a09      	ldr	r2, [pc, #36]	; (8006264 <HAL_RCC_ClockConfig+0x1cc>)
 8006240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <HAL_RCC_ClockConfig+0x1d0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff f89e 	bl	8005388 <HAL_InitTick>

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40022000 	.word	0x40022000
 800625c:	40021000 	.word	0x40021000
 8006260:	080071cc 	.word	0x080071cc
 8006264:	20000000 	.word	0x20000000
 8006268:	20000004 	.word	0x20000004

0800626c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800626c:	b490      	push	{r4, r7}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006272:	4b29      	ldr	r3, [pc, #164]	; (8006318 <HAL_RCC_GetSysClockFreq+0xac>)
 8006274:	1d3c      	adds	r4, r7, #4
 8006276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800627c:	f240 2301 	movw	r3, #513	; 0x201
 8006280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	2300      	movs	r3, #0
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006296:	4b21      	ldr	r3, [pc, #132]	; (800631c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d002      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x40>
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d003      	beq.n	80062b2 <HAL_RCC_GetSysClockFreq+0x46>
 80062aa:	e02b      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80062ac:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80062ae:	623b      	str	r3, [r7, #32]
      break;
 80062b0:	e02b      	b.n	800630a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	0c9b      	lsrs	r3, r3, #18
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	3328      	adds	r3, #40	; 0x28
 80062bc:	443b      	add	r3, r7
 80062be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80062c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d012      	beq.n	80062f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <HAL_RCC_GetSysClockFreq+0xb0>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	0c5b      	lsrs	r3, r3, #17
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	3328      	adds	r3, #40	; 0x28
 80062da:	443b      	add	r3, r7
 80062dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80062e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80062e6:	fb03 f202 	mul.w	r2, r3, r2
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	e004      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4a0b      	ldr	r2, [pc, #44]	; (8006324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062f8:	fb02 f303 	mul.w	r3, r2, r3
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	623b      	str	r3, [r7, #32]
      break;
 8006302:	e002      	b.n	800630a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006306:	623b      	str	r3, [r7, #32]
      break;
 8006308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800630a:	6a3b      	ldr	r3, [r7, #32]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3728      	adds	r7, #40	; 0x28
 8006310:	46bd      	mov	sp, r7
 8006312:	bc90      	pop	{r4, r7}
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	080071bc 	.word	0x080071bc
 800631c:	40021000 	.word	0x40021000
 8006320:	007a1200 	.word	0x007a1200
 8006324:	003d0900 	.word	0x003d0900

08006328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <HAL_RCC_GetHCLKFreq+0x10>)
 800632e:	681b      	ldr	r3, [r3, #0]
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr
 8006338:	20000000 	.word	0x20000000

0800633c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006340:	f7ff fff2 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 8006344:	4602      	mov	r2, r0
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	4903      	ldr	r1, [pc, #12]	; (8006360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006352:	5ccb      	ldrb	r3, [r1, r3]
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40021000 	.word	0x40021000
 8006360:	080071dc 	.word	0x080071dc

08006364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006368:	f7ff ffde 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 800636c:	4602      	mov	r2, r0
 800636e:	4b05      	ldr	r3, [pc, #20]	; (8006384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	0adb      	lsrs	r3, r3, #11
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	4903      	ldr	r1, [pc, #12]	; (8006388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800637a:	5ccb      	ldrb	r3, [r1, r3]
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40021000 	.word	0x40021000
 8006388:	080071dc 	.word	0x080071dc

0800638c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <RCC_Delay+0x34>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a0a      	ldr	r2, [pc, #40]	; (80063c4 <RCC_Delay+0x38>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	0a5b      	lsrs	r3, r3, #9
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80063a8:	bf00      	nop
  }
  while (Delay --);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1e5a      	subs	r2, r3, #1
 80063ae:	60fa      	str	r2, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f9      	bne.n	80063a8 <RCC_Delay+0x1c>
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	20000000 	.word	0x20000000
 80063c4:	10624dd3 	.word	0x10624dd3

080063c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e03f      	b.n	800645a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fe fe6e 	bl	80050d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2224      	movs	r2, #36	; 0x24
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800640a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f905 	bl	800661c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b08a      	sub	sp, #40	; 0x28
 8006466:	af02      	add	r7, sp, #8
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b20      	cmp	r3, #32
 8006480:	d17c      	bne.n	800657c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_UART_Transmit+0x2c>
 8006488:	88fb      	ldrh	r3, [r7, #6]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e075      	b.n	800657e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_UART_Transmit+0x3e>
 800649c:	2302      	movs	r3, #2
 800649e:	e06e      	b.n	800657e <HAL_UART_Transmit+0x11c>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2221      	movs	r2, #33	; 0x21
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b6:	f7fe ffa9 	bl	800540c <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	88fa      	ldrh	r2, [r7, #6]
 80064c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	88fa      	ldrh	r2, [r7, #6]
 80064c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d0:	d108      	bne.n	80064e4 <HAL_UART_Transmit+0x82>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e003      	b.n	80064ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064f4:	e02a      	b.n	800654c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f840 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e036      	b.n	800657e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	3302      	adds	r3, #2
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e007      	b.n	800653e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1cf      	bne.n	80064f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2200      	movs	r2, #0
 800655e:	2140      	movs	r1, #64	; 0x40
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f810 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e006      	b.n	800657e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	e000      	b.n	800657e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800657c:	2302      	movs	r3, #2
  }
}
 800657e:	4618      	mov	r0, r3
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	e02c      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d028      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065a6:	f7fe ff31 	bl	800540c <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d21d      	bcs.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e00f      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4013      	ands	r3, r2
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	bf0c      	ite	eq
 8006602:	2301      	moveq	r3, #1
 8006604:	2300      	movne	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	429a      	cmp	r2, r3
 800660e:	d0c3      	beq.n	8006598 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006656:	f023 030c 	bic.w	r3, r3, #12
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	430b      	orrs	r3, r1
 8006662:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2c      	ldr	r2, [pc, #176]	; (8006730 <UART_SetConfig+0x114>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d103      	bne.n	800668c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7ff fe6e 	bl	8006364 <HAL_RCC_GetPCLK2Freq>
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	e002      	b.n	8006692 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7ff fe56 	bl	800633c <HAL_RCC_GetPCLK1Freq>
 8006690:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009a      	lsls	r2, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	4a22      	ldr	r2, [pc, #136]	; (8006734 <UART_SetConfig+0x118>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	0119      	lsls	r1, r3, #4
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009a      	lsls	r2, r3, #2
 80066bc:	441a      	add	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <UART_SetConfig+0x118>)
 80066ca:	fba3 0302 	umull	r0, r3, r3, r2
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	2064      	movs	r0, #100	; 0x64
 80066d2:	fb00 f303 	mul.w	r3, r0, r3
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	3332      	adds	r3, #50	; 0x32
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <UART_SetConfig+0x118>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066e8:	4419      	add	r1, r3
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009a      	lsls	r2, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <UART_SetConfig+0x118>)
 8006702:	fba3 0302 	umull	r0, r3, r3, r2
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	2064      	movs	r0, #100	; 0x64
 800670a:	fb00 f303 	mul.w	r3, r0, r3
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	3332      	adds	r3, #50	; 0x32
 8006714:	4a07      	ldr	r2, [pc, #28]	; (8006734 <UART_SetConfig+0x118>)
 8006716:	fba2 2303 	umull	r2, r3, r2, r3
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	440a      	add	r2, r1
 8006726:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40013800 	.word	0x40013800
 8006734:	51eb851f 	.word	0x51eb851f

08006738 <__errno>:
 8006738:	4b01      	ldr	r3, [pc, #4]	; (8006740 <__errno+0x8>)
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	2000000c 	.word	0x2000000c

08006744 <__libc_init_array>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	2600      	movs	r6, #0
 8006748:	4d0c      	ldr	r5, [pc, #48]	; (800677c <__libc_init_array+0x38>)
 800674a:	4c0d      	ldr	r4, [pc, #52]	; (8006780 <__libc_init_array+0x3c>)
 800674c:	1b64      	subs	r4, r4, r5
 800674e:	10a4      	asrs	r4, r4, #2
 8006750:	42a6      	cmp	r6, r4
 8006752:	d109      	bne.n	8006768 <__libc_init_array+0x24>
 8006754:	f000 fd18 	bl	8007188 <_init>
 8006758:	2600      	movs	r6, #0
 800675a:	4d0a      	ldr	r5, [pc, #40]	; (8006784 <__libc_init_array+0x40>)
 800675c:	4c0a      	ldr	r4, [pc, #40]	; (8006788 <__libc_init_array+0x44>)
 800675e:	1b64      	subs	r4, r4, r5
 8006760:	10a4      	asrs	r4, r4, #2
 8006762:	42a6      	cmp	r6, r4
 8006764:	d105      	bne.n	8006772 <__libc_init_array+0x2e>
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	f855 3b04 	ldr.w	r3, [r5], #4
 800676c:	4798      	blx	r3
 800676e:	3601      	adds	r6, #1
 8006770:	e7ee      	b.n	8006750 <__libc_init_array+0xc>
 8006772:	f855 3b04 	ldr.w	r3, [r5], #4
 8006776:	4798      	blx	r3
 8006778:	3601      	adds	r6, #1
 800677a:	e7f2      	b.n	8006762 <__libc_init_array+0x1e>
 800677c:	08007248 	.word	0x08007248
 8006780:	08007248 	.word	0x08007248
 8006784:	08007248 	.word	0x08007248
 8006788:	0800724c 	.word	0x0800724c

0800678c <memset>:
 800678c:	4603      	mov	r3, r0
 800678e:	4402      	add	r2, r0
 8006790:	4293      	cmp	r3, r2
 8006792:	d100      	bne.n	8006796 <memset+0xa>
 8006794:	4770      	bx	lr
 8006796:	f803 1b01 	strb.w	r1, [r3], #1
 800679a:	e7f9      	b.n	8006790 <memset+0x4>

0800679c <_puts_r>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	460e      	mov	r6, r1
 80067a0:	4605      	mov	r5, r0
 80067a2:	b118      	cbz	r0, 80067ac <_puts_r+0x10>
 80067a4:	6983      	ldr	r3, [r0, #24]
 80067a6:	b90b      	cbnz	r3, 80067ac <_puts_r+0x10>
 80067a8:	f000 fa44 	bl	8006c34 <__sinit>
 80067ac:	69ab      	ldr	r3, [r5, #24]
 80067ae:	68ac      	ldr	r4, [r5, #8]
 80067b0:	b913      	cbnz	r3, 80067b8 <_puts_r+0x1c>
 80067b2:	4628      	mov	r0, r5
 80067b4:	f000 fa3e 	bl	8006c34 <__sinit>
 80067b8:	4b2c      	ldr	r3, [pc, #176]	; (800686c <_puts_r+0xd0>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d120      	bne.n	8006800 <_puts_r+0x64>
 80067be:	686c      	ldr	r4, [r5, #4]
 80067c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067c2:	07db      	lsls	r3, r3, #31
 80067c4:	d405      	bmi.n	80067d2 <_puts_r+0x36>
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	0598      	lsls	r0, r3, #22
 80067ca:	d402      	bmi.n	80067d2 <_puts_r+0x36>
 80067cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ce:	f000 facf 	bl	8006d70 <__retarget_lock_acquire_recursive>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	0719      	lsls	r1, r3, #28
 80067d6:	d51d      	bpl.n	8006814 <_puts_r+0x78>
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	b1db      	cbz	r3, 8006814 <_puts_r+0x78>
 80067dc:	3e01      	subs	r6, #1
 80067de:	68a3      	ldr	r3, [r4, #8]
 80067e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067e4:	3b01      	subs	r3, #1
 80067e6:	60a3      	str	r3, [r4, #8]
 80067e8:	bb39      	cbnz	r1, 800683a <_puts_r+0x9e>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da38      	bge.n	8006860 <_puts_r+0xc4>
 80067ee:	4622      	mov	r2, r4
 80067f0:	210a      	movs	r1, #10
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 f848 	bl	8006888 <__swbuf_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d011      	beq.n	8006820 <_puts_r+0x84>
 80067fc:	250a      	movs	r5, #10
 80067fe:	e011      	b.n	8006824 <_puts_r+0x88>
 8006800:	4b1b      	ldr	r3, [pc, #108]	; (8006870 <_puts_r+0xd4>)
 8006802:	429c      	cmp	r4, r3
 8006804:	d101      	bne.n	800680a <_puts_r+0x6e>
 8006806:	68ac      	ldr	r4, [r5, #8]
 8006808:	e7da      	b.n	80067c0 <_puts_r+0x24>
 800680a:	4b1a      	ldr	r3, [pc, #104]	; (8006874 <_puts_r+0xd8>)
 800680c:	429c      	cmp	r4, r3
 800680e:	bf08      	it	eq
 8006810:	68ec      	ldreq	r4, [r5, #12]
 8006812:	e7d5      	b.n	80067c0 <_puts_r+0x24>
 8006814:	4621      	mov	r1, r4
 8006816:	4628      	mov	r0, r5
 8006818:	f000 f888 	bl	800692c <__swsetup_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	d0dd      	beq.n	80067dc <_puts_r+0x40>
 8006820:	f04f 35ff 	mov.w	r5, #4294967295
 8006824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006826:	07da      	lsls	r2, r3, #31
 8006828:	d405      	bmi.n	8006836 <_puts_r+0x9a>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	059b      	lsls	r3, r3, #22
 800682e:	d402      	bmi.n	8006836 <_puts_r+0x9a>
 8006830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006832:	f000 fa9e 	bl	8006d72 <__retarget_lock_release_recursive>
 8006836:	4628      	mov	r0, r5
 8006838:	bd70      	pop	{r4, r5, r6, pc}
 800683a:	2b00      	cmp	r3, #0
 800683c:	da04      	bge.n	8006848 <_puts_r+0xac>
 800683e:	69a2      	ldr	r2, [r4, #24]
 8006840:	429a      	cmp	r2, r3
 8006842:	dc06      	bgt.n	8006852 <_puts_r+0xb6>
 8006844:	290a      	cmp	r1, #10
 8006846:	d004      	beq.n	8006852 <_puts_r+0xb6>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	7019      	strb	r1, [r3, #0]
 8006850:	e7c5      	b.n	80067de <_puts_r+0x42>
 8006852:	4622      	mov	r2, r4
 8006854:	4628      	mov	r0, r5
 8006856:	f000 f817 	bl	8006888 <__swbuf_r>
 800685a:	3001      	adds	r0, #1
 800685c:	d1bf      	bne.n	80067de <_puts_r+0x42>
 800685e:	e7df      	b.n	8006820 <_puts_r+0x84>
 8006860:	250a      	movs	r5, #10
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	6022      	str	r2, [r4, #0]
 8006868:	701d      	strb	r5, [r3, #0]
 800686a:	e7db      	b.n	8006824 <_puts_r+0x88>
 800686c:	08007208 	.word	0x08007208
 8006870:	08007228 	.word	0x08007228
 8006874:	080071e8 	.word	0x080071e8

08006878 <puts>:
 8006878:	4b02      	ldr	r3, [pc, #8]	; (8006884 <puts+0xc>)
 800687a:	4601      	mov	r1, r0
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f7ff bf8d 	b.w	800679c <_puts_r>
 8006882:	bf00      	nop
 8006884:	2000000c 	.word	0x2000000c

08006888 <__swbuf_r>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	460e      	mov	r6, r1
 800688c:	4614      	mov	r4, r2
 800688e:	4605      	mov	r5, r0
 8006890:	b118      	cbz	r0, 800689a <__swbuf_r+0x12>
 8006892:	6983      	ldr	r3, [r0, #24]
 8006894:	b90b      	cbnz	r3, 800689a <__swbuf_r+0x12>
 8006896:	f000 f9cd 	bl	8006c34 <__sinit>
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <__swbuf_r+0x98>)
 800689c:	429c      	cmp	r4, r3
 800689e:	d12b      	bne.n	80068f8 <__swbuf_r+0x70>
 80068a0:	686c      	ldr	r4, [r5, #4]
 80068a2:	69a3      	ldr	r3, [r4, #24]
 80068a4:	60a3      	str	r3, [r4, #8]
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	071a      	lsls	r2, r3, #28
 80068aa:	d52f      	bpl.n	800690c <__swbuf_r+0x84>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	b36b      	cbz	r3, 800690c <__swbuf_r+0x84>
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	b2f6      	uxtb	r6, r6
 80068b6:	1ac0      	subs	r0, r0, r3
 80068b8:	6963      	ldr	r3, [r4, #20]
 80068ba:	4637      	mov	r7, r6
 80068bc:	4283      	cmp	r3, r0
 80068be:	dc04      	bgt.n	80068ca <__swbuf_r+0x42>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 f922 	bl	8006b0c <_fflush_r>
 80068c8:	bb30      	cbnz	r0, 8006918 <__swbuf_r+0x90>
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	3001      	adds	r0, #1
 80068ce:	3b01      	subs	r3, #1
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	701e      	strb	r6, [r3, #0]
 80068da:	6963      	ldr	r3, [r4, #20]
 80068dc:	4283      	cmp	r3, r0
 80068de:	d004      	beq.n	80068ea <__swbuf_r+0x62>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	07db      	lsls	r3, r3, #31
 80068e4:	d506      	bpl.n	80068f4 <__swbuf_r+0x6c>
 80068e6:	2e0a      	cmp	r6, #10
 80068e8:	d104      	bne.n	80068f4 <__swbuf_r+0x6c>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f90d 	bl	8006b0c <_fflush_r>
 80068f2:	b988      	cbnz	r0, 8006918 <__swbuf_r+0x90>
 80068f4:	4638      	mov	r0, r7
 80068f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <__swbuf_r+0x9c>)
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d101      	bne.n	8006902 <__swbuf_r+0x7a>
 80068fe:	68ac      	ldr	r4, [r5, #8]
 8006900:	e7cf      	b.n	80068a2 <__swbuf_r+0x1a>
 8006902:	4b09      	ldr	r3, [pc, #36]	; (8006928 <__swbuf_r+0xa0>)
 8006904:	429c      	cmp	r4, r3
 8006906:	bf08      	it	eq
 8006908:	68ec      	ldreq	r4, [r5, #12]
 800690a:	e7ca      	b.n	80068a2 <__swbuf_r+0x1a>
 800690c:	4621      	mov	r1, r4
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f80c 	bl	800692c <__swsetup_r>
 8006914:	2800      	cmp	r0, #0
 8006916:	d0cb      	beq.n	80068b0 <__swbuf_r+0x28>
 8006918:	f04f 37ff 	mov.w	r7, #4294967295
 800691c:	e7ea      	b.n	80068f4 <__swbuf_r+0x6c>
 800691e:	bf00      	nop
 8006920:	08007208 	.word	0x08007208
 8006924:	08007228 	.word	0x08007228
 8006928:	080071e8 	.word	0x080071e8

0800692c <__swsetup_r>:
 800692c:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <__swsetup_r+0xcc>)
 800692e:	b570      	push	{r4, r5, r6, lr}
 8006930:	681d      	ldr	r5, [r3, #0]
 8006932:	4606      	mov	r6, r0
 8006934:	460c      	mov	r4, r1
 8006936:	b125      	cbz	r5, 8006942 <__swsetup_r+0x16>
 8006938:	69ab      	ldr	r3, [r5, #24]
 800693a:	b913      	cbnz	r3, 8006942 <__swsetup_r+0x16>
 800693c:	4628      	mov	r0, r5
 800693e:	f000 f979 	bl	8006c34 <__sinit>
 8006942:	4b2e      	ldr	r3, [pc, #184]	; (80069fc <__swsetup_r+0xd0>)
 8006944:	429c      	cmp	r4, r3
 8006946:	d10f      	bne.n	8006968 <__swsetup_r+0x3c>
 8006948:	686c      	ldr	r4, [r5, #4]
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006950:	0719      	lsls	r1, r3, #28
 8006952:	d42c      	bmi.n	80069ae <__swsetup_r+0x82>
 8006954:	06dd      	lsls	r5, r3, #27
 8006956:	d411      	bmi.n	800697c <__swsetup_r+0x50>
 8006958:	2309      	movs	r3, #9
 800695a:	6033      	str	r3, [r6, #0]
 800695c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	e03e      	b.n	80069e6 <__swsetup_r+0xba>
 8006968:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <__swsetup_r+0xd4>)
 800696a:	429c      	cmp	r4, r3
 800696c:	d101      	bne.n	8006972 <__swsetup_r+0x46>
 800696e:	68ac      	ldr	r4, [r5, #8]
 8006970:	e7eb      	b.n	800694a <__swsetup_r+0x1e>
 8006972:	4b24      	ldr	r3, [pc, #144]	; (8006a04 <__swsetup_r+0xd8>)
 8006974:	429c      	cmp	r4, r3
 8006976:	bf08      	it	eq
 8006978:	68ec      	ldreq	r4, [r5, #12]
 800697a:	e7e6      	b.n	800694a <__swsetup_r+0x1e>
 800697c:	0758      	lsls	r0, r3, #29
 800697e:	d512      	bpl.n	80069a6 <__swsetup_r+0x7a>
 8006980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006982:	b141      	cbz	r1, 8006996 <__swsetup_r+0x6a>
 8006984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006988:	4299      	cmp	r1, r3
 800698a:	d002      	beq.n	8006992 <__swsetup_r+0x66>
 800698c:	4630      	mov	r0, r6
 800698e:	f000 fa57 	bl	8006e40 <_free_r>
 8006992:	2300      	movs	r3, #0
 8006994:	6363      	str	r3, [r4, #52]	; 0x34
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	2300      	movs	r3, #0
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f043 0308 	orr.w	r3, r3, #8
 80069ac:	81a3      	strh	r3, [r4, #12]
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	b94b      	cbnz	r3, 80069c6 <__swsetup_r+0x9a>
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069bc:	d003      	beq.n	80069c6 <__swsetup_r+0x9a>
 80069be:	4621      	mov	r1, r4
 80069c0:	4630      	mov	r0, r6
 80069c2:	f000 f9fd 	bl	8006dc0 <__smakebuf_r>
 80069c6:	89a0      	ldrh	r0, [r4, #12]
 80069c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069cc:	f010 0301 	ands.w	r3, r0, #1
 80069d0:	d00a      	beq.n	80069e8 <__swsetup_r+0xbc>
 80069d2:	2300      	movs	r3, #0
 80069d4:	60a3      	str	r3, [r4, #8]
 80069d6:	6963      	ldr	r3, [r4, #20]
 80069d8:	425b      	negs	r3, r3
 80069da:	61a3      	str	r3, [r4, #24]
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	b943      	cbnz	r3, 80069f2 <__swsetup_r+0xc6>
 80069e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069e4:	d1ba      	bne.n	800695c <__swsetup_r+0x30>
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	0781      	lsls	r1, r0, #30
 80069ea:	bf58      	it	pl
 80069ec:	6963      	ldrpl	r3, [r4, #20]
 80069ee:	60a3      	str	r3, [r4, #8]
 80069f0:	e7f4      	b.n	80069dc <__swsetup_r+0xb0>
 80069f2:	2000      	movs	r0, #0
 80069f4:	e7f7      	b.n	80069e6 <__swsetup_r+0xba>
 80069f6:	bf00      	nop
 80069f8:	2000000c 	.word	0x2000000c
 80069fc:	08007208 	.word	0x08007208
 8006a00:	08007228 	.word	0x08007228
 8006a04:	080071e8 	.word	0x080071e8

08006a08 <__sflush_r>:
 8006a08:	898a      	ldrh	r2, [r1, #12]
 8006a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	0710      	lsls	r0, r2, #28
 8006a10:	460c      	mov	r4, r1
 8006a12:	d457      	bmi.n	8006ac4 <__sflush_r+0xbc>
 8006a14:	684b      	ldr	r3, [r1, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dc04      	bgt.n	8006a24 <__sflush_r+0x1c>
 8006a1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dc01      	bgt.n	8006a24 <__sflush_r+0x1c>
 8006a20:	2000      	movs	r0, #0
 8006a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	d0fa      	beq.n	8006a20 <__sflush_r+0x18>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a30:	682f      	ldr	r7, [r5, #0]
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	d032      	beq.n	8006a9c <__sflush_r+0x94>
 8006a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	075a      	lsls	r2, r3, #29
 8006a3c:	d505      	bpl.n	8006a4a <__sflush_r+0x42>
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	1ac0      	subs	r0, r0, r3
 8006a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a44:	b10b      	cbz	r3, 8006a4a <__sflush_r+0x42>
 8006a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a48:	1ac0      	subs	r0, r0, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a50:	4628      	mov	r0, r5
 8006a52:	6a21      	ldr	r1, [r4, #32]
 8006a54:	47b0      	blx	r6
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	d106      	bne.n	8006a6a <__sflush_r+0x62>
 8006a5c:	6829      	ldr	r1, [r5, #0]
 8006a5e:	291d      	cmp	r1, #29
 8006a60:	d82c      	bhi.n	8006abc <__sflush_r+0xb4>
 8006a62:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <__sflush_r+0x100>)
 8006a64:	40ca      	lsrs	r2, r1
 8006a66:	07d6      	lsls	r6, r2, #31
 8006a68:	d528      	bpl.n	8006abc <__sflush_r+0xb4>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	6062      	str	r2, [r4, #4]
 8006a6e:	6922      	ldr	r2, [r4, #16]
 8006a70:	04d9      	lsls	r1, r3, #19
 8006a72:	6022      	str	r2, [r4, #0]
 8006a74:	d504      	bpl.n	8006a80 <__sflush_r+0x78>
 8006a76:	1c42      	adds	r2, r0, #1
 8006a78:	d101      	bne.n	8006a7e <__sflush_r+0x76>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	b903      	cbnz	r3, 8006a80 <__sflush_r+0x78>
 8006a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a82:	602f      	str	r7, [r5, #0]
 8006a84:	2900      	cmp	r1, #0
 8006a86:	d0cb      	beq.n	8006a20 <__sflush_r+0x18>
 8006a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d002      	beq.n	8006a96 <__sflush_r+0x8e>
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 f9d5 	bl	8006e40 <_free_r>
 8006a96:	2000      	movs	r0, #0
 8006a98:	6360      	str	r0, [r4, #52]	; 0x34
 8006a9a:	e7c2      	b.n	8006a22 <__sflush_r+0x1a>
 8006a9c:	6a21      	ldr	r1, [r4, #32]
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b0      	blx	r6
 8006aa4:	1c41      	adds	r1, r0, #1
 8006aa6:	d1c7      	bne.n	8006a38 <__sflush_r+0x30>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0c4      	beq.n	8006a38 <__sflush_r+0x30>
 8006aae:	2b1d      	cmp	r3, #29
 8006ab0:	d001      	beq.n	8006ab6 <__sflush_r+0xae>
 8006ab2:	2b16      	cmp	r3, #22
 8006ab4:	d101      	bne.n	8006aba <__sflush_r+0xb2>
 8006ab6:	602f      	str	r7, [r5, #0]
 8006ab8:	e7b2      	b.n	8006a20 <__sflush_r+0x18>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	e7ae      	b.n	8006a22 <__sflush_r+0x1a>
 8006ac4:	690f      	ldr	r7, [r1, #16]
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d0aa      	beq.n	8006a20 <__sflush_r+0x18>
 8006aca:	0793      	lsls	r3, r2, #30
 8006acc:	bf18      	it	ne
 8006ace:	2300      	movne	r3, #0
 8006ad0:	680e      	ldr	r6, [r1, #0]
 8006ad2:	bf08      	it	eq
 8006ad4:	694b      	ldreq	r3, [r1, #20]
 8006ad6:	1bf6      	subs	r6, r6, r7
 8006ad8:	600f      	str	r7, [r1, #0]
 8006ada:	608b      	str	r3, [r1, #8]
 8006adc:	2e00      	cmp	r6, #0
 8006ade:	dd9f      	ble.n	8006a20 <__sflush_r+0x18>
 8006ae0:	4633      	mov	r3, r6
 8006ae2:	463a      	mov	r2, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	6a21      	ldr	r1, [r4, #32]
 8006ae8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006aec:	47e0      	blx	ip
 8006aee:	2800      	cmp	r0, #0
 8006af0:	dc06      	bgt.n	8006b00 <__sflush_r+0xf8>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	e790      	b.n	8006a22 <__sflush_r+0x1a>
 8006b00:	4407      	add	r7, r0
 8006b02:	1a36      	subs	r6, r6, r0
 8006b04:	e7ea      	b.n	8006adc <__sflush_r+0xd4>
 8006b06:	bf00      	nop
 8006b08:	20400001 	.word	0x20400001

08006b0c <_fflush_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	690b      	ldr	r3, [r1, #16]
 8006b10:	4605      	mov	r5, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	b913      	cbnz	r3, 8006b1c <_fflush_r+0x10>
 8006b16:	2500      	movs	r5, #0
 8006b18:	4628      	mov	r0, r5
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	b118      	cbz	r0, 8006b26 <_fflush_r+0x1a>
 8006b1e:	6983      	ldr	r3, [r0, #24]
 8006b20:	b90b      	cbnz	r3, 8006b26 <_fflush_r+0x1a>
 8006b22:	f000 f887 	bl	8006c34 <__sinit>
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <_fflush_r+0x6c>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	d11b      	bne.n	8006b64 <_fflush_r+0x58>
 8006b2c:	686c      	ldr	r4, [r5, #4]
 8006b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ef      	beq.n	8006b16 <_fflush_r+0xa>
 8006b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b38:	07d0      	lsls	r0, r2, #31
 8006b3a:	d404      	bmi.n	8006b46 <_fflush_r+0x3a>
 8006b3c:	0599      	lsls	r1, r3, #22
 8006b3e:	d402      	bmi.n	8006b46 <_fflush_r+0x3a>
 8006b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b42:	f000 f915 	bl	8006d70 <__retarget_lock_acquire_recursive>
 8006b46:	4628      	mov	r0, r5
 8006b48:	4621      	mov	r1, r4
 8006b4a:	f7ff ff5d 	bl	8006a08 <__sflush_r>
 8006b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b50:	4605      	mov	r5, r0
 8006b52:	07da      	lsls	r2, r3, #31
 8006b54:	d4e0      	bmi.n	8006b18 <_fflush_r+0xc>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	059b      	lsls	r3, r3, #22
 8006b5a:	d4dd      	bmi.n	8006b18 <_fflush_r+0xc>
 8006b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5e:	f000 f908 	bl	8006d72 <__retarget_lock_release_recursive>
 8006b62:	e7d9      	b.n	8006b18 <_fflush_r+0xc>
 8006b64:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <_fflush_r+0x70>)
 8006b66:	429c      	cmp	r4, r3
 8006b68:	d101      	bne.n	8006b6e <_fflush_r+0x62>
 8006b6a:	68ac      	ldr	r4, [r5, #8]
 8006b6c:	e7df      	b.n	8006b2e <_fflush_r+0x22>
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <_fflush_r+0x74>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	bf08      	it	eq
 8006b74:	68ec      	ldreq	r4, [r5, #12]
 8006b76:	e7da      	b.n	8006b2e <_fflush_r+0x22>
 8006b78:	08007208 	.word	0x08007208
 8006b7c:	08007228 	.word	0x08007228
 8006b80:	080071e8 	.word	0x080071e8

08006b84 <std>:
 8006b84:	2300      	movs	r3, #0
 8006b86:	b510      	push	{r4, lr}
 8006b88:	4604      	mov	r4, r0
 8006b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b92:	6083      	str	r3, [r0, #8]
 8006b94:	8181      	strh	r1, [r0, #12]
 8006b96:	6643      	str	r3, [r0, #100]	; 0x64
 8006b98:	81c2      	strh	r2, [r0, #14]
 8006b9a:	6183      	str	r3, [r0, #24]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	2208      	movs	r2, #8
 8006ba0:	305c      	adds	r0, #92	; 0x5c
 8006ba2:	f7ff fdf3 	bl	800678c <memset>
 8006ba6:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <std+0x38>)
 8006ba8:	6224      	str	r4, [r4, #32]
 8006baa:	6263      	str	r3, [r4, #36]	; 0x24
 8006bac:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <std+0x3c>)
 8006bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <std+0x40>)
 8006bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <std+0x44>)
 8006bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	bf00      	nop
 8006bbc:	08007019 	.word	0x08007019
 8006bc0:	0800703b 	.word	0x0800703b
 8006bc4:	08007073 	.word	0x08007073
 8006bc8:	08007097 	.word	0x08007097

08006bcc <_cleanup_r>:
 8006bcc:	4901      	ldr	r1, [pc, #4]	; (8006bd4 <_cleanup_r+0x8>)
 8006bce:	f000 b8af 	b.w	8006d30 <_fwalk_reent>
 8006bd2:	bf00      	nop
 8006bd4:	08006b0d 	.word	0x08006b0d

08006bd8 <__sfmoreglue>:
 8006bd8:	2268      	movs	r2, #104	; 0x68
 8006bda:	b570      	push	{r4, r5, r6, lr}
 8006bdc:	1e4d      	subs	r5, r1, #1
 8006bde:	4355      	muls	r5, r2
 8006be0:	460e      	mov	r6, r1
 8006be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006be6:	f000 f993 	bl	8006f10 <_malloc_r>
 8006bea:	4604      	mov	r4, r0
 8006bec:	b140      	cbz	r0, 8006c00 <__sfmoreglue+0x28>
 8006bee:	2100      	movs	r1, #0
 8006bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8006bf4:	300c      	adds	r0, #12
 8006bf6:	60a0      	str	r0, [r4, #8]
 8006bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bfc:	f7ff fdc6 	bl	800678c <memset>
 8006c00:	4620      	mov	r0, r4
 8006c02:	bd70      	pop	{r4, r5, r6, pc}

08006c04 <__sfp_lock_acquire>:
 8006c04:	4801      	ldr	r0, [pc, #4]	; (8006c0c <__sfp_lock_acquire+0x8>)
 8006c06:	f000 b8b3 	b.w	8006d70 <__retarget_lock_acquire_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20000101 	.word	0x20000101

08006c10 <__sfp_lock_release>:
 8006c10:	4801      	ldr	r0, [pc, #4]	; (8006c18 <__sfp_lock_release+0x8>)
 8006c12:	f000 b8ae 	b.w	8006d72 <__retarget_lock_release_recursive>
 8006c16:	bf00      	nop
 8006c18:	20000101 	.word	0x20000101

08006c1c <__sinit_lock_acquire>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	; (8006c24 <__sinit_lock_acquire+0x8>)
 8006c1e:	f000 b8a7 	b.w	8006d70 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	20000102 	.word	0x20000102

08006c28 <__sinit_lock_release>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__sinit_lock_release+0x8>)
 8006c2a:	f000 b8a2 	b.w	8006d72 <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000102 	.word	0x20000102

08006c34 <__sinit>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4604      	mov	r4, r0
 8006c38:	f7ff fff0 	bl	8006c1c <__sinit_lock_acquire>
 8006c3c:	69a3      	ldr	r3, [r4, #24]
 8006c3e:	b11b      	cbz	r3, 8006c48 <__sinit+0x14>
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f7ff bff0 	b.w	8006c28 <__sinit_lock_release>
 8006c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <__sinit+0x68>)
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <__sinit+0x6c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	bf08      	it	eq
 8006c5a:	2301      	moveq	r3, #1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bf08      	it	eq
 8006c60:	61a3      	streq	r3, [r4, #24]
 8006c62:	f000 f81f 	bl	8006ca4 <__sfp>
 8006c66:	6060      	str	r0, [r4, #4]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 f81b 	bl	8006ca4 <__sfp>
 8006c6e:	60a0      	str	r0, [r4, #8]
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f817 	bl	8006ca4 <__sfp>
 8006c76:	2200      	movs	r2, #0
 8006c78:	2104      	movs	r1, #4
 8006c7a:	60e0      	str	r0, [r4, #12]
 8006c7c:	6860      	ldr	r0, [r4, #4]
 8006c7e:	f7ff ff81 	bl	8006b84 <std>
 8006c82:	2201      	movs	r2, #1
 8006c84:	2109      	movs	r1, #9
 8006c86:	68a0      	ldr	r0, [r4, #8]
 8006c88:	f7ff ff7c 	bl	8006b84 <std>
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	2112      	movs	r1, #18
 8006c90:	68e0      	ldr	r0, [r4, #12]
 8006c92:	f7ff ff77 	bl	8006b84 <std>
 8006c96:	2301      	movs	r3, #1
 8006c98:	61a3      	str	r3, [r4, #24]
 8006c9a:	e7d1      	b.n	8006c40 <__sinit+0xc>
 8006c9c:	080071e4 	.word	0x080071e4
 8006ca0:	08006bcd 	.word	0x08006bcd

08006ca4 <__sfp>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	f7ff ffac 	bl	8006c04 <__sfp_lock_acquire>
 8006cac:	4b1e      	ldr	r3, [pc, #120]	; (8006d28 <__sfp+0x84>)
 8006cae:	681e      	ldr	r6, [r3, #0]
 8006cb0:	69b3      	ldr	r3, [r6, #24]
 8006cb2:	b913      	cbnz	r3, 8006cba <__sfp+0x16>
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7ff ffbd 	bl	8006c34 <__sinit>
 8006cba:	3648      	adds	r6, #72	; 0x48
 8006cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	d503      	bpl.n	8006ccc <__sfp+0x28>
 8006cc4:	6833      	ldr	r3, [r6, #0]
 8006cc6:	b30b      	cbz	r3, 8006d0c <__sfp+0x68>
 8006cc8:	6836      	ldr	r6, [r6, #0]
 8006cca:	e7f7      	b.n	8006cbc <__sfp+0x18>
 8006ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cd0:	b9d5      	cbnz	r5, 8006d08 <__sfp+0x64>
 8006cd2:	4b16      	ldr	r3, [pc, #88]	; (8006d2c <__sfp+0x88>)
 8006cd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cd8:	60e3      	str	r3, [r4, #12]
 8006cda:	6665      	str	r5, [r4, #100]	; 0x64
 8006cdc:	f000 f847 	bl	8006d6e <__retarget_lock_init_recursive>
 8006ce0:	f7ff ff96 	bl	8006c10 <__sfp_lock_release>
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cf0:	6025      	str	r5, [r4, #0]
 8006cf2:	61a5      	str	r5, [r4, #24]
 8006cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cf8:	f7ff fd48 	bl	800678c <memset>
 8006cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d04:	4620      	mov	r0, r4
 8006d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d08:	3468      	adds	r4, #104	; 0x68
 8006d0a:	e7d9      	b.n	8006cc0 <__sfp+0x1c>
 8006d0c:	2104      	movs	r1, #4
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff ff62 	bl	8006bd8 <__sfmoreglue>
 8006d14:	4604      	mov	r4, r0
 8006d16:	6030      	str	r0, [r6, #0]
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d1d5      	bne.n	8006cc8 <__sfp+0x24>
 8006d1c:	f7ff ff78 	bl	8006c10 <__sfp_lock_release>
 8006d20:	230c      	movs	r3, #12
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	e7ee      	b.n	8006d04 <__sfp+0x60>
 8006d26:	bf00      	nop
 8006d28:	080071e4 	.word	0x080071e4
 8006d2c:	ffff0001 	.word	0xffff0001

08006d30 <_fwalk_reent>:
 8006d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d34:	4606      	mov	r6, r0
 8006d36:	4688      	mov	r8, r1
 8006d38:	2700      	movs	r7, #0
 8006d3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d42:	f1b9 0901 	subs.w	r9, r9, #1
 8006d46:	d505      	bpl.n	8006d54 <_fwalk_reent+0x24>
 8006d48:	6824      	ldr	r4, [r4, #0]
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	d1f7      	bne.n	8006d3e <_fwalk_reent+0xe>
 8006d4e:	4638      	mov	r0, r7
 8006d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d54:	89ab      	ldrh	r3, [r5, #12]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d907      	bls.n	8006d6a <_fwalk_reent+0x3a>
 8006d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	d003      	beq.n	8006d6a <_fwalk_reent+0x3a>
 8006d62:	4629      	mov	r1, r5
 8006d64:	4630      	mov	r0, r6
 8006d66:	47c0      	blx	r8
 8006d68:	4307      	orrs	r7, r0
 8006d6a:	3568      	adds	r5, #104	; 0x68
 8006d6c:	e7e9      	b.n	8006d42 <_fwalk_reent+0x12>

08006d6e <__retarget_lock_init_recursive>:
 8006d6e:	4770      	bx	lr

08006d70 <__retarget_lock_acquire_recursive>:
 8006d70:	4770      	bx	lr

08006d72 <__retarget_lock_release_recursive>:
 8006d72:	4770      	bx	lr

08006d74 <__swhatbuf_r>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	460e      	mov	r6, r1
 8006d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	461d      	mov	r5, r3
 8006d82:	b096      	sub	sp, #88	; 0x58
 8006d84:	da08      	bge.n	8006d98 <__swhatbuf_r+0x24>
 8006d86:	2200      	movs	r2, #0
 8006d88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d8c:	602a      	str	r2, [r5, #0]
 8006d8e:	061a      	lsls	r2, r3, #24
 8006d90:	d410      	bmi.n	8006db4 <__swhatbuf_r+0x40>
 8006d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d96:	e00e      	b.n	8006db6 <__swhatbuf_r+0x42>
 8006d98:	466a      	mov	r2, sp
 8006d9a:	f000 f9a3 	bl	80070e4 <_fstat_r>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	dbf1      	blt.n	8006d86 <__swhatbuf_r+0x12>
 8006da2:	9a01      	ldr	r2, [sp, #4]
 8006da4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006da8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dac:	425a      	negs	r2, r3
 8006dae:	415a      	adcs	r2, r3
 8006db0:	602a      	str	r2, [r5, #0]
 8006db2:	e7ee      	b.n	8006d92 <__swhatbuf_r+0x1e>
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	2000      	movs	r0, #0
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	b016      	add	sp, #88	; 0x58
 8006dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dc0 <__smakebuf_r>:
 8006dc0:	898b      	ldrh	r3, [r1, #12]
 8006dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dc4:	079d      	lsls	r5, r3, #30
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460c      	mov	r4, r1
 8006dca:	d507      	bpl.n	8006ddc <__smakebuf_r+0x1c>
 8006dcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	6163      	str	r3, [r4, #20]
 8006dd8:	b002      	add	sp, #8
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	466a      	mov	r2, sp
 8006dde:	ab01      	add	r3, sp, #4
 8006de0:	f7ff ffc8 	bl	8006d74 <__swhatbuf_r>
 8006de4:	9900      	ldr	r1, [sp, #0]
 8006de6:	4605      	mov	r5, r0
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f891 	bl	8006f10 <_malloc_r>
 8006dee:	b948      	cbnz	r0, 8006e04 <__smakebuf_r+0x44>
 8006df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df4:	059a      	lsls	r2, r3, #22
 8006df6:	d4ef      	bmi.n	8006dd8 <__smakebuf_r+0x18>
 8006df8:	f023 0303 	bic.w	r3, r3, #3
 8006dfc:	f043 0302 	orr.w	r3, r3, #2
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	e7e3      	b.n	8006dcc <__smakebuf_r+0xc>
 8006e04:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <__smakebuf_r+0x7c>)
 8006e06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	6020      	str	r0, [r4, #0]
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	81a3      	strh	r3, [r4, #12]
 8006e12:	9b00      	ldr	r3, [sp, #0]
 8006e14:	6120      	str	r0, [r4, #16]
 8006e16:	6163      	str	r3, [r4, #20]
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	b15b      	cbz	r3, 8006e34 <__smakebuf_r+0x74>
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e22:	f000 f971 	bl	8007108 <_isatty_r>
 8006e26:	b128      	cbz	r0, 8006e34 <__smakebuf_r+0x74>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	89a0      	ldrh	r0, [r4, #12]
 8006e36:	4305      	orrs	r5, r0
 8006e38:	81a5      	strh	r5, [r4, #12]
 8006e3a:	e7cd      	b.n	8006dd8 <__smakebuf_r+0x18>
 8006e3c:	08006bcd 	.word	0x08006bcd

08006e40 <_free_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4605      	mov	r5, r0
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d040      	beq.n	8006eca <_free_r+0x8a>
 8006e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e4c:	1f0c      	subs	r4, r1, #4
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	bfb8      	it	lt
 8006e52:	18e4      	addlt	r4, r4, r3
 8006e54:	f000 f97a 	bl	800714c <__malloc_lock>
 8006e58:	4a1c      	ldr	r2, [pc, #112]	; (8006ecc <_free_r+0x8c>)
 8006e5a:	6813      	ldr	r3, [r2, #0]
 8006e5c:	b933      	cbnz	r3, 8006e6c <_free_r+0x2c>
 8006e5e:	6063      	str	r3, [r4, #4]
 8006e60:	6014      	str	r4, [r2, #0]
 8006e62:	4628      	mov	r0, r5
 8006e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e68:	f000 b976 	b.w	8007158 <__malloc_unlock>
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	d908      	bls.n	8006e82 <_free_r+0x42>
 8006e70:	6820      	ldr	r0, [r4, #0]
 8006e72:	1821      	adds	r1, r4, r0
 8006e74:	428b      	cmp	r3, r1
 8006e76:	bf01      	itttt	eq
 8006e78:	6819      	ldreq	r1, [r3, #0]
 8006e7a:	685b      	ldreq	r3, [r3, #4]
 8006e7c:	1809      	addeq	r1, r1, r0
 8006e7e:	6021      	streq	r1, [r4, #0]
 8006e80:	e7ed      	b.n	8006e5e <_free_r+0x1e>
 8006e82:	461a      	mov	r2, r3
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	b10b      	cbz	r3, 8006e8c <_free_r+0x4c>
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d9fa      	bls.n	8006e82 <_free_r+0x42>
 8006e8c:	6811      	ldr	r1, [r2, #0]
 8006e8e:	1850      	adds	r0, r2, r1
 8006e90:	42a0      	cmp	r0, r4
 8006e92:	d10b      	bne.n	8006eac <_free_r+0x6c>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	4401      	add	r1, r0
 8006e98:	1850      	adds	r0, r2, r1
 8006e9a:	4283      	cmp	r3, r0
 8006e9c:	6011      	str	r1, [r2, #0]
 8006e9e:	d1e0      	bne.n	8006e62 <_free_r+0x22>
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4401      	add	r1, r0
 8006ea6:	6011      	str	r1, [r2, #0]
 8006ea8:	6053      	str	r3, [r2, #4]
 8006eaa:	e7da      	b.n	8006e62 <_free_r+0x22>
 8006eac:	d902      	bls.n	8006eb4 <_free_r+0x74>
 8006eae:	230c      	movs	r3, #12
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	e7d6      	b.n	8006e62 <_free_r+0x22>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	1821      	adds	r1, r4, r0
 8006eb8:	428b      	cmp	r3, r1
 8006eba:	bf01      	itttt	eq
 8006ebc:	6819      	ldreq	r1, [r3, #0]
 8006ebe:	685b      	ldreq	r3, [r3, #4]
 8006ec0:	1809      	addeq	r1, r1, r0
 8006ec2:	6021      	streq	r1, [r4, #0]
 8006ec4:	6063      	str	r3, [r4, #4]
 8006ec6:	6054      	str	r4, [r2, #4]
 8006ec8:	e7cb      	b.n	8006e62 <_free_r+0x22>
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20000104 	.word	0x20000104

08006ed0 <sbrk_aligned>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4e0e      	ldr	r6, [pc, #56]	; (8006f0c <sbrk_aligned+0x3c>)
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	6831      	ldr	r1, [r6, #0]
 8006ed8:	4605      	mov	r5, r0
 8006eda:	b911      	cbnz	r1, 8006ee2 <sbrk_aligned+0x12>
 8006edc:	f000 f88c 	bl	8006ff8 <_sbrk_r>
 8006ee0:	6030      	str	r0, [r6, #0]
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 f887 	bl	8006ff8 <_sbrk_r>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d00a      	beq.n	8006f04 <sbrk_aligned+0x34>
 8006eee:	1cc4      	adds	r4, r0, #3
 8006ef0:	f024 0403 	bic.w	r4, r4, #3
 8006ef4:	42a0      	cmp	r0, r4
 8006ef6:	d007      	beq.n	8006f08 <sbrk_aligned+0x38>
 8006ef8:	1a21      	subs	r1, r4, r0
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 f87c 	bl	8006ff8 <_sbrk_r>
 8006f00:	3001      	adds	r0, #1
 8006f02:	d101      	bne.n	8006f08 <sbrk_aligned+0x38>
 8006f04:	f04f 34ff 	mov.w	r4, #4294967295
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	20000108 	.word	0x20000108

08006f10 <_malloc_r>:
 8006f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f14:	1ccd      	adds	r5, r1, #3
 8006f16:	f025 0503 	bic.w	r5, r5, #3
 8006f1a:	3508      	adds	r5, #8
 8006f1c:	2d0c      	cmp	r5, #12
 8006f1e:	bf38      	it	cc
 8006f20:	250c      	movcc	r5, #12
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	4607      	mov	r7, r0
 8006f26:	db01      	blt.n	8006f2c <_malloc_r+0x1c>
 8006f28:	42a9      	cmp	r1, r5
 8006f2a:	d905      	bls.n	8006f38 <_malloc_r+0x28>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	2600      	movs	r6, #0
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	4630      	mov	r0, r6
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f38:	4e2e      	ldr	r6, [pc, #184]	; (8006ff4 <_malloc_r+0xe4>)
 8006f3a:	f000 f907 	bl	800714c <__malloc_lock>
 8006f3e:	6833      	ldr	r3, [r6, #0]
 8006f40:	461c      	mov	r4, r3
 8006f42:	bb34      	cbnz	r4, 8006f92 <_malloc_r+0x82>
 8006f44:	4629      	mov	r1, r5
 8006f46:	4638      	mov	r0, r7
 8006f48:	f7ff ffc2 	bl	8006ed0 <sbrk_aligned>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	4604      	mov	r4, r0
 8006f50:	d14d      	bne.n	8006fee <_malloc_r+0xde>
 8006f52:	6834      	ldr	r4, [r6, #0]
 8006f54:	4626      	mov	r6, r4
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	d140      	bne.n	8006fdc <_malloc_r+0xcc>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4638      	mov	r0, r7
 8006f60:	eb04 0803 	add.w	r8, r4, r3
 8006f64:	f000 f848 	bl	8006ff8 <_sbrk_r>
 8006f68:	4580      	cmp	r8, r0
 8006f6a:	d13a      	bne.n	8006fe2 <_malloc_r+0xd2>
 8006f6c:	6821      	ldr	r1, [r4, #0]
 8006f6e:	3503      	adds	r5, #3
 8006f70:	1a6d      	subs	r5, r5, r1
 8006f72:	f025 0503 	bic.w	r5, r5, #3
 8006f76:	3508      	adds	r5, #8
 8006f78:	2d0c      	cmp	r5, #12
 8006f7a:	bf38      	it	cc
 8006f7c:	250c      	movcc	r5, #12
 8006f7e:	4638      	mov	r0, r7
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7ff ffa5 	bl	8006ed0 <sbrk_aligned>
 8006f86:	3001      	adds	r0, #1
 8006f88:	d02b      	beq.n	8006fe2 <_malloc_r+0xd2>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	442b      	add	r3, r5
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	e00e      	b.n	8006fb0 <_malloc_r+0xa0>
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	1b52      	subs	r2, r2, r5
 8006f96:	d41e      	bmi.n	8006fd6 <_malloc_r+0xc6>
 8006f98:	2a0b      	cmp	r2, #11
 8006f9a:	d916      	bls.n	8006fca <_malloc_r+0xba>
 8006f9c:	1961      	adds	r1, r4, r5
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	6025      	str	r5, [r4, #0]
 8006fa2:	bf18      	it	ne
 8006fa4:	6059      	strne	r1, [r3, #4]
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	bf08      	it	eq
 8006faa:	6031      	streq	r1, [r6, #0]
 8006fac:	5162      	str	r2, [r4, r5]
 8006fae:	604b      	str	r3, [r1, #4]
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f104 060b 	add.w	r6, r4, #11
 8006fb6:	f000 f8cf 	bl	8007158 <__malloc_unlock>
 8006fba:	f026 0607 	bic.w	r6, r6, #7
 8006fbe:	1d23      	adds	r3, r4, #4
 8006fc0:	1af2      	subs	r2, r6, r3
 8006fc2:	d0b6      	beq.n	8006f32 <_malloc_r+0x22>
 8006fc4:	1b9b      	subs	r3, r3, r6
 8006fc6:	50a3      	str	r3, [r4, r2]
 8006fc8:	e7b3      	b.n	8006f32 <_malloc_r+0x22>
 8006fca:	6862      	ldr	r2, [r4, #4]
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	bf0c      	ite	eq
 8006fd0:	6032      	streq	r2, [r6, #0]
 8006fd2:	605a      	strne	r2, [r3, #4]
 8006fd4:	e7ec      	b.n	8006fb0 <_malloc_r+0xa0>
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	6864      	ldr	r4, [r4, #4]
 8006fda:	e7b2      	b.n	8006f42 <_malloc_r+0x32>
 8006fdc:	4634      	mov	r4, r6
 8006fde:	6876      	ldr	r6, [r6, #4]
 8006fe0:	e7b9      	b.n	8006f56 <_malloc_r+0x46>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	f000 f8b6 	bl	8007158 <__malloc_unlock>
 8006fec:	e7a1      	b.n	8006f32 <_malloc_r+0x22>
 8006fee:	6025      	str	r5, [r4, #0]
 8006ff0:	e7de      	b.n	8006fb0 <_malloc_r+0xa0>
 8006ff2:	bf00      	nop
 8006ff4:	20000104 	.word	0x20000104

08006ff8 <_sbrk_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4d05      	ldr	r5, [pc, #20]	; (8007014 <_sbrk_r+0x1c>)
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	602b      	str	r3, [r5, #0]
 8007004:	f7fe f940 	bl	8005288 <_sbrk>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_sbrk_r+0x1a>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_sbrk_r+0x1a>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	2000010c 	.word	0x2000010c

08007018 <__sread>:
 8007018:	b510      	push	{r4, lr}
 800701a:	460c      	mov	r4, r1
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	f000 f8a0 	bl	8007164 <_read_r>
 8007024:	2800      	cmp	r0, #0
 8007026:	bfab      	itete	ge
 8007028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800702a:	89a3      	ldrhlt	r3, [r4, #12]
 800702c:	181b      	addge	r3, r3, r0
 800702e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007032:	bfac      	ite	ge
 8007034:	6563      	strge	r3, [r4, #84]	; 0x54
 8007036:	81a3      	strhlt	r3, [r4, #12]
 8007038:	bd10      	pop	{r4, pc}

0800703a <__swrite>:
 800703a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	461f      	mov	r7, r3
 8007040:	898b      	ldrh	r3, [r1, #12]
 8007042:	4605      	mov	r5, r0
 8007044:	05db      	lsls	r3, r3, #23
 8007046:	460c      	mov	r4, r1
 8007048:	4616      	mov	r6, r2
 800704a:	d505      	bpl.n	8007058 <__swrite+0x1e>
 800704c:	2302      	movs	r3, #2
 800704e:	2200      	movs	r2, #0
 8007050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007054:	f000 f868 	bl	8007128 <_lseek_r>
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	4632      	mov	r2, r6
 800705c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	4628      	mov	r0, r5
 8007064:	463b      	mov	r3, r7
 8007066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800706a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	f000 b817 	b.w	80070a0 <_write_r>

08007072 <__sseek>:
 8007072:	b510      	push	{r4, lr}
 8007074:	460c      	mov	r4, r1
 8007076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707a:	f000 f855 	bl	8007128 <_lseek_r>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	bf15      	itete	ne
 8007084:	6560      	strne	r0, [r4, #84]	; 0x54
 8007086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800708a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800708e:	81a3      	strheq	r3, [r4, #12]
 8007090:	bf18      	it	ne
 8007092:	81a3      	strhne	r3, [r4, #12]
 8007094:	bd10      	pop	{r4, pc}

08007096 <__sclose>:
 8007096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709a:	f000 b813 	b.w	80070c4 <_close_r>
	...

080070a0 <_write_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	2200      	movs	r2, #0
 80070aa:	4d05      	ldr	r5, [pc, #20]	; (80070c0 <_write_r+0x20>)
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7fe f89e 	bl	80051f0 <_write>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_write_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_write_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	2000010c 	.word	0x2000010c

080070c4 <_close_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	2300      	movs	r3, #0
 80070c8:	4d05      	ldr	r5, [pc, #20]	; (80070e0 <_close_r+0x1c>)
 80070ca:	4604      	mov	r4, r0
 80070cc:	4608      	mov	r0, r1
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	f7fe f8aa 	bl	8005228 <_close>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_close_r+0x1a>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_close_r+0x1a>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	2000010c 	.word	0x2000010c

080070e4 <_fstat_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	2300      	movs	r3, #0
 80070e8:	4d06      	ldr	r5, [pc, #24]	; (8007104 <_fstat_r+0x20>)
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	4611      	mov	r1, r2
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	f7fe f8a4 	bl	800523e <_fstat>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	d102      	bne.n	8007100 <_fstat_r+0x1c>
 80070fa:	682b      	ldr	r3, [r5, #0]
 80070fc:	b103      	cbz	r3, 8007100 <_fstat_r+0x1c>
 80070fe:	6023      	str	r3, [r4, #0]
 8007100:	bd38      	pop	{r3, r4, r5, pc}
 8007102:	bf00      	nop
 8007104:	2000010c 	.word	0x2000010c

08007108 <_isatty_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	2300      	movs	r3, #0
 800710c:	4d05      	ldr	r5, [pc, #20]	; (8007124 <_isatty_r+0x1c>)
 800710e:	4604      	mov	r4, r0
 8007110:	4608      	mov	r0, r1
 8007112:	602b      	str	r3, [r5, #0]
 8007114:	f7fe f8a2 	bl	800525c <_isatty>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_isatty_r+0x1a>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_isatty_r+0x1a>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	2000010c 	.word	0x2000010c

08007128 <_lseek_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	4611      	mov	r1, r2
 8007130:	2200      	movs	r2, #0
 8007132:	4d05      	ldr	r5, [pc, #20]	; (8007148 <_lseek_r+0x20>)
 8007134:	602a      	str	r2, [r5, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	f7fe f89a 	bl	8005270 <_lseek>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_lseek_r+0x1e>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_lseek_r+0x1e>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	2000010c 	.word	0x2000010c

0800714c <__malloc_lock>:
 800714c:	4801      	ldr	r0, [pc, #4]	; (8007154 <__malloc_lock+0x8>)
 800714e:	f7ff be0f 	b.w	8006d70 <__retarget_lock_acquire_recursive>
 8007152:	bf00      	nop
 8007154:	20000100 	.word	0x20000100

08007158 <__malloc_unlock>:
 8007158:	4801      	ldr	r0, [pc, #4]	; (8007160 <__malloc_unlock+0x8>)
 800715a:	f7ff be0a 	b.w	8006d72 <__retarget_lock_release_recursive>
 800715e:	bf00      	nop
 8007160:	20000100 	.word	0x20000100

08007164 <_read_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	2200      	movs	r2, #0
 800716e:	4d05      	ldr	r5, [pc, #20]	; (8007184 <_read_r+0x20>)
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	f7fe f81f 	bl	80051b6 <_read>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_read_r+0x1e>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_read_r+0x1e>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	2000010c 	.word	0x2000010c

08007188 <_init>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr

08007194 <_fini>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	bf00      	nop
 8007198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719a:	bc08      	pop	{r3}
 800719c:	469e      	mov	lr, r3
 800719e:	4770      	bx	lr
