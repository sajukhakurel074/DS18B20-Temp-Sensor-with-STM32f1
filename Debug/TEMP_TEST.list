
TEMP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b8  080029b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029b8  080029b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b8  080029b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08002a30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002a30  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c8f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199c  00000000  00000000  00029d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018643  00000000  00000000  0002ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c036  00000000  00000000  00045483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b678  00000000  00000000  000514b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcb31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e4  00000000  00000000  000dcb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a8 	.word	0x080028a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080028a8 	.word	0x080028a8

0800014c <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay+0x2c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	2200      	movs	r2, #0
 800015a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 800015c:	bf00      	nop
 800015e:	4b06      	ldr	r3, [pc, #24]	; (8000178 <delay+0x2c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	429a      	cmp	r2, r3
 8000168:	d8f9      	bhi.n	800015e <delay+0x12>
		;
}
 800016a:	bf00      	nop
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	2000008c 	.word	0x2000008c

0800017c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	f107 0310 	add.w	r3, r7, #16
 8000186:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000188:	f000 fae4 	bl	8000754 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800018c:	f000 f81c 	bl	80001c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000190:	f000 f8da 	bl	8000348 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000194:	f000 f8ae 	bl	80002f4 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000198:	f000 f85c 	bl	8000254 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 800019c:	4807      	ldr	r0, [pc, #28]	; (80001bc <main+0x40>)
 800019e:	f001 fa3f 	bl	8001620 <HAL_TIM_Base_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		printf("From TEMP Sensor Test\r\n");
 80001a2:	4807      	ldr	r0, [pc, #28]	; (80001c0 <main+0x44>)
 80001a4:	f001 fef8 	bl	8001f98 <puts>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <main+0x48>)
 80001ae:	f000 fdb3 	bl	8000d18 <HAL_GPIO_TogglePin>
		delay(1000); // (Max value to pass in function 0 - 1000) (min -> 1us to max -> 1ms)
 80001b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b6:	f7ff ffc9 	bl	800014c <delay>
	while (1) {
 80001ba:	e7f2      	b.n	80001a2 <main+0x26>
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	080028c0 	.word	0x080028c0
 80001c4:	40011000 	.word	0x40011000

080001c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fe68 	bl	8001eac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fc:	2302      	movs	r3, #2
 80001fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000206:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fd9b 	bl	8000d4c <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x58>
		Error_Handler();
 800021c:	f000 f8f2 	bl	8000404 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000230:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f001 f808 	bl	8001250 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x82>
		Error_Handler();
 8000246:	f000 f8dd 	bl	8000404 <Error_Handler>
	}
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	; 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800025a:	f107 0308 	add.w	r3, r7, #8
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000268:	463b      	mov	r3, r7
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000270:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <MX_TIM1_Init+0x98>)
 8000272:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <MX_TIM1_Init+0x9c>)
 8000274:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8000276:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <MX_TIM1_Init+0x98>)
 8000278:	2247      	movs	r2, #71	; 0x47
 800027a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <MX_TIM1_Init+0x98>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <MX_TIM1_Init+0x98>)
 8000284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000288:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800028a:	4b18      	ldr	r3, [pc, #96]	; (80002ec <MX_TIM1_Init+0x98>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000290:	4b16      	ldr	r3, [pc, #88]	; (80002ec <MX_TIM1_Init+0x98>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000296:	4b15      	ldr	r3, [pc, #84]	; (80002ec <MX_TIM1_Init+0x98>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800029c:	4813      	ldr	r0, [pc, #76]	; (80002ec <MX_TIM1_Init+0x98>)
 800029e:	f001 f96f 	bl	8001580 <HAL_TIM_Base_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_TIM1_Init+0x58>
		Error_Handler();
 80002a8:	f000 f8ac 	bl	8000404 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	4619      	mov	r1, r3
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <MX_TIM1_Init+0x98>)
 80002ba:	f001 f9fb 	bl	80016b4 <HAL_TIM_ConfigClockSource>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM1_Init+0x74>
		Error_Handler();
 80002c4:	f000 f89e 	bl	8000404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002c8:	2300      	movs	r3, #0
 80002ca:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80002d0:	463b      	mov	r3, r7
 80002d2:	4619      	mov	r1, r3
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_TIM1_Init+0x98>)
 80002d6:	f001 fba9 	bl	8001a2c <HAL_TIMEx_MasterConfigSynchronization>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80002e0:	f000 f890 	bl	8000404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80002e4:	bf00      	nop
 80002e6:	3718      	adds	r7, #24
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	2000008c 	.word	0x2000008c
 80002f0:	40012c00 	.word	0x40012c00

080002f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_USART1_UART_Init+0x50>)
 80002fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000304:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800032c:	f001 fbdc 	bl	8001ae8 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000336:	f000 f865 	bl	8000404 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200000d4 	.word	0x200000d4
 8000344:	40013800 	.word	0x40013800

08000348 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000362:	f043 0310 	orr.w	r3, r3, #16
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0310 	and.w	r3, r3, #16
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <MX_GPIO_Init+0x90>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	60bb      	str	r3, [r7, #8]
 800038a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003aa:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_GPIO_Init+0x94>)
 80003ac:	f000 fc9c 	bl	8000ce8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x94>)
 80003ca:	f000 fb09 	bl	80009e0 <HAL_GPIO_Init>

}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40011000 	.word	0x40011000

080003e0 <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80003e8:	1d39      	adds	r1, r7, #4
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
 80003ee:	2201      	movs	r2, #1
 80003f0:	4803      	ldr	r0, [pc, #12]	; (8000400 <__io_putchar+0x20>)
 80003f2:	f001 fbc6 	bl	8001b82 <HAL_UART_Transmit>
	return ch;
 80003f6:	687b      	ldr	r3, [r7, #4]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200000d4 	.word	0x200000d4

08000404 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("From the error handler\n");
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <Error_Handler+0x10>)
 800040a:	f001 fdc5 	bl	8001f98 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040e:	b672      	cpsid	i
}
 8000410:	bf00      	nop
	__disable_irq();
	while (1) {
 8000412:	e7fe      	b.n	8000412 <Error_Handler+0xe>
 8000414:	080028d8 	.word	0x080028d8

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <HAL_TIM_Base_MspInit+0x34>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d10b      	bne.n	80004a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 8000494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40012c00 	.word	0x40012c00
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <HAL_UART_MspInit+0x8c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d131      	bne.n	800053c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_UART_MspInit+0x94>)
 800051e:	f000 fa5f 	bl	80009e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <HAL_UART_MspInit+0x94>)
 8000538:	f000 fa52 	bl	80009e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	printf("From NMI Handler\n");
 8000554:	4801      	ldr	r0, [pc, #4]	; (800055c <NMI_Handler+0xc>)
 8000556:	f001 fd1f 	bl	8001f98 <puts>
	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800055a:	e7fe      	b.n	800055a <NMI_Handler+0xa>
 800055c:	080028f0 	.word	0x080028f0

08000560 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault handler\n");
 8000564:	4801      	ldr	r0, [pc, #4]	; (800056c <HardFault_Handler+0xc>)
 8000566:	f001 fd17 	bl	8001f98 <puts>
	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0xa>
 800056c:	08002904 	.word	0x08002904

08000570 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemMange Handler\n");
 8000574:	4801      	ldr	r0, [pc, #4]	; (800057c <MemManage_Handler+0xc>)
 8000576:	f001 fd0f 	bl	8001f98 <puts>
	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800057a:	e7fe      	b.n	800057a <MemManage_Handler+0xa>
 800057c:	08002918 	.word	0x08002918

08000580 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000584:	e7fe      	b.n	8000584 <BusFault_Handler+0x4>

08000586 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800058a:	e7fe      	b.n	800058a <UsageFault_Handler+0x4>

0800058c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80005b4:	f000 f914 	bl	80007e0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00a      	b.n	80005e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ce:	f3af 8000 	nop.w
 80005d2:	4601      	mov	r1, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	b2ca      	uxtb	r2, r1
 80005dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf0      	blt.n	80005ce <_read+0x12>
	}

return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fee5 	bl	80003e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x12>
	}
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_close>:

int _close(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	return -1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000654:	605a      	str	r2, [r3, #4]
	return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <_isatty>:

int _isatty(int file)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
	return 0;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <_sbrk+0x5c>)
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <_sbrk+0x60>)
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <_sbrk+0x64>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <_sbrk+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d207      	bcs.n	80006d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c0:	f001 fbca 	bl	8001e58 <__errno>
 80006c4:	4603      	mov	r3, r0
 80006c6:	220c      	movs	r2, #12
 80006c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e009      	b.n	80006e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <_sbrk+0x64>)
 80006e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20005000 	.word	0x20005000
 80006f0:	00000400 	.word	0x00000400
 80006f4:	20000118 	.word	0x20000118
 80006f8:	20000130 	.word	0x20000130

080006fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072e:	f7ff ffe5 	bl	80006fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f001 fb97 	bl	8001e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fd21 	bl	800017c <main>
  bx lr
 800073a:	4770      	bx	lr
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000744:	080029c0 	.word	0x080029c0
  ldr r2, =_sbss
 8000748:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800074c:	20000130 	.word	0x20000130

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_Init+0x28>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_Init+0x28>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f907 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f808 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff fe52 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x54>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x58>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	fbb3 f3f1 	udiv	r3, r3, r1
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f911 	bl	80009c6 <HAL_SYSTICK_Config>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00e      	b.n	80007cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d80a      	bhi.n	80007ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f000 f8e7 	bl	800098e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_InitTick+0x5c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x1c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HAL_IncTick+0x20>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a03      	ldr	r2, [pc, #12]	; (8000800 <HAL_IncTick+0x20>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	20000008 	.word	0x20000008
 8000800:	2000011c 	.word	0x2000011c

08000804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <HAL_GetTick+0x10>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	2000011c 	.word	0x2000011c

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	db0a      	blt.n	80008a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b2da      	uxtb	r2, r3
 8000894:	490c      	ldr	r1, [pc, #48]	; (80008c8 <__NVIC_SetPriority+0x4c>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	440b      	add	r3, r1
 80008a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a4:	e00a      	b.n	80008bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4908      	ldr	r1, [pc, #32]	; (80008cc <__NVIC_SetPriority+0x50>)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	3b04      	subs	r3, #4
 80008b4:	0112      	lsls	r2, r2, #4
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	761a      	strb	r2, [r3, #24]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	f1c3 0307 	rsb	r3, r3, #7
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	bf28      	it	cs
 80008ee:	2304      	movcs	r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d902      	bls.n	8000900 <NVIC_EncodePriority+0x30>
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3b03      	subs	r3, #3
 80008fe:	e000      	b.n	8000902 <NVIC_EncodePriority+0x32>
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43da      	mvns	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	401a      	ands	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	43d9      	mvns	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	4313      	orrs	r3, r2
         );
}
 800092a:	4618      	mov	r0, r3
 800092c:	3724      	adds	r7, #36	; 0x24
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000944:	d301      	bcc.n	800094a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000946:	2301      	movs	r3, #1
 8000948:	e00f      	b.n	800096a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <SysTick_Config+0x40>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000952:	210f      	movs	r1, #15
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f7ff ff90 	bl	800087c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_Config+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Config+0x40>)
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	e000e010 	.word	0xe000e010

08000978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff49 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	4603      	mov	r3, r0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a0:	f7ff ff5e 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff ff90 	bl	80008d0 <NVIC_EncodePriority>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff5f 	bl	800087c <__NVIC_SetPriority>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffb0 	bl	8000934 <SysTick_Config>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b08b      	sub	sp, #44	; 0x2c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e169      	b.n	8000cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f4:	2201      	movs	r2, #1
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	f040 8158 	bne.w	8000cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4a9a      	ldr	r2, [pc, #616]	; (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d05e      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a1c:	4a98      	ldr	r2, [pc, #608]	; (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d875      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a22:	4a98      	ldr	r2, [pc, #608]	; (8000c84 <HAL_GPIO_Init+0x2a4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d058      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a28:	4a96      	ldr	r2, [pc, #600]	; (8000c84 <HAL_GPIO_Init+0x2a4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d86f      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a2e:	4a96      	ldr	r2, [pc, #600]	; (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d052      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a34:	4a94      	ldr	r2, [pc, #592]	; (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d869      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a3a:	4a94      	ldr	r2, [pc, #592]	; (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d04c      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a40:	4a92      	ldr	r2, [pc, #584]	; (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d863      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a46:	4a92      	ldr	r2, [pc, #584]	; (8000c90 <HAL_GPIO_Init+0x2b0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d046      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a4c:	4a90      	ldr	r2, [pc, #576]	; (8000c90 <HAL_GPIO_Init+0x2b0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d85d      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d82a      	bhi.n	8000aac <HAL_GPIO_Init+0xcc>
 8000a56:	2b12      	cmp	r3, #18
 8000a58:	d859      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <HAL_GPIO_Init+0x80>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000adb 	.word	0x08000adb
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000ac7 	.word	0x08000ac7
 8000a6c:	08000b09 	.word	0x08000b09
 8000a70:	08000b0f 	.word	0x08000b0f
 8000a74:	08000b0f 	.word	0x08000b0f
 8000a78:	08000b0f 	.word	0x08000b0f
 8000a7c:	08000b0f 	.word	0x08000b0f
 8000a80:	08000b0f 	.word	0x08000b0f
 8000a84:	08000b0f 	.word	0x08000b0f
 8000a88:	08000b0f 	.word	0x08000b0f
 8000a8c:	08000b0f 	.word	0x08000b0f
 8000a90:	08000b0f 	.word	0x08000b0f
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000b0f 	.word	0x08000b0f
 8000a9c:	08000b0f 	.word	0x08000b0f
 8000aa0:	08000b0f 	.word	0x08000b0f
 8000aa4:	08000abd 	.word	0x08000abd
 8000aa8:	08000ad1 	.word	0x08000ad1
 8000aac:	4a79      	ldr	r2, [pc, #484]	; (8000c94 <HAL_GPIO_Init+0x2b4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab2:	e02c      	b.n	8000b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e029      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e024      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	3308      	adds	r3, #8
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e01f      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e01a      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e013      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d105      	bne.n	8000afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af0:	2308      	movs	r3, #8
 8000af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	611a      	str	r2, [r3, #16]
          break;
 8000afa:	e009      	b.n	8000b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	615a      	str	r2, [r3, #20]
          break;
 8000b06:	e003      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          break;
 8000b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	; 0xff
 8000b14:	d801      	bhi.n	8000b1a <HAL_GPIO_Init+0x13a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	e001      	b.n	8000b1e <HAL_GPIO_Init+0x13e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2bff      	cmp	r3, #255	; 0xff
 8000b24:	d802      	bhi.n	8000b2c <HAL_GPIO_Init+0x14c>
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x152>
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	3b08      	subs	r3, #8
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	210f      	movs	r1, #15
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	401a      	ands	r2, r3
 8000b44:	6a39      	ldr	r1, [r7, #32]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 80b1 	beq.w	8000cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b60:	4b4d      	ldr	r3, [pc, #308]	; (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a4c      	ldr	r2, [pc, #304]	; (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b4a      	ldr	r3, [pc, #296]	; (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b78:	4a48      	ldr	r2, [pc, #288]	; (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a40      	ldr	r2, [pc, #256]	; (8000ca0 <HAL_GPIO_Init+0x2c0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d013      	beq.n	8000bcc <HAL_GPIO_Init+0x1ec>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3f      	ldr	r2, [pc, #252]	; (8000ca4 <HAL_GPIO_Init+0x2c4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d00d      	beq.n	8000bc8 <HAL_GPIO_Init+0x1e8>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d007      	beq.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a3d      	ldr	r2, [pc, #244]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d101      	bne.n	8000bc0 <HAL_GPIO_Init+0x1e0>
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	e004      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd0:	f002 0203 	and.w	r2, r2, #3
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	4093      	lsls	r3, r2
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bde:	492f      	ldr	r1, [pc, #188]	; (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	3302      	adds	r3, #2
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	492c      	ldr	r1, [pc, #176]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4928      	ldr	r1, [pc, #160]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	4922      	ldr	r1, [pc, #136]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	604b      	str	r3, [r1, #4]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	491e      	ldr	r1, [pc, #120]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	4918      	ldr	r1, [pc, #96]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	608b      	str	r3, [r1, #8]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4914      	ldr	r1, [pc, #80]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d021      	beq.n	8000cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60cb      	str	r3, [r1, #12]
 8000c7c:	e021      	b.n	8000cc2 <HAL_GPIO_Init+0x2e2>
 8000c7e:	bf00      	nop
 8000c80:	10320000 	.word	0x10320000
 8000c84:	10310000 	.word	0x10310000
 8000c88:	10220000 	.word	0x10220000
 8000c8c:	10210000 	.word	0x10210000
 8000c90:	10120000 	.word	0x10120000
 8000c94:	10110000 	.word	0x10110000
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40011400 	.word	0x40011400
 8000cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_GPIO_Init+0x304>)
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	4909      	ldr	r1, [pc, #36]	; (8000ce4 <HAL_GPIO_Init+0x304>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f47f ae8e 	bne.w	80009f4 <HAL_GPIO_Init+0x14>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	372c      	adds	r7, #44	; 0x2c
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	041a      	lsls	r2, r3, #16
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	611a      	str	r2, [r3, #16]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	041a      	lsls	r2, r3, #16
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43d9      	mvns	r1, r3
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	400b      	ands	r3, r1
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	611a      	str	r2, [r3, #16]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e272      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8087 	beq.w	8000e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d6c:	4b92      	ldr	r3, [pc, #584]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 030c 	and.w	r3, r3, #12
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d00c      	beq.n	8000d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d78:	4b8f      	ldr	r3, [pc, #572]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d112      	bne.n	8000daa <HAL_RCC_OscConfig+0x5e>
 8000d84:	4b8c      	ldr	r3, [pc, #560]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d90:	d10b      	bne.n	8000daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d92:	4b89      	ldr	r3, [pc, #548]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d06c      	beq.n	8000e78 <HAL_RCC_OscConfig+0x12c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d168      	bne.n	8000e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e24c      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db2:	d106      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x76>
 8000db4:	4b80      	ldr	r3, [pc, #512]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a7f      	ldr	r2, [pc, #508]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e02e      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x98>
 8000dca:	4b7b      	ldr	r3, [pc, #492]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7a      	ldr	r2, [pc, #488]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	4b78      	ldr	r3, [pc, #480]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a77      	ldr	r2, [pc, #476]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e01d      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0xbc>
 8000dee:	4b72      	ldr	r3, [pc, #456]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a71      	ldr	r2, [pc, #452]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a6e      	ldr	r2, [pc, #440]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e00b      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000e08:	4b6b      	ldr	r3, [pc, #428]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a6a      	ldr	r2, [pc, #424]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a67      	ldr	r2, [pc, #412]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d013      	beq.n	8000e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fcec 	bl	8000804 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fce8 	bl	8000804 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e200      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0xe4>
 8000e4e:	e014      	b.n	8000e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fcd8 	bl	8000804 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fcd4 	bl	8000804 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b64      	cmp	r3, #100	; 0x64
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e1ec      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f0      	bne.n	8000e58 <HAL_RCC_OscConfig+0x10c>
 8000e76:	e000      	b.n	8000e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d063      	beq.n	8000f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e86:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e92:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d11c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x18c>
 8000e9e:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d116      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x176>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d001      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e1c0      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4939      	ldr	r1, [pc, #228]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed6:	e03a      	b.n	8000f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d020      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fc8d 	bl	8000804 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eee:	f7ff fc89 	bl	8000804 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e1a1      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4927      	ldr	r1, [pc, #156]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
 8000f20:	e015      	b.n	8000f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc6c 	bl	8000804 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc68 	bl	8000804 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e180      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d03a      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d019      	beq.n	8000f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff fc4c 	bl	8000804 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc48 	bl	8000804 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e160      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 fad8 	bl	8001544 <RCC_Delay>
 8000f94:	e01c      	b.n	8000fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fc32 	bl	8000804 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa2:	e00f      	b.n	8000fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fc2e 	bl	8000804 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d908      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e146      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	42420000 	.word	0x42420000
 8000fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc4:	4b92      	ldr	r3, [pc, #584]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e9      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80a6 	beq.w	800112a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe2:	4b8b      	ldr	r3, [pc, #556]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b88      	ldr	r3, [pc, #544]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a87      	ldr	r2, [pc, #540]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b85      	ldr	r3, [pc, #532]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	4b82      	ldr	r3, [pc, #520]	; (8001214 <HAL_RCC_OscConfig+0x4c8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001016:	4b7f      	ldr	r3, [pc, #508]	; (8001214 <HAL_RCC_OscConfig+0x4c8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7e      	ldr	r2, [pc, #504]	; (8001214 <HAL_RCC_OscConfig+0x4c8>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001022:	f7ff fbef 	bl	8000804 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102a:	f7ff fbeb 	bl	8000804 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	; 0x64
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e103      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103c:	4b75      	ldr	r3, [pc, #468]	; (8001214 <HAL_RCC_OscConfig+0x4c8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x312>
 8001050:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a6e      	ldr	r2, [pc, #440]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	e02d      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x334>
 8001066:	4b6a      	ldr	r3, [pc, #424]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a69      	ldr	r2, [pc, #420]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	4b67      	ldr	r3, [pc, #412]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a66      	ldr	r2, [pc, #408]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	e01c      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d10c      	bne.n	80010a2 <HAL_RCC_OscConfig+0x356>
 8001088:	4b61      	ldr	r3, [pc, #388]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4a60      	ldr	r2, [pc, #384]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6213      	str	r3, [r2, #32]
 8001094:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a5d      	ldr	r2, [pc, #372]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	e00b      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a5a      	ldr	r2, [pc, #360]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a57      	ldr	r2, [pc, #348]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c2:	f7ff fb9f 	bl	8000804 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c8:	e00a      	b.n	80010e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ca:	f7ff fb9b 	bl	8000804 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d8:	4293      	cmp	r3, r2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e0b1      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e0:	4b4b      	ldr	r3, [pc, #300]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0ee      	beq.n	80010ca <HAL_RCC_OscConfig+0x37e>
 80010ec:	e014      	b.n	8001118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb89 	bl	8000804 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f4:	e00a      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff fb85 	bl	8000804 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	f241 3288 	movw	r2, #5000	; 0x1388
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e09b      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1ee      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d105      	bne.n	800112a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111e:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a3b      	ldr	r2, [pc, #236]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8087 	beq.w	8001242 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b08      	cmp	r3, #8
 800113e:	d061      	beq.n	8001204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d146      	bne.n	80011d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_RCC_OscConfig+0x4cc>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb59 	bl	8000804 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff fb55 	bl	8000804 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e06d      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f0      	bne.n	8001156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d108      	bne.n	8001190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4921      	ldr	r1, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a19      	ldr	r1, [r3, #32]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	430b      	orrs	r3, r1
 80011a2:	491b      	ldr	r1, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_RCC_OscConfig+0x4cc>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fb29 	bl	8000804 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff fb25 	bl	8000804 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e03d      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46a>
 80011d4:	e035      	b.n	8001242 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_RCC_OscConfig+0x4cc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb12 	bl	8000804 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e4:	f7ff fb0e 	bl	8000804 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e026      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x498>
 8001202:	e01e      	b.n	8001242 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d107      	bne.n	800121c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e019      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
 8001210:	40021000 	.word	0x40021000
 8001214:	40007000 	.word	0x40007000
 8001218:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_OscConfig+0x500>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	429a      	cmp	r2, r3
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	429a      	cmp	r2, r3
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0d0      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d910      	bls.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4965      	ldr	r1, [pc, #404]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0b8      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ac:	4b59      	ldr	r3, [pc, #356]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	494d      	ldr	r1, [pc, #308]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d040      	beq.n	8001370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d115      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e07f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e073      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06b      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4936      	ldr	r1, [pc, #216]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fa60 	bl	8000804 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff fa5c 	bl	8000804 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e053      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 020c 	and.w	r2, r3, #12
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d1eb      	bne.n	8001348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d210      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0207 	bic.w	r2, r3, #7
 8001386:	4922      	ldr	r1, [pc, #136]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e032      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4916      	ldr	r1, [pc, #88]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	490e      	ldr	r1, [pc, #56]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	490a      	ldr	r1, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	5ccb      	ldrb	r3, [r1, r3]
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1cc>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f9be 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000
 8001414:	40021000 	.word	0x40021000
 8001418:	0800293c 	.word	0x0800293c
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	b490      	push	{r4, r7}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800142c:	1d3c      	adds	r4, r7, #4
 800142e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001434:	f240 2301 	movw	r3, #513	; 0x201
 8001438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d002      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x40>
 800145e:	2b08      	cmp	r3, #8
 8001460:	d003      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x46>
 8001462:	e02b      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001466:	623b      	str	r3, [r7, #32]
      break;
 8001468:	e02b      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3328      	adds	r3, #40	; 0x28
 8001474:	443b      	add	r3, r7
 8001476:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800147a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d012      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0c5b      	lsrs	r3, r3, #17
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	3328      	adds	r3, #40	; 0x28
 8001492:	443b      	add	r3, r7
 8001494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800149e:	fb03 f202 	mul.w	r2, r3, r2
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	e004      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	623b      	str	r3, [r7, #32]
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014be:	623b      	str	r3, [r7, #32]
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	6a3b      	ldr	r3, [r7, #32]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc90      	pop	{r4, r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	0800292c 	.word	0x0800292c
 80014d4:	40021000 	.word	0x40021000
 80014d8:	007a1200 	.word	0x007a1200
 80014dc:	003d0900 	.word	0x003d0900

080014e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f8:	f7ff fff2 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	4903      	ldr	r1, [pc, #12]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	0800294c 	.word	0x0800294c

0800151c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001520:	f7ff ffde 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	0adb      	lsrs	r3, r3, #11
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	4903      	ldr	r1, [pc, #12]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001532:	5ccb      	ldrb	r3, [r1, r3]
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000
 8001540:	0800294c 	.word	0x0800294c

08001544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <RCC_Delay+0x34>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <RCC_Delay+0x38>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0a5b      	lsrs	r3, r3, #9
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001560:	bf00      	nop
  }
  while (Delay --);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	60fa      	str	r2, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f9      	bne.n	8001560 <RCC_Delay+0x1c>
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000000 	.word	0x20000000
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e041      	b.n	8001616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7fe ff68 	bl	800047c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3304      	adds	r3, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f000 f93c 	bl	800183c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d001      	beq.n	8001638 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e032      	b.n	800169e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_TIM_Base_Start+0x88>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00e      	beq.n	8001668 <HAL_TIM_Base_Start+0x48>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001652:	d009      	beq.n	8001668 <HAL_TIM_Base_Start+0x48>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_TIM_Base_Start+0x8c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d004      	beq.n	8001668 <HAL_TIM_Base_Start+0x48>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_TIM_Base_Start+0x90>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d111      	bne.n	800168c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b06      	cmp	r3, #6
 8001678:	d010      	beq.n	800169c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800168a:	e007      	b.n	800169c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40012c00 	.word	0x40012c00
 80016ac:	40000400 	.word	0x40000400
 80016b0:	40000800 	.word	0x40000800

080016b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_TIM_ConfigClockSource+0x18>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e0b3      	b.n	8001834 <HAL_TIM_ConfigClockSource+0x180>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80016ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001704:	d03e      	beq.n	8001784 <HAL_TIM_ConfigClockSource+0xd0>
 8001706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170a:	f200 8087 	bhi.w	800181c <HAL_TIM_ConfigClockSource+0x168>
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001712:	f000 8085 	beq.w	8001820 <HAL_TIM_ConfigClockSource+0x16c>
 8001716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800171a:	d87f      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x168>
 800171c:	2b70      	cmp	r3, #112	; 0x70
 800171e:	d01a      	beq.n	8001756 <HAL_TIM_ConfigClockSource+0xa2>
 8001720:	2b70      	cmp	r3, #112	; 0x70
 8001722:	d87b      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x168>
 8001724:	2b60      	cmp	r3, #96	; 0x60
 8001726:	d050      	beq.n	80017ca <HAL_TIM_ConfigClockSource+0x116>
 8001728:	2b60      	cmp	r3, #96	; 0x60
 800172a:	d877      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x168>
 800172c:	2b50      	cmp	r3, #80	; 0x50
 800172e:	d03c      	beq.n	80017aa <HAL_TIM_ConfigClockSource+0xf6>
 8001730:	2b50      	cmp	r3, #80	; 0x50
 8001732:	d873      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x168>
 8001734:	2b40      	cmp	r3, #64	; 0x40
 8001736:	d058      	beq.n	80017ea <HAL_TIM_ConfigClockSource+0x136>
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d86f      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x168>
 800173c:	2b30      	cmp	r3, #48	; 0x30
 800173e:	d064      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x156>
 8001740:	2b30      	cmp	r3, #48	; 0x30
 8001742:	d86b      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x168>
 8001744:	2b20      	cmp	r3, #32
 8001746:	d060      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x156>
 8001748:	2b20      	cmp	r3, #32
 800174a:	d867      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x168>
 800174c:	2b00      	cmp	r3, #0
 800174e:	d05c      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x156>
 8001750:	2b10      	cmp	r3, #16
 8001752:	d05a      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001754:	e062      	b.n	800181c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f000 f942 	bl	80019ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001778:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	609a      	str	r2, [r3, #8]
      break;
 8001782:	e04e      	b.n	8001822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f000 f92b 	bl	80019ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017a6:	609a      	str	r2, [r3, #8]
      break;
 80017a8:	e03b      	b.n	8001822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f000 f8a2 	bl	8001900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2150      	movs	r1, #80	; 0x50
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f8f9 	bl	80019ba <TIM_ITRx_SetConfig>
      break;
 80017c8:	e02b      	b.n	8001822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6859      	ldr	r1, [r3, #4]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f000 f8c0 	bl	800195c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2160      	movs	r1, #96	; 0x60
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f8e9 	bl	80019ba <TIM_ITRx_SetConfig>
      break;
 80017e8:	e01b      	b.n	8001822 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f000 f882 	bl	8001900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2140      	movs	r1, #64	; 0x40
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f8d9 	bl	80019ba <TIM_ITRx_SetConfig>
      break;
 8001808:	e00b      	b.n	8001822 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f000 f8d0 	bl	80019ba <TIM_ITRx_SetConfig>
        break;
 800181a:	e002      	b.n	8001822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800181c:	bf00      	nop
 800181e:	e000      	b.n	8001822 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001820:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <TIM_Base_SetConfig+0xb8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00b      	beq.n	800186c <TIM_Base_SetConfig+0x30>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185a:	d007      	beq.n	800186c <TIM_Base_SetConfig+0x30>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <TIM_Base_SetConfig+0xbc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d003      	beq.n	800186c <TIM_Base_SetConfig+0x30>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <TIM_Base_SetConfig+0xc0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d108      	bne.n	800187e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <TIM_Base_SetConfig+0xb8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00b      	beq.n	800189e <TIM_Base_SetConfig+0x62>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d007      	beq.n	800189e <TIM_Base_SetConfig+0x62>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <TIM_Base_SetConfig+0xbc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d003      	beq.n	800189e <TIM_Base_SetConfig+0x62>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <TIM_Base_SetConfig+0xc0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d108      	bne.n	80018b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <TIM_Base_SetConfig+0xb8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d103      	bne.n	80018e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	615a      	str	r2, [r3, #20]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40000800 	.word	0x40000800

08001900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	f023 0201 	bic.w	r2, r3, #1
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800192a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f023 030a 	bic.w	r3, r3, #10
 800193c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	621a      	str	r2, [r3, #32]
}
 8001952:	bf00      	nop
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f023 0210 	bic.w	r2, r3, #16
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001986:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	031b      	lsls	r3, r3, #12
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	4313      	orrs	r3, r2
 8001990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001998:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	621a      	str	r2, [r3, #32]
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f043 0307 	orr.w	r3, r3, #7
 80019dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	609a      	str	r2, [r3, #8]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b087      	sub	sp, #28
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	021a      	lsls	r2, r3, #8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	609a      	str	r2, [r3, #8]
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e046      	b.n	8001ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a16      	ldr	r2, [pc, #88]	; (8001adc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00e      	beq.n	8001aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a90:	d009      	beq.n	8001aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40012c00 	.word	0x40012c00
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40000800 	.word	0x40000800

08001ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e03f      	b.n	8001b7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe fcd2 	bl	80004b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	; 0x24
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f905 	bl	8001d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b08a      	sub	sp, #40	; 0x28
 8001b86:	af02      	add	r7, sp, #8
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d17c      	bne.n	8001c9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_UART_Transmit+0x2c>
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e075      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_UART_Transmit+0x3e>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e06e      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2221      	movs	r2, #33	; 0x21
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bd6:	f7fe fe15 	bl	8000804 <HAL_GetTick>
 8001bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	88fa      	ldrh	r2, [r7, #6]
 8001be6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf0:	d108      	bne.n	8001c04 <HAL_UART_Transmit+0x82>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	e003      	b.n	8001c0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c14:	e02a      	b.n	8001c6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f840 	bl	8001ca6 <UART_WaitOnFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e036      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	3302      	adds	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	e007      	b.n	8001c5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1cf      	bne.n	8001c16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f810 	bl	8001ca6 <UART_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e006      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb6:	e02c      	b.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d028      	beq.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc6:	f7fe fd9d 	bl	8000804 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d21d      	bcs.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ce4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e00f      	b.n	8001d32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d0c3      	beq.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d76:	f023 030c 	bic.w	r3, r3, #12
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2c      	ldr	r2, [pc, #176]	; (8001e50 <UART_SetConfig+0x114>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d103      	bne.n	8001dac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001da4:	f7ff fbba 	bl	800151c <HAL_RCC_GetPCLK2Freq>
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	e002      	b.n	8001db2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001dac:	f7ff fba2 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8001db0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	009a      	lsls	r2, r3, #2
 8001dbc:	441a      	add	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <UART_SetConfig+0x118>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	0119      	lsls	r1, r3, #4
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	009a      	lsls	r2, r3, #2
 8001ddc:	441a      	add	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <UART_SetConfig+0x118>)
 8001dea:	fba3 0302 	umull	r0, r3, r3, r2
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2064      	movs	r0, #100	; 0x64
 8001df2:	fb00 f303 	mul.w	r3, r0, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	3332      	adds	r3, #50	; 0x32
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <UART_SetConfig+0x118>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e08:	4419      	add	r1, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	009a      	lsls	r2, r3, #2
 8001e14:	441a      	add	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <UART_SetConfig+0x118>)
 8001e22:	fba3 0302 	umull	r0, r3, r3, r2
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	fb00 f303 	mul.w	r3, r0, r3
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	3332      	adds	r3, #50	; 0x32
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <UART_SetConfig+0x118>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	f003 020f 	and.w	r2, r3, #15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	440a      	add	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40013800 	.word	0x40013800
 8001e54:	51eb851f 	.word	0x51eb851f

08001e58 <__errno>:
 8001e58:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <__errno+0x8>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	2000000c 	.word	0x2000000c

08001e64 <__libc_init_array>:
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	2600      	movs	r6, #0
 8001e68:	4d0c      	ldr	r5, [pc, #48]	; (8001e9c <__libc_init_array+0x38>)
 8001e6a:	4c0d      	ldr	r4, [pc, #52]	; (8001ea0 <__libc_init_array+0x3c>)
 8001e6c:	1b64      	subs	r4, r4, r5
 8001e6e:	10a4      	asrs	r4, r4, #2
 8001e70:	42a6      	cmp	r6, r4
 8001e72:	d109      	bne.n	8001e88 <__libc_init_array+0x24>
 8001e74:	f000 fd18 	bl	80028a8 <_init>
 8001e78:	2600      	movs	r6, #0
 8001e7a:	4d0a      	ldr	r5, [pc, #40]	; (8001ea4 <__libc_init_array+0x40>)
 8001e7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ea8 <__libc_init_array+0x44>)
 8001e7e:	1b64      	subs	r4, r4, r5
 8001e80:	10a4      	asrs	r4, r4, #2
 8001e82:	42a6      	cmp	r6, r4
 8001e84:	d105      	bne.n	8001e92 <__libc_init_array+0x2e>
 8001e86:	bd70      	pop	{r4, r5, r6, pc}
 8001e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e8c:	4798      	blx	r3
 8001e8e:	3601      	adds	r6, #1
 8001e90:	e7ee      	b.n	8001e70 <__libc_init_array+0xc>
 8001e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e96:	4798      	blx	r3
 8001e98:	3601      	adds	r6, #1
 8001e9a:	e7f2      	b.n	8001e82 <__libc_init_array+0x1e>
 8001e9c:	080029b8 	.word	0x080029b8
 8001ea0:	080029b8 	.word	0x080029b8
 8001ea4:	080029b8 	.word	0x080029b8
 8001ea8:	080029bc 	.word	0x080029bc

08001eac <memset>:
 8001eac:	4603      	mov	r3, r0
 8001eae:	4402      	add	r2, r0
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <memset+0xa>
 8001eb4:	4770      	bx	lr
 8001eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eba:	e7f9      	b.n	8001eb0 <memset+0x4>

08001ebc <_puts_r>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	460e      	mov	r6, r1
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	b118      	cbz	r0, 8001ecc <_puts_r+0x10>
 8001ec4:	6983      	ldr	r3, [r0, #24]
 8001ec6:	b90b      	cbnz	r3, 8001ecc <_puts_r+0x10>
 8001ec8:	f000 fa44 	bl	8002354 <__sinit>
 8001ecc:	69ab      	ldr	r3, [r5, #24]
 8001ece:	68ac      	ldr	r4, [r5, #8]
 8001ed0:	b913      	cbnz	r3, 8001ed8 <_puts_r+0x1c>
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	f000 fa3e 	bl	8002354 <__sinit>
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <_puts_r+0xd0>)
 8001eda:	429c      	cmp	r4, r3
 8001edc:	d120      	bne.n	8001f20 <_puts_r+0x64>
 8001ede:	686c      	ldr	r4, [r5, #4]
 8001ee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ee2:	07db      	lsls	r3, r3, #31
 8001ee4:	d405      	bmi.n	8001ef2 <_puts_r+0x36>
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	0598      	lsls	r0, r3, #22
 8001eea:	d402      	bmi.n	8001ef2 <_puts_r+0x36>
 8001eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001eee:	f000 facf 	bl	8002490 <__retarget_lock_acquire_recursive>
 8001ef2:	89a3      	ldrh	r3, [r4, #12]
 8001ef4:	0719      	lsls	r1, r3, #28
 8001ef6:	d51d      	bpl.n	8001f34 <_puts_r+0x78>
 8001ef8:	6923      	ldr	r3, [r4, #16]
 8001efa:	b1db      	cbz	r3, 8001f34 <_puts_r+0x78>
 8001efc:	3e01      	subs	r6, #1
 8001efe:	68a3      	ldr	r3, [r4, #8]
 8001f00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60a3      	str	r3, [r4, #8]
 8001f08:	bb39      	cbnz	r1, 8001f5a <_puts_r+0x9e>
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	da38      	bge.n	8001f80 <_puts_r+0xc4>
 8001f0e:	4622      	mov	r2, r4
 8001f10:	210a      	movs	r1, #10
 8001f12:	4628      	mov	r0, r5
 8001f14:	f000 f848 	bl	8001fa8 <__swbuf_r>
 8001f18:	3001      	adds	r0, #1
 8001f1a:	d011      	beq.n	8001f40 <_puts_r+0x84>
 8001f1c:	250a      	movs	r5, #10
 8001f1e:	e011      	b.n	8001f44 <_puts_r+0x88>
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <_puts_r+0xd4>)
 8001f22:	429c      	cmp	r4, r3
 8001f24:	d101      	bne.n	8001f2a <_puts_r+0x6e>
 8001f26:	68ac      	ldr	r4, [r5, #8]
 8001f28:	e7da      	b.n	8001ee0 <_puts_r+0x24>
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <_puts_r+0xd8>)
 8001f2c:	429c      	cmp	r4, r3
 8001f2e:	bf08      	it	eq
 8001f30:	68ec      	ldreq	r4, [r5, #12]
 8001f32:	e7d5      	b.n	8001ee0 <_puts_r+0x24>
 8001f34:	4621      	mov	r1, r4
 8001f36:	4628      	mov	r0, r5
 8001f38:	f000 f888 	bl	800204c <__swsetup_r>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d0dd      	beq.n	8001efc <_puts_r+0x40>
 8001f40:	f04f 35ff 	mov.w	r5, #4294967295
 8001f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f46:	07da      	lsls	r2, r3, #31
 8001f48:	d405      	bmi.n	8001f56 <_puts_r+0x9a>
 8001f4a:	89a3      	ldrh	r3, [r4, #12]
 8001f4c:	059b      	lsls	r3, r3, #22
 8001f4e:	d402      	bmi.n	8001f56 <_puts_r+0x9a>
 8001f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f52:	f000 fa9e 	bl	8002492 <__retarget_lock_release_recursive>
 8001f56:	4628      	mov	r0, r5
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da04      	bge.n	8001f68 <_puts_r+0xac>
 8001f5e:	69a2      	ldr	r2, [r4, #24]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dc06      	bgt.n	8001f72 <_puts_r+0xb6>
 8001f64:	290a      	cmp	r1, #10
 8001f66:	d004      	beq.n	8001f72 <_puts_r+0xb6>
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	6022      	str	r2, [r4, #0]
 8001f6e:	7019      	strb	r1, [r3, #0]
 8001f70:	e7c5      	b.n	8001efe <_puts_r+0x42>
 8001f72:	4622      	mov	r2, r4
 8001f74:	4628      	mov	r0, r5
 8001f76:	f000 f817 	bl	8001fa8 <__swbuf_r>
 8001f7a:	3001      	adds	r0, #1
 8001f7c:	d1bf      	bne.n	8001efe <_puts_r+0x42>
 8001f7e:	e7df      	b.n	8001f40 <_puts_r+0x84>
 8001f80:	250a      	movs	r5, #10
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	6022      	str	r2, [r4, #0]
 8001f88:	701d      	strb	r5, [r3, #0]
 8001f8a:	e7db      	b.n	8001f44 <_puts_r+0x88>
 8001f8c:	08002978 	.word	0x08002978
 8001f90:	08002998 	.word	0x08002998
 8001f94:	08002958 	.word	0x08002958

08001f98 <puts>:
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <puts+0xc>)
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	f7ff bf8d 	b.w	8001ebc <_puts_r>
 8001fa2:	bf00      	nop
 8001fa4:	2000000c 	.word	0x2000000c

08001fa8 <__swbuf_r>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	460e      	mov	r6, r1
 8001fac:	4614      	mov	r4, r2
 8001fae:	4605      	mov	r5, r0
 8001fb0:	b118      	cbz	r0, 8001fba <__swbuf_r+0x12>
 8001fb2:	6983      	ldr	r3, [r0, #24]
 8001fb4:	b90b      	cbnz	r3, 8001fba <__swbuf_r+0x12>
 8001fb6:	f000 f9cd 	bl	8002354 <__sinit>
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <__swbuf_r+0x98>)
 8001fbc:	429c      	cmp	r4, r3
 8001fbe:	d12b      	bne.n	8002018 <__swbuf_r+0x70>
 8001fc0:	686c      	ldr	r4, [r5, #4]
 8001fc2:	69a3      	ldr	r3, [r4, #24]
 8001fc4:	60a3      	str	r3, [r4, #8]
 8001fc6:	89a3      	ldrh	r3, [r4, #12]
 8001fc8:	071a      	lsls	r2, r3, #28
 8001fca:	d52f      	bpl.n	800202c <__swbuf_r+0x84>
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	b36b      	cbz	r3, 800202c <__swbuf_r+0x84>
 8001fd0:	6923      	ldr	r3, [r4, #16]
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	b2f6      	uxtb	r6, r6
 8001fd6:	1ac0      	subs	r0, r0, r3
 8001fd8:	6963      	ldr	r3, [r4, #20]
 8001fda:	4637      	mov	r7, r6
 8001fdc:	4283      	cmp	r3, r0
 8001fde:	dc04      	bgt.n	8001fea <__swbuf_r+0x42>
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	f000 f922 	bl	800222c <_fflush_r>
 8001fe8:	bb30      	cbnz	r0, 8002038 <__swbuf_r+0x90>
 8001fea:	68a3      	ldr	r3, [r4, #8]
 8001fec:	3001      	adds	r0, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60a3      	str	r3, [r4, #8]
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	6022      	str	r2, [r4, #0]
 8001ff8:	701e      	strb	r6, [r3, #0]
 8001ffa:	6963      	ldr	r3, [r4, #20]
 8001ffc:	4283      	cmp	r3, r0
 8001ffe:	d004      	beq.n	800200a <__swbuf_r+0x62>
 8002000:	89a3      	ldrh	r3, [r4, #12]
 8002002:	07db      	lsls	r3, r3, #31
 8002004:	d506      	bpl.n	8002014 <__swbuf_r+0x6c>
 8002006:	2e0a      	cmp	r6, #10
 8002008:	d104      	bne.n	8002014 <__swbuf_r+0x6c>
 800200a:	4621      	mov	r1, r4
 800200c:	4628      	mov	r0, r5
 800200e:	f000 f90d 	bl	800222c <_fflush_r>
 8002012:	b988      	cbnz	r0, 8002038 <__swbuf_r+0x90>
 8002014:	4638      	mov	r0, r7
 8002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <__swbuf_r+0x9c>)
 800201a:	429c      	cmp	r4, r3
 800201c:	d101      	bne.n	8002022 <__swbuf_r+0x7a>
 800201e:	68ac      	ldr	r4, [r5, #8]
 8002020:	e7cf      	b.n	8001fc2 <__swbuf_r+0x1a>
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <__swbuf_r+0xa0>)
 8002024:	429c      	cmp	r4, r3
 8002026:	bf08      	it	eq
 8002028:	68ec      	ldreq	r4, [r5, #12]
 800202a:	e7ca      	b.n	8001fc2 <__swbuf_r+0x1a>
 800202c:	4621      	mov	r1, r4
 800202e:	4628      	mov	r0, r5
 8002030:	f000 f80c 	bl	800204c <__swsetup_r>
 8002034:	2800      	cmp	r0, #0
 8002036:	d0cb      	beq.n	8001fd0 <__swbuf_r+0x28>
 8002038:	f04f 37ff 	mov.w	r7, #4294967295
 800203c:	e7ea      	b.n	8002014 <__swbuf_r+0x6c>
 800203e:	bf00      	nop
 8002040:	08002978 	.word	0x08002978
 8002044:	08002998 	.word	0x08002998
 8002048:	08002958 	.word	0x08002958

0800204c <__swsetup_r>:
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <__swsetup_r+0xcc>)
 800204e:	b570      	push	{r4, r5, r6, lr}
 8002050:	681d      	ldr	r5, [r3, #0]
 8002052:	4606      	mov	r6, r0
 8002054:	460c      	mov	r4, r1
 8002056:	b125      	cbz	r5, 8002062 <__swsetup_r+0x16>
 8002058:	69ab      	ldr	r3, [r5, #24]
 800205a:	b913      	cbnz	r3, 8002062 <__swsetup_r+0x16>
 800205c:	4628      	mov	r0, r5
 800205e:	f000 f979 	bl	8002354 <__sinit>
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <__swsetup_r+0xd0>)
 8002064:	429c      	cmp	r4, r3
 8002066:	d10f      	bne.n	8002088 <__swsetup_r+0x3c>
 8002068:	686c      	ldr	r4, [r5, #4]
 800206a:	89a3      	ldrh	r3, [r4, #12]
 800206c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002070:	0719      	lsls	r1, r3, #28
 8002072:	d42c      	bmi.n	80020ce <__swsetup_r+0x82>
 8002074:	06dd      	lsls	r5, r3, #27
 8002076:	d411      	bmi.n	800209c <__swsetup_r+0x50>
 8002078:	2309      	movs	r3, #9
 800207a:	6033      	str	r3, [r6, #0]
 800207c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	81a3      	strh	r3, [r4, #12]
 8002086:	e03e      	b.n	8002106 <__swsetup_r+0xba>
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <__swsetup_r+0xd4>)
 800208a:	429c      	cmp	r4, r3
 800208c:	d101      	bne.n	8002092 <__swsetup_r+0x46>
 800208e:	68ac      	ldr	r4, [r5, #8]
 8002090:	e7eb      	b.n	800206a <__swsetup_r+0x1e>
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <__swsetup_r+0xd8>)
 8002094:	429c      	cmp	r4, r3
 8002096:	bf08      	it	eq
 8002098:	68ec      	ldreq	r4, [r5, #12]
 800209a:	e7e6      	b.n	800206a <__swsetup_r+0x1e>
 800209c:	0758      	lsls	r0, r3, #29
 800209e:	d512      	bpl.n	80020c6 <__swsetup_r+0x7a>
 80020a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020a2:	b141      	cbz	r1, 80020b6 <__swsetup_r+0x6a>
 80020a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020a8:	4299      	cmp	r1, r3
 80020aa:	d002      	beq.n	80020b2 <__swsetup_r+0x66>
 80020ac:	4630      	mov	r0, r6
 80020ae:	f000 fa57 	bl	8002560 <_free_r>
 80020b2:	2300      	movs	r3, #0
 80020b4:	6363      	str	r3, [r4, #52]	; 0x34
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	2300      	movs	r3, #0
 80020c0:	6063      	str	r3, [r4, #4]
 80020c2:	6923      	ldr	r3, [r4, #16]
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	89a3      	ldrh	r3, [r4, #12]
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	81a3      	strh	r3, [r4, #12]
 80020ce:	6923      	ldr	r3, [r4, #16]
 80020d0:	b94b      	cbnz	r3, 80020e6 <__swsetup_r+0x9a>
 80020d2:	89a3      	ldrh	r3, [r4, #12]
 80020d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020dc:	d003      	beq.n	80020e6 <__swsetup_r+0x9a>
 80020de:	4621      	mov	r1, r4
 80020e0:	4630      	mov	r0, r6
 80020e2:	f000 f9fd 	bl	80024e0 <__smakebuf_r>
 80020e6:	89a0      	ldrh	r0, [r4, #12]
 80020e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020ec:	f010 0301 	ands.w	r3, r0, #1
 80020f0:	d00a      	beq.n	8002108 <__swsetup_r+0xbc>
 80020f2:	2300      	movs	r3, #0
 80020f4:	60a3      	str	r3, [r4, #8]
 80020f6:	6963      	ldr	r3, [r4, #20]
 80020f8:	425b      	negs	r3, r3
 80020fa:	61a3      	str	r3, [r4, #24]
 80020fc:	6923      	ldr	r3, [r4, #16]
 80020fe:	b943      	cbnz	r3, 8002112 <__swsetup_r+0xc6>
 8002100:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002104:	d1ba      	bne.n	800207c <__swsetup_r+0x30>
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	0781      	lsls	r1, r0, #30
 800210a:	bf58      	it	pl
 800210c:	6963      	ldrpl	r3, [r4, #20]
 800210e:	60a3      	str	r3, [r4, #8]
 8002110:	e7f4      	b.n	80020fc <__swsetup_r+0xb0>
 8002112:	2000      	movs	r0, #0
 8002114:	e7f7      	b.n	8002106 <__swsetup_r+0xba>
 8002116:	bf00      	nop
 8002118:	2000000c 	.word	0x2000000c
 800211c:	08002978 	.word	0x08002978
 8002120:	08002998 	.word	0x08002998
 8002124:	08002958 	.word	0x08002958

08002128 <__sflush_r>:
 8002128:	898a      	ldrh	r2, [r1, #12]
 800212a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212c:	4605      	mov	r5, r0
 800212e:	0710      	lsls	r0, r2, #28
 8002130:	460c      	mov	r4, r1
 8002132:	d457      	bmi.n	80021e4 <__sflush_r+0xbc>
 8002134:	684b      	ldr	r3, [r1, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	dc04      	bgt.n	8002144 <__sflush_r+0x1c>
 800213a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	dc01      	bgt.n	8002144 <__sflush_r+0x1c>
 8002140:	2000      	movs	r0, #0
 8002142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002146:	2e00      	cmp	r6, #0
 8002148:	d0fa      	beq.n	8002140 <__sflush_r+0x18>
 800214a:	2300      	movs	r3, #0
 800214c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002150:	682f      	ldr	r7, [r5, #0]
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	d032      	beq.n	80021bc <__sflush_r+0x94>
 8002156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	075a      	lsls	r2, r3, #29
 800215c:	d505      	bpl.n	800216a <__sflush_r+0x42>
 800215e:	6863      	ldr	r3, [r4, #4]
 8002160:	1ac0      	subs	r0, r0, r3
 8002162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002164:	b10b      	cbz	r3, 800216a <__sflush_r+0x42>
 8002166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002168:	1ac0      	subs	r0, r0, r3
 800216a:	2300      	movs	r3, #0
 800216c:	4602      	mov	r2, r0
 800216e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002170:	4628      	mov	r0, r5
 8002172:	6a21      	ldr	r1, [r4, #32]
 8002174:	47b0      	blx	r6
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	d106      	bne.n	800218a <__sflush_r+0x62>
 800217c:	6829      	ldr	r1, [r5, #0]
 800217e:	291d      	cmp	r1, #29
 8002180:	d82c      	bhi.n	80021dc <__sflush_r+0xb4>
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <__sflush_r+0x100>)
 8002184:	40ca      	lsrs	r2, r1
 8002186:	07d6      	lsls	r6, r2, #31
 8002188:	d528      	bpl.n	80021dc <__sflush_r+0xb4>
 800218a:	2200      	movs	r2, #0
 800218c:	6062      	str	r2, [r4, #4]
 800218e:	6922      	ldr	r2, [r4, #16]
 8002190:	04d9      	lsls	r1, r3, #19
 8002192:	6022      	str	r2, [r4, #0]
 8002194:	d504      	bpl.n	80021a0 <__sflush_r+0x78>
 8002196:	1c42      	adds	r2, r0, #1
 8002198:	d101      	bne.n	800219e <__sflush_r+0x76>
 800219a:	682b      	ldr	r3, [r5, #0]
 800219c:	b903      	cbnz	r3, 80021a0 <__sflush_r+0x78>
 800219e:	6560      	str	r0, [r4, #84]	; 0x54
 80021a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021a2:	602f      	str	r7, [r5, #0]
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d0cb      	beq.n	8002140 <__sflush_r+0x18>
 80021a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021ac:	4299      	cmp	r1, r3
 80021ae:	d002      	beq.n	80021b6 <__sflush_r+0x8e>
 80021b0:	4628      	mov	r0, r5
 80021b2:	f000 f9d5 	bl	8002560 <_free_r>
 80021b6:	2000      	movs	r0, #0
 80021b8:	6360      	str	r0, [r4, #52]	; 0x34
 80021ba:	e7c2      	b.n	8002142 <__sflush_r+0x1a>
 80021bc:	6a21      	ldr	r1, [r4, #32]
 80021be:	2301      	movs	r3, #1
 80021c0:	4628      	mov	r0, r5
 80021c2:	47b0      	blx	r6
 80021c4:	1c41      	adds	r1, r0, #1
 80021c6:	d1c7      	bne.n	8002158 <__sflush_r+0x30>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0c4      	beq.n	8002158 <__sflush_r+0x30>
 80021ce:	2b1d      	cmp	r3, #29
 80021d0:	d001      	beq.n	80021d6 <__sflush_r+0xae>
 80021d2:	2b16      	cmp	r3, #22
 80021d4:	d101      	bne.n	80021da <__sflush_r+0xb2>
 80021d6:	602f      	str	r7, [r5, #0]
 80021d8:	e7b2      	b.n	8002140 <__sflush_r+0x18>
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e0:	81a3      	strh	r3, [r4, #12]
 80021e2:	e7ae      	b.n	8002142 <__sflush_r+0x1a>
 80021e4:	690f      	ldr	r7, [r1, #16]
 80021e6:	2f00      	cmp	r7, #0
 80021e8:	d0aa      	beq.n	8002140 <__sflush_r+0x18>
 80021ea:	0793      	lsls	r3, r2, #30
 80021ec:	bf18      	it	ne
 80021ee:	2300      	movne	r3, #0
 80021f0:	680e      	ldr	r6, [r1, #0]
 80021f2:	bf08      	it	eq
 80021f4:	694b      	ldreq	r3, [r1, #20]
 80021f6:	1bf6      	subs	r6, r6, r7
 80021f8:	600f      	str	r7, [r1, #0]
 80021fa:	608b      	str	r3, [r1, #8]
 80021fc:	2e00      	cmp	r6, #0
 80021fe:	dd9f      	ble.n	8002140 <__sflush_r+0x18>
 8002200:	4633      	mov	r3, r6
 8002202:	463a      	mov	r2, r7
 8002204:	4628      	mov	r0, r5
 8002206:	6a21      	ldr	r1, [r4, #32]
 8002208:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800220c:	47e0      	blx	ip
 800220e:	2800      	cmp	r0, #0
 8002210:	dc06      	bgt.n	8002220 <__sflush_r+0xf8>
 8002212:	89a3      	ldrh	r3, [r4, #12]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221c:	81a3      	strh	r3, [r4, #12]
 800221e:	e790      	b.n	8002142 <__sflush_r+0x1a>
 8002220:	4407      	add	r7, r0
 8002222:	1a36      	subs	r6, r6, r0
 8002224:	e7ea      	b.n	80021fc <__sflush_r+0xd4>
 8002226:	bf00      	nop
 8002228:	20400001 	.word	0x20400001

0800222c <_fflush_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	690b      	ldr	r3, [r1, #16]
 8002230:	4605      	mov	r5, r0
 8002232:	460c      	mov	r4, r1
 8002234:	b913      	cbnz	r3, 800223c <_fflush_r+0x10>
 8002236:	2500      	movs	r5, #0
 8002238:	4628      	mov	r0, r5
 800223a:	bd38      	pop	{r3, r4, r5, pc}
 800223c:	b118      	cbz	r0, 8002246 <_fflush_r+0x1a>
 800223e:	6983      	ldr	r3, [r0, #24]
 8002240:	b90b      	cbnz	r3, 8002246 <_fflush_r+0x1a>
 8002242:	f000 f887 	bl	8002354 <__sinit>
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <_fflush_r+0x6c>)
 8002248:	429c      	cmp	r4, r3
 800224a:	d11b      	bne.n	8002284 <_fflush_r+0x58>
 800224c:	686c      	ldr	r4, [r5, #4]
 800224e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ef      	beq.n	8002236 <_fflush_r+0xa>
 8002256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002258:	07d0      	lsls	r0, r2, #31
 800225a:	d404      	bmi.n	8002266 <_fflush_r+0x3a>
 800225c:	0599      	lsls	r1, r3, #22
 800225e:	d402      	bmi.n	8002266 <_fflush_r+0x3a>
 8002260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002262:	f000 f915 	bl	8002490 <__retarget_lock_acquire_recursive>
 8002266:	4628      	mov	r0, r5
 8002268:	4621      	mov	r1, r4
 800226a:	f7ff ff5d 	bl	8002128 <__sflush_r>
 800226e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002270:	4605      	mov	r5, r0
 8002272:	07da      	lsls	r2, r3, #31
 8002274:	d4e0      	bmi.n	8002238 <_fflush_r+0xc>
 8002276:	89a3      	ldrh	r3, [r4, #12]
 8002278:	059b      	lsls	r3, r3, #22
 800227a:	d4dd      	bmi.n	8002238 <_fflush_r+0xc>
 800227c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800227e:	f000 f908 	bl	8002492 <__retarget_lock_release_recursive>
 8002282:	e7d9      	b.n	8002238 <_fflush_r+0xc>
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <_fflush_r+0x70>)
 8002286:	429c      	cmp	r4, r3
 8002288:	d101      	bne.n	800228e <_fflush_r+0x62>
 800228a:	68ac      	ldr	r4, [r5, #8]
 800228c:	e7df      	b.n	800224e <_fflush_r+0x22>
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <_fflush_r+0x74>)
 8002290:	429c      	cmp	r4, r3
 8002292:	bf08      	it	eq
 8002294:	68ec      	ldreq	r4, [r5, #12]
 8002296:	e7da      	b.n	800224e <_fflush_r+0x22>
 8002298:	08002978 	.word	0x08002978
 800229c:	08002998 	.word	0x08002998
 80022a0:	08002958 	.word	0x08002958

080022a4 <std>:
 80022a4:	2300      	movs	r3, #0
 80022a6:	b510      	push	{r4, lr}
 80022a8:	4604      	mov	r4, r0
 80022aa:	e9c0 3300 	strd	r3, r3, [r0]
 80022ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022b2:	6083      	str	r3, [r0, #8]
 80022b4:	8181      	strh	r1, [r0, #12]
 80022b6:	6643      	str	r3, [r0, #100]	; 0x64
 80022b8:	81c2      	strh	r2, [r0, #14]
 80022ba:	6183      	str	r3, [r0, #24]
 80022bc:	4619      	mov	r1, r3
 80022be:	2208      	movs	r2, #8
 80022c0:	305c      	adds	r0, #92	; 0x5c
 80022c2:	f7ff fdf3 	bl	8001eac <memset>
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <std+0x38>)
 80022c8:	6224      	str	r4, [r4, #32]
 80022ca:	6263      	str	r3, [r4, #36]	; 0x24
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <std+0x3c>)
 80022ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <std+0x40>)
 80022d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <std+0x44>)
 80022d6:	6323      	str	r3, [r4, #48]	; 0x30
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	bf00      	nop
 80022dc:	08002739 	.word	0x08002739
 80022e0:	0800275b 	.word	0x0800275b
 80022e4:	08002793 	.word	0x08002793
 80022e8:	080027b7 	.word	0x080027b7

080022ec <_cleanup_r>:
 80022ec:	4901      	ldr	r1, [pc, #4]	; (80022f4 <_cleanup_r+0x8>)
 80022ee:	f000 b8af 	b.w	8002450 <_fwalk_reent>
 80022f2:	bf00      	nop
 80022f4:	0800222d 	.word	0x0800222d

080022f8 <__sfmoreglue>:
 80022f8:	2268      	movs	r2, #104	; 0x68
 80022fa:	b570      	push	{r4, r5, r6, lr}
 80022fc:	1e4d      	subs	r5, r1, #1
 80022fe:	4355      	muls	r5, r2
 8002300:	460e      	mov	r6, r1
 8002302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002306:	f000 f993 	bl	8002630 <_malloc_r>
 800230a:	4604      	mov	r4, r0
 800230c:	b140      	cbz	r0, 8002320 <__sfmoreglue+0x28>
 800230e:	2100      	movs	r1, #0
 8002310:	e9c0 1600 	strd	r1, r6, [r0]
 8002314:	300c      	adds	r0, #12
 8002316:	60a0      	str	r0, [r4, #8]
 8002318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800231c:	f7ff fdc6 	bl	8001eac <memset>
 8002320:	4620      	mov	r0, r4
 8002322:	bd70      	pop	{r4, r5, r6, pc}

08002324 <__sfp_lock_acquire>:
 8002324:	4801      	ldr	r0, [pc, #4]	; (800232c <__sfp_lock_acquire+0x8>)
 8002326:	f000 b8b3 	b.w	8002490 <__retarget_lock_acquire_recursive>
 800232a:	bf00      	nop
 800232c:	20000121 	.word	0x20000121

08002330 <__sfp_lock_release>:
 8002330:	4801      	ldr	r0, [pc, #4]	; (8002338 <__sfp_lock_release+0x8>)
 8002332:	f000 b8ae 	b.w	8002492 <__retarget_lock_release_recursive>
 8002336:	bf00      	nop
 8002338:	20000121 	.word	0x20000121

0800233c <__sinit_lock_acquire>:
 800233c:	4801      	ldr	r0, [pc, #4]	; (8002344 <__sinit_lock_acquire+0x8>)
 800233e:	f000 b8a7 	b.w	8002490 <__retarget_lock_acquire_recursive>
 8002342:	bf00      	nop
 8002344:	20000122 	.word	0x20000122

08002348 <__sinit_lock_release>:
 8002348:	4801      	ldr	r0, [pc, #4]	; (8002350 <__sinit_lock_release+0x8>)
 800234a:	f000 b8a2 	b.w	8002492 <__retarget_lock_release_recursive>
 800234e:	bf00      	nop
 8002350:	20000122 	.word	0x20000122

08002354 <__sinit>:
 8002354:	b510      	push	{r4, lr}
 8002356:	4604      	mov	r4, r0
 8002358:	f7ff fff0 	bl	800233c <__sinit_lock_acquire>
 800235c:	69a3      	ldr	r3, [r4, #24]
 800235e:	b11b      	cbz	r3, 8002368 <__sinit+0x14>
 8002360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002364:	f7ff bff0 	b.w	8002348 <__sinit_lock_release>
 8002368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800236c:	6523      	str	r3, [r4, #80]	; 0x50
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <__sinit+0x68>)
 8002370:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <__sinit+0x6c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	62a2      	str	r2, [r4, #40]	; 0x28
 8002376:	42a3      	cmp	r3, r4
 8002378:	bf08      	it	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	4620      	mov	r0, r4
 800237e:	bf08      	it	eq
 8002380:	61a3      	streq	r3, [r4, #24]
 8002382:	f000 f81f 	bl	80023c4 <__sfp>
 8002386:	6060      	str	r0, [r4, #4]
 8002388:	4620      	mov	r0, r4
 800238a:	f000 f81b 	bl	80023c4 <__sfp>
 800238e:	60a0      	str	r0, [r4, #8]
 8002390:	4620      	mov	r0, r4
 8002392:	f000 f817 	bl	80023c4 <__sfp>
 8002396:	2200      	movs	r2, #0
 8002398:	2104      	movs	r1, #4
 800239a:	60e0      	str	r0, [r4, #12]
 800239c:	6860      	ldr	r0, [r4, #4]
 800239e:	f7ff ff81 	bl	80022a4 <std>
 80023a2:	2201      	movs	r2, #1
 80023a4:	2109      	movs	r1, #9
 80023a6:	68a0      	ldr	r0, [r4, #8]
 80023a8:	f7ff ff7c 	bl	80022a4 <std>
 80023ac:	2202      	movs	r2, #2
 80023ae:	2112      	movs	r1, #18
 80023b0:	68e0      	ldr	r0, [r4, #12]
 80023b2:	f7ff ff77 	bl	80022a4 <std>
 80023b6:	2301      	movs	r3, #1
 80023b8:	61a3      	str	r3, [r4, #24]
 80023ba:	e7d1      	b.n	8002360 <__sinit+0xc>
 80023bc:	08002954 	.word	0x08002954
 80023c0:	080022ed 	.word	0x080022ed

080023c4 <__sfp>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	4607      	mov	r7, r0
 80023c8:	f7ff ffac 	bl	8002324 <__sfp_lock_acquire>
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <__sfp+0x84>)
 80023ce:	681e      	ldr	r6, [r3, #0]
 80023d0:	69b3      	ldr	r3, [r6, #24]
 80023d2:	b913      	cbnz	r3, 80023da <__sfp+0x16>
 80023d4:	4630      	mov	r0, r6
 80023d6:	f7ff ffbd 	bl	8002354 <__sinit>
 80023da:	3648      	adds	r6, #72	; 0x48
 80023dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	d503      	bpl.n	80023ec <__sfp+0x28>
 80023e4:	6833      	ldr	r3, [r6, #0]
 80023e6:	b30b      	cbz	r3, 800242c <__sfp+0x68>
 80023e8:	6836      	ldr	r6, [r6, #0]
 80023ea:	e7f7      	b.n	80023dc <__sfp+0x18>
 80023ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80023f0:	b9d5      	cbnz	r5, 8002428 <__sfp+0x64>
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <__sfp+0x88>)
 80023f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80023f8:	60e3      	str	r3, [r4, #12]
 80023fa:	6665      	str	r5, [r4, #100]	; 0x64
 80023fc:	f000 f847 	bl	800248e <__retarget_lock_init_recursive>
 8002400:	f7ff ff96 	bl	8002330 <__sfp_lock_release>
 8002404:	2208      	movs	r2, #8
 8002406:	4629      	mov	r1, r5
 8002408:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800240c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002410:	6025      	str	r5, [r4, #0]
 8002412:	61a5      	str	r5, [r4, #24]
 8002414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002418:	f7ff fd48 	bl	8001eac <memset>
 800241c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002424:	4620      	mov	r0, r4
 8002426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002428:	3468      	adds	r4, #104	; 0x68
 800242a:	e7d9      	b.n	80023e0 <__sfp+0x1c>
 800242c:	2104      	movs	r1, #4
 800242e:	4638      	mov	r0, r7
 8002430:	f7ff ff62 	bl	80022f8 <__sfmoreglue>
 8002434:	4604      	mov	r4, r0
 8002436:	6030      	str	r0, [r6, #0]
 8002438:	2800      	cmp	r0, #0
 800243a:	d1d5      	bne.n	80023e8 <__sfp+0x24>
 800243c:	f7ff ff78 	bl	8002330 <__sfp_lock_release>
 8002440:	230c      	movs	r3, #12
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	e7ee      	b.n	8002424 <__sfp+0x60>
 8002446:	bf00      	nop
 8002448:	08002954 	.word	0x08002954
 800244c:	ffff0001 	.word	0xffff0001

08002450 <_fwalk_reent>:
 8002450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002454:	4606      	mov	r6, r0
 8002456:	4688      	mov	r8, r1
 8002458:	2700      	movs	r7, #0
 800245a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800245e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002462:	f1b9 0901 	subs.w	r9, r9, #1
 8002466:	d505      	bpl.n	8002474 <_fwalk_reent+0x24>
 8002468:	6824      	ldr	r4, [r4, #0]
 800246a:	2c00      	cmp	r4, #0
 800246c:	d1f7      	bne.n	800245e <_fwalk_reent+0xe>
 800246e:	4638      	mov	r0, r7
 8002470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002474:	89ab      	ldrh	r3, [r5, #12]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d907      	bls.n	800248a <_fwalk_reent+0x3a>
 800247a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800247e:	3301      	adds	r3, #1
 8002480:	d003      	beq.n	800248a <_fwalk_reent+0x3a>
 8002482:	4629      	mov	r1, r5
 8002484:	4630      	mov	r0, r6
 8002486:	47c0      	blx	r8
 8002488:	4307      	orrs	r7, r0
 800248a:	3568      	adds	r5, #104	; 0x68
 800248c:	e7e9      	b.n	8002462 <_fwalk_reent+0x12>

0800248e <__retarget_lock_init_recursive>:
 800248e:	4770      	bx	lr

08002490 <__retarget_lock_acquire_recursive>:
 8002490:	4770      	bx	lr

08002492 <__retarget_lock_release_recursive>:
 8002492:	4770      	bx	lr

08002494 <__swhatbuf_r>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	460e      	mov	r6, r1
 8002498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800249c:	4614      	mov	r4, r2
 800249e:	2900      	cmp	r1, #0
 80024a0:	461d      	mov	r5, r3
 80024a2:	b096      	sub	sp, #88	; 0x58
 80024a4:	da08      	bge.n	80024b8 <__swhatbuf_r+0x24>
 80024a6:	2200      	movs	r2, #0
 80024a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80024ac:	602a      	str	r2, [r5, #0]
 80024ae:	061a      	lsls	r2, r3, #24
 80024b0:	d410      	bmi.n	80024d4 <__swhatbuf_r+0x40>
 80024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b6:	e00e      	b.n	80024d6 <__swhatbuf_r+0x42>
 80024b8:	466a      	mov	r2, sp
 80024ba:	f000 f9a3 	bl	8002804 <_fstat_r>
 80024be:	2800      	cmp	r0, #0
 80024c0:	dbf1      	blt.n	80024a6 <__swhatbuf_r+0x12>
 80024c2:	9a01      	ldr	r2, [sp, #4]
 80024c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024cc:	425a      	negs	r2, r3
 80024ce:	415a      	adcs	r2, r3
 80024d0:	602a      	str	r2, [r5, #0]
 80024d2:	e7ee      	b.n	80024b2 <__swhatbuf_r+0x1e>
 80024d4:	2340      	movs	r3, #64	; 0x40
 80024d6:	2000      	movs	r0, #0
 80024d8:	6023      	str	r3, [r4, #0]
 80024da:	b016      	add	sp, #88	; 0x58
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080024e0 <__smakebuf_r>:
 80024e0:	898b      	ldrh	r3, [r1, #12]
 80024e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024e4:	079d      	lsls	r5, r3, #30
 80024e6:	4606      	mov	r6, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	d507      	bpl.n	80024fc <__smakebuf_r+0x1c>
 80024ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	6123      	str	r3, [r4, #16]
 80024f4:	2301      	movs	r3, #1
 80024f6:	6163      	str	r3, [r4, #20]
 80024f8:	b002      	add	sp, #8
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	466a      	mov	r2, sp
 80024fe:	ab01      	add	r3, sp, #4
 8002500:	f7ff ffc8 	bl	8002494 <__swhatbuf_r>
 8002504:	9900      	ldr	r1, [sp, #0]
 8002506:	4605      	mov	r5, r0
 8002508:	4630      	mov	r0, r6
 800250a:	f000 f891 	bl	8002630 <_malloc_r>
 800250e:	b948      	cbnz	r0, 8002524 <__smakebuf_r+0x44>
 8002510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002514:	059a      	lsls	r2, r3, #22
 8002516:	d4ef      	bmi.n	80024f8 <__smakebuf_r+0x18>
 8002518:	f023 0303 	bic.w	r3, r3, #3
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	81a3      	strh	r3, [r4, #12]
 8002522:	e7e3      	b.n	80024ec <__smakebuf_r+0xc>
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <__smakebuf_r+0x7c>)
 8002526:	62b3      	str	r3, [r6, #40]	; 0x28
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	6020      	str	r0, [r4, #0]
 800252c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002530:	81a3      	strh	r3, [r4, #12]
 8002532:	9b00      	ldr	r3, [sp, #0]
 8002534:	6120      	str	r0, [r4, #16]
 8002536:	6163      	str	r3, [r4, #20]
 8002538:	9b01      	ldr	r3, [sp, #4]
 800253a:	b15b      	cbz	r3, 8002554 <__smakebuf_r+0x74>
 800253c:	4630      	mov	r0, r6
 800253e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002542:	f000 f971 	bl	8002828 <_isatty_r>
 8002546:	b128      	cbz	r0, 8002554 <__smakebuf_r+0x74>
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	81a3      	strh	r3, [r4, #12]
 8002554:	89a0      	ldrh	r0, [r4, #12]
 8002556:	4305      	orrs	r5, r0
 8002558:	81a5      	strh	r5, [r4, #12]
 800255a:	e7cd      	b.n	80024f8 <__smakebuf_r+0x18>
 800255c:	080022ed 	.word	0x080022ed

08002560 <_free_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4605      	mov	r5, r0
 8002564:	2900      	cmp	r1, #0
 8002566:	d040      	beq.n	80025ea <_free_r+0x8a>
 8002568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800256c:	1f0c      	subs	r4, r1, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfb8      	it	lt
 8002572:	18e4      	addlt	r4, r4, r3
 8002574:	f000 f97a 	bl	800286c <__malloc_lock>
 8002578:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <_free_r+0x8c>)
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	b933      	cbnz	r3, 800258c <_free_r+0x2c>
 800257e:	6063      	str	r3, [r4, #4]
 8002580:	6014      	str	r4, [r2, #0]
 8002582:	4628      	mov	r0, r5
 8002584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002588:	f000 b976 	b.w	8002878 <__malloc_unlock>
 800258c:	42a3      	cmp	r3, r4
 800258e:	d908      	bls.n	80025a2 <_free_r+0x42>
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	1821      	adds	r1, r4, r0
 8002594:	428b      	cmp	r3, r1
 8002596:	bf01      	itttt	eq
 8002598:	6819      	ldreq	r1, [r3, #0]
 800259a:	685b      	ldreq	r3, [r3, #4]
 800259c:	1809      	addeq	r1, r1, r0
 800259e:	6021      	streq	r1, [r4, #0]
 80025a0:	e7ed      	b.n	800257e <_free_r+0x1e>
 80025a2:	461a      	mov	r2, r3
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	b10b      	cbz	r3, 80025ac <_free_r+0x4c>
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	d9fa      	bls.n	80025a2 <_free_r+0x42>
 80025ac:	6811      	ldr	r1, [r2, #0]
 80025ae:	1850      	adds	r0, r2, r1
 80025b0:	42a0      	cmp	r0, r4
 80025b2:	d10b      	bne.n	80025cc <_free_r+0x6c>
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	4401      	add	r1, r0
 80025b8:	1850      	adds	r0, r2, r1
 80025ba:	4283      	cmp	r3, r0
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	d1e0      	bne.n	8002582 <_free_r+0x22>
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4401      	add	r1, r0
 80025c6:	6011      	str	r1, [r2, #0]
 80025c8:	6053      	str	r3, [r2, #4]
 80025ca:	e7da      	b.n	8002582 <_free_r+0x22>
 80025cc:	d902      	bls.n	80025d4 <_free_r+0x74>
 80025ce:	230c      	movs	r3, #12
 80025d0:	602b      	str	r3, [r5, #0]
 80025d2:	e7d6      	b.n	8002582 <_free_r+0x22>
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	1821      	adds	r1, r4, r0
 80025d8:	428b      	cmp	r3, r1
 80025da:	bf01      	itttt	eq
 80025dc:	6819      	ldreq	r1, [r3, #0]
 80025de:	685b      	ldreq	r3, [r3, #4]
 80025e0:	1809      	addeq	r1, r1, r0
 80025e2:	6021      	streq	r1, [r4, #0]
 80025e4:	6063      	str	r3, [r4, #4]
 80025e6:	6054      	str	r4, [r2, #4]
 80025e8:	e7cb      	b.n	8002582 <_free_r+0x22>
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	20000124 	.word	0x20000124

080025f0 <sbrk_aligned>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	4e0e      	ldr	r6, [pc, #56]	; (800262c <sbrk_aligned+0x3c>)
 80025f4:	460c      	mov	r4, r1
 80025f6:	6831      	ldr	r1, [r6, #0]
 80025f8:	4605      	mov	r5, r0
 80025fa:	b911      	cbnz	r1, 8002602 <sbrk_aligned+0x12>
 80025fc:	f000 f88c 	bl	8002718 <_sbrk_r>
 8002600:	6030      	str	r0, [r6, #0]
 8002602:	4621      	mov	r1, r4
 8002604:	4628      	mov	r0, r5
 8002606:	f000 f887 	bl	8002718 <_sbrk_r>
 800260a:	1c43      	adds	r3, r0, #1
 800260c:	d00a      	beq.n	8002624 <sbrk_aligned+0x34>
 800260e:	1cc4      	adds	r4, r0, #3
 8002610:	f024 0403 	bic.w	r4, r4, #3
 8002614:	42a0      	cmp	r0, r4
 8002616:	d007      	beq.n	8002628 <sbrk_aligned+0x38>
 8002618:	1a21      	subs	r1, r4, r0
 800261a:	4628      	mov	r0, r5
 800261c:	f000 f87c 	bl	8002718 <_sbrk_r>
 8002620:	3001      	adds	r0, #1
 8002622:	d101      	bne.n	8002628 <sbrk_aligned+0x38>
 8002624:	f04f 34ff 	mov.w	r4, #4294967295
 8002628:	4620      	mov	r0, r4
 800262a:	bd70      	pop	{r4, r5, r6, pc}
 800262c:	20000128 	.word	0x20000128

08002630 <_malloc_r>:
 8002630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002634:	1ccd      	adds	r5, r1, #3
 8002636:	f025 0503 	bic.w	r5, r5, #3
 800263a:	3508      	adds	r5, #8
 800263c:	2d0c      	cmp	r5, #12
 800263e:	bf38      	it	cc
 8002640:	250c      	movcc	r5, #12
 8002642:	2d00      	cmp	r5, #0
 8002644:	4607      	mov	r7, r0
 8002646:	db01      	blt.n	800264c <_malloc_r+0x1c>
 8002648:	42a9      	cmp	r1, r5
 800264a:	d905      	bls.n	8002658 <_malloc_r+0x28>
 800264c:	230c      	movs	r3, #12
 800264e:	2600      	movs	r6, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4630      	mov	r0, r6
 8002654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002658:	4e2e      	ldr	r6, [pc, #184]	; (8002714 <_malloc_r+0xe4>)
 800265a:	f000 f907 	bl	800286c <__malloc_lock>
 800265e:	6833      	ldr	r3, [r6, #0]
 8002660:	461c      	mov	r4, r3
 8002662:	bb34      	cbnz	r4, 80026b2 <_malloc_r+0x82>
 8002664:	4629      	mov	r1, r5
 8002666:	4638      	mov	r0, r7
 8002668:	f7ff ffc2 	bl	80025f0 <sbrk_aligned>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	4604      	mov	r4, r0
 8002670:	d14d      	bne.n	800270e <_malloc_r+0xde>
 8002672:	6834      	ldr	r4, [r6, #0]
 8002674:	4626      	mov	r6, r4
 8002676:	2e00      	cmp	r6, #0
 8002678:	d140      	bne.n	80026fc <_malloc_r+0xcc>
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	4631      	mov	r1, r6
 800267e:	4638      	mov	r0, r7
 8002680:	eb04 0803 	add.w	r8, r4, r3
 8002684:	f000 f848 	bl	8002718 <_sbrk_r>
 8002688:	4580      	cmp	r8, r0
 800268a:	d13a      	bne.n	8002702 <_malloc_r+0xd2>
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	3503      	adds	r5, #3
 8002690:	1a6d      	subs	r5, r5, r1
 8002692:	f025 0503 	bic.w	r5, r5, #3
 8002696:	3508      	adds	r5, #8
 8002698:	2d0c      	cmp	r5, #12
 800269a:	bf38      	it	cc
 800269c:	250c      	movcc	r5, #12
 800269e:	4638      	mov	r0, r7
 80026a0:	4629      	mov	r1, r5
 80026a2:	f7ff ffa5 	bl	80025f0 <sbrk_aligned>
 80026a6:	3001      	adds	r0, #1
 80026a8:	d02b      	beq.n	8002702 <_malloc_r+0xd2>
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	442b      	add	r3, r5
 80026ae:	6023      	str	r3, [r4, #0]
 80026b0:	e00e      	b.n	80026d0 <_malloc_r+0xa0>
 80026b2:	6822      	ldr	r2, [r4, #0]
 80026b4:	1b52      	subs	r2, r2, r5
 80026b6:	d41e      	bmi.n	80026f6 <_malloc_r+0xc6>
 80026b8:	2a0b      	cmp	r2, #11
 80026ba:	d916      	bls.n	80026ea <_malloc_r+0xba>
 80026bc:	1961      	adds	r1, r4, r5
 80026be:	42a3      	cmp	r3, r4
 80026c0:	6025      	str	r5, [r4, #0]
 80026c2:	bf18      	it	ne
 80026c4:	6059      	strne	r1, [r3, #4]
 80026c6:	6863      	ldr	r3, [r4, #4]
 80026c8:	bf08      	it	eq
 80026ca:	6031      	streq	r1, [r6, #0]
 80026cc:	5162      	str	r2, [r4, r5]
 80026ce:	604b      	str	r3, [r1, #4]
 80026d0:	4638      	mov	r0, r7
 80026d2:	f104 060b 	add.w	r6, r4, #11
 80026d6:	f000 f8cf 	bl	8002878 <__malloc_unlock>
 80026da:	f026 0607 	bic.w	r6, r6, #7
 80026de:	1d23      	adds	r3, r4, #4
 80026e0:	1af2      	subs	r2, r6, r3
 80026e2:	d0b6      	beq.n	8002652 <_malloc_r+0x22>
 80026e4:	1b9b      	subs	r3, r3, r6
 80026e6:	50a3      	str	r3, [r4, r2]
 80026e8:	e7b3      	b.n	8002652 <_malloc_r+0x22>
 80026ea:	6862      	ldr	r2, [r4, #4]
 80026ec:	42a3      	cmp	r3, r4
 80026ee:	bf0c      	ite	eq
 80026f0:	6032      	streq	r2, [r6, #0]
 80026f2:	605a      	strne	r2, [r3, #4]
 80026f4:	e7ec      	b.n	80026d0 <_malloc_r+0xa0>
 80026f6:	4623      	mov	r3, r4
 80026f8:	6864      	ldr	r4, [r4, #4]
 80026fa:	e7b2      	b.n	8002662 <_malloc_r+0x32>
 80026fc:	4634      	mov	r4, r6
 80026fe:	6876      	ldr	r6, [r6, #4]
 8002700:	e7b9      	b.n	8002676 <_malloc_r+0x46>
 8002702:	230c      	movs	r3, #12
 8002704:	4638      	mov	r0, r7
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	f000 f8b6 	bl	8002878 <__malloc_unlock>
 800270c:	e7a1      	b.n	8002652 <_malloc_r+0x22>
 800270e:	6025      	str	r5, [r4, #0]
 8002710:	e7de      	b.n	80026d0 <_malloc_r+0xa0>
 8002712:	bf00      	nop
 8002714:	20000124 	.word	0x20000124

08002718 <_sbrk_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	2300      	movs	r3, #0
 800271c:	4d05      	ldr	r5, [pc, #20]	; (8002734 <_sbrk_r+0x1c>)
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	602b      	str	r3, [r5, #0]
 8002724:	f7fd ffb4 	bl	8000690 <_sbrk>
 8002728:	1c43      	adds	r3, r0, #1
 800272a:	d102      	bne.n	8002732 <_sbrk_r+0x1a>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	b103      	cbz	r3, 8002732 <_sbrk_r+0x1a>
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	2000012c 	.word	0x2000012c

08002738 <__sread>:
 8002738:	b510      	push	{r4, lr}
 800273a:	460c      	mov	r4, r1
 800273c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002740:	f000 f8a0 	bl	8002884 <_read_r>
 8002744:	2800      	cmp	r0, #0
 8002746:	bfab      	itete	ge
 8002748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800274a:	89a3      	ldrhlt	r3, [r4, #12]
 800274c:	181b      	addge	r3, r3, r0
 800274e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002752:	bfac      	ite	ge
 8002754:	6563      	strge	r3, [r4, #84]	; 0x54
 8002756:	81a3      	strhlt	r3, [r4, #12]
 8002758:	bd10      	pop	{r4, pc}

0800275a <__swrite>:
 800275a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800275e:	461f      	mov	r7, r3
 8002760:	898b      	ldrh	r3, [r1, #12]
 8002762:	4605      	mov	r5, r0
 8002764:	05db      	lsls	r3, r3, #23
 8002766:	460c      	mov	r4, r1
 8002768:	4616      	mov	r6, r2
 800276a:	d505      	bpl.n	8002778 <__swrite+0x1e>
 800276c:	2302      	movs	r3, #2
 800276e:	2200      	movs	r2, #0
 8002770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002774:	f000 f868 	bl	8002848 <_lseek_r>
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	4632      	mov	r2, r6
 800277c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002780:	81a3      	strh	r3, [r4, #12]
 8002782:	4628      	mov	r0, r5
 8002784:	463b      	mov	r3, r7
 8002786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800278a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800278e:	f000 b817 	b.w	80027c0 <_write_r>

08002792 <__sseek>:
 8002792:	b510      	push	{r4, lr}
 8002794:	460c      	mov	r4, r1
 8002796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800279a:	f000 f855 	bl	8002848 <_lseek_r>
 800279e:	1c43      	adds	r3, r0, #1
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	bf15      	itete	ne
 80027a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80027a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027ae:	81a3      	strheq	r3, [r4, #12]
 80027b0:	bf18      	it	ne
 80027b2:	81a3      	strhne	r3, [r4, #12]
 80027b4:	bd10      	pop	{r4, pc}

080027b6 <__sclose>:
 80027b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ba:	f000 b813 	b.w	80027e4 <_close_r>
	...

080027c0 <_write_r>:
 80027c0:	b538      	push	{r3, r4, r5, lr}
 80027c2:	4604      	mov	r4, r0
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	2200      	movs	r2, #0
 80027ca:	4d05      	ldr	r5, [pc, #20]	; (80027e0 <_write_r+0x20>)
 80027cc:	602a      	str	r2, [r5, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f7fd ff11 	bl	80005f6 <_write>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d102      	bne.n	80027de <_write_r+0x1e>
 80027d8:	682b      	ldr	r3, [r5, #0]
 80027da:	b103      	cbz	r3, 80027de <_write_r+0x1e>
 80027dc:	6023      	str	r3, [r4, #0]
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	2000012c 	.word	0x2000012c

080027e4 <_close_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	2300      	movs	r3, #0
 80027e8:	4d05      	ldr	r5, [pc, #20]	; (8002800 <_close_r+0x1c>)
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	602b      	str	r3, [r5, #0]
 80027f0:	f7fd ff1d 	bl	800062e <_close>
 80027f4:	1c43      	adds	r3, r0, #1
 80027f6:	d102      	bne.n	80027fe <_close_r+0x1a>
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	b103      	cbz	r3, 80027fe <_close_r+0x1a>
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	2000012c 	.word	0x2000012c

08002804 <_fstat_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	2300      	movs	r3, #0
 8002808:	4d06      	ldr	r5, [pc, #24]	; (8002824 <_fstat_r+0x20>)
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	602b      	str	r3, [r5, #0]
 8002812:	f7fd ff17 	bl	8000644 <_fstat>
 8002816:	1c43      	adds	r3, r0, #1
 8002818:	d102      	bne.n	8002820 <_fstat_r+0x1c>
 800281a:	682b      	ldr	r3, [r5, #0]
 800281c:	b103      	cbz	r3, 8002820 <_fstat_r+0x1c>
 800281e:	6023      	str	r3, [r4, #0]
 8002820:	bd38      	pop	{r3, r4, r5, pc}
 8002822:	bf00      	nop
 8002824:	2000012c 	.word	0x2000012c

08002828 <_isatty_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	2300      	movs	r3, #0
 800282c:	4d05      	ldr	r5, [pc, #20]	; (8002844 <_isatty_r+0x1c>)
 800282e:	4604      	mov	r4, r0
 8002830:	4608      	mov	r0, r1
 8002832:	602b      	str	r3, [r5, #0]
 8002834:	f7fd ff15 	bl	8000662 <_isatty>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d102      	bne.n	8002842 <_isatty_r+0x1a>
 800283c:	682b      	ldr	r3, [r5, #0]
 800283e:	b103      	cbz	r3, 8002842 <_isatty_r+0x1a>
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	2000012c 	.word	0x2000012c

08002848 <_lseek_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4604      	mov	r4, r0
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	2200      	movs	r2, #0
 8002852:	4d05      	ldr	r5, [pc, #20]	; (8002868 <_lseek_r+0x20>)
 8002854:	602a      	str	r2, [r5, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	f7fd ff0d 	bl	8000676 <_lseek>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d102      	bne.n	8002866 <_lseek_r+0x1e>
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	b103      	cbz	r3, 8002866 <_lseek_r+0x1e>
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	2000012c 	.word	0x2000012c

0800286c <__malloc_lock>:
 800286c:	4801      	ldr	r0, [pc, #4]	; (8002874 <__malloc_lock+0x8>)
 800286e:	f7ff be0f 	b.w	8002490 <__retarget_lock_acquire_recursive>
 8002872:	bf00      	nop
 8002874:	20000120 	.word	0x20000120

08002878 <__malloc_unlock>:
 8002878:	4801      	ldr	r0, [pc, #4]	; (8002880 <__malloc_unlock+0x8>)
 800287a:	f7ff be0a 	b.w	8002492 <__retarget_lock_release_recursive>
 800287e:	bf00      	nop
 8002880:	20000120 	.word	0x20000120

08002884 <_read_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4604      	mov	r4, r0
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	2200      	movs	r2, #0
 800288e:	4d05      	ldr	r5, [pc, #20]	; (80028a4 <_read_r+0x20>)
 8002890:	602a      	str	r2, [r5, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	f7fd fe92 	bl	80005bc <_read>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d102      	bne.n	80028a2 <_read_r+0x1e>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	b103      	cbz	r3, 80028a2 <_read_r+0x1e>
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	2000012c 	.word	0x2000012c

080028a8 <_init>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr

080028b4 <_fini>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr
