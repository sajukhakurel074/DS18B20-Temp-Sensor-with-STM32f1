
TEMP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08005e58  08005e58  00015e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063dc  080063dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080063dc  080063dc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063dc  080063dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200001dc  080065c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080065c0  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a07f  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d5  00000000  00000000  0002a284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  0002c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018643  00000000  00000000  0002d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2f0  00000000  00000000  00045a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7a3  00000000  00000000  00051d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c0  00000000  00000000  000dd570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e3c 	.word	0x08005e3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005e3c 	.word	0x08005e3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <delay>:
int Search_ROM();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <delay+0x2c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay) {
 8000f54:	bf00      	nop
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <delay+0x2c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f9      	bhi.n	8000f56 <delay+0x12>

	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001f8 	.word	0x200001f8

08000f74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f7a:	f000 fdef 	bl	8001b5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f7e:	f000 f8b3 	bl	80010e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f82:	f000 f971 	bl	8001268 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f86:	f000 f945 	bl	8001214 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000f8a:	f000 f8f3 	bl	8001174 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000f8e:	4847      	ldr	r0, [pc, #284]	; (80010ac <main+0x138>)
 8000f90:	f001 fd6c 	bl	8002a6c <HAL_TIM_Base_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	printf("\n\n\n\n\n\nFrom TEMP Sensor Test\r\n");
 8000f94:	4846      	ldr	r0, [pc, #280]	; (80010b0 <main+0x13c>)
 8000f96:	f002 fe9d 	bl	8003cd4 <puts>

	last_discrepancy = 0;
 8000f9a:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <main+0x140>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

	while (Search_ROM()) {
 8000fa0:	e003      	b.n	8000faa <main+0x36>
		if (FLAG_DONE == 1) {
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <main+0x144>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <main+0x42>
	while (Search_ROM()) {
 8000faa:	f000 faa3 	bl	80014f4 <Search_ROM>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f6      	bne.n	8000fa2 <main+0x2e>
 8000fb4:	e000      	b.n	8000fb8 <main+0x44>
			break;
 8000fb6:	bf00      	nop
		}
	}

	printf("Number of devices on bus = %u\n", count);
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <main+0x148>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4840      	ldr	r0, [pc, #256]	; (80010c0 <main+0x14c>)
 8000fc0:	f002 fe02 	bl	8003bc8 <iprintf>
	printf("rom id == { ");
 8000fc4:	483f      	ldr	r0, [pc, #252]	; (80010c4 <main+0x150>)
 8000fc6:	f002 fdff 	bl	8003bc8 <iprintf>
	for (int i = 0; i < 8; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e00a      	b.n	8000fe6 <main+0x72>
		printf("0x%x ", new_rom_id[i]);
 8000fd0:	4a3d      	ldr	r2, [pc, #244]	; (80010c8 <main+0x154>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	483c      	ldr	r0, [pc, #240]	; (80010cc <main+0x158>)
 8000fdc:	f002 fdf4 	bl	8003bc8 <iprintf>
	for (int i = 0; i < 8; i++) {
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	ddf1      	ble.n	8000fd0 <main+0x5c>
	}
	printf("}\n");
 8000fec:	4838      	ldr	r0, [pc, #224]	; (80010d0 <main+0x15c>)
 8000fee:	f002 fe71 	bl	8003cd4 <puts>

	Presence = DS18B20_Start();
 8000ff2:	f000 f9af 	bl	8001354 <DS18B20_Start>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a36      	ldr	r2, [pc, #216]	; (80010d4 <main+0x160>)
 8000ffa:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <main+0x160>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <main+0x96>
		printf("Presence not detected\n");
 8001004:	4834      	ldr	r0, [pc, #208]	; (80010d8 <main+0x164>)
 8001006:	f002 fe65 	bl	8003cd4 <puts>
	}

	Match_ROM(0);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 fb82 	bl	8001714 <Match_ROM>

	DS18B20_Write(0x44, 0);		// Convert T
 8001010:	2100      	movs	r1, #0
 8001012:	2044      	movs	r0, #68	; 0x44
 8001014:	f000 f9d0 	bl	80013b8 <DS18B20_Write>
	Presence = DS18B20_Start();
 8001018:	f000 f99c 	bl	8001354 <DS18B20_Start>
 800101c:	4603      	mov	r3, r0
 800101e:	4a2d      	ldr	r2, [pc, #180]	; (80010d4 <main+0x160>)
 8001020:	6013      	str	r3, [r2, #0]
	Match_ROM(0);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 fb76 	bl	8001714 <Match_ROM>

	DS18B20_Write(0xBE, 0);		// Read Scratch pad
 8001028:	2100      	movs	r1, #0
 800102a:	20be      	movs	r0, #190	; 0xbe
 800102c:	f000 f9c4 	bl	80013b8 <DS18B20_Write>
	uint8_t data[9] = { 0 };
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	711a      	strb	r2, [r3, #4]

	for (int i = 0; i < 9; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e00c      	b.n	800105e <main+0xea>
		data[i] = DS18B20_Read(0);
 8001044:	2000      	movs	r0, #0
 8001046:	f000 fa0b 	bl	8001460 <DS18B20_Read>
 800104a:	4603      	mov	r3, r0
 800104c:	4619      	mov	r1, r3
 800104e:	1d3a      	adds	r2, r7, #4
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	460a      	mov	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	3301      	adds	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b08      	cmp	r3, #8
 8001062:	ddef      	ble.n	8001044 <main+0xd0>
	}

	TEMP = (data[1] << 8) | data[0];
 8001064:	797b      	ldrb	r3, [r7, #5]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	793b      	ldrb	r3, [r7, #4]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <main+0x168>)
 8001076:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP / 16;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <main+0x168>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fdb9 	bl	8000bf4 <__aeabi_ui2f>
 8001082:	4603      	mov	r3, r0
 8001084:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff febf 	bl	8000e0c <__aeabi_fdiv>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <main+0x16c>)
 8001094:	601a      	str	r2, [r3, #0]

	printf("Temperature = %f \n", Temperature);
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <main+0x16c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f9c4 	bl	8000428 <__aeabi_f2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <main+0x170>)
 80010a6:	f002 fd8f 	bl	8003bc8 <iprintf>

	while (1) {
 80010aa:	e7fe      	b.n	80010aa <main+0x136>
 80010ac:	200001f8 	.word	0x200001f8
 80010b0:	08005e58 	.word	0x08005e58
 80010b4:	2000029d 	.word	0x2000029d
 80010b8:	2000029e 	.word	0x2000029e
 80010bc:	2000029f 	.word	0x2000029f
 80010c0:	08005e78 	.word	0x08005e78
 80010c4:	08005e98 	.word	0x08005e98
 80010c8:	20000290 	.word	0x20000290
 80010cc:	08005ea8 	.word	0x08005ea8
 80010d0:	08005eb0 	.word	0x08005eb0
 80010d4:	20000284 	.word	0x20000284
 80010d8:	08005eb4 	.word	0x08005eb4
 80010dc:	2000028c 	.word	0x2000028c
 80010e0:	20000288 	.word	0x20000288
 80010e4:	08005ecc 	.word	0x08005ecc

080010e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b090      	sub	sp, #64	; 0x40
 80010ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	2228      	movs	r2, #40	; 0x28
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 f8fe 	bl	80032f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001112:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	2301      	movs	r3, #1
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001126:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4618      	mov	r0, r3
 8001132:	f001 f831 	bl	8002198 <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x58>
		Error_Handler();
 800113c:	f000 fb46 	bl	80017cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
 8001142:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2302      	movs	r3, #2
 8001146:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800114c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001150:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fa9e 	bl	800269c <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x82>
		Error_Handler();
 8001166:	f000 fb31 	bl	80017cc <Error_Handler>
	}
}
 800116a:	bf00      	nop
 800116c:	3740      	adds	r7, #64	; 0x40
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_TIM1_Init+0x98>)
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <MX_TIM1_Init+0x9c>)
 8001194:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_TIM1_Init+0x98>)
 8001198:	2247      	movs	r2, #71	; 0x47
 800119a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_TIM1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_TIM1_Init+0x98>)
 80011a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_TIM1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_TIM1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_TIM1_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011bc:	4813      	ldr	r0, [pc, #76]	; (800120c <MX_TIM1_Init+0x98>)
 80011be:	f001 fc05 	bl	80029cc <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x58>
		Error_Handler();
 80011c8:	f000 fb00 	bl	80017cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_TIM1_Init+0x98>)
 80011da:	f001 fc91 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x74>
		Error_Handler();
 80011e4:	f000 faf2 	bl	80017cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM1_Init+0x98>)
 80011f6:	f001 fe3f 	bl	8002e78 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001200:	f000 fae4 	bl	80017cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001f8 	.word	0x200001f8
 8001210:	40012c00 	.word	0x40012c00

08001214 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_USART1_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART1_UART_Init+0x4c>)
 800124c:	f001 fe72 	bl	8002f34 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001256:	f000 fab9 	bl	80017cc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000240 	.word	0x20000240
 8001264:	40013800 	.word	0x40013800

08001268 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <MX_GPIO_Init+0xbc>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <MX_GPIO_Init+0xbc>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_GPIO_Init+0xbc>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_GPIO_Init+0xbc>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <MX_GPIO_Init+0xbc>)
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a16      	ldr	r2, [pc, #88]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_GPIO_Init+0xbc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_GPIO_Init+0xc0>)
 80012e4:	f000 ff3f 	bl	8002166 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <MX_GPIO_Init+0xc0>)
 8001302:	f000 fd95 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001306:	2302      	movs	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130a:	2303      	movs	r3, #3
 800130c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_GPIO_Init+0xc4>)
 8001316:	f000 fd8b 	bl	8001e30 <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	40011000 	.word	0x40011000
 800132c:	40010c00 	.word	0x40010c00

08001330 <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001338:	1d39      	adds	r1, r7, #4
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	2201      	movs	r2, #1
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <__io_putchar+0x20>)
 8001342:	f001 fe44 	bl	8002fce <HAL_UART_Transmit>
	return ch;
 8001346:	687b      	ldr	r3, [r7, #4]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000240 	.word	0x20000240

08001354 <DS18B20_Start>:

int DS18B20_Start(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	int Response = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800135e:	2102      	movs	r1, #2
 8001360:	4814      	ldr	r0, [pc, #80]	; (80013b4 <DS18B20_Start+0x60>)
 8001362:	f000 f9f9 	bl	8001758 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin low
 8001366:	2200      	movs	r2, #0
 8001368:	2102      	movs	r1, #2
 800136a:	4812      	ldr	r0, [pc, #72]	; (80013b4 <DS18B20_Start+0x60>)
 800136c:	f000 fefb 	bl	8002166 <HAL_GPIO_WritePin>
	delay(480);   // delay according to data sheet
 8001370:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001374:	f7ff fde6 	bl	8000f44 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001378:	2102      	movs	r1, #2
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <DS18B20_Start+0x60>)
 800137c:	f000 fa09 	bl	8001792 <Set_Pin_Input>
	delay(80);    // delay according to data sheet
 8001380:	2050      	movs	r0, #80	; 0x50
 8001382:	f7ff fddf 	bl	8000f44 <delay>

	if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 8001386:	2102      	movs	r1, #2
 8001388:	480a      	ldr	r0, [pc, #40]	; (80013b4 <DS18B20_Start+0x60>)
 800138a:	f000 fed5 	bl	8002138 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <DS18B20_Start+0x46>
		Response = 1; // if the pin is low i.e the presence pulse is detected
 8001394:	2301      	movs	r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	e002      	b.n	80013a0 <DS18B20_Start+0x4c>
	else
		Response = -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	607b      	str	r3, [r7, #4]

	delay(400); // Waiting to complete the response cycle
 80013a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013a4:	f7ff fdce 	bl	8000f44 <delay>

	return Response;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40010c00 	.word	0x40010c00

080013b8 <DS18B20_Write>:

void DS18B20_Write(uint8_t data, uint8_t bit) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
	int loop = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
	if (bit == 1) {
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <DS18B20_Write+0x20>
		loop = 1; // Bit write
 80013d2:	2301      	movs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e001      	b.n	80013dc <DS18B20_Write+0x24>
	} else {
		loop = 8; // Byte write
 80013d8:	2308      	movs	r3, #8
 80013da:	60fb      	str	r3, [r7, #12]
	}
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80013dc:	2102      	movs	r1, #2
 80013de:	481f      	ldr	r0, [pc, #124]	; (800145c <DS18B20_Write+0xa4>)
 80013e0:	f000 f9ba 	bl	8001758 <Set_Pin_Output>

	for (int i = 0; i < loop; i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	e02e      	b.n	8001448 <DS18B20_Write+0x90>

		if ((data & (1 << i)) != 0)  // if the bit is high
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	fa42 f303 	asr.w	r3, r2, r3
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d013      	beq.n	8001422 <DS18B20_Write+0x6a>
				{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80013fa:	2102      	movs	r1, #2
 80013fc:	4817      	ldr	r0, [pc, #92]	; (800145c <DS18B20_Write+0xa4>)
 80013fe:	f000 f9ab 	bl	8001758 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 8001402:	2200      	movs	r2, #0
 8001404:	2102      	movs	r1, #2
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <DS18B20_Write+0xa4>)
 8001408:	f000 fead 	bl	8002166 <HAL_GPIO_WritePin>
			delay(1);  // wait for 1 us
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff fd99 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001412:	2102      	movs	r1, #2
 8001414:	4811      	ldr	r0, [pc, #68]	; (800145c <DS18B20_Write+0xa4>)
 8001416:	f000 f9bc 	bl	8001792 <Set_Pin_Input>
			delay(60);  // wait for 60 us
 800141a:	203c      	movs	r0, #60	; 0x3c
 800141c:	f7ff fd92 	bl	8000f44 <delay>
 8001420:	e00f      	b.n	8001442 <DS18B20_Write+0x8a>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001422:	2102      	movs	r1, #2
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <DS18B20_Write+0xa4>)
 8001426:	f000 f997 	bl	8001758 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 800142a:	2200      	movs	r2, #0
 800142c:	2102      	movs	r1, #2
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <DS18B20_Write+0xa4>)
 8001430:	f000 fe99 	bl	8002166 <HAL_GPIO_WritePin>
			delay(60);  // wait for 60 us
 8001434:	203c      	movs	r0, #60	; 0x3c
 8001436:	f7ff fd85 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800143a:	2102      	movs	r1, #2
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <DS18B20_Write+0xa4>)
 800143e:	f000 f9a8 	bl	8001792 <Set_Pin_Input>
	for (int i = 0; i < loop; i++) {
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3301      	adds	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbcc      	blt.n	80013ea <DS18B20_Write+0x32>
		}
	}
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010c00 	.word	0x40010c00

08001460 <DS18B20_Read>:

uint8_t DS18B20_Read(uint8_t bit) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	int loop = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
	if (bit == 1) {  // Bit read
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <DS18B20_Read+0x1a>
		loop = 1;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e001      	b.n	800147e <DS18B20_Read+0x1e>
	} else {
		loop = 8; // Byte read
 800147a:	2308      	movs	r3, #8
 800147c:	617b      	str	r3, [r7, #20]
	}

	uint8_t value = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	74fb      	strb	r3, [r7, #19]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001482:	2102      	movs	r1, #2
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <DS18B20_Read+0x90>)
 8001486:	f000 f984 	bl	8001792 <Set_Pin_Input>

	for (int i = 0; i < loop; i++) {
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e026      	b.n	80014de <DS18B20_Read+0x7e>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001490:	2102      	movs	r1, #2
 8001492:	4817      	ldr	r0, [pc, #92]	; (80014f0 <DS18B20_Read+0x90>)
 8001494:	f000 f960 	bl	8001758 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the data pin LOW
 8001498:	2200      	movs	r2, #0
 800149a:	2102      	movs	r1, #2
 800149c:	4814      	ldr	r0, [pc, #80]	; (80014f0 <DS18B20_Read+0x90>)
 800149e:	f000 fe62 	bl	8002166 <HAL_GPIO_WritePin>
		delay(5);  // wait for 5 us
 80014a2:	2005      	movs	r0, #5
 80014a4:	f7ff fd4e 	bl	8000f44 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80014a8:	2102      	movs	r1, #2
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <DS18B20_Read+0x90>)
 80014ac:	f000 f971 	bl	8001792 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80014b0:	2102      	movs	r1, #2
 80014b2:	480f      	ldr	r0, [pc, #60]	; (80014f0 <DS18B20_Read+0x90>)
 80014b4:	f000 fe40 	bl	8002138 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <DS18B20_Read+0x72>
				{
			value |= 1 << i;  // read = 1
 80014be:	2201      	movs	r2, #1
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	74fb      	strb	r3, [r7, #19]
		}
		delay(60);  // wait for 60 us
 80014d2:	203c      	movs	r0, #60	; 0x3c
 80014d4:	f7ff fd36 	bl	8000f44 <delay>
	for (int i = 0; i < loop; i++) {
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3301      	adds	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbd4      	blt.n	8001490 <DS18B20_Read+0x30>
	}
	return value;
 80014e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40010c00 	.word	0x40010c00

080014f4 <Search_ROM>:

int Search_ROM() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

	Presence = DS18B20_Start();
 80014f8:	f7ff ff2c 	bl	8001354 <DS18B20_Start>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a70      	ldr	r2, [pc, #448]	; (80016c0 <Search_ROM+0x1cc>)
 8001500:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 8001502:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <Search_ROM+0x1cc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d004      	beq.n	8001514 <Search_ROM+0x20>
		printf("Presence not detected\n");
 800150a:	486e      	ldr	r0, [pc, #440]	; (80016c4 <Search_ROM+0x1d0>)
 800150c:	f002 fbe2 	bl	8003cd4 <puts>
		return 0;
 8001510:	2300      	movs	r3, #0
 8001512:	e0d3      	b.n	80016bc <Search_ROM+0x1c8>
	}

	if (FLAG_DONE == SET) {
 8001514:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <Search_ROM+0x1d4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <Search_ROM+0x2c>
		return 0;
 800151c:	2300      	movs	r3, #0
 800151e:	e0cd      	b.n	80016bc <Search_ROM+0x1c8>
	}
	HAL_Delay(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f000 fb7d 	bl	8001c20 <HAL_Delay>

	bit_number = 1;
 8001526:	4b69      	ldr	r3, [pc, #420]	; (80016cc <Search_ROM+0x1d8>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
	last_zero = 0;
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <Search_ROM+0x1dc>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
	discrepancy_marker = 0;
 8001532:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <Search_ROM+0x1e0>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
	DS18B20_Write(0xF0, 0);  // Send Search ROM command
 8001538:	2100      	movs	r1, #0
 800153a:	20f0      	movs	r0, #240	; 0xf0
 800153c:	f7ff ff3c 	bl	80013b8 <DS18B20_Write>
	bit_counter = 0;
 8001540:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <Search_ROM+0x1e4>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

	do {

		bit_id = DS18B20_Read(1);				// read LSB bit value
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff ff8a 	bl	8001460 <DS18B20_Read>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b62      	ldr	r3, [pc, #392]	; (80016dc <Search_ROM+0x1e8>)
 8001552:	701a      	strb	r2, [r3, #0]
		bit_id_comp = DS18B20_Read(1);  // read LSB bit value complement
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ff83 	bl	8001460 <DS18B20_Read>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b60      	ldr	r3, [pc, #384]	; (80016e0 <Search_ROM+0x1ec>)
 8001560:	701a      	strb	r2, [r3, #0]

		if (bit_id && bit_id_comp) { // 11 is the case for false value indicating no more devices
 8001562:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <Search_ROM+0x1e8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <Search_ROM+0x88>
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <Search_ROM+0x1ec>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <Search_ROM+0x88>
			printf("No more devices\n");
 8001572:	485c      	ldr	r0, [pc, #368]	; (80016e4 <Search_ROM+0x1f0>)
 8001574:	f002 fbae 	bl	8003cd4 <puts>
			return 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e09f      	b.n	80016bc <Search_ROM+0x1c8>
		} else {
			if (bit_id == bit_id_comp) // 00 indicates both 0 and 1 bit value at LSB of available devices
 800157c:	4b57      	ldr	r3, [pc, #348]	; (80016dc <Search_ROM+0x1e8>)
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <Search_ROM+0x1ec>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d13b      	bne.n	8001600 <Search_ROM+0x10c>
					{
				printf("discrepancy bit number=%d\n", bit_number);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <Search_ROM+0x1d8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	4856      	ldr	r0, [pc, #344]	; (80016e8 <Search_ROM+0x1f4>)
 8001590:	f002 fb1a 	bl	8003bc8 <iprintf>
				if (bit_number == last_discrepancy) {
 8001594:	4b4d      	ldr	r3, [pc, #308]	; (80016cc <Search_ROM+0x1d8>)
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4b54      	ldr	r3, [pc, #336]	; (80016ec <Search_ROM+0x1f8>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d103      	bne.n	80015a8 <Search_ROM+0xb4>
					search_value = 1;
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <Search_ROM+0x1fc>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	e02f      	b.n	8001608 <Search_ROM+0x114>
				} else {
					if (bit_number > last_discrepancy) {
 80015a8:	4b48      	ldr	r3, [pc, #288]	; (80016cc <Search_ROM+0x1d8>)
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <Search_ROM+0x1f8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d910      	bls.n	80015d6 <Search_ROM+0xe2>
						printf("Search value set to 0\n");
 80015b4:	484f      	ldr	r0, [pc, #316]	; (80016f4 <Search_ROM+0x200>)
 80015b6:	f002 fb8d 	bl	8003cd4 <puts>
						search_value = 0;
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <Search_ROM+0x1fc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
						discrepancy_marker = bit_number;
 80015c0:	4b42      	ldr	r3, [pc, #264]	; (80016cc <Search_ROM+0x1d8>)
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <Search_ROM+0x1e0>)
 80015c6:	701a      	strb	r2, [r3, #0]
						printf("discrepancy marker = %d\n", bit_number);
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <Search_ROM+0x1d8>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	484a      	ldr	r0, [pc, #296]	; (80016f8 <Search_ROM+0x204>)
 80015d0:	f002 fafa 	bl	8003bc8 <iprintf>
 80015d4:	e018      	b.n	8001608 <Search_ROM+0x114>
//						discrepancy_marker = bit_number;
					} else {
						printf("search value for else case = %d\n",
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <Search_ROM+0x1fc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4847      	ldr	r0, [pc, #284]	; (80016fc <Search_ROM+0x208>)
 80015de:	f002 faf3 	bl	8003bc8 <iprintf>
								search_value);
						if (search_value == 0) {
 80015e2:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <Search_ROM+0x1fc>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10e      	bne.n	8001608 <Search_ROM+0x114>
							discrepancy_marker = bit_number;
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <Search_ROM+0x1d8>)
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <Search_ROM+0x1e0>)
 80015f0:	701a      	strb	r2, [r3, #0]
							printf("discrepancy marker = %d\n", bit_number);
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <Search_ROM+0x1d8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	483f      	ldr	r0, [pc, #252]	; (80016f8 <Search_ROM+0x204>)
 80015fa:	f002 fae5 	bl	8003bc8 <iprintf>
 80015fe:	e003      	b.n	8001608 <Search_ROM+0x114>

					}
				}

			} else { // this indicates same 0 or 1 value at LSB of available devices
				search_value = bit_id;   // setting either 0 or 1 search
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <Search_ROM+0x1e8>)
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <Search_ROM+0x1fc>)
 8001606:	701a      	strb	r2, [r3, #0]
			}

			DS18B20_Write(search_value, 1);	// Selecting the devices having ongoing-LSB value as search value (0 or 1)
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <Search_ROM+0x1fc>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fed2 	bl	80013b8 <DS18B20_Write>
//

			new_rom_id[counts] |= search_value << bit_counter;
 8001614:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <Search_ROM+0x20c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <Search_ROM+0x210>)
 800161c:	5c9b      	ldrb	r3, [r3, r2]
 800161e:	b25a      	sxtb	r2, r3
 8001620:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <Search_ROM+0x1fc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <Search_ROM+0x1e4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b259      	sxtb	r1, r3
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <Search_ROM+0x20c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	b2c9      	uxtb	r1, r1
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <Search_ROM+0x210>)
 800163e:	5499      	strb	r1, [r3, r2]

			if (bit_number % 8 == 0) {
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <Search_ROM+0x1d8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <Search_ROM+0x166>
//				printf("\n\n");
//				printf("0x%x\n", new_rom_id[counts]);
//				printf("\n\n");
				counts++;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <Search_ROM+0x20c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <Search_ROM+0x20c>)
 8001658:	701a      	strb	r2, [r3, #0]

			}
			bit_counter++;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <Search_ROM+0x1e4>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <Search_ROM+0x1e4>)
 8001664:	701a      	strb	r2, [r3, #0]
			if (bit_counter >= 8) {
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <Search_ROM+0x1e4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d902      	bls.n	8001674 <Search_ROM+0x180>
				bit_counter = 0;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <Search_ROM+0x1e4>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
			}

		}

		bit_number++;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <Search_ROM+0x1d8>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <Search_ROM+0x1d8>)
 800167e:	701a      	strb	r2, [r3, #0]

//		printf("bit counter = %d\n", bit_counter);
//		printf("counts = %d\n", counts);
//		printf("bit number = %d\n", bit_number);

	} while (bit_number < 64);
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <Search_ROM+0x1d8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b3f      	cmp	r3, #63	; 0x3f
 8001686:	f67f af5e 	bls.w	8001546 <Search_ROM+0x52>

	last_discrepancy = discrepancy_marker;
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <Search_ROM+0x1e0>)
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <Search_ROM+0x1f8>)
 8001690:	701a      	strb	r2, [r3, #0]

	if (last_discrepancy == 0) {
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <Search_ROM+0x1f8>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <Search_ROM+0x1b4>
		FLAG_DONE = SET;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <Search_ROM+0x1d4>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
		printf("Done Flag is SET\n");
 80016a0:	4819      	ldr	r0, [pc, #100]	; (8001708 <Search_ROM+0x214>)
 80016a2:	f002 fb17 	bl	8003cd4 <puts>
 80016a6:	e002      	b.n	80016ae <Search_ROM+0x1ba>
	} else {
		printf("Next cycle\n");
 80016a8:	4818      	ldr	r0, [pc, #96]	; (800170c <Search_ROM+0x218>)
 80016aa:	f002 fb13 	bl	8003cd4 <puts>
	}
	count = count + 1;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <Search_ROM+0x21c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <Search_ROM+0x21c>)
 80016b8:	701a      	strb	r2, [r3, #0]
//	printf("count on first increment=%d\n", count);
//	count =count+1;
//	device_number=device_number+1;
//	printf("Count on last =%d\n",device_number);
//	printf(" main while run\n");
	return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000284 	.word	0x20000284
 80016c4:	08005eb4 	.word	0x08005eb4
 80016c8:	2000029e 	.word	0x2000029e
 80016cc:	2000029b 	.word	0x2000029b
 80016d0:	200002a4 	.word	0x200002a4
 80016d4:	2000029c 	.word	0x2000029c
 80016d8:	200002a1 	.word	0x200002a1
 80016dc:	20000298 	.word	0x20000298
 80016e0:	20000299 	.word	0x20000299
 80016e4:	08005ee0 	.word	0x08005ee0
 80016e8:	08005ef0 	.word	0x08005ef0
 80016ec:	2000029d 	.word	0x2000029d
 80016f0:	2000029a 	.word	0x2000029a
 80016f4:	08005f0c 	.word	0x08005f0c
 80016f8:	08005f24 	.word	0x08005f24
 80016fc:	08005f40 	.word	0x08005f40
 8001700:	200002a0 	.word	0x200002a0
 8001704:	20000290 	.word	0x20000290
 8001708:	08005f64 	.word	0x08005f64
 800170c:	08005f78 	.word	0x08005f78
 8001710:	2000029f 	.word	0x2000029f

08001714 <Match_ROM>:

void Match_ROM(int device) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

	DS18B20_Write(0x55, 0);
 800171c:	2100      	movs	r1, #0
 800171e:	2055      	movs	r0, #85	; 0x55
 8001720:	f7ff fe4a 	bl	80013b8 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e00c      	b.n	8001744 <Match_ROM+0x30>
		DS18B20_Write((new_rom_id)[i + device * 8], 0);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	00da      	lsls	r2, r3, #3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <Match_ROM+0x40>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe3d 	bl	80013b8 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b07      	cmp	r3, #7
 8001748:	ddef      	ble.n	800172a <Match_ROM+0x16>
	}

}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000290 	.word	0x20000290

08001758 <Set_Pin_Output>:
//	value = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
//	printf("value = %d\n", value);
//
//	return value;
//}
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fb53 	bl	8001e30 <HAL_GPIO_Init>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fb36 	bl	8001e30 <HAL_GPIO_Init>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("From the error handler\n");
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <Error_Handler+0x10>)
 80017d2:	f002 fa7f 	bl	8003cd4 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d6:	b672      	cpsid	i
}
 80017d8:	bf00      	nop
	__disable_irq();
	while (1) {
 80017da:	e7fe      	b.n	80017da <Error_Handler+0xe>
 80017dc:	08005f84 	.word	0x08005f84

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_MspInit+0x5c>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_MspInit+0x5c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x5c>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x5c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x5c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_MspInit+0x60>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_MspInit+0x60>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000

08001844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a09      	ldr	r2, [pc, #36]	; (8001878 <HAL_TIM_Base_MspInit+0x34>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10b      	bne.n	800186e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_TIM_Base_MspInit+0x38>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_TIM_Base_MspInit+0x38>)
 800185c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_TIM_Base_MspInit+0x38>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_UART_MspInit+0x8c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d131      	bne.n	8001904 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4619      	mov	r1, r3
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <HAL_UART_MspInit+0x94>)
 80018e6:	f000 faa3 	bl	8001e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0x94>)
 8001900:	f000 fa96 	bl	8001e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013800 	.word	0x40013800
 8001910:	40021000 	.word	0x40021000
 8001914:	40010800 	.word	0x40010800

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	printf("From NMI Handler\n");
 800191c:	4801      	ldr	r0, [pc, #4]	; (8001924 <NMI_Handler+0xc>)
 800191e:	f002 f9d9 	bl	8003cd4 <puts>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001922:	e7fe      	b.n	8001922 <NMI_Handler+0xa>
 8001924:	08005f9c 	.word	0x08005f9c

08001928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault handler\n");
 800192c:	4801      	ldr	r0, [pc, #4]	; (8001934 <HardFault_Handler+0xc>)
 800192e:	f002 f9d1 	bl	8003cd4 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0xa>
 8001934:	08005fb0 	.word	0x08005fb0

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemMange Handler\n");
 800193c:	4801      	ldr	r0, [pc, #4]	; (8001944 <MemManage_Handler+0xc>)
 800193e:	f002 f9c9 	bl	8003cd4 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <MemManage_Handler+0xa>
 8001944:	08005fc4 	.word	0x08005fc4

08001948 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <BusFault_Handler+0x4>

0800194e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <UsageFault_Handler+0x4>

08001954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 f934 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <_kill>:

int _kill(int pid, int sig)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800199c:	f001 fc82 	bl	80032a4 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2216      	movs	r2, #22
 80019a4:	601a      	str	r2, [r3, #0]
	return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_exit>:

void _exit (int status)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ba:	f04f 31ff 	mov.w	r1, #4294967295
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffe7 	bl	8001992 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019c4:	e7fe      	b.n	80019c4 <_exit+0x12>

080019c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e00a      	b.n	80019ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019d8:	f3af 8000 	nop.w
 80019dc:	4601      	mov	r1, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	60ba      	str	r2, [r7, #8]
 80019e4:	b2ca      	uxtb	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dbf0      	blt.n	80019d8 <_read+0x12>
	}

return len;
 80019f6:	687b      	ldr	r3, [r7, #4]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e009      	b.n	8001a26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc88 	bl	8001330 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dbf1      	blt.n	8001a12 <_write+0x12>
	}
	return len;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_close>:

int _close(int file)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <_isatty>:

int _isatty(int file)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	return 1;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f001 fbec 	bl	80032a4 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20005000 	.word	0x20005000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	200002a8 	.word	0x200002a8
 8001b00:	200002c0 	.word	0x200002c0

08001b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	; (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	; (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b36:	f7ff ffe5 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f001 fbb9 	bl	80032b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3e:	f7ff fa19 	bl	8000f74 <main>
  bx lr
 8001b42:	4770      	bx	lr
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b4c:	080063e4 	.word	0x080063e4
  ldr r2, =_sbss
 8001b50:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b54:	200002c0 	.word	0x200002c0

08001b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_2_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_Init+0x28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_Init+0x28>)
 8001b66:	f043 0310 	orr.w	r3, r3, #16
 8001b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f92b 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fe32 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f935 	bl	8001e16 <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f90b 	bl	8001dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_IncTick+0x1c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_IncTick+0x20>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <HAL_IncTick+0x20>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000008 	.word	0x20000008
 8001c08:	200002ac 	.word	0x200002ac

08001c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <HAL_GetTick+0x10>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	200002ac 	.word	0x200002ac

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffe0 	bl	8001c0c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f7ff ff90 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff49 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff5e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff90 	bl	8001d20 <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5f 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffb0 	bl	8001d84 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	e169      	b.n	8002118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e44:	2201      	movs	r2, #1
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 8158 	bne.w	8002112 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a9a      	ldr	r2, [pc, #616]	; (80020d0 <HAL_GPIO_Init+0x2a0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d05e      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e6c:	4a98      	ldr	r2, [pc, #608]	; (80020d0 <HAL_GPIO_Init+0x2a0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d875      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e72:	4a98      	ldr	r2, [pc, #608]	; (80020d4 <HAL_GPIO_Init+0x2a4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d058      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e78:	4a96      	ldr	r2, [pc, #600]	; (80020d4 <HAL_GPIO_Init+0x2a4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d86f      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e7e:	4a96      	ldr	r2, [pc, #600]	; (80020d8 <HAL_GPIO_Init+0x2a8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d052      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e84:	4a94      	ldr	r2, [pc, #592]	; (80020d8 <HAL_GPIO_Init+0x2a8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d869      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e8a:	4a94      	ldr	r2, [pc, #592]	; (80020dc <HAL_GPIO_Init+0x2ac>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d04c      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e90:	4a92      	ldr	r2, [pc, #584]	; (80020dc <HAL_GPIO_Init+0x2ac>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d863      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e96:	4a92      	ldr	r2, [pc, #584]	; (80020e0 <HAL_GPIO_Init+0x2b0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d046      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e9c:	4a90      	ldr	r2, [pc, #576]	; (80020e0 <HAL_GPIO_Init+0x2b0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d85d      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001ea2:	2b12      	cmp	r3, #18
 8001ea4:	d82a      	bhi.n	8001efc <HAL_GPIO_Init+0xcc>
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d859      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <HAL_GPIO_Init+0x80>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001f2b 	.word	0x08001f2b
 8001eb4:	08001f05 	.word	0x08001f05
 8001eb8:	08001f17 	.word	0x08001f17
 8001ebc:	08001f59 	.word	0x08001f59
 8001ec0:	08001f5f 	.word	0x08001f5f
 8001ec4:	08001f5f 	.word	0x08001f5f
 8001ec8:	08001f5f 	.word	0x08001f5f
 8001ecc:	08001f5f 	.word	0x08001f5f
 8001ed0:	08001f5f 	.word	0x08001f5f
 8001ed4:	08001f5f 	.word	0x08001f5f
 8001ed8:	08001f5f 	.word	0x08001f5f
 8001edc:	08001f5f 	.word	0x08001f5f
 8001ee0:	08001f5f 	.word	0x08001f5f
 8001ee4:	08001f5f 	.word	0x08001f5f
 8001ee8:	08001f5f 	.word	0x08001f5f
 8001eec:	08001f5f 	.word	0x08001f5f
 8001ef0:	08001f5f 	.word	0x08001f5f
 8001ef4:	08001f0d 	.word	0x08001f0d
 8001ef8:	08001f21 	.word	0x08001f21
 8001efc:	4a79      	ldr	r2, [pc, #484]	; (80020e4 <HAL_GPIO_Init+0x2b4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f02:	e02c      	b.n	8001f5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e029      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	3304      	adds	r3, #4
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e024      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e01f      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	330c      	adds	r3, #12
 8001f26:	623b      	str	r3, [r7, #32]
          break;
 8001f28:	e01a      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f32:	2304      	movs	r3, #4
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e013      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f40:	2308      	movs	r3, #8
 8001f42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	611a      	str	r2, [r3, #16]
          break;
 8001f4a:	e009      	b.n	8001f60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	615a      	str	r2, [r3, #20]
          break;
 8001f56:	e003      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          break;
 8001f5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2bff      	cmp	r3, #255	; 0xff
 8001f64:	d801      	bhi.n	8001f6a <HAL_GPIO_Init+0x13a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	e001      	b.n	8001f6e <HAL_GPIO_Init+0x13e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2bff      	cmp	r3, #255	; 0xff
 8001f74:	d802      	bhi.n	8001f7c <HAL_GPIO_Init+0x14c>
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_Init+0x152>
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3b08      	subs	r3, #8
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	210f      	movs	r1, #15
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	401a      	ands	r2, r3
 8001f94:	6a39      	ldr	r1, [r7, #32]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80b1 	beq.w	8002112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb0:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_GPIO_Init+0x2b8>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <HAL_GPIO_Init+0x2b8>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_GPIO_Init+0x2b8>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fc8:	4a48      	ldr	r2, [pc, #288]	; (80020ec <HAL_GPIO_Init+0x2bc>)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <HAL_GPIO_Init+0x2c0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_GPIO_Init+0x1ec>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3f      	ldr	r2, [pc, #252]	; (80020f4 <HAL_GPIO_Init+0x2c4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x1e8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3e      	ldr	r2, [pc, #248]	; (80020f8 <HAL_GPIO_Init+0x2c8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x1e4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <HAL_GPIO_Init+0x2cc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x1e0>
 800200c:	2303      	movs	r3, #3
 800200e:	e006      	b.n	800201e <HAL_GPIO_Init+0x1ee>
 8002010:	2304      	movs	r3, #4
 8002012:	e004      	b.n	800201e <HAL_GPIO_Init+0x1ee>
 8002014:	2302      	movs	r3, #2
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x1ee>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_GPIO_Init+0x1ee>
 800201c:	2300      	movs	r3, #0
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4093      	lsls	r3, r2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800202e:	492f      	ldr	r1, [pc, #188]	; (80020ec <HAL_GPIO_Init+0x2bc>)
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	492c      	ldr	r1, [pc, #176]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	4928      	ldr	r1, [pc, #160]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4922      	ldr	r1, [pc, #136]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	491e      	ldr	r1, [pc, #120]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8002088:	4013      	ands	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4918      	ldr	r1, [pc, #96]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4914      	ldr	r1, [pc, #80]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d021      	beq.n	8002104 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
 80020cc:	e021      	b.n	8002112 <HAL_GPIO_Init+0x2e2>
 80020ce:	bf00      	nop
 80020d0:	10320000 	.word	0x10320000
 80020d4:	10310000 	.word	0x10310000
 80020d8:	10220000 	.word	0x10220000
 80020dc:	10210000 	.word	0x10210000
 80020e0:	10120000 	.word	0x10120000
 80020e4:	10110000 	.word	0x10110000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40010800 	.word	0x40010800
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	40011000 	.word	0x40011000
 80020fc:	40011400 	.word	0x40011400
 8002100:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_GPIO_Init+0x304>)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	43db      	mvns	r3, r3
 800210c:	4909      	ldr	r1, [pc, #36]	; (8002134 <HAL_GPIO_Init+0x304>)
 800210e:	4013      	ands	r3, r2
 8002110:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	3301      	adds	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	f47f ae8e 	bne.w	8001e44 <HAL_GPIO_Init+0x14>
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	372c      	adds	r7, #44	; 0x2c
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e001      	b.n	800215a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	4613      	mov	r3, r2
 8002174:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002176:	787b      	ldrb	r3, [r7, #1]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217c:	887a      	ldrh	r2, [r7, #2]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002182:	e003      	b.n	800218c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	041a      	lsls	r2, r3, #16
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
	...

08002198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e272      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8087 	beq.w	80022c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d00c      	beq.n	80021de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c4:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d112      	bne.n	80021f6 <HAL_RCC_OscConfig+0x5e>
 80021d0:	4b8c      	ldr	r3, [pc, #560]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d10b      	bne.n	80021f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021de:	4b89      	ldr	r3, [pc, #548]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d06c      	beq.n	80022c4 <HAL_RCC_OscConfig+0x12c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d168      	bne.n	80022c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e24c      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x76>
 8002200:	4b80      	ldr	r3, [pc, #512]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a7f      	ldr	r2, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e02e      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x98>
 8002216:	4b7b      	ldr	r3, [pc, #492]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7a      	ldr	r2, [pc, #488]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800221c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b78      	ldr	r3, [pc, #480]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a77      	ldr	r2, [pc, #476]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0xbc>
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a71      	ldr	r2, [pc, #452]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6e      	ldr	r2, [pc, #440]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 8002254:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6a      	ldr	r2, [pc, #424]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b68      	ldr	r3, [pc, #416]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a67      	ldr	r2, [pc, #412]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fcca 	bl	8001c0c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fcc6 	bl	8001c0c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e200      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xe4>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff fcb6 	bl	8001c0c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff fcb2 	bl	8001c0c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1ec      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x10c>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d2:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x18c>
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x176>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1c0      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4939      	ldr	r1, [pc, #228]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	e03a      	b.n	800239a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7ff fc6b 	bl	8001c0c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fc67 	bl	8001c0c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1a1      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4927      	ldr	r1, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fc4a 	bl	8001c0c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff fc46 	bl	8001c0c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e180      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d03a      	beq.n	800241c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d019      	beq.n	80023e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_RCC_OscConfig+0x274>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7ff fc2a 	bl	8001c0c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7ff fc26 	bl	8001c0c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e160      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f000 fad8 	bl	8002990 <RCC_Delay>
 80023e0:	e01c      	b.n	800241c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_OscConfig+0x274>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7ff fc10 	bl	8001c0c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ee:	e00f      	b.n	8002410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fc0c 	bl	8001c0c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d908      	bls.n	8002410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e146      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	42420000 	.word	0x42420000
 800240c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	4b92      	ldr	r3, [pc, #584]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e9      	bne.n	80023f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a6 	beq.w	8002576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a87      	ldr	r2, [pc, #540]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	61d3      	str	r3, [r2, #28]
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002462:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7e      	ldr	r2, [pc, #504]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7ff fbcd 	bl	8001c0c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7ff fbc9 	bl	8001c0c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b64      	cmp	r3, #100	; 0x64
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e103      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b75      	ldr	r3, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x312>
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	e02d      	b.n	8002506 <HAL_RCC_OscConfig+0x36e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x334>
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	e01c      	b.n	8002506 <HAL_RCC_OscConfig+0x36e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x356>
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a60      	ldr	r2, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	4b5e      	ldr	r3, [pc, #376]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a5d      	ldr	r2, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x36e>
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6213      	str	r3, [r2, #32]
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7ff fb7d 	bl	8001c0c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7ff fb79 	bl	8001c0c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0b1      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCC_OscConfig+0x37e>
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7ff fb67 	bl	8001c0c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7ff fb63 	bl	8001c0c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e09b      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a3b      	ldr	r2, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8087 	beq.w	800268e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d061      	beq.n	8002650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d146      	bne.n	8002622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002594:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_RCC_OscConfig+0x4cc>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff fb37 	bl	8001c0c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7ff fb33 	bl	8001c0c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e06d      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d108      	bne.n	80025dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a19      	ldr	r1, [r3, #32]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	430b      	orrs	r3, r1
 80025ee:	491b      	ldr	r1, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7ff fb07 	bl	8001c0c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7ff fb03 	bl	8001c0c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e03d      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x46a>
 8002620:	e035      	b.n	800268e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x4cc>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff faf0 	bl	8001c0c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff faec 	bl	8001c0c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e026      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x498>
 800264e:	e01e      	b.n	800268e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e019      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_OscConfig+0x500>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0d0      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4965      	ldr	r1, [pc, #404]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0b8      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f8:	4b59      	ldr	r3, [pc, #356]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800271a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	494d      	ldr	r1, [pc, #308]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d040      	beq.n	80027bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d115      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e07f      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e073      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06b      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4936      	ldr	r1, [pc, #216]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7ff fa3e 	bl	8001c0c <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7ff fa3a 	bl	8001c0c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e053      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d210      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4922      	ldr	r1, [pc, #136]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e032      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4916      	ldr	r1, [pc, #88]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	490e      	ldr	r1, [pc, #56]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282a:	f000 f821 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 800282e:	4602      	mov	r2, r0
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	490a      	ldr	r1, [pc, #40]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	5ccb      	ldrb	r3, [r1, r3]
 800283e:	fa22 f303 	lsr.w	r3, r2, r3
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1cc>)
 8002844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1d0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f99c 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000
 8002860:	40021000 	.word	0x40021000
 8002864:	08005fe8 	.word	0x08005fe8
 8002868:	20000000 	.word	0x20000000
 800286c:	20000004 	.word	0x20000004

08002870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b490      	push	{r4, r7}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_RCC_GetSysClockFreq+0xac>)
 8002878:	1d3c      	adds	r4, r7, #4
 800287a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800287c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002880:	f240 2301 	movw	r3, #513	; 0x201
 8002884:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_GetSysClockFreq+0xb0>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x40>
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x46>
 80028ae:	e02b      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028b2:	623b      	str	r3, [r7, #32]
      break;
 80028b4:	e02b      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	0c9b      	lsrs	r3, r3, #18
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3328      	adds	r3, #40	; 0x28
 80028c0:	443b      	add	r3, r7
 80028c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0c5b      	lsrs	r3, r3, #17
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	3328      	adds	r3, #40	; 0x28
 80028de:	443b      	add	r3, r7
 80028e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ea:	fb03 f202 	mul.w	r2, r3, r2
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	e004      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	623b      	str	r3, [r7, #32]
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290a:	623b      	str	r3, [r7, #32]
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	6a3b      	ldr	r3, [r7, #32]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3728      	adds	r7, #40	; 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bc90      	pop	{r4, r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	08005fd8 	.word	0x08005fd8
 8002920:	40021000 	.word	0x40021000
 8002924:	007a1200 	.word	0x007a1200
 8002928:	003d0900 	.word	0x003d0900

0800292c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <HAL_RCC_GetHCLKFreq+0x10>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002944:	f7ff fff2 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	08005ff8 	.word	0x08005ff8

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800296c:	f7ff ffde 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	08005ff8 	.word	0x08005ff8

08002990 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <RCC_Delay+0x34>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <RCC_Delay+0x38>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0a5b      	lsrs	r3, r3, #9
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ac:	bf00      	nop
  }
  while (Delay --);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	60fa      	str	r2, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f9      	bne.n	80029ac <RCC_Delay+0x1c>
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	20000000 	.word	0x20000000
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e041      	b.n	8002a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe ff26 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 f93c 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d001      	beq.n	8002a84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e032      	b.n	8002aea <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_TIM_Base_Start+0x88>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_TIM_Base_Start+0x48>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIM_Base_Start+0x48>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_TIM_Base_Start+0x8c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_Base_Start+0x48>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_TIM_Base_Start+0x90>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d010      	beq.n	8002ae8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	e007      	b.n	8002ae8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800

08002b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_TIM_ConfigClockSource+0x18>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0b3      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x180>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d03e      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0xd0>
 8002b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b56:	f200 8087 	bhi.w	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5e:	f000 8085 	beq.w	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d87f      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b68:	2b70      	cmp	r3, #112	; 0x70
 8002b6a:	d01a      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0xa2>
 8002b6c:	2b70      	cmp	r3, #112	; 0x70
 8002b6e:	d87b      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b70:	2b60      	cmp	r3, #96	; 0x60
 8002b72:	d050      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x116>
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d877      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b78:	2b50      	cmp	r3, #80	; 0x50
 8002b7a:	d03c      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xf6>
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d873      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d058      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x136>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d86f      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d064      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x156>
 8002b8c:	2b30      	cmp	r3, #48	; 0x30
 8002b8e:	d86b      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d060      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x156>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d867      	bhi.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d05c      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x156>
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d05a      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ba0:	e062      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f000 f942 	bl	8002e3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	609a      	str	r2, [r3, #8]
      break;
 8002bce:	e04e      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f000 f92b 	bl	8002e3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf2:	609a      	str	r2, [r3, #8]
      break;
 8002bf4:	e03b      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f000 f8a2 	bl	8002d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2150      	movs	r1, #80	; 0x50
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f8f9 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002c14:	e02b      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f000 f8c0 	bl	8002da8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2160      	movs	r1, #96	; 0x60
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f8e9 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002c34:	e01b      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 f882 	bl	8002d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2140      	movs	r1, #64	; 0x40
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f8d9 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e00b      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f000 f8d0 	bl	8002e06 <TIM_ITRx_SetConfig>
        break;
 8002c66:	e002      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c68:	bf00      	nop
 8002c6a:	e000      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a29      	ldr	r2, [pc, #164]	; (8002d40 <TIM_Base_SetConfig+0xb8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x30>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x30>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <TIM_Base_SetConfig+0xbc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x30>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <TIM_Base_SetConfig+0xc0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <TIM_Base_SetConfig+0xb8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <TIM_Base_SetConfig+0x62>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d007      	beq.n	8002cea <TIM_Base_SetConfig+0x62>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <TIM_Base_SetConfig+0xbc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_Base_SetConfig+0x62>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <TIM_Base_SetConfig+0xc0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <TIM_Base_SetConfig+0xb8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d103      	bne.n	8002d30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	615a      	str	r2, [r3, #20]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800

08002d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 030a 	bic.w	r3, r3, #10
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f023 0210 	bic.w	r2, r3, #16
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	031b      	lsls	r3, r3, #12
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	021a      	lsls	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e046      	b.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d009      	beq.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10c      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800

08002f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e03f      	b.n	8002fc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe fc90 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f905 	bl	8003188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b08a      	sub	sp, #40	; 0x28
 8002fd2:	af02      	add	r7, sp, #8
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d17c      	bne.n	80030e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_UART_Transmit+0x2c>
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e075      	b.n	80030ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_UART_Transmit+0x3e>
 8003008:	2302      	movs	r3, #2
 800300a:	e06e      	b.n	80030ea <HAL_UART_Transmit+0x11c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2221      	movs	r2, #33	; 0x21
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fe fdf3 	bl	8001c0c <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303c:	d108      	bne.n	8003050 <HAL_UART_Transmit+0x82>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e003      	b.n	8003058 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003060:	e02a      	b.n	80030b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f840 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e036      	b.n	80030ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	3302      	adds	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e007      	b.n	80030aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3301      	adds	r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1cf      	bne.n	8003062 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2140      	movs	r1, #64	; 0x40
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f810 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e006      	b.n	80030ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	e02c      	b.n	800315e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d028      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0x30>
 8003112:	f7fe fd7b 	bl	8001c0c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	429a      	cmp	r2, r3
 8003120:	d21d      	bcs.n	800315e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003130:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e00f      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4013      	ands	r3, r2
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	429a      	cmp	r2, r3
 800317a:	d0c3      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031c2:	f023 030c 	bic.w	r3, r3, #12
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2c      	ldr	r2, [pc, #176]	; (800329c <UART_SetConfig+0x114>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d103      	bne.n	80031f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031f0:	f7ff fbba 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	e002      	b.n	80031fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031f8:	f7ff fba2 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 80031fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009a      	lsls	r2, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <UART_SetConfig+0x118>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	0119      	lsls	r1, r3, #4
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009a      	lsls	r2, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fbb2 f2f3 	udiv	r2, r2, r3
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <UART_SetConfig+0x118>)
 8003236:	fba3 0302 	umull	r0, r3, r3, r2
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2064      	movs	r0, #100	; 0x64
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	3332      	adds	r3, #50	; 0x32
 8003248:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003254:	4419      	add	r1, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009a      	lsls	r2, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fbb2 f2f3 	udiv	r2, r2, r3
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <UART_SetConfig+0x118>)
 800326e:	fba3 0302 	umull	r0, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2064      	movs	r0, #100	; 0x64
 8003276:	fb00 f303 	mul.w	r3, r0, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <UART_SetConfig+0x118>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	440a      	add	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40013800 	.word	0x40013800
 80032a0:	51eb851f 	.word	0x51eb851f

080032a4 <__errno>:
 80032a4:	4b01      	ldr	r3, [pc, #4]	; (80032ac <__errno+0x8>)
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <__libc_init_array>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	2600      	movs	r6, #0
 80032b4:	4d0c      	ldr	r5, [pc, #48]	; (80032e8 <__libc_init_array+0x38>)
 80032b6:	4c0d      	ldr	r4, [pc, #52]	; (80032ec <__libc_init_array+0x3c>)
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	42a6      	cmp	r6, r4
 80032be:	d109      	bne.n	80032d4 <__libc_init_array+0x24>
 80032c0:	f002 fdbc 	bl	8005e3c <_init>
 80032c4:	2600      	movs	r6, #0
 80032c6:	4d0a      	ldr	r5, [pc, #40]	; (80032f0 <__libc_init_array+0x40>)
 80032c8:	4c0a      	ldr	r4, [pc, #40]	; (80032f4 <__libc_init_array+0x44>)
 80032ca:	1b64      	subs	r4, r4, r5
 80032cc:	10a4      	asrs	r4, r4, #2
 80032ce:	42a6      	cmp	r6, r4
 80032d0:	d105      	bne.n	80032de <__libc_init_array+0x2e>
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d8:	4798      	blx	r3
 80032da:	3601      	adds	r6, #1
 80032dc:	e7ee      	b.n	80032bc <__libc_init_array+0xc>
 80032de:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e2:	4798      	blx	r3
 80032e4:	3601      	adds	r6, #1
 80032e6:	e7f2      	b.n	80032ce <__libc_init_array+0x1e>
 80032e8:	080063dc 	.word	0x080063dc
 80032ec:	080063dc 	.word	0x080063dc
 80032f0:	080063dc 	.word	0x080063dc
 80032f4:	080063e0 	.word	0x080063e0

080032f8 <memset>:
 80032f8:	4603      	mov	r3, r0
 80032fa:	4402      	add	r2, r0
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d100      	bne.n	8003302 <memset+0xa>
 8003300:	4770      	bx	lr
 8003302:	f803 1b01 	strb.w	r1, [r3], #1
 8003306:	e7f9      	b.n	80032fc <memset+0x4>

08003308 <__cvt>:
 8003308:	2b00      	cmp	r3, #0
 800330a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800330e:	461f      	mov	r7, r3
 8003310:	bfbb      	ittet	lt
 8003312:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003316:	461f      	movlt	r7, r3
 8003318:	2300      	movge	r3, #0
 800331a:	232d      	movlt	r3, #45	; 0x2d
 800331c:	b088      	sub	sp, #32
 800331e:	4614      	mov	r4, r2
 8003320:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003322:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003324:	7013      	strb	r3, [r2, #0]
 8003326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003328:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800332c:	f023 0820 	bic.w	r8, r3, #32
 8003330:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003334:	d005      	beq.n	8003342 <__cvt+0x3a>
 8003336:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800333a:	d100      	bne.n	800333e <__cvt+0x36>
 800333c:	3501      	adds	r5, #1
 800333e:	2302      	movs	r3, #2
 8003340:	e000      	b.n	8003344 <__cvt+0x3c>
 8003342:	2303      	movs	r3, #3
 8003344:	aa07      	add	r2, sp, #28
 8003346:	9204      	str	r2, [sp, #16]
 8003348:	aa06      	add	r2, sp, #24
 800334a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800334e:	e9cd 3500 	strd	r3, r5, [sp]
 8003352:	4622      	mov	r2, r4
 8003354:	463b      	mov	r3, r7
 8003356:	f000 fe13 	bl	8003f80 <_dtoa_r>
 800335a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800335e:	4606      	mov	r6, r0
 8003360:	d102      	bne.n	8003368 <__cvt+0x60>
 8003362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003364:	07db      	lsls	r3, r3, #31
 8003366:	d522      	bpl.n	80033ae <__cvt+0xa6>
 8003368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800336c:	eb06 0905 	add.w	r9, r6, r5
 8003370:	d110      	bne.n	8003394 <__cvt+0x8c>
 8003372:	7833      	ldrb	r3, [r6, #0]
 8003374:	2b30      	cmp	r3, #48	; 0x30
 8003376:	d10a      	bne.n	800338e <__cvt+0x86>
 8003378:	2200      	movs	r2, #0
 800337a:	2300      	movs	r3, #0
 800337c:	4620      	mov	r0, r4
 800337e:	4639      	mov	r1, r7
 8003380:	f7fd fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8003384:	b918      	cbnz	r0, 800338e <__cvt+0x86>
 8003386:	f1c5 0501 	rsb	r5, r5, #1
 800338a:	f8ca 5000 	str.w	r5, [sl]
 800338e:	f8da 3000 	ldr.w	r3, [sl]
 8003392:	4499      	add	r9, r3
 8003394:	2200      	movs	r2, #0
 8003396:	2300      	movs	r3, #0
 8003398:	4620      	mov	r0, r4
 800339a:	4639      	mov	r1, r7
 800339c:	f7fd fb04 	bl	80009a8 <__aeabi_dcmpeq>
 80033a0:	b108      	cbz	r0, 80033a6 <__cvt+0x9e>
 80033a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80033a6:	2230      	movs	r2, #48	; 0x30
 80033a8:	9b07      	ldr	r3, [sp, #28]
 80033aa:	454b      	cmp	r3, r9
 80033ac:	d307      	bcc.n	80033be <__cvt+0xb6>
 80033ae:	4630      	mov	r0, r6
 80033b0:	9b07      	ldr	r3, [sp, #28]
 80033b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033b4:	1b9b      	subs	r3, r3, r6
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	b008      	add	sp, #32
 80033ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	9107      	str	r1, [sp, #28]
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e7f0      	b.n	80033a8 <__cvt+0xa0>

080033c6 <__exponent>:
 80033c6:	4603      	mov	r3, r0
 80033c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ca:	2900      	cmp	r1, #0
 80033cc:	f803 2b02 	strb.w	r2, [r3], #2
 80033d0:	bfb6      	itet	lt
 80033d2:	222d      	movlt	r2, #45	; 0x2d
 80033d4:	222b      	movge	r2, #43	; 0x2b
 80033d6:	4249      	neglt	r1, r1
 80033d8:	2909      	cmp	r1, #9
 80033da:	7042      	strb	r2, [r0, #1]
 80033dc:	dd2b      	ble.n	8003436 <__exponent+0x70>
 80033de:	f10d 0407 	add.w	r4, sp, #7
 80033e2:	46a4      	mov	ip, r4
 80033e4:	270a      	movs	r7, #10
 80033e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80033ea:	460a      	mov	r2, r1
 80033ec:	46a6      	mov	lr, r4
 80033ee:	fb07 1516 	mls	r5, r7, r6, r1
 80033f2:	2a63      	cmp	r2, #99	; 0x63
 80033f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80033f8:	4631      	mov	r1, r6
 80033fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80033fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003402:	dcf0      	bgt.n	80033e6 <__exponent+0x20>
 8003404:	3130      	adds	r1, #48	; 0x30
 8003406:	f1ae 0502 	sub.w	r5, lr, #2
 800340a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800340e:	4629      	mov	r1, r5
 8003410:	1c44      	adds	r4, r0, #1
 8003412:	4561      	cmp	r1, ip
 8003414:	d30a      	bcc.n	800342c <__exponent+0x66>
 8003416:	f10d 0209 	add.w	r2, sp, #9
 800341a:	eba2 020e 	sub.w	r2, r2, lr
 800341e:	4565      	cmp	r5, ip
 8003420:	bf88      	it	hi
 8003422:	2200      	movhi	r2, #0
 8003424:	4413      	add	r3, r2
 8003426:	1a18      	subs	r0, r3, r0
 8003428:	b003      	add	sp, #12
 800342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800342c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003430:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003434:	e7ed      	b.n	8003412 <__exponent+0x4c>
 8003436:	2330      	movs	r3, #48	; 0x30
 8003438:	3130      	adds	r1, #48	; 0x30
 800343a:	7083      	strb	r3, [r0, #2]
 800343c:	70c1      	strb	r1, [r0, #3]
 800343e:	1d03      	adds	r3, r0, #4
 8003440:	e7f1      	b.n	8003426 <__exponent+0x60>
	...

08003444 <_printf_float>:
 8003444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003448:	b091      	sub	sp, #68	; 0x44
 800344a:	460c      	mov	r4, r1
 800344c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003450:	4616      	mov	r6, r2
 8003452:	461f      	mov	r7, r3
 8003454:	4605      	mov	r5, r0
 8003456:	f001 fd35 	bl	8004ec4 <_localeconv_r>
 800345a:	6803      	ldr	r3, [r0, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	9309      	str	r3, [sp, #36]	; 0x24
 8003460:	f7fc fe76 	bl	8000150 <strlen>
 8003464:	2300      	movs	r3, #0
 8003466:	930e      	str	r3, [sp, #56]	; 0x38
 8003468:	f8d8 3000 	ldr.w	r3, [r8]
 800346c:	900a      	str	r0, [sp, #40]	; 0x28
 800346e:	3307      	adds	r3, #7
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	f103 0208 	add.w	r2, r3, #8
 8003478:	f894 9018 	ldrb.w	r9, [r4, #24]
 800347c:	f8d4 b000 	ldr.w	fp, [r4]
 8003480:	f8c8 2000 	str.w	r2, [r8]
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800348c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003490:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003494:	930b      	str	r3, [sp, #44]	; 0x2c
 8003496:	f04f 32ff 	mov.w	r2, #4294967295
 800349a:	4640      	mov	r0, r8
 800349c:	4b9c      	ldr	r3, [pc, #624]	; (8003710 <_printf_float+0x2cc>)
 800349e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034a0:	f7fd fab4 	bl	8000a0c <__aeabi_dcmpun>
 80034a4:	bb70      	cbnz	r0, 8003504 <_printf_float+0xc0>
 80034a6:	f04f 32ff 	mov.w	r2, #4294967295
 80034aa:	4640      	mov	r0, r8
 80034ac:	4b98      	ldr	r3, [pc, #608]	; (8003710 <_printf_float+0x2cc>)
 80034ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034b0:	f7fd fa8e 	bl	80009d0 <__aeabi_dcmple>
 80034b4:	bb30      	cbnz	r0, 8003504 <_printf_float+0xc0>
 80034b6:	2200      	movs	r2, #0
 80034b8:	2300      	movs	r3, #0
 80034ba:	4640      	mov	r0, r8
 80034bc:	4651      	mov	r1, sl
 80034be:	f7fd fa7d 	bl	80009bc <__aeabi_dcmplt>
 80034c2:	b110      	cbz	r0, 80034ca <_printf_float+0x86>
 80034c4:	232d      	movs	r3, #45	; 0x2d
 80034c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ca:	4b92      	ldr	r3, [pc, #584]	; (8003714 <_printf_float+0x2d0>)
 80034cc:	4892      	ldr	r0, [pc, #584]	; (8003718 <_printf_float+0x2d4>)
 80034ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034d2:	bf94      	ite	ls
 80034d4:	4698      	movls	r8, r3
 80034d6:	4680      	movhi	r8, r0
 80034d8:	2303      	movs	r3, #3
 80034da:	f04f 0a00 	mov.w	sl, #0
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	f02b 0304 	bic.w	r3, fp, #4
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	4633      	mov	r3, r6
 80034e8:	4621      	mov	r1, r4
 80034ea:	4628      	mov	r0, r5
 80034ec:	9700      	str	r7, [sp, #0]
 80034ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80034f0:	f000 f9d4 	bl	800389c <_printf_common>
 80034f4:	3001      	adds	r0, #1
 80034f6:	f040 8090 	bne.w	800361a <_printf_float+0x1d6>
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
 80034fe:	b011      	add	sp, #68	; 0x44
 8003500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003504:	4642      	mov	r2, r8
 8003506:	4653      	mov	r3, sl
 8003508:	4640      	mov	r0, r8
 800350a:	4651      	mov	r1, sl
 800350c:	f7fd fa7e 	bl	8000a0c <__aeabi_dcmpun>
 8003510:	b148      	cbz	r0, 8003526 <_printf_float+0xe2>
 8003512:	f1ba 0f00 	cmp.w	sl, #0
 8003516:	bfb8      	it	lt
 8003518:	232d      	movlt	r3, #45	; 0x2d
 800351a:	4880      	ldr	r0, [pc, #512]	; (800371c <_printf_float+0x2d8>)
 800351c:	bfb8      	it	lt
 800351e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003522:	4b7f      	ldr	r3, [pc, #508]	; (8003720 <_printf_float+0x2dc>)
 8003524:	e7d3      	b.n	80034ce <_printf_float+0x8a>
 8003526:	6863      	ldr	r3, [r4, #4]
 8003528:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	d142      	bne.n	80035b6 <_printf_float+0x172>
 8003530:	2306      	movs	r3, #6
 8003532:	6063      	str	r3, [r4, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	9206      	str	r2, [sp, #24]
 8003538:	aa0e      	add	r2, sp, #56	; 0x38
 800353a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800353e:	aa0d      	add	r2, sp, #52	; 0x34
 8003540:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003544:	9203      	str	r2, [sp, #12]
 8003546:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800354a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	6863      	ldr	r3, [r4, #4]
 8003552:	4642      	mov	r2, r8
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	4628      	mov	r0, r5
 8003558:	4653      	mov	r3, sl
 800355a:	910b      	str	r1, [sp, #44]	; 0x2c
 800355c:	f7ff fed4 	bl	8003308 <__cvt>
 8003560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003562:	4680      	mov	r8, r0
 8003564:	2947      	cmp	r1, #71	; 0x47
 8003566:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003568:	d108      	bne.n	800357c <_printf_float+0x138>
 800356a:	1cc8      	adds	r0, r1, #3
 800356c:	db02      	blt.n	8003574 <_printf_float+0x130>
 800356e:	6863      	ldr	r3, [r4, #4]
 8003570:	4299      	cmp	r1, r3
 8003572:	dd40      	ble.n	80035f6 <_printf_float+0x1b2>
 8003574:	f1a9 0902 	sub.w	r9, r9, #2
 8003578:	fa5f f989 	uxtb.w	r9, r9
 800357c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003580:	d81f      	bhi.n	80035c2 <_printf_float+0x17e>
 8003582:	464a      	mov	r2, r9
 8003584:	3901      	subs	r1, #1
 8003586:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800358a:	910d      	str	r1, [sp, #52]	; 0x34
 800358c:	f7ff ff1b 	bl	80033c6 <__exponent>
 8003590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003592:	4682      	mov	sl, r0
 8003594:	1813      	adds	r3, r2, r0
 8003596:	2a01      	cmp	r2, #1
 8003598:	6123      	str	r3, [r4, #16]
 800359a:	dc02      	bgt.n	80035a2 <_printf_float+0x15e>
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	07d2      	lsls	r2, r2, #31
 80035a0:	d501      	bpl.n	80035a6 <_printf_float+0x162>
 80035a2:	3301      	adds	r3, #1
 80035a4:	6123      	str	r3, [r4, #16]
 80035a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d09b      	beq.n	80034e6 <_printf_float+0xa2>
 80035ae:	232d      	movs	r3, #45	; 0x2d
 80035b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b4:	e797      	b.n	80034e6 <_printf_float+0xa2>
 80035b6:	2947      	cmp	r1, #71	; 0x47
 80035b8:	d1bc      	bne.n	8003534 <_printf_float+0xf0>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ba      	bne.n	8003534 <_printf_float+0xf0>
 80035be:	2301      	movs	r3, #1
 80035c0:	e7b7      	b.n	8003532 <_printf_float+0xee>
 80035c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80035c6:	d118      	bne.n	80035fa <_printf_float+0x1b6>
 80035c8:	2900      	cmp	r1, #0
 80035ca:	6863      	ldr	r3, [r4, #4]
 80035cc:	dd0b      	ble.n	80035e6 <_printf_float+0x1a2>
 80035ce:	6121      	str	r1, [r4, #16]
 80035d0:	b913      	cbnz	r3, 80035d8 <_printf_float+0x194>
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	07d0      	lsls	r0, r2, #31
 80035d6:	d502      	bpl.n	80035de <_printf_float+0x19a>
 80035d8:	3301      	adds	r3, #1
 80035da:	440b      	add	r3, r1
 80035dc:	6123      	str	r3, [r4, #16]
 80035de:	f04f 0a00 	mov.w	sl, #0
 80035e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80035e4:	e7df      	b.n	80035a6 <_printf_float+0x162>
 80035e6:	b913      	cbnz	r3, 80035ee <_printf_float+0x1aa>
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	07d2      	lsls	r2, r2, #31
 80035ec:	d501      	bpl.n	80035f2 <_printf_float+0x1ae>
 80035ee:	3302      	adds	r3, #2
 80035f0:	e7f4      	b.n	80035dc <_printf_float+0x198>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e7f2      	b.n	80035dc <_printf_float+0x198>
 80035f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80035fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035fc:	4299      	cmp	r1, r3
 80035fe:	db05      	blt.n	800360c <_printf_float+0x1c8>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	6121      	str	r1, [r4, #16]
 8003604:	07d8      	lsls	r0, r3, #31
 8003606:	d5ea      	bpl.n	80035de <_printf_float+0x19a>
 8003608:	1c4b      	adds	r3, r1, #1
 800360a:	e7e7      	b.n	80035dc <_printf_float+0x198>
 800360c:	2900      	cmp	r1, #0
 800360e:	bfcc      	ite	gt
 8003610:	2201      	movgt	r2, #1
 8003612:	f1c1 0202 	rsble	r2, r1, #2
 8003616:	4413      	add	r3, r2
 8003618:	e7e0      	b.n	80035dc <_printf_float+0x198>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	055a      	lsls	r2, r3, #21
 800361e:	d407      	bmi.n	8003630 <_printf_float+0x1ec>
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	4642      	mov	r2, r8
 8003624:	4631      	mov	r1, r6
 8003626:	4628      	mov	r0, r5
 8003628:	47b8      	blx	r7
 800362a:	3001      	adds	r0, #1
 800362c:	d12b      	bne.n	8003686 <_printf_float+0x242>
 800362e:	e764      	b.n	80034fa <_printf_float+0xb6>
 8003630:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003634:	f240 80dd 	bls.w	80037f2 <_printf_float+0x3ae>
 8003638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800363c:	2200      	movs	r2, #0
 800363e:	2300      	movs	r3, #0
 8003640:	f7fd f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8003644:	2800      	cmp	r0, #0
 8003646:	d033      	beq.n	80036b0 <_printf_float+0x26c>
 8003648:	2301      	movs	r3, #1
 800364a:	4631      	mov	r1, r6
 800364c:	4628      	mov	r0, r5
 800364e:	4a35      	ldr	r2, [pc, #212]	; (8003724 <_printf_float+0x2e0>)
 8003650:	47b8      	blx	r7
 8003652:	3001      	adds	r0, #1
 8003654:	f43f af51 	beq.w	80034fa <_printf_float+0xb6>
 8003658:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800365c:	429a      	cmp	r2, r3
 800365e:	db02      	blt.n	8003666 <_printf_float+0x222>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	07d8      	lsls	r0, r3, #31
 8003664:	d50f      	bpl.n	8003686 <_printf_float+0x242>
 8003666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800366a:	4631      	mov	r1, r6
 800366c:	4628      	mov	r0, r5
 800366e:	47b8      	blx	r7
 8003670:	3001      	adds	r0, #1
 8003672:	f43f af42 	beq.w	80034fa <_printf_float+0xb6>
 8003676:	f04f 0800 	mov.w	r8, #0
 800367a:	f104 091a 	add.w	r9, r4, #26
 800367e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003680:	3b01      	subs	r3, #1
 8003682:	4543      	cmp	r3, r8
 8003684:	dc09      	bgt.n	800369a <_printf_float+0x256>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	079b      	lsls	r3, r3, #30
 800368a:	f100 8102 	bmi.w	8003892 <_printf_float+0x44e>
 800368e:	68e0      	ldr	r0, [r4, #12]
 8003690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003692:	4298      	cmp	r0, r3
 8003694:	bfb8      	it	lt
 8003696:	4618      	movlt	r0, r3
 8003698:	e731      	b.n	80034fe <_printf_float+0xba>
 800369a:	2301      	movs	r3, #1
 800369c:	464a      	mov	r2, r9
 800369e:	4631      	mov	r1, r6
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b8      	blx	r7
 80036a4:	3001      	adds	r0, #1
 80036a6:	f43f af28 	beq.w	80034fa <_printf_float+0xb6>
 80036aa:	f108 0801 	add.w	r8, r8, #1
 80036ae:	e7e6      	b.n	800367e <_printf_float+0x23a>
 80036b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dc38      	bgt.n	8003728 <_printf_float+0x2e4>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4631      	mov	r1, r6
 80036ba:	4628      	mov	r0, r5
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <_printf_float+0x2e0>)
 80036be:	47b8      	blx	r7
 80036c0:	3001      	adds	r0, #1
 80036c2:	f43f af1a 	beq.w	80034fa <_printf_float+0xb6>
 80036c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d102      	bne.n	80036d4 <_printf_float+0x290>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	07d9      	lsls	r1, r3, #31
 80036d2:	d5d8      	bpl.n	8003686 <_printf_float+0x242>
 80036d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036d8:	4631      	mov	r1, r6
 80036da:	4628      	mov	r0, r5
 80036dc:	47b8      	blx	r7
 80036de:	3001      	adds	r0, #1
 80036e0:	f43f af0b 	beq.w	80034fa <_printf_float+0xb6>
 80036e4:	f04f 0900 	mov.w	r9, #0
 80036e8:	f104 0a1a 	add.w	sl, r4, #26
 80036ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036ee:	425b      	negs	r3, r3
 80036f0:	454b      	cmp	r3, r9
 80036f2:	dc01      	bgt.n	80036f8 <_printf_float+0x2b4>
 80036f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036f6:	e794      	b.n	8003622 <_printf_float+0x1de>
 80036f8:	2301      	movs	r3, #1
 80036fa:	4652      	mov	r2, sl
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	47b8      	blx	r7
 8003702:	3001      	adds	r0, #1
 8003704:	f43f aef9 	beq.w	80034fa <_printf_float+0xb6>
 8003708:	f109 0901 	add.w	r9, r9, #1
 800370c:	e7ee      	b.n	80036ec <_printf_float+0x2a8>
 800370e:	bf00      	nop
 8003710:	7fefffff 	.word	0x7fefffff
 8003714:	08006004 	.word	0x08006004
 8003718:	08006008 	.word	0x08006008
 800371c:	08006010 	.word	0x08006010
 8003720:	0800600c 	.word	0x0800600c
 8003724:	08006014 	.word	0x08006014
 8003728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800372a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800372c:	429a      	cmp	r2, r3
 800372e:	bfa8      	it	ge
 8003730:	461a      	movge	r2, r3
 8003732:	2a00      	cmp	r2, #0
 8003734:	4691      	mov	r9, r2
 8003736:	dc37      	bgt.n	80037a8 <_printf_float+0x364>
 8003738:	f04f 0b00 	mov.w	fp, #0
 800373c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003740:	f104 021a 	add.w	r2, r4, #26
 8003744:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003748:	ebaa 0309 	sub.w	r3, sl, r9
 800374c:	455b      	cmp	r3, fp
 800374e:	dc33      	bgt.n	80037b8 <_printf_float+0x374>
 8003750:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003754:	429a      	cmp	r2, r3
 8003756:	db3b      	blt.n	80037d0 <_printf_float+0x38c>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	07da      	lsls	r2, r3, #31
 800375c:	d438      	bmi.n	80037d0 <_printf_float+0x38c>
 800375e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003760:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003762:	eba3 020a 	sub.w	r2, r3, sl
 8003766:	eba3 0901 	sub.w	r9, r3, r1
 800376a:	4591      	cmp	r9, r2
 800376c:	bfa8      	it	ge
 800376e:	4691      	movge	r9, r2
 8003770:	f1b9 0f00 	cmp.w	r9, #0
 8003774:	dc34      	bgt.n	80037e0 <_printf_float+0x39c>
 8003776:	f04f 0800 	mov.w	r8, #0
 800377a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800377e:	f104 0a1a 	add.w	sl, r4, #26
 8003782:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	eba3 0309 	sub.w	r3, r3, r9
 800378c:	4543      	cmp	r3, r8
 800378e:	f77f af7a 	ble.w	8003686 <_printf_float+0x242>
 8003792:	2301      	movs	r3, #1
 8003794:	4652      	mov	r2, sl
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f aeac 	beq.w	80034fa <_printf_float+0xb6>
 80037a2:	f108 0801 	add.w	r8, r8, #1
 80037a6:	e7ec      	b.n	8003782 <_printf_float+0x33e>
 80037a8:	4613      	mov	r3, r2
 80037aa:	4631      	mov	r1, r6
 80037ac:	4642      	mov	r2, r8
 80037ae:	4628      	mov	r0, r5
 80037b0:	47b8      	blx	r7
 80037b2:	3001      	adds	r0, #1
 80037b4:	d1c0      	bne.n	8003738 <_printf_float+0x2f4>
 80037b6:	e6a0      	b.n	80034fa <_printf_float+0xb6>
 80037b8:	2301      	movs	r3, #1
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	920b      	str	r2, [sp, #44]	; 0x2c
 80037c0:	47b8      	blx	r7
 80037c2:	3001      	adds	r0, #1
 80037c4:	f43f ae99 	beq.w	80034fa <_printf_float+0xb6>
 80037c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037ca:	f10b 0b01 	add.w	fp, fp, #1
 80037ce:	e7b9      	b.n	8003744 <_printf_float+0x300>
 80037d0:	4631      	mov	r1, r6
 80037d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037d6:	4628      	mov	r0, r5
 80037d8:	47b8      	blx	r7
 80037da:	3001      	adds	r0, #1
 80037dc:	d1bf      	bne.n	800375e <_printf_float+0x31a>
 80037de:	e68c      	b.n	80034fa <_printf_float+0xb6>
 80037e0:	464b      	mov	r3, r9
 80037e2:	4631      	mov	r1, r6
 80037e4:	4628      	mov	r0, r5
 80037e6:	eb08 020a 	add.w	r2, r8, sl
 80037ea:	47b8      	blx	r7
 80037ec:	3001      	adds	r0, #1
 80037ee:	d1c2      	bne.n	8003776 <_printf_float+0x332>
 80037f0:	e683      	b.n	80034fa <_printf_float+0xb6>
 80037f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037f4:	2a01      	cmp	r2, #1
 80037f6:	dc01      	bgt.n	80037fc <_printf_float+0x3b8>
 80037f8:	07db      	lsls	r3, r3, #31
 80037fa:	d537      	bpl.n	800386c <_printf_float+0x428>
 80037fc:	2301      	movs	r3, #1
 80037fe:	4642      	mov	r2, r8
 8003800:	4631      	mov	r1, r6
 8003802:	4628      	mov	r0, r5
 8003804:	47b8      	blx	r7
 8003806:	3001      	adds	r0, #1
 8003808:	f43f ae77 	beq.w	80034fa <_printf_float+0xb6>
 800380c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003810:	4631      	mov	r1, r6
 8003812:	4628      	mov	r0, r5
 8003814:	47b8      	blx	r7
 8003816:	3001      	adds	r0, #1
 8003818:	f43f ae6f 	beq.w	80034fa <_printf_float+0xb6>
 800381c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003820:	2200      	movs	r2, #0
 8003822:	2300      	movs	r3, #0
 8003824:	f7fd f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8003828:	b9d8      	cbnz	r0, 8003862 <_printf_float+0x41e>
 800382a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800382c:	f108 0201 	add.w	r2, r8, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	4631      	mov	r1, r6
 8003834:	4628      	mov	r0, r5
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	d10e      	bne.n	800385a <_printf_float+0x416>
 800383c:	e65d      	b.n	80034fa <_printf_float+0xb6>
 800383e:	2301      	movs	r3, #1
 8003840:	464a      	mov	r2, r9
 8003842:	4631      	mov	r1, r6
 8003844:	4628      	mov	r0, r5
 8003846:	47b8      	blx	r7
 8003848:	3001      	adds	r0, #1
 800384a:	f43f ae56 	beq.w	80034fa <_printf_float+0xb6>
 800384e:	f108 0801 	add.w	r8, r8, #1
 8003852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003854:	3b01      	subs	r3, #1
 8003856:	4543      	cmp	r3, r8
 8003858:	dcf1      	bgt.n	800383e <_printf_float+0x3fa>
 800385a:	4653      	mov	r3, sl
 800385c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003860:	e6e0      	b.n	8003624 <_printf_float+0x1e0>
 8003862:	f04f 0800 	mov.w	r8, #0
 8003866:	f104 091a 	add.w	r9, r4, #26
 800386a:	e7f2      	b.n	8003852 <_printf_float+0x40e>
 800386c:	2301      	movs	r3, #1
 800386e:	4642      	mov	r2, r8
 8003870:	e7df      	b.n	8003832 <_printf_float+0x3ee>
 8003872:	2301      	movs	r3, #1
 8003874:	464a      	mov	r2, r9
 8003876:	4631      	mov	r1, r6
 8003878:	4628      	mov	r0, r5
 800387a:	47b8      	blx	r7
 800387c:	3001      	adds	r0, #1
 800387e:	f43f ae3c 	beq.w	80034fa <_printf_float+0xb6>
 8003882:	f108 0801 	add.w	r8, r8, #1
 8003886:	68e3      	ldr	r3, [r4, #12]
 8003888:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800388a:	1a5b      	subs	r3, r3, r1
 800388c:	4543      	cmp	r3, r8
 800388e:	dcf0      	bgt.n	8003872 <_printf_float+0x42e>
 8003890:	e6fd      	b.n	800368e <_printf_float+0x24a>
 8003892:	f04f 0800 	mov.w	r8, #0
 8003896:	f104 0919 	add.w	r9, r4, #25
 800389a:	e7f4      	b.n	8003886 <_printf_float+0x442>

0800389c <_printf_common>:
 800389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	4616      	mov	r6, r2
 80038a2:	4699      	mov	r9, r3
 80038a4:	688a      	ldr	r2, [r1, #8]
 80038a6:	690b      	ldr	r3, [r1, #16]
 80038a8:	4607      	mov	r7, r0
 80038aa:	4293      	cmp	r3, r2
 80038ac:	bfb8      	it	lt
 80038ae:	4613      	movlt	r3, r2
 80038b0:	6033      	str	r3, [r6, #0]
 80038b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b6:	460c      	mov	r4, r1
 80038b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038bc:	b10a      	cbz	r2, 80038c2 <_printf_common+0x26>
 80038be:	3301      	adds	r3, #1
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	0699      	lsls	r1, r3, #26
 80038c6:	bf42      	ittt	mi
 80038c8:	6833      	ldrmi	r3, [r6, #0]
 80038ca:	3302      	addmi	r3, #2
 80038cc:	6033      	strmi	r3, [r6, #0]
 80038ce:	6825      	ldr	r5, [r4, #0]
 80038d0:	f015 0506 	ands.w	r5, r5, #6
 80038d4:	d106      	bne.n	80038e4 <_printf_common+0x48>
 80038d6:	f104 0a19 	add.w	sl, r4, #25
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	6832      	ldr	r2, [r6, #0]
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	42ab      	cmp	r3, r5
 80038e2:	dc28      	bgt.n	8003936 <_printf_common+0x9a>
 80038e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e8:	1e13      	subs	r3, r2, #0
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	bf18      	it	ne
 80038ee:	2301      	movne	r3, #1
 80038f0:	0692      	lsls	r2, r2, #26
 80038f2:	d42d      	bmi.n	8003950 <_printf_common+0xb4>
 80038f4:	4649      	mov	r1, r9
 80038f6:	4638      	mov	r0, r7
 80038f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038fc:	47c0      	blx	r8
 80038fe:	3001      	adds	r0, #1
 8003900:	d020      	beq.n	8003944 <_printf_common+0xa8>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	68e5      	ldr	r5, [r4, #12]
 8003906:	f003 0306 	and.w	r3, r3, #6
 800390a:	2b04      	cmp	r3, #4
 800390c:	bf18      	it	ne
 800390e:	2500      	movne	r5, #0
 8003910:	6832      	ldr	r2, [r6, #0]
 8003912:	f04f 0600 	mov.w	r6, #0
 8003916:	68a3      	ldr	r3, [r4, #8]
 8003918:	bf08      	it	eq
 800391a:	1aad      	subeq	r5, r5, r2
 800391c:	6922      	ldr	r2, [r4, #16]
 800391e:	bf08      	it	eq
 8003920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003924:	4293      	cmp	r3, r2
 8003926:	bfc4      	itt	gt
 8003928:	1a9b      	subgt	r3, r3, r2
 800392a:	18ed      	addgt	r5, r5, r3
 800392c:	341a      	adds	r4, #26
 800392e:	42b5      	cmp	r5, r6
 8003930:	d11a      	bne.n	8003968 <_printf_common+0xcc>
 8003932:	2000      	movs	r0, #0
 8003934:	e008      	b.n	8003948 <_printf_common+0xac>
 8003936:	2301      	movs	r3, #1
 8003938:	4652      	mov	r2, sl
 800393a:	4649      	mov	r1, r9
 800393c:	4638      	mov	r0, r7
 800393e:	47c0      	blx	r8
 8003940:	3001      	adds	r0, #1
 8003942:	d103      	bne.n	800394c <_printf_common+0xb0>
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394c:	3501      	adds	r5, #1
 800394e:	e7c4      	b.n	80038da <_printf_common+0x3e>
 8003950:	2030      	movs	r0, #48	; 0x30
 8003952:	18e1      	adds	r1, r4, r3
 8003954:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800395e:	4422      	add	r2, r4
 8003960:	3302      	adds	r3, #2
 8003962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003966:	e7c5      	b.n	80038f4 <_printf_common+0x58>
 8003968:	2301      	movs	r3, #1
 800396a:	4622      	mov	r2, r4
 800396c:	4649      	mov	r1, r9
 800396e:	4638      	mov	r0, r7
 8003970:	47c0      	blx	r8
 8003972:	3001      	adds	r0, #1
 8003974:	d0e6      	beq.n	8003944 <_printf_common+0xa8>
 8003976:	3601      	adds	r6, #1
 8003978:	e7d9      	b.n	800392e <_printf_common+0x92>
	...

0800397c <_printf_i>:
 800397c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	7e0f      	ldrb	r7, [r1, #24]
 8003982:	4691      	mov	r9, r2
 8003984:	2f78      	cmp	r7, #120	; 0x78
 8003986:	4680      	mov	r8, r0
 8003988:	460c      	mov	r4, r1
 800398a:	469a      	mov	sl, r3
 800398c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800398e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003992:	d807      	bhi.n	80039a4 <_printf_i+0x28>
 8003994:	2f62      	cmp	r7, #98	; 0x62
 8003996:	d80a      	bhi.n	80039ae <_printf_i+0x32>
 8003998:	2f00      	cmp	r7, #0
 800399a:	f000 80d9 	beq.w	8003b50 <_printf_i+0x1d4>
 800399e:	2f58      	cmp	r7, #88	; 0x58
 80039a0:	f000 80a4 	beq.w	8003aec <_printf_i+0x170>
 80039a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039ac:	e03a      	b.n	8003a24 <_printf_i+0xa8>
 80039ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039b2:	2b15      	cmp	r3, #21
 80039b4:	d8f6      	bhi.n	80039a4 <_printf_i+0x28>
 80039b6:	a101      	add	r1, pc, #4	; (adr r1, 80039bc <_printf_i+0x40>)
 80039b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039bc:	08003a15 	.word	0x08003a15
 80039c0:	08003a29 	.word	0x08003a29
 80039c4:	080039a5 	.word	0x080039a5
 80039c8:	080039a5 	.word	0x080039a5
 80039cc:	080039a5 	.word	0x080039a5
 80039d0:	080039a5 	.word	0x080039a5
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	080039a5 	.word	0x080039a5
 80039dc:	080039a5 	.word	0x080039a5
 80039e0:	080039a5 	.word	0x080039a5
 80039e4:	080039a5 	.word	0x080039a5
 80039e8:	08003b37 	.word	0x08003b37
 80039ec:	08003a59 	.word	0x08003a59
 80039f0:	08003b19 	.word	0x08003b19
 80039f4:	080039a5 	.word	0x080039a5
 80039f8:	080039a5 	.word	0x080039a5
 80039fc:	08003b59 	.word	0x08003b59
 8003a00:	080039a5 	.word	0x080039a5
 8003a04:	08003a59 	.word	0x08003a59
 8003a08:	080039a5 	.word	0x080039a5
 8003a0c:	080039a5 	.word	0x080039a5
 8003a10:	08003b21 	.word	0x08003b21
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	1d1a      	adds	r2, r3, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	602a      	str	r2, [r5, #0]
 8003a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0a4      	b.n	8003b72 <_printf_i+0x1f6>
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	6829      	ldr	r1, [r5, #0]
 8003a2c:	0606      	lsls	r6, r0, #24
 8003a2e:	f101 0304 	add.w	r3, r1, #4
 8003a32:	d50a      	bpl.n	8003a4a <_printf_i+0xce>
 8003a34:	680e      	ldr	r6, [r1, #0]
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	2e00      	cmp	r6, #0
 8003a3a:	da03      	bge.n	8003a44 <_printf_i+0xc8>
 8003a3c:	232d      	movs	r3, #45	; 0x2d
 8003a3e:	4276      	negs	r6, r6
 8003a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a44:	230a      	movs	r3, #10
 8003a46:	485e      	ldr	r0, [pc, #376]	; (8003bc0 <_printf_i+0x244>)
 8003a48:	e019      	b.n	8003a7e <_printf_i+0x102>
 8003a4a:	680e      	ldr	r6, [r1, #0]
 8003a4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a50:	602b      	str	r3, [r5, #0]
 8003a52:	bf18      	it	ne
 8003a54:	b236      	sxthne	r6, r6
 8003a56:	e7ef      	b.n	8003a38 <_printf_i+0xbc>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	1d19      	adds	r1, r3, #4
 8003a5e:	6029      	str	r1, [r5, #0]
 8003a60:	0601      	lsls	r1, r0, #24
 8003a62:	d501      	bpl.n	8003a68 <_printf_i+0xec>
 8003a64:	681e      	ldr	r6, [r3, #0]
 8003a66:	e002      	b.n	8003a6e <_printf_i+0xf2>
 8003a68:	0646      	lsls	r6, r0, #25
 8003a6a:	d5fb      	bpl.n	8003a64 <_printf_i+0xe8>
 8003a6c:	881e      	ldrh	r6, [r3, #0]
 8003a6e:	2f6f      	cmp	r7, #111	; 0x6f
 8003a70:	bf0c      	ite	eq
 8003a72:	2308      	moveq	r3, #8
 8003a74:	230a      	movne	r3, #10
 8003a76:	4852      	ldr	r0, [pc, #328]	; (8003bc0 <_printf_i+0x244>)
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a7e:	6865      	ldr	r5, [r4, #4]
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	bfa8      	it	ge
 8003a84:	6821      	ldrge	r1, [r4, #0]
 8003a86:	60a5      	str	r5, [r4, #8]
 8003a88:	bfa4      	itt	ge
 8003a8a:	f021 0104 	bicge.w	r1, r1, #4
 8003a8e:	6021      	strge	r1, [r4, #0]
 8003a90:	b90e      	cbnz	r6, 8003a96 <_printf_i+0x11a>
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	d04d      	beq.n	8003b32 <_printf_i+0x1b6>
 8003a96:	4615      	mov	r5, r2
 8003a98:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a9c:	fb03 6711 	mls	r7, r3, r1, r6
 8003aa0:	5dc7      	ldrb	r7, [r0, r7]
 8003aa2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003aa6:	4637      	mov	r7, r6
 8003aa8:	42bb      	cmp	r3, r7
 8003aaa:	460e      	mov	r6, r1
 8003aac:	d9f4      	bls.n	8003a98 <_printf_i+0x11c>
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d10b      	bne.n	8003aca <_printf_i+0x14e>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	07de      	lsls	r6, r3, #31
 8003ab6:	d508      	bpl.n	8003aca <_printf_i+0x14e>
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	6861      	ldr	r1, [r4, #4]
 8003abc:	4299      	cmp	r1, r3
 8003abe:	bfde      	ittt	le
 8003ac0:	2330      	movle	r3, #48	; 0x30
 8003ac2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ac6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003aca:	1b52      	subs	r2, r2, r5
 8003acc:	6122      	str	r2, [r4, #16]
 8003ace:	464b      	mov	r3, r9
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	f8cd a000 	str.w	sl, [sp]
 8003ad8:	aa03      	add	r2, sp, #12
 8003ada:	f7ff fedf 	bl	800389c <_printf_common>
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d14c      	bne.n	8003b7c <_printf_i+0x200>
 8003ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae6:	b004      	add	sp, #16
 8003ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aec:	4834      	ldr	r0, [pc, #208]	; (8003bc0 <_printf_i+0x244>)
 8003aee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003af2:	6829      	ldr	r1, [r5, #0]
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003afa:	6029      	str	r1, [r5, #0]
 8003afc:	061d      	lsls	r5, r3, #24
 8003afe:	d514      	bpl.n	8003b2a <_printf_i+0x1ae>
 8003b00:	07df      	lsls	r7, r3, #31
 8003b02:	bf44      	itt	mi
 8003b04:	f043 0320 	orrmi.w	r3, r3, #32
 8003b08:	6023      	strmi	r3, [r4, #0]
 8003b0a:	b91e      	cbnz	r6, 8003b14 <_printf_i+0x198>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	f023 0320 	bic.w	r3, r3, #32
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	2310      	movs	r3, #16
 8003b16:	e7af      	b.n	8003a78 <_printf_i+0xfc>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	f043 0320 	orr.w	r3, r3, #32
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	2378      	movs	r3, #120	; 0x78
 8003b22:	4828      	ldr	r0, [pc, #160]	; (8003bc4 <_printf_i+0x248>)
 8003b24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b28:	e7e3      	b.n	8003af2 <_printf_i+0x176>
 8003b2a:	0659      	lsls	r1, r3, #25
 8003b2c:	bf48      	it	mi
 8003b2e:	b2b6      	uxthmi	r6, r6
 8003b30:	e7e6      	b.n	8003b00 <_printf_i+0x184>
 8003b32:	4615      	mov	r5, r2
 8003b34:	e7bb      	b.n	8003aae <_printf_i+0x132>
 8003b36:	682b      	ldr	r3, [r5, #0]
 8003b38:	6826      	ldr	r6, [r4, #0]
 8003b3a:	1d18      	adds	r0, r3, #4
 8003b3c:	6961      	ldr	r1, [r4, #20]
 8003b3e:	6028      	str	r0, [r5, #0]
 8003b40:	0635      	lsls	r5, r6, #24
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	d501      	bpl.n	8003b4a <_printf_i+0x1ce>
 8003b46:	6019      	str	r1, [r3, #0]
 8003b48:	e002      	b.n	8003b50 <_printf_i+0x1d4>
 8003b4a:	0670      	lsls	r0, r6, #25
 8003b4c:	d5fb      	bpl.n	8003b46 <_printf_i+0x1ca>
 8003b4e:	8019      	strh	r1, [r3, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	4615      	mov	r5, r2
 8003b54:	6123      	str	r3, [r4, #16]
 8003b56:	e7ba      	b.n	8003ace <_printf_i+0x152>
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	1d1a      	adds	r2, r3, #4
 8003b5e:	602a      	str	r2, [r5, #0]
 8003b60:	681d      	ldr	r5, [r3, #0]
 8003b62:	6862      	ldr	r2, [r4, #4]
 8003b64:	4628      	mov	r0, r5
 8003b66:	f001 fa21 	bl	8004fac <memchr>
 8003b6a:	b108      	cbz	r0, 8003b70 <_printf_i+0x1f4>
 8003b6c:	1b40      	subs	r0, r0, r5
 8003b6e:	6060      	str	r0, [r4, #4]
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	6123      	str	r3, [r4, #16]
 8003b74:	2300      	movs	r3, #0
 8003b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b7a:	e7a8      	b.n	8003ace <_printf_i+0x152>
 8003b7c:	462a      	mov	r2, r5
 8003b7e:	4649      	mov	r1, r9
 8003b80:	4640      	mov	r0, r8
 8003b82:	6923      	ldr	r3, [r4, #16]
 8003b84:	47d0      	blx	sl
 8003b86:	3001      	adds	r0, #1
 8003b88:	d0ab      	beq.n	8003ae2 <_printf_i+0x166>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	079b      	lsls	r3, r3, #30
 8003b8e:	d413      	bmi.n	8003bb8 <_printf_i+0x23c>
 8003b90:	68e0      	ldr	r0, [r4, #12]
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	4298      	cmp	r0, r3
 8003b96:	bfb8      	it	lt
 8003b98:	4618      	movlt	r0, r3
 8003b9a:	e7a4      	b.n	8003ae6 <_printf_i+0x16a>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	4632      	mov	r2, r6
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	47d0      	blx	sl
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d09b      	beq.n	8003ae2 <_printf_i+0x166>
 8003baa:	3501      	adds	r5, #1
 8003bac:	68e3      	ldr	r3, [r4, #12]
 8003bae:	9903      	ldr	r1, [sp, #12]
 8003bb0:	1a5b      	subs	r3, r3, r1
 8003bb2:	42ab      	cmp	r3, r5
 8003bb4:	dcf2      	bgt.n	8003b9c <_printf_i+0x220>
 8003bb6:	e7eb      	b.n	8003b90 <_printf_i+0x214>
 8003bb8:	2500      	movs	r5, #0
 8003bba:	f104 0619 	add.w	r6, r4, #25
 8003bbe:	e7f5      	b.n	8003bac <_printf_i+0x230>
 8003bc0:	08006016 	.word	0x08006016
 8003bc4:	08006027 	.word	0x08006027

08003bc8 <iprintf>:
 8003bc8:	b40f      	push	{r0, r1, r2, r3}
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <iprintf+0x2c>)
 8003bcc:	b513      	push	{r0, r1, r4, lr}
 8003bce:	681c      	ldr	r4, [r3, #0]
 8003bd0:	b124      	cbz	r4, 8003bdc <iprintf+0x14>
 8003bd2:	69a3      	ldr	r3, [r4, #24]
 8003bd4:	b913      	cbnz	r3, 8003bdc <iprintf+0x14>
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f001 f8d6 	bl	8004d88 <__sinit>
 8003bdc:	ab05      	add	r3, sp, #20
 8003bde:	4620      	mov	r0, r4
 8003be0:	9a04      	ldr	r2, [sp, #16]
 8003be2:	68a1      	ldr	r1, [r4, #8]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	f001 fe97 	bl	8005918 <_vfiprintf_r>
 8003bea:	b002      	add	sp, #8
 8003bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf0:	b004      	add	sp, #16
 8003bf2:	4770      	bx	lr
 8003bf4:	2000000c 	.word	0x2000000c

08003bf8 <_puts_r>:
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	460e      	mov	r6, r1
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	b118      	cbz	r0, 8003c08 <_puts_r+0x10>
 8003c00:	6983      	ldr	r3, [r0, #24]
 8003c02:	b90b      	cbnz	r3, 8003c08 <_puts_r+0x10>
 8003c04:	f001 f8c0 	bl	8004d88 <__sinit>
 8003c08:	69ab      	ldr	r3, [r5, #24]
 8003c0a:	68ac      	ldr	r4, [r5, #8]
 8003c0c:	b913      	cbnz	r3, 8003c14 <_puts_r+0x1c>
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f001 f8ba 	bl	8004d88 <__sinit>
 8003c14:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <_puts_r+0xd0>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d120      	bne.n	8003c5c <_puts_r+0x64>
 8003c1a:	686c      	ldr	r4, [r5, #4]
 8003c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c1e:	07db      	lsls	r3, r3, #31
 8003c20:	d405      	bmi.n	8003c2e <_puts_r+0x36>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	0598      	lsls	r0, r3, #22
 8003c26:	d402      	bmi.n	8003c2e <_puts_r+0x36>
 8003c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c2a:	f001 f950 	bl	8004ece <__retarget_lock_acquire_recursive>
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	0719      	lsls	r1, r3, #28
 8003c32:	d51d      	bpl.n	8003c70 <_puts_r+0x78>
 8003c34:	6923      	ldr	r3, [r4, #16]
 8003c36:	b1db      	cbz	r3, 8003c70 <_puts_r+0x78>
 8003c38:	3e01      	subs	r6, #1
 8003c3a:	68a3      	ldr	r3, [r4, #8]
 8003c3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60a3      	str	r3, [r4, #8]
 8003c44:	bb39      	cbnz	r1, 8003c96 <_puts_r+0x9e>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da38      	bge.n	8003cbc <_puts_r+0xc4>
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	210a      	movs	r1, #10
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 f848 	bl	8003ce4 <__swbuf_r>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d011      	beq.n	8003c7c <_puts_r+0x84>
 8003c58:	250a      	movs	r5, #10
 8003c5a:	e011      	b.n	8003c80 <_puts_r+0x88>
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <_puts_r+0xd4>)
 8003c5e:	429c      	cmp	r4, r3
 8003c60:	d101      	bne.n	8003c66 <_puts_r+0x6e>
 8003c62:	68ac      	ldr	r4, [r5, #8]
 8003c64:	e7da      	b.n	8003c1c <_puts_r+0x24>
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <_puts_r+0xd8>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	bf08      	it	eq
 8003c6c:	68ec      	ldreq	r4, [r5, #12]
 8003c6e:	e7d5      	b.n	8003c1c <_puts_r+0x24>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f888 	bl	8003d88 <__swsetup_r>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d0dd      	beq.n	8003c38 <_puts_r+0x40>
 8003c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c82:	07da      	lsls	r2, r3, #31
 8003c84:	d405      	bmi.n	8003c92 <_puts_r+0x9a>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	059b      	lsls	r3, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <_puts_r+0x9a>
 8003c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c8e:	f001 f91f 	bl	8004ed0 <__retarget_lock_release_recursive>
 8003c92:	4628      	mov	r0, r5
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da04      	bge.n	8003ca4 <_puts_r+0xac>
 8003c9a:	69a2      	ldr	r2, [r4, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dc06      	bgt.n	8003cae <_puts_r+0xb6>
 8003ca0:	290a      	cmp	r1, #10
 8003ca2:	d004      	beq.n	8003cae <_puts_r+0xb6>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	6022      	str	r2, [r4, #0]
 8003caa:	7019      	strb	r1, [r3, #0]
 8003cac:	e7c5      	b.n	8003c3a <_puts_r+0x42>
 8003cae:	4622      	mov	r2, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f817 	bl	8003ce4 <__swbuf_r>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d1bf      	bne.n	8003c3a <_puts_r+0x42>
 8003cba:	e7df      	b.n	8003c7c <_puts_r+0x84>
 8003cbc:	250a      	movs	r5, #10
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	6022      	str	r2, [r4, #0]
 8003cc4:	701d      	strb	r5, [r3, #0]
 8003cc6:	e7db      	b.n	8003c80 <_puts_r+0x88>
 8003cc8:	080060e8 	.word	0x080060e8
 8003ccc:	08006108 	.word	0x08006108
 8003cd0:	080060c8 	.word	0x080060c8

08003cd4 <puts>:
 8003cd4:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <puts+0xc>)
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f7ff bf8d 	b.w	8003bf8 <_puts_r>
 8003cde:	bf00      	nop
 8003ce0:	2000000c 	.word	0x2000000c

08003ce4 <__swbuf_r>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	4605      	mov	r5, r0
 8003cec:	b118      	cbz	r0, 8003cf6 <__swbuf_r+0x12>
 8003cee:	6983      	ldr	r3, [r0, #24]
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <__swbuf_r+0x12>
 8003cf2:	f001 f849 	bl	8004d88 <__sinit>
 8003cf6:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <__swbuf_r+0x98>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	d12b      	bne.n	8003d54 <__swbuf_r+0x70>
 8003cfc:	686c      	ldr	r4, [r5, #4]
 8003cfe:	69a3      	ldr	r3, [r4, #24]
 8003d00:	60a3      	str	r3, [r4, #8]
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	071a      	lsls	r2, r3, #28
 8003d06:	d52f      	bpl.n	8003d68 <__swbuf_r+0x84>
 8003d08:	6923      	ldr	r3, [r4, #16]
 8003d0a:	b36b      	cbz	r3, 8003d68 <__swbuf_r+0x84>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	b2f6      	uxtb	r6, r6
 8003d12:	1ac0      	subs	r0, r0, r3
 8003d14:	6963      	ldr	r3, [r4, #20]
 8003d16:	4637      	mov	r7, r6
 8003d18:	4283      	cmp	r3, r0
 8003d1a:	dc04      	bgt.n	8003d26 <__swbuf_r+0x42>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 ff9e 	bl	8004c60 <_fflush_r>
 8003d24:	bb30      	cbnz	r0, 8003d74 <__swbuf_r+0x90>
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	3001      	adds	r0, #1
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	6022      	str	r2, [r4, #0]
 8003d34:	701e      	strb	r6, [r3, #0]
 8003d36:	6963      	ldr	r3, [r4, #20]
 8003d38:	4283      	cmp	r3, r0
 8003d3a:	d004      	beq.n	8003d46 <__swbuf_r+0x62>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d506      	bpl.n	8003d50 <__swbuf_r+0x6c>
 8003d42:	2e0a      	cmp	r6, #10
 8003d44:	d104      	bne.n	8003d50 <__swbuf_r+0x6c>
 8003d46:	4621      	mov	r1, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 ff89 	bl	8004c60 <_fflush_r>
 8003d4e:	b988      	cbnz	r0, 8003d74 <__swbuf_r+0x90>
 8003d50:	4638      	mov	r0, r7
 8003d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <__swbuf_r+0x9c>)
 8003d56:	429c      	cmp	r4, r3
 8003d58:	d101      	bne.n	8003d5e <__swbuf_r+0x7a>
 8003d5a:	68ac      	ldr	r4, [r5, #8]
 8003d5c:	e7cf      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <__swbuf_r+0xa0>)
 8003d60:	429c      	cmp	r4, r3
 8003d62:	bf08      	it	eq
 8003d64:	68ec      	ldreq	r4, [r5, #12]
 8003d66:	e7ca      	b.n	8003cfe <__swbuf_r+0x1a>
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 f80c 	bl	8003d88 <__swsetup_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0cb      	beq.n	8003d0c <__swbuf_r+0x28>
 8003d74:	f04f 37ff 	mov.w	r7, #4294967295
 8003d78:	e7ea      	b.n	8003d50 <__swbuf_r+0x6c>
 8003d7a:	bf00      	nop
 8003d7c:	080060e8 	.word	0x080060e8
 8003d80:	08006108 	.word	0x08006108
 8003d84:	080060c8 	.word	0x080060c8

08003d88 <__swsetup_r>:
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <__swsetup_r+0xcc>)
 8003d8a:	b570      	push	{r4, r5, r6, lr}
 8003d8c:	681d      	ldr	r5, [r3, #0]
 8003d8e:	4606      	mov	r6, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	b125      	cbz	r5, 8003d9e <__swsetup_r+0x16>
 8003d94:	69ab      	ldr	r3, [r5, #24]
 8003d96:	b913      	cbnz	r3, 8003d9e <__swsetup_r+0x16>
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 fff5 	bl	8004d88 <__sinit>
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <__swsetup_r+0xd0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d10f      	bne.n	8003dc4 <__swsetup_r+0x3c>
 8003da4:	686c      	ldr	r4, [r5, #4]
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dac:	0719      	lsls	r1, r3, #28
 8003dae:	d42c      	bmi.n	8003e0a <__swsetup_r+0x82>
 8003db0:	06dd      	lsls	r5, r3, #27
 8003db2:	d411      	bmi.n	8003dd8 <__swsetup_r+0x50>
 8003db4:	2309      	movs	r3, #9
 8003db6:	6033      	str	r3, [r6, #0]
 8003db8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	81a3      	strh	r3, [r4, #12]
 8003dc2:	e03e      	b.n	8003e42 <__swsetup_r+0xba>
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <__swsetup_r+0xd4>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	d101      	bne.n	8003dce <__swsetup_r+0x46>
 8003dca:	68ac      	ldr	r4, [r5, #8]
 8003dcc:	e7eb      	b.n	8003da6 <__swsetup_r+0x1e>
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <__swsetup_r+0xd8>)
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	bf08      	it	eq
 8003dd4:	68ec      	ldreq	r4, [r5, #12]
 8003dd6:	e7e6      	b.n	8003da6 <__swsetup_r+0x1e>
 8003dd8:	0758      	lsls	r0, r3, #29
 8003dda:	d512      	bpl.n	8003e02 <__swsetup_r+0x7a>
 8003ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dde:	b141      	cbz	r1, 8003df2 <__swsetup_r+0x6a>
 8003de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d002      	beq.n	8003dee <__swsetup_r+0x66>
 8003de8:	4630      	mov	r0, r6
 8003dea:	f001 fc91 	bl	8005710 <_free_r>
 8003dee:	2300      	movs	r3, #0
 8003df0:	6363      	str	r3, [r4, #52]	; 0x34
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	b94b      	cbnz	r3, 8003e22 <__swsetup_r+0x9a>
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d003      	beq.n	8003e22 <__swsetup_r+0x9a>
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f001 f87d 	bl	8004f1c <__smakebuf_r>
 8003e22:	89a0      	ldrh	r0, [r4, #12]
 8003e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e28:	f010 0301 	ands.w	r3, r0, #1
 8003e2c:	d00a      	beq.n	8003e44 <__swsetup_r+0xbc>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60a3      	str	r3, [r4, #8]
 8003e32:	6963      	ldr	r3, [r4, #20]
 8003e34:	425b      	negs	r3, r3
 8003e36:	61a3      	str	r3, [r4, #24]
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	b943      	cbnz	r3, 8003e4e <__swsetup_r+0xc6>
 8003e3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e40:	d1ba      	bne.n	8003db8 <__swsetup_r+0x30>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	0781      	lsls	r1, r0, #30
 8003e46:	bf58      	it	pl
 8003e48:	6963      	ldrpl	r3, [r4, #20]
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	e7f4      	b.n	8003e38 <__swsetup_r+0xb0>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e7f7      	b.n	8003e42 <__swsetup_r+0xba>
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	080060e8 	.word	0x080060e8
 8003e5c:	08006108 	.word	0x08006108
 8003e60:	080060c8 	.word	0x080060c8

08003e64 <quorem>:
 8003e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e68:	6903      	ldr	r3, [r0, #16]
 8003e6a:	690c      	ldr	r4, [r1, #16]
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	f2c0 8082 	blt.w	8003f78 <quorem+0x114>
 8003e74:	3c01      	subs	r4, #1
 8003e76:	f100 0514 	add.w	r5, r0, #20
 8003e7a:	f101 0814 	add.w	r8, r1, #20
 8003e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e9c:	d331      	bcc.n	8003f02 <quorem+0x9e>
 8003e9e:	f04f 0e00 	mov.w	lr, #0
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	46ac      	mov	ip, r5
 8003ea6:	46f2      	mov	sl, lr
 8003ea8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003eac:	b293      	uxth	r3, r2
 8003eae:	fb06 e303 	mla	r3, r6, r3, lr
 8003eb2:	0c12      	lsrs	r2, r2, #16
 8003eb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	fb06 e202 	mla	r2, r6, r2, lr
 8003ebe:	ebaa 0303 	sub.w	r3, sl, r3
 8003ec2:	f8dc a000 	ldr.w	sl, [ip]
 8003ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003eca:	fa1f fa8a 	uxth.w	sl, sl
 8003ece:	4453      	add	r3, sl
 8003ed0:	f8dc a000 	ldr.w	sl, [ip]
 8003ed4:	b292      	uxth	r2, r2
 8003ed6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003eda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ee4:	4581      	cmp	r9, r0
 8003ee6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003eea:	f84c 3b04 	str.w	r3, [ip], #4
 8003eee:	d2db      	bcs.n	8003ea8 <quorem+0x44>
 8003ef0:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ef4:	b92b      	cbnz	r3, 8003f02 <quorem+0x9e>
 8003ef6:	9b01      	ldr	r3, [sp, #4]
 8003ef8:	3b04      	subs	r3, #4
 8003efa:	429d      	cmp	r5, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	d32f      	bcc.n	8003f60 <quorem+0xfc>
 8003f00:	613c      	str	r4, [r7, #16]
 8003f02:	4638      	mov	r0, r7
 8003f04:	f001 faec 	bl	80054e0 <__mcmp>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	db25      	blt.n	8003f58 <quorem+0xf4>
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f04f 0c00 	mov.w	ip, #0
 8003f12:	3601      	adds	r6, #1
 8003f14:	f858 1b04 	ldr.w	r1, [r8], #4
 8003f18:	f8d0 e000 	ldr.w	lr, [r0]
 8003f1c:	b28b      	uxth	r3, r1
 8003f1e:	ebac 0303 	sub.w	r3, ip, r3
 8003f22:	fa1f f28e 	uxth.w	r2, lr
 8003f26:	4413      	add	r3, r2
 8003f28:	0c0a      	lsrs	r2, r1, #16
 8003f2a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f38:	45c1      	cmp	r9, r8
 8003f3a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f3e:	f840 3b04 	str.w	r3, [r0], #4
 8003f42:	d2e7      	bcs.n	8003f14 <quorem+0xb0>
 8003f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f4c:	b922      	cbnz	r2, 8003f58 <quorem+0xf4>
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	429d      	cmp	r5, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	d30a      	bcc.n	8003f6c <quorem+0x108>
 8003f56:	613c      	str	r4, [r7, #16]
 8003f58:	4630      	mov	r0, r6
 8003f5a:	b003      	add	sp, #12
 8003f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	3b04      	subs	r3, #4
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	d1cb      	bne.n	8003f00 <quorem+0x9c>
 8003f68:	3c01      	subs	r4, #1
 8003f6a:	e7c6      	b.n	8003efa <quorem+0x96>
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d1f0      	bne.n	8003f56 <quorem+0xf2>
 8003f74:	3c01      	subs	r4, #1
 8003f76:	e7eb      	b.n	8003f50 <quorem+0xec>
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e7ee      	b.n	8003f5a <quorem+0xf6>
 8003f7c:	0000      	movs	r0, r0
	...

08003f80 <_dtoa_r>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	4616      	mov	r6, r2
 8003f86:	461f      	mov	r7, r3
 8003f88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003f8a:	b099      	sub	sp, #100	; 0x64
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003f96:	b974      	cbnz	r4, 8003fb6 <_dtoa_r+0x36>
 8003f98:	2010      	movs	r0, #16
 8003f9a:	f000 ffff 	bl	8004f9c <malloc>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6268      	str	r0, [r5, #36]	; 0x24
 8003fa2:	b920      	cbnz	r0, 8003fae <_dtoa_r+0x2e>
 8003fa4:	21ea      	movs	r1, #234	; 0xea
 8003fa6:	4ba8      	ldr	r3, [pc, #672]	; (8004248 <_dtoa_r+0x2c8>)
 8003fa8:	48a8      	ldr	r0, [pc, #672]	; (800424c <_dtoa_r+0x2cc>)
 8003faa:	f001 fe4b 	bl	8005c44 <__assert_func>
 8003fae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003fb2:	6004      	str	r4, [r0, #0]
 8003fb4:	60c4      	str	r4, [r0, #12]
 8003fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	b151      	cbz	r1, 8003fd2 <_dtoa_r+0x52>
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4093      	lsls	r3, r2
 8003fc2:	604a      	str	r2, [r1, #4]
 8003fc4:	608b      	str	r3, [r1, #8]
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f001 f84c 	bl	8005064 <_Bfree>
 8003fcc:	2200      	movs	r2, #0
 8003fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	1e3b      	subs	r3, r7, #0
 8003fd4:	bfaf      	iteee	ge
 8003fd6:	2300      	movge	r3, #0
 8003fd8:	2201      	movlt	r2, #1
 8003fda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003fde:	9305      	strlt	r3, [sp, #20]
 8003fe0:	bfa8      	it	ge
 8003fe2:	f8c8 3000 	strge.w	r3, [r8]
 8003fe6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003fea:	4b99      	ldr	r3, [pc, #612]	; (8004250 <_dtoa_r+0x2d0>)
 8003fec:	bfb8      	it	lt
 8003fee:	f8c8 2000 	strlt.w	r2, [r8]
 8003ff2:	ea33 0309 	bics.w	r3, r3, r9
 8003ff6:	d119      	bne.n	800402c <_dtoa_r+0xac>
 8003ff8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ffc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004004:	4333      	orrs	r3, r6
 8004006:	f000 857f 	beq.w	8004b08 <_dtoa_r+0xb88>
 800400a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800400c:	b953      	cbnz	r3, 8004024 <_dtoa_r+0xa4>
 800400e:	4b91      	ldr	r3, [pc, #580]	; (8004254 <_dtoa_r+0x2d4>)
 8004010:	e022      	b.n	8004058 <_dtoa_r+0xd8>
 8004012:	4b91      	ldr	r3, [pc, #580]	; (8004258 <_dtoa_r+0x2d8>)
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	3308      	adds	r3, #8
 8004018:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	9803      	ldr	r0, [sp, #12]
 800401e:	b019      	add	sp, #100	; 0x64
 8004020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004024:	4b8b      	ldr	r3, [pc, #556]	; (8004254 <_dtoa_r+0x2d4>)
 8004026:	9303      	str	r3, [sp, #12]
 8004028:	3303      	adds	r3, #3
 800402a:	e7f5      	b.n	8004018 <_dtoa_r+0x98>
 800402c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004030:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004038:	2200      	movs	r2, #0
 800403a:	2300      	movs	r3, #0
 800403c:	f7fc fcb4 	bl	80009a8 <__aeabi_dcmpeq>
 8004040:	4680      	mov	r8, r0
 8004042:	b158      	cbz	r0, 800405c <_dtoa_r+0xdc>
 8004044:	2301      	movs	r3, #1
 8004046:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8558 	beq.w	8004b02 <_dtoa_r+0xb82>
 8004052:	4882      	ldr	r0, [pc, #520]	; (800425c <_dtoa_r+0x2dc>)
 8004054:	6018      	str	r0, [r3, #0]
 8004056:	1e43      	subs	r3, r0, #1
 8004058:	9303      	str	r3, [sp, #12]
 800405a:	e7df      	b.n	800401c <_dtoa_r+0x9c>
 800405c:	ab16      	add	r3, sp, #88	; 0x58
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	ab17      	add	r3, sp, #92	; 0x5c
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	4628      	mov	r0, r5
 8004066:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800406a:	f001 fae1 	bl	8005630 <__d2b>
 800406e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004072:	4683      	mov	fp, r0
 8004074:	2c00      	cmp	r4, #0
 8004076:	d07f      	beq.n	8004178 <_dtoa_r+0x1f8>
 8004078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800407c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800407e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004086:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800408a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800408e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004092:	2200      	movs	r2, #0
 8004094:	4b72      	ldr	r3, [pc, #456]	; (8004260 <_dtoa_r+0x2e0>)
 8004096:	f7fc f867 	bl	8000168 <__aeabi_dsub>
 800409a:	a365      	add	r3, pc, #404	; (adr r3, 8004230 <_dtoa_r+0x2b0>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f7fc fa1a 	bl	80004d8 <__aeabi_dmul>
 80040a4:	a364      	add	r3, pc, #400	; (adr r3, 8004238 <_dtoa_r+0x2b8>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc f85f 	bl	800016c <__adddf3>
 80040ae:	4606      	mov	r6, r0
 80040b0:	4620      	mov	r0, r4
 80040b2:	460f      	mov	r7, r1
 80040b4:	f7fc f9a6 	bl	8000404 <__aeabi_i2d>
 80040b8:	a361      	add	r3, pc, #388	; (adr r3, 8004240 <_dtoa_r+0x2c0>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f7fc fa0b 	bl	80004d8 <__aeabi_dmul>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc f84f 	bl	800016c <__adddf3>
 80040ce:	4606      	mov	r6, r0
 80040d0:	460f      	mov	r7, r1
 80040d2:	f7fc fcb1 	bl	8000a38 <__aeabi_d2iz>
 80040d6:	2200      	movs	r2, #0
 80040d8:	4682      	mov	sl, r0
 80040da:	2300      	movs	r3, #0
 80040dc:	4630      	mov	r0, r6
 80040de:	4639      	mov	r1, r7
 80040e0:	f7fc fc6c 	bl	80009bc <__aeabi_dcmplt>
 80040e4:	b148      	cbz	r0, 80040fa <_dtoa_r+0x17a>
 80040e6:	4650      	mov	r0, sl
 80040e8:	f7fc f98c 	bl	8000404 <__aeabi_i2d>
 80040ec:	4632      	mov	r2, r6
 80040ee:	463b      	mov	r3, r7
 80040f0:	f7fc fc5a 	bl	80009a8 <__aeabi_dcmpeq>
 80040f4:	b908      	cbnz	r0, 80040fa <_dtoa_r+0x17a>
 80040f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040fa:	f1ba 0f16 	cmp.w	sl, #22
 80040fe:	d858      	bhi.n	80041b2 <_dtoa_r+0x232>
 8004100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004104:	4b57      	ldr	r3, [pc, #348]	; (8004264 <_dtoa_r+0x2e4>)
 8004106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fc55 	bl	80009bc <__aeabi_dcmplt>
 8004112:	2800      	cmp	r0, #0
 8004114:	d04f      	beq.n	80041b6 <_dtoa_r+0x236>
 8004116:	2300      	movs	r3, #0
 8004118:	f10a 3aff 	add.w	sl, sl, #4294967295
 800411c:	930f      	str	r3, [sp, #60]	; 0x3c
 800411e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004120:	1b1c      	subs	r4, r3, r4
 8004122:	1e63      	subs	r3, r4, #1
 8004124:	9309      	str	r3, [sp, #36]	; 0x24
 8004126:	bf49      	itett	mi
 8004128:	f1c4 0301 	rsbmi	r3, r4, #1
 800412c:	2300      	movpl	r3, #0
 800412e:	9306      	strmi	r3, [sp, #24]
 8004130:	2300      	movmi	r3, #0
 8004132:	bf54      	ite	pl
 8004134:	9306      	strpl	r3, [sp, #24]
 8004136:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004138:	f1ba 0f00 	cmp.w	sl, #0
 800413c:	db3d      	blt.n	80041ba <_dtoa_r+0x23a>
 800413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004140:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004144:	4453      	add	r3, sl
 8004146:	9309      	str	r3, [sp, #36]	; 0x24
 8004148:	2300      	movs	r3, #0
 800414a:	930a      	str	r3, [sp, #40]	; 0x28
 800414c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800414e:	2b09      	cmp	r3, #9
 8004150:	f200 808c 	bhi.w	800426c <_dtoa_r+0x2ec>
 8004154:	2b05      	cmp	r3, #5
 8004156:	bfc4      	itt	gt
 8004158:	3b04      	subgt	r3, #4
 800415a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800415c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800415e:	bfc8      	it	gt
 8004160:	2400      	movgt	r4, #0
 8004162:	f1a3 0302 	sub.w	r3, r3, #2
 8004166:	bfd8      	it	le
 8004168:	2401      	movle	r4, #1
 800416a:	2b03      	cmp	r3, #3
 800416c:	f200 808a 	bhi.w	8004284 <_dtoa_r+0x304>
 8004170:	e8df f003 	tbb	[pc, r3]
 8004174:	5b4d4f2d 	.word	0x5b4d4f2d
 8004178:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800417c:	441c      	add	r4, r3
 800417e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004182:	2b20      	cmp	r3, #32
 8004184:	bfc3      	ittte	gt
 8004186:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800418a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800418e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004192:	f1c3 0320 	rsble	r3, r3, #32
 8004196:	bfc6      	itte	gt
 8004198:	fa26 f000 	lsrgt.w	r0, r6, r0
 800419c:	4318      	orrgt	r0, r3
 800419e:	fa06 f003 	lslle.w	r0, r6, r3
 80041a2:	f7fc f91f 	bl	80003e4 <__aeabi_ui2d>
 80041a6:	2301      	movs	r3, #1
 80041a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80041ac:	3c01      	subs	r4, #1
 80041ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80041b0:	e76f      	b.n	8004092 <_dtoa_r+0x112>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e7b2      	b.n	800411c <_dtoa_r+0x19c>
 80041b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80041b8:	e7b1      	b.n	800411e <_dtoa_r+0x19e>
 80041ba:	9b06      	ldr	r3, [sp, #24]
 80041bc:	eba3 030a 	sub.w	r3, r3, sl
 80041c0:	9306      	str	r3, [sp, #24]
 80041c2:	f1ca 0300 	rsb	r3, sl, #0
 80041c6:	930a      	str	r3, [sp, #40]	; 0x28
 80041c8:	2300      	movs	r3, #0
 80041ca:	930e      	str	r3, [sp, #56]	; 0x38
 80041cc:	e7be      	b.n	800414c <_dtoa_r+0x1cc>
 80041ce:	2300      	movs	r3, #0
 80041d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80041d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	dc58      	bgt.n	800428a <_dtoa_r+0x30a>
 80041d8:	f04f 0901 	mov.w	r9, #1
 80041dc:	464b      	mov	r3, r9
 80041de:	f8cd 9020 	str.w	r9, [sp, #32]
 80041e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80041e6:	2200      	movs	r2, #0
 80041e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80041ea:	6042      	str	r2, [r0, #4]
 80041ec:	2204      	movs	r2, #4
 80041ee:	f102 0614 	add.w	r6, r2, #20
 80041f2:	429e      	cmp	r6, r3
 80041f4:	6841      	ldr	r1, [r0, #4]
 80041f6:	d94e      	bls.n	8004296 <_dtoa_r+0x316>
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 fef3 	bl	8004fe4 <_Balloc>
 80041fe:	9003      	str	r0, [sp, #12]
 8004200:	2800      	cmp	r0, #0
 8004202:	d14c      	bne.n	800429e <_dtoa_r+0x31e>
 8004204:	4602      	mov	r2, r0
 8004206:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <_dtoa_r+0x2e8>)
 800420c:	e6cc      	b.n	8003fa8 <_dtoa_r+0x28>
 800420e:	2301      	movs	r3, #1
 8004210:	e7de      	b.n	80041d0 <_dtoa_r+0x250>
 8004212:	2300      	movs	r3, #0
 8004214:	930b      	str	r3, [sp, #44]	; 0x2c
 8004216:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004218:	eb0a 0903 	add.w	r9, sl, r3
 800421c:	f109 0301 	add.w	r3, r9, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	9308      	str	r3, [sp, #32]
 8004224:	bfb8      	it	lt
 8004226:	2301      	movlt	r3, #1
 8004228:	e7dd      	b.n	80041e6 <_dtoa_r+0x266>
 800422a:	2301      	movs	r3, #1
 800422c:	e7f2      	b.n	8004214 <_dtoa_r+0x294>
 800422e:	bf00      	nop
 8004230:	636f4361 	.word	0x636f4361
 8004234:	3fd287a7 	.word	0x3fd287a7
 8004238:	8b60c8b3 	.word	0x8b60c8b3
 800423c:	3fc68a28 	.word	0x3fc68a28
 8004240:	509f79fb 	.word	0x509f79fb
 8004244:	3fd34413 	.word	0x3fd34413
 8004248:	08006045 	.word	0x08006045
 800424c:	0800605c 	.word	0x0800605c
 8004250:	7ff00000 	.word	0x7ff00000
 8004254:	08006041 	.word	0x08006041
 8004258:	08006038 	.word	0x08006038
 800425c:	08006015 	.word	0x08006015
 8004260:	3ff80000 	.word	0x3ff80000
 8004264:	080061b0 	.word	0x080061b0
 8004268:	080060b7 	.word	0x080060b7
 800426c:	2401      	movs	r4, #1
 800426e:	2300      	movs	r3, #0
 8004270:	940b      	str	r4, [sp, #44]	; 0x2c
 8004272:	9322      	str	r3, [sp, #136]	; 0x88
 8004274:	f04f 39ff 	mov.w	r9, #4294967295
 8004278:	2200      	movs	r2, #0
 800427a:	2312      	movs	r3, #18
 800427c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004280:	9223      	str	r2, [sp, #140]	; 0x8c
 8004282:	e7b0      	b.n	80041e6 <_dtoa_r+0x266>
 8004284:	2301      	movs	r3, #1
 8004286:	930b      	str	r3, [sp, #44]	; 0x2c
 8004288:	e7f4      	b.n	8004274 <_dtoa_r+0x2f4>
 800428a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800428e:	464b      	mov	r3, r9
 8004290:	f8cd 9020 	str.w	r9, [sp, #32]
 8004294:	e7a7      	b.n	80041e6 <_dtoa_r+0x266>
 8004296:	3101      	adds	r1, #1
 8004298:	6041      	str	r1, [r0, #4]
 800429a:	0052      	lsls	r2, r2, #1
 800429c:	e7a7      	b.n	80041ee <_dtoa_r+0x26e>
 800429e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042a0:	9a03      	ldr	r2, [sp, #12]
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	9b08      	ldr	r3, [sp, #32]
 80042a6:	2b0e      	cmp	r3, #14
 80042a8:	f200 80a8 	bhi.w	80043fc <_dtoa_r+0x47c>
 80042ac:	2c00      	cmp	r4, #0
 80042ae:	f000 80a5 	beq.w	80043fc <_dtoa_r+0x47c>
 80042b2:	f1ba 0f00 	cmp.w	sl, #0
 80042b6:	dd34      	ble.n	8004322 <_dtoa_r+0x3a2>
 80042b8:	4a9a      	ldr	r2, [pc, #616]	; (8004524 <_dtoa_r+0x5a4>)
 80042ba:	f00a 030f 	and.w	r3, sl, #15
 80042be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80042c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80042ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80042d2:	d016      	beq.n	8004302 <_dtoa_r+0x382>
 80042d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042d8:	4b93      	ldr	r3, [pc, #588]	; (8004528 <_dtoa_r+0x5a8>)
 80042da:	2703      	movs	r7, #3
 80042dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042e0:	f7fc fa24 	bl	800072c <__aeabi_ddiv>
 80042e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042e8:	f004 040f 	and.w	r4, r4, #15
 80042ec:	4e8e      	ldr	r6, [pc, #568]	; (8004528 <_dtoa_r+0x5a8>)
 80042ee:	b954      	cbnz	r4, 8004306 <_dtoa_r+0x386>
 80042f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80042f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f8:	f7fc fa18 	bl	800072c <__aeabi_ddiv>
 80042fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004300:	e029      	b.n	8004356 <_dtoa_r+0x3d6>
 8004302:	2702      	movs	r7, #2
 8004304:	e7f2      	b.n	80042ec <_dtoa_r+0x36c>
 8004306:	07e1      	lsls	r1, r4, #31
 8004308:	d508      	bpl.n	800431c <_dtoa_r+0x39c>
 800430a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800430e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004312:	f7fc f8e1 	bl	80004d8 <__aeabi_dmul>
 8004316:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800431a:	3701      	adds	r7, #1
 800431c:	1064      	asrs	r4, r4, #1
 800431e:	3608      	adds	r6, #8
 8004320:	e7e5      	b.n	80042ee <_dtoa_r+0x36e>
 8004322:	f000 80a5 	beq.w	8004470 <_dtoa_r+0x4f0>
 8004326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800432a:	f1ca 0400 	rsb	r4, sl, #0
 800432e:	4b7d      	ldr	r3, [pc, #500]	; (8004524 <_dtoa_r+0x5a4>)
 8004330:	f004 020f 	and.w	r2, r4, #15
 8004334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fc f8cc 	bl	80004d8 <__aeabi_dmul>
 8004340:	2702      	movs	r7, #2
 8004342:	2300      	movs	r3, #0
 8004344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004348:	4e77      	ldr	r6, [pc, #476]	; (8004528 <_dtoa_r+0x5a8>)
 800434a:	1124      	asrs	r4, r4, #4
 800434c:	2c00      	cmp	r4, #0
 800434e:	f040 8084 	bne.w	800445a <_dtoa_r+0x4da>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d2      	bne.n	80042fc <_dtoa_r+0x37c>
 8004356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 808b 	beq.w	8004474 <_dtoa_r+0x4f4>
 800435e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004362:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004366:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800436a:	2200      	movs	r2, #0
 800436c:	4b6f      	ldr	r3, [pc, #444]	; (800452c <_dtoa_r+0x5ac>)
 800436e:	f7fc fb25 	bl	80009bc <__aeabi_dcmplt>
 8004372:	2800      	cmp	r0, #0
 8004374:	d07e      	beq.n	8004474 <_dtoa_r+0x4f4>
 8004376:	9b08      	ldr	r3, [sp, #32]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d07b      	beq.n	8004474 <_dtoa_r+0x4f4>
 800437c:	f1b9 0f00 	cmp.w	r9, #0
 8004380:	dd38      	ble.n	80043f4 <_dtoa_r+0x474>
 8004382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004386:	2200      	movs	r2, #0
 8004388:	4b69      	ldr	r3, [pc, #420]	; (8004530 <_dtoa_r+0x5b0>)
 800438a:	f7fc f8a5 	bl	80004d8 <__aeabi_dmul>
 800438e:	464c      	mov	r4, r9
 8004390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004394:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004398:	3701      	adds	r7, #1
 800439a:	4638      	mov	r0, r7
 800439c:	f7fc f832 	bl	8000404 <__aeabi_i2d>
 80043a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043a4:	f7fc f898 	bl	80004d8 <__aeabi_dmul>
 80043a8:	2200      	movs	r2, #0
 80043aa:	4b62      	ldr	r3, [pc, #392]	; (8004534 <_dtoa_r+0x5b4>)
 80043ac:	f7fb fede 	bl	800016c <__adddf3>
 80043b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80043b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043b8:	9611      	str	r6, [sp, #68]	; 0x44
 80043ba:	2c00      	cmp	r4, #0
 80043bc:	d15d      	bne.n	800447a <_dtoa_r+0x4fa>
 80043be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043c2:	2200      	movs	r2, #0
 80043c4:	4b5c      	ldr	r3, [pc, #368]	; (8004538 <_dtoa_r+0x5b8>)
 80043c6:	f7fb fecf 	bl	8000168 <__aeabi_dsub>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043d2:	4633      	mov	r3, r6
 80043d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043d6:	f7fc fb0f 	bl	80009f8 <__aeabi_dcmpgt>
 80043da:	2800      	cmp	r0, #0
 80043dc:	f040 829c 	bne.w	8004918 <_dtoa_r+0x998>
 80043e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80043ea:	f7fc fae7 	bl	80009bc <__aeabi_dcmplt>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	f040 8290 	bne.w	8004914 <_dtoa_r+0x994>
 80043f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80043f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80043fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f2c0 8152 	blt.w	80046a8 <_dtoa_r+0x728>
 8004404:	f1ba 0f0e 	cmp.w	sl, #14
 8004408:	f300 814e 	bgt.w	80046a8 <_dtoa_r+0x728>
 800440c:	4b45      	ldr	r3, [pc, #276]	; (8004524 <_dtoa_r+0x5a4>)
 800440e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004412:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004416:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800441a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800441c:	2b00      	cmp	r3, #0
 800441e:	f280 80db 	bge.w	80045d8 <_dtoa_r+0x658>
 8004422:	9b08      	ldr	r3, [sp, #32]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f300 80d7 	bgt.w	80045d8 <_dtoa_r+0x658>
 800442a:	f040 8272 	bne.w	8004912 <_dtoa_r+0x992>
 800442e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004432:	2200      	movs	r2, #0
 8004434:	4b40      	ldr	r3, [pc, #256]	; (8004538 <_dtoa_r+0x5b8>)
 8004436:	f7fc f84f 	bl	80004d8 <__aeabi_dmul>
 800443a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800443e:	f7fc fad1 	bl	80009e4 <__aeabi_dcmpge>
 8004442:	9c08      	ldr	r4, [sp, #32]
 8004444:	4626      	mov	r6, r4
 8004446:	2800      	cmp	r0, #0
 8004448:	f040 8248 	bne.w	80048dc <_dtoa_r+0x95c>
 800444c:	2331      	movs	r3, #49	; 0x31
 800444e:	9f03      	ldr	r7, [sp, #12]
 8004450:	f10a 0a01 	add.w	sl, sl, #1
 8004454:	f807 3b01 	strb.w	r3, [r7], #1
 8004458:	e244      	b.n	80048e4 <_dtoa_r+0x964>
 800445a:	07e2      	lsls	r2, r4, #31
 800445c:	d505      	bpl.n	800446a <_dtoa_r+0x4ea>
 800445e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004462:	f7fc f839 	bl	80004d8 <__aeabi_dmul>
 8004466:	2301      	movs	r3, #1
 8004468:	3701      	adds	r7, #1
 800446a:	1064      	asrs	r4, r4, #1
 800446c:	3608      	adds	r6, #8
 800446e:	e76d      	b.n	800434c <_dtoa_r+0x3cc>
 8004470:	2702      	movs	r7, #2
 8004472:	e770      	b.n	8004356 <_dtoa_r+0x3d6>
 8004474:	46d0      	mov	r8, sl
 8004476:	9c08      	ldr	r4, [sp, #32]
 8004478:	e78f      	b.n	800439a <_dtoa_r+0x41a>
 800447a:	9903      	ldr	r1, [sp, #12]
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <_dtoa_r+0x5a4>)
 800447e:	4421      	add	r1, r4
 8004480:	9112      	str	r1, [sp, #72]	; 0x48
 8004482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004484:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004488:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800448c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004490:	2900      	cmp	r1, #0
 8004492:	d055      	beq.n	8004540 <_dtoa_r+0x5c0>
 8004494:	2000      	movs	r0, #0
 8004496:	4929      	ldr	r1, [pc, #164]	; (800453c <_dtoa_r+0x5bc>)
 8004498:	f7fc f948 	bl	800072c <__aeabi_ddiv>
 800449c:	463b      	mov	r3, r7
 800449e:	4632      	mov	r2, r6
 80044a0:	f7fb fe62 	bl	8000168 <__aeabi_dsub>
 80044a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044a8:	9f03      	ldr	r7, [sp, #12]
 80044aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ae:	f7fc fac3 	bl	8000a38 <__aeabi_d2iz>
 80044b2:	4604      	mov	r4, r0
 80044b4:	f7fb ffa6 	bl	8000404 <__aeabi_i2d>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044c0:	f7fb fe52 	bl	8000168 <__aeabi_dsub>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	3430      	adds	r4, #48	; 0x30
 80044ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044d2:	f807 4b01 	strb.w	r4, [r7], #1
 80044d6:	f7fc fa71 	bl	80009bc <__aeabi_dcmplt>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d174      	bne.n	80045c8 <_dtoa_r+0x648>
 80044de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044e2:	2000      	movs	r0, #0
 80044e4:	4911      	ldr	r1, [pc, #68]	; (800452c <_dtoa_r+0x5ac>)
 80044e6:	f7fb fe3f 	bl	8000168 <__aeabi_dsub>
 80044ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044ee:	f7fc fa65 	bl	80009bc <__aeabi_dcmplt>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f040 80b7 	bne.w	8004666 <_dtoa_r+0x6e6>
 80044f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044fa:	429f      	cmp	r7, r3
 80044fc:	f43f af7a 	beq.w	80043f4 <_dtoa_r+0x474>
 8004500:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004504:	2200      	movs	r2, #0
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <_dtoa_r+0x5b0>)
 8004508:	f7fb ffe6 	bl	80004d8 <__aeabi_dmul>
 800450c:	2200      	movs	r2, #0
 800450e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <_dtoa_r+0x5b0>)
 8004518:	f7fb ffde 	bl	80004d8 <__aeabi_dmul>
 800451c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004520:	e7c3      	b.n	80044aa <_dtoa_r+0x52a>
 8004522:	bf00      	nop
 8004524:	080061b0 	.word	0x080061b0
 8004528:	08006188 	.word	0x08006188
 800452c:	3ff00000 	.word	0x3ff00000
 8004530:	40240000 	.word	0x40240000
 8004534:	401c0000 	.word	0x401c0000
 8004538:	40140000 	.word	0x40140000
 800453c:	3fe00000 	.word	0x3fe00000
 8004540:	4630      	mov	r0, r6
 8004542:	4639      	mov	r1, r7
 8004544:	f7fb ffc8 	bl	80004d8 <__aeabi_dmul>
 8004548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800454a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800454e:	9c03      	ldr	r4, [sp, #12]
 8004550:	9314      	str	r3, [sp, #80]	; 0x50
 8004552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004556:	f7fc fa6f 	bl	8000a38 <__aeabi_d2iz>
 800455a:	9015      	str	r0, [sp, #84]	; 0x54
 800455c:	f7fb ff52 	bl	8000404 <__aeabi_i2d>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004568:	f7fb fdfe 	bl	8000168 <__aeabi_dsub>
 800456c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800456e:	4606      	mov	r6, r0
 8004570:	3330      	adds	r3, #48	; 0x30
 8004572:	f804 3b01 	strb.w	r3, [r4], #1
 8004576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004578:	460f      	mov	r7, r1
 800457a:	429c      	cmp	r4, r3
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	d124      	bne.n	80045cc <_dtoa_r+0x64c>
 8004582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004586:	4bb0      	ldr	r3, [pc, #704]	; (8004848 <_dtoa_r+0x8c8>)
 8004588:	f7fb fdf0 	bl	800016c <__adddf3>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4630      	mov	r0, r6
 8004592:	4639      	mov	r1, r7
 8004594:	f7fc fa30 	bl	80009f8 <__aeabi_dcmpgt>
 8004598:	2800      	cmp	r0, #0
 800459a:	d163      	bne.n	8004664 <_dtoa_r+0x6e4>
 800459c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045a0:	2000      	movs	r0, #0
 80045a2:	49a9      	ldr	r1, [pc, #676]	; (8004848 <_dtoa_r+0x8c8>)
 80045a4:	f7fb fde0 	bl	8000168 <__aeabi_dsub>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fc fa04 	bl	80009bc <__aeabi_dcmplt>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	f43f af1d 	beq.w	80043f4 <_dtoa_r+0x474>
 80045ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80045bc:	1e7b      	subs	r3, r7, #1
 80045be:	9314      	str	r3, [sp, #80]	; 0x50
 80045c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d0f8      	beq.n	80045ba <_dtoa_r+0x63a>
 80045c8:	46c2      	mov	sl, r8
 80045ca:	e03b      	b.n	8004644 <_dtoa_r+0x6c4>
 80045cc:	4b9f      	ldr	r3, [pc, #636]	; (800484c <_dtoa_r+0x8cc>)
 80045ce:	f7fb ff83 	bl	80004d8 <__aeabi_dmul>
 80045d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045d6:	e7bc      	b.n	8004552 <_dtoa_r+0x5d2>
 80045d8:	9f03      	ldr	r7, [sp, #12]
 80045da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80045de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045e2:	4640      	mov	r0, r8
 80045e4:	4649      	mov	r1, r9
 80045e6:	f7fc f8a1 	bl	800072c <__aeabi_ddiv>
 80045ea:	f7fc fa25 	bl	8000a38 <__aeabi_d2iz>
 80045ee:	4604      	mov	r4, r0
 80045f0:	f7fb ff08 	bl	8000404 <__aeabi_i2d>
 80045f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045f8:	f7fb ff6e 	bl	80004d8 <__aeabi_dmul>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4640      	mov	r0, r8
 8004602:	4649      	mov	r1, r9
 8004604:	f7fb fdb0 	bl	8000168 <__aeabi_dsub>
 8004608:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800460c:	f807 6b01 	strb.w	r6, [r7], #1
 8004610:	9e03      	ldr	r6, [sp, #12]
 8004612:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004616:	1bbe      	subs	r6, r7, r6
 8004618:	45b4      	cmp	ip, r6
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	d136      	bne.n	800468e <_dtoa_r+0x70e>
 8004620:	f7fb fda4 	bl	800016c <__adddf3>
 8004624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004628:	4680      	mov	r8, r0
 800462a:	4689      	mov	r9, r1
 800462c:	f7fc f9e4 	bl	80009f8 <__aeabi_dcmpgt>
 8004630:	bb58      	cbnz	r0, 800468a <_dtoa_r+0x70a>
 8004632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004636:	4640      	mov	r0, r8
 8004638:	4649      	mov	r1, r9
 800463a:	f7fc f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800463e:	b108      	cbz	r0, 8004644 <_dtoa_r+0x6c4>
 8004640:	07e1      	lsls	r1, r4, #31
 8004642:	d422      	bmi.n	800468a <_dtoa_r+0x70a>
 8004644:	4628      	mov	r0, r5
 8004646:	4659      	mov	r1, fp
 8004648:	f000 fd0c 	bl	8005064 <_Bfree>
 800464c:	2300      	movs	r3, #0
 800464e:	703b      	strb	r3, [r7, #0]
 8004650:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004652:	f10a 0001 	add.w	r0, sl, #1
 8004656:	6018      	str	r0, [r3, #0]
 8004658:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800465a:	2b00      	cmp	r3, #0
 800465c:	f43f acde 	beq.w	800401c <_dtoa_r+0x9c>
 8004660:	601f      	str	r7, [r3, #0]
 8004662:	e4db      	b.n	800401c <_dtoa_r+0x9c>
 8004664:	4627      	mov	r7, r4
 8004666:	463b      	mov	r3, r7
 8004668:	461f      	mov	r7, r3
 800466a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800466e:	2a39      	cmp	r2, #57	; 0x39
 8004670:	d107      	bne.n	8004682 <_dtoa_r+0x702>
 8004672:	9a03      	ldr	r2, [sp, #12]
 8004674:	429a      	cmp	r2, r3
 8004676:	d1f7      	bne.n	8004668 <_dtoa_r+0x6e8>
 8004678:	2230      	movs	r2, #48	; 0x30
 800467a:	9903      	ldr	r1, [sp, #12]
 800467c:	f108 0801 	add.w	r8, r8, #1
 8004680:	700a      	strb	r2, [r1, #0]
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	3201      	adds	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e79e      	b.n	80045c8 <_dtoa_r+0x648>
 800468a:	46d0      	mov	r8, sl
 800468c:	e7eb      	b.n	8004666 <_dtoa_r+0x6e6>
 800468e:	2200      	movs	r2, #0
 8004690:	4b6e      	ldr	r3, [pc, #440]	; (800484c <_dtoa_r+0x8cc>)
 8004692:	f7fb ff21 	bl	80004d8 <__aeabi_dmul>
 8004696:	2200      	movs	r2, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4680      	mov	r8, r0
 800469c:	4689      	mov	r9, r1
 800469e:	f7fc f983 	bl	80009a8 <__aeabi_dcmpeq>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d09b      	beq.n	80045de <_dtoa_r+0x65e>
 80046a6:	e7cd      	b.n	8004644 <_dtoa_r+0x6c4>
 80046a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	f000 80d0 	beq.w	8004850 <_dtoa_r+0x8d0>
 80046b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80046b2:	2a01      	cmp	r2, #1
 80046b4:	f300 80ae 	bgt.w	8004814 <_dtoa_r+0x894>
 80046b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	f000 80a6 	beq.w	800480c <_dtoa_r+0x88c>
 80046c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80046c6:	9f06      	ldr	r7, [sp, #24]
 80046c8:	9a06      	ldr	r2, [sp, #24]
 80046ca:	2101      	movs	r1, #1
 80046cc:	441a      	add	r2, r3
 80046ce:	9206      	str	r2, [sp, #24]
 80046d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d2:	4628      	mov	r0, r5
 80046d4:	441a      	add	r2, r3
 80046d6:	9209      	str	r2, [sp, #36]	; 0x24
 80046d8:	f000 fd7a 	bl	80051d0 <__i2b>
 80046dc:	4606      	mov	r6, r0
 80046de:	2f00      	cmp	r7, #0
 80046e0:	dd0c      	ble.n	80046fc <_dtoa_r+0x77c>
 80046e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dd09      	ble.n	80046fc <_dtoa_r+0x77c>
 80046e8:	42bb      	cmp	r3, r7
 80046ea:	bfa8      	it	ge
 80046ec:	463b      	movge	r3, r7
 80046ee:	9a06      	ldr	r2, [sp, #24]
 80046f0:	1aff      	subs	r7, r7, r3
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	9206      	str	r2, [sp, #24]
 80046f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	9309      	str	r3, [sp, #36]	; 0x24
 80046fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046fe:	b1f3      	cbz	r3, 800473e <_dtoa_r+0x7be>
 8004700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80a8 	beq.w	8004858 <_dtoa_r+0x8d8>
 8004708:	2c00      	cmp	r4, #0
 800470a:	dd10      	ble.n	800472e <_dtoa_r+0x7ae>
 800470c:	4631      	mov	r1, r6
 800470e:	4622      	mov	r2, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 fe1b 	bl	800534c <__pow5mult>
 8004716:	465a      	mov	r2, fp
 8004718:	4601      	mov	r1, r0
 800471a:	4606      	mov	r6, r0
 800471c:	4628      	mov	r0, r5
 800471e:	f000 fd6d 	bl	80051fc <__multiply>
 8004722:	4680      	mov	r8, r0
 8004724:	4659      	mov	r1, fp
 8004726:	4628      	mov	r0, r5
 8004728:	f000 fc9c 	bl	8005064 <_Bfree>
 800472c:	46c3      	mov	fp, r8
 800472e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004730:	1b1a      	subs	r2, r3, r4
 8004732:	d004      	beq.n	800473e <_dtoa_r+0x7be>
 8004734:	4659      	mov	r1, fp
 8004736:	4628      	mov	r0, r5
 8004738:	f000 fe08 	bl	800534c <__pow5mult>
 800473c:	4683      	mov	fp, r0
 800473e:	2101      	movs	r1, #1
 8004740:	4628      	mov	r0, r5
 8004742:	f000 fd45 	bl	80051d0 <__i2b>
 8004746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004748:	4604      	mov	r4, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	f340 8086 	ble.w	800485c <_dtoa_r+0x8dc>
 8004750:	461a      	mov	r2, r3
 8004752:	4601      	mov	r1, r0
 8004754:	4628      	mov	r0, r5
 8004756:	f000 fdf9 	bl	800534c <__pow5mult>
 800475a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800475c:	4604      	mov	r4, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	dd7f      	ble.n	8004862 <_dtoa_r+0x8e2>
 8004762:	f04f 0800 	mov.w	r8, #0
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800476c:	6918      	ldr	r0, [r3, #16]
 800476e:	f000 fce1 	bl	8005134 <__hi0bits>
 8004772:	f1c0 0020 	rsb	r0, r0, #32
 8004776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004778:	4418      	add	r0, r3
 800477a:	f010 001f 	ands.w	r0, r0, #31
 800477e:	f000 8092 	beq.w	80048a6 <_dtoa_r+0x926>
 8004782:	f1c0 0320 	rsb	r3, r0, #32
 8004786:	2b04      	cmp	r3, #4
 8004788:	f340 808a 	ble.w	80048a0 <_dtoa_r+0x920>
 800478c:	f1c0 001c 	rsb	r0, r0, #28
 8004790:	9b06      	ldr	r3, [sp, #24]
 8004792:	4407      	add	r7, r0
 8004794:	4403      	add	r3, r0
 8004796:	9306      	str	r3, [sp, #24]
 8004798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479a:	4403      	add	r3, r0
 800479c:	9309      	str	r3, [sp, #36]	; 0x24
 800479e:	9b06      	ldr	r3, [sp, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	dd05      	ble.n	80047b0 <_dtoa_r+0x830>
 80047a4:	4659      	mov	r1, fp
 80047a6:	461a      	mov	r2, r3
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 fe29 	bl	8005400 <__lshift>
 80047ae:	4683      	mov	fp, r0
 80047b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	dd05      	ble.n	80047c2 <_dtoa_r+0x842>
 80047b6:	4621      	mov	r1, r4
 80047b8:	461a      	mov	r2, r3
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 fe20 	bl	8005400 <__lshift>
 80047c0:	4604      	mov	r4, r0
 80047c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d070      	beq.n	80048aa <_dtoa_r+0x92a>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4658      	mov	r0, fp
 80047cc:	f000 fe88 	bl	80054e0 <__mcmp>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	da6a      	bge.n	80048aa <_dtoa_r+0x92a>
 80047d4:	2300      	movs	r3, #0
 80047d6:	4659      	mov	r1, fp
 80047d8:	220a      	movs	r2, #10
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 fc64 	bl	80050a8 <__multadd>
 80047e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047e2:	4683      	mov	fp, r0
 80047e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8194 	beq.w	8004b16 <_dtoa_r+0xb96>
 80047ee:	4631      	mov	r1, r6
 80047f0:	2300      	movs	r3, #0
 80047f2:	220a      	movs	r2, #10
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 fc57 	bl	80050a8 <__multadd>
 80047fa:	f1b9 0f00 	cmp.w	r9, #0
 80047fe:	4606      	mov	r6, r0
 8004800:	f300 8093 	bgt.w	800492a <_dtoa_r+0x9aa>
 8004804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004806:	2b02      	cmp	r3, #2
 8004808:	dc57      	bgt.n	80048ba <_dtoa_r+0x93a>
 800480a:	e08e      	b.n	800492a <_dtoa_r+0x9aa>
 800480c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800480e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004812:	e757      	b.n	80046c4 <_dtoa_r+0x744>
 8004814:	9b08      	ldr	r3, [sp, #32]
 8004816:	1e5c      	subs	r4, r3, #1
 8004818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800481a:	42a3      	cmp	r3, r4
 800481c:	bfb7      	itett	lt
 800481e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004820:	1b1c      	subge	r4, r3, r4
 8004822:	1ae2      	sublt	r2, r4, r3
 8004824:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004826:	bfbe      	ittt	lt
 8004828:	940a      	strlt	r4, [sp, #40]	; 0x28
 800482a:	189b      	addlt	r3, r3, r2
 800482c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800482e:	9b08      	ldr	r3, [sp, #32]
 8004830:	bfb8      	it	lt
 8004832:	2400      	movlt	r4, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	bfbb      	ittet	lt
 8004838:	9b06      	ldrlt	r3, [sp, #24]
 800483a:	9a08      	ldrlt	r2, [sp, #32]
 800483c:	9f06      	ldrge	r7, [sp, #24]
 800483e:	1a9f      	sublt	r7, r3, r2
 8004840:	bfac      	ite	ge
 8004842:	9b08      	ldrge	r3, [sp, #32]
 8004844:	2300      	movlt	r3, #0
 8004846:	e73f      	b.n	80046c8 <_dtoa_r+0x748>
 8004848:	3fe00000 	.word	0x3fe00000
 800484c:	40240000 	.word	0x40240000
 8004850:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004852:	9f06      	ldr	r7, [sp, #24]
 8004854:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004856:	e742      	b.n	80046de <_dtoa_r+0x75e>
 8004858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800485a:	e76b      	b.n	8004734 <_dtoa_r+0x7b4>
 800485c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800485e:	2b01      	cmp	r3, #1
 8004860:	dc19      	bgt.n	8004896 <_dtoa_r+0x916>
 8004862:	9b04      	ldr	r3, [sp, #16]
 8004864:	b9bb      	cbnz	r3, 8004896 <_dtoa_r+0x916>
 8004866:	9b05      	ldr	r3, [sp, #20]
 8004868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800486c:	b99b      	cbnz	r3, 8004896 <_dtoa_r+0x916>
 800486e:	9b05      	ldr	r3, [sp, #20]
 8004870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004874:	0d1b      	lsrs	r3, r3, #20
 8004876:	051b      	lsls	r3, r3, #20
 8004878:	b183      	cbz	r3, 800489c <_dtoa_r+0x91c>
 800487a:	f04f 0801 	mov.w	r8, #1
 800487e:	9b06      	ldr	r3, [sp, #24]
 8004880:	3301      	adds	r3, #1
 8004882:	9306      	str	r3, [sp, #24]
 8004884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004886:	3301      	adds	r3, #1
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f af6a 	bne.w	8004766 <_dtoa_r+0x7e6>
 8004892:	2001      	movs	r0, #1
 8004894:	e76f      	b.n	8004776 <_dtoa_r+0x7f6>
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	e7f6      	b.n	800488a <_dtoa_r+0x90a>
 800489c:	4698      	mov	r8, r3
 800489e:	e7f4      	b.n	800488a <_dtoa_r+0x90a>
 80048a0:	f43f af7d 	beq.w	800479e <_dtoa_r+0x81e>
 80048a4:	4618      	mov	r0, r3
 80048a6:	301c      	adds	r0, #28
 80048a8:	e772      	b.n	8004790 <_dtoa_r+0x810>
 80048aa:	9b08      	ldr	r3, [sp, #32]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dc36      	bgt.n	800491e <_dtoa_r+0x99e>
 80048b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	dd33      	ble.n	800491e <_dtoa_r+0x99e>
 80048b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048ba:	f1b9 0f00 	cmp.w	r9, #0
 80048be:	d10d      	bne.n	80048dc <_dtoa_r+0x95c>
 80048c0:	4621      	mov	r1, r4
 80048c2:	464b      	mov	r3, r9
 80048c4:	2205      	movs	r2, #5
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 fbee 	bl	80050a8 <__multadd>
 80048cc:	4601      	mov	r1, r0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4658      	mov	r0, fp
 80048d2:	f000 fe05 	bl	80054e0 <__mcmp>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	f73f adb8 	bgt.w	800444c <_dtoa_r+0x4cc>
 80048dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048de:	9f03      	ldr	r7, [sp, #12]
 80048e0:	ea6f 0a03 	mvn.w	sl, r3
 80048e4:	f04f 0800 	mov.w	r8, #0
 80048e8:	4621      	mov	r1, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 fbba 	bl	8005064 <_Bfree>
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	f43f aea7 	beq.w	8004644 <_dtoa_r+0x6c4>
 80048f6:	f1b8 0f00 	cmp.w	r8, #0
 80048fa:	d005      	beq.n	8004908 <_dtoa_r+0x988>
 80048fc:	45b0      	cmp	r8, r6
 80048fe:	d003      	beq.n	8004908 <_dtoa_r+0x988>
 8004900:	4641      	mov	r1, r8
 8004902:	4628      	mov	r0, r5
 8004904:	f000 fbae 	bl	8005064 <_Bfree>
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fbaa 	bl	8005064 <_Bfree>
 8004910:	e698      	b.n	8004644 <_dtoa_r+0x6c4>
 8004912:	2400      	movs	r4, #0
 8004914:	4626      	mov	r6, r4
 8004916:	e7e1      	b.n	80048dc <_dtoa_r+0x95c>
 8004918:	46c2      	mov	sl, r8
 800491a:	4626      	mov	r6, r4
 800491c:	e596      	b.n	800444c <_dtoa_r+0x4cc>
 800491e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80fd 	beq.w	8004b24 <_dtoa_r+0xba4>
 800492a:	2f00      	cmp	r7, #0
 800492c:	dd05      	ble.n	800493a <_dtoa_r+0x9ba>
 800492e:	4631      	mov	r1, r6
 8004930:	463a      	mov	r2, r7
 8004932:	4628      	mov	r0, r5
 8004934:	f000 fd64 	bl	8005400 <__lshift>
 8004938:	4606      	mov	r6, r0
 800493a:	f1b8 0f00 	cmp.w	r8, #0
 800493e:	d05c      	beq.n	80049fa <_dtoa_r+0xa7a>
 8004940:	4628      	mov	r0, r5
 8004942:	6871      	ldr	r1, [r6, #4]
 8004944:	f000 fb4e 	bl	8004fe4 <_Balloc>
 8004948:	4607      	mov	r7, r0
 800494a:	b928      	cbnz	r0, 8004958 <_dtoa_r+0x9d8>
 800494c:	4602      	mov	r2, r0
 800494e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004952:	4b7f      	ldr	r3, [pc, #508]	; (8004b50 <_dtoa_r+0xbd0>)
 8004954:	f7ff bb28 	b.w	8003fa8 <_dtoa_r+0x28>
 8004958:	6932      	ldr	r2, [r6, #16]
 800495a:	f106 010c 	add.w	r1, r6, #12
 800495e:	3202      	adds	r2, #2
 8004960:	0092      	lsls	r2, r2, #2
 8004962:	300c      	adds	r0, #12
 8004964:	f000 fb30 	bl	8004fc8 <memcpy>
 8004968:	2201      	movs	r2, #1
 800496a:	4639      	mov	r1, r7
 800496c:	4628      	mov	r0, r5
 800496e:	f000 fd47 	bl	8005400 <__lshift>
 8004972:	46b0      	mov	r8, r6
 8004974:	4606      	mov	r6, r0
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	9308      	str	r3, [sp, #32]
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	444b      	add	r3, r9
 8004980:	930a      	str	r3, [sp, #40]	; 0x28
 8004982:	9b04      	ldr	r3, [sp, #16]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	9309      	str	r3, [sp, #36]	; 0x24
 800498a:	9b08      	ldr	r3, [sp, #32]
 800498c:	4621      	mov	r1, r4
 800498e:	3b01      	subs	r3, #1
 8004990:	4658      	mov	r0, fp
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	f7ff fa66 	bl	8003e64 <quorem>
 8004998:	4603      	mov	r3, r0
 800499a:	4641      	mov	r1, r8
 800499c:	3330      	adds	r3, #48	; 0x30
 800499e:	9006      	str	r0, [sp, #24]
 80049a0:	4658      	mov	r0, fp
 80049a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80049a4:	f000 fd9c 	bl	80054e0 <__mcmp>
 80049a8:	4632      	mov	r2, r6
 80049aa:	4681      	mov	r9, r0
 80049ac:	4621      	mov	r1, r4
 80049ae:	4628      	mov	r0, r5
 80049b0:	f000 fdb2 	bl	8005518 <__mdiff>
 80049b4:	68c2      	ldr	r2, [r0, #12]
 80049b6:	4607      	mov	r7, r0
 80049b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ba:	bb02      	cbnz	r2, 80049fe <_dtoa_r+0xa7e>
 80049bc:	4601      	mov	r1, r0
 80049be:	4658      	mov	r0, fp
 80049c0:	f000 fd8e 	bl	80054e0 <__mcmp>
 80049c4:	4602      	mov	r2, r0
 80049c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049c8:	4639      	mov	r1, r7
 80049ca:	4628      	mov	r0, r5
 80049cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80049d0:	f000 fb48 	bl	8005064 <_Bfree>
 80049d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049d8:	9f08      	ldr	r7, [sp, #32]
 80049da:	ea43 0102 	orr.w	r1, r3, r2
 80049de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e0:	430b      	orrs	r3, r1
 80049e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e4:	d10d      	bne.n	8004a02 <_dtoa_r+0xa82>
 80049e6:	2b39      	cmp	r3, #57	; 0x39
 80049e8:	d029      	beq.n	8004a3e <_dtoa_r+0xabe>
 80049ea:	f1b9 0f00 	cmp.w	r9, #0
 80049ee:	dd01      	ble.n	80049f4 <_dtoa_r+0xa74>
 80049f0:	9b06      	ldr	r3, [sp, #24]
 80049f2:	3331      	adds	r3, #49	; 0x31
 80049f4:	9a04      	ldr	r2, [sp, #16]
 80049f6:	7013      	strb	r3, [r2, #0]
 80049f8:	e776      	b.n	80048e8 <_dtoa_r+0x968>
 80049fa:	4630      	mov	r0, r6
 80049fc:	e7b9      	b.n	8004972 <_dtoa_r+0x9f2>
 80049fe:	2201      	movs	r2, #1
 8004a00:	e7e2      	b.n	80049c8 <_dtoa_r+0xa48>
 8004a02:	f1b9 0f00 	cmp.w	r9, #0
 8004a06:	db06      	blt.n	8004a16 <_dtoa_r+0xa96>
 8004a08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004a0a:	ea41 0909 	orr.w	r9, r1, r9
 8004a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a10:	ea59 0101 	orrs.w	r1, r9, r1
 8004a14:	d120      	bne.n	8004a58 <_dtoa_r+0xad8>
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	ddec      	ble.n	80049f4 <_dtoa_r+0xa74>
 8004a1a:	4659      	mov	r1, fp
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4628      	mov	r0, r5
 8004a20:	9308      	str	r3, [sp, #32]
 8004a22:	f000 fced 	bl	8005400 <__lshift>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4683      	mov	fp, r0
 8004a2a:	f000 fd59 	bl	80054e0 <__mcmp>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	9b08      	ldr	r3, [sp, #32]
 8004a32:	dc02      	bgt.n	8004a3a <_dtoa_r+0xaba>
 8004a34:	d1de      	bne.n	80049f4 <_dtoa_r+0xa74>
 8004a36:	07da      	lsls	r2, r3, #31
 8004a38:	d5dc      	bpl.n	80049f4 <_dtoa_r+0xa74>
 8004a3a:	2b39      	cmp	r3, #57	; 0x39
 8004a3c:	d1d8      	bne.n	80049f0 <_dtoa_r+0xa70>
 8004a3e:	2339      	movs	r3, #57	; 0x39
 8004a40:	9a04      	ldr	r2, [sp, #16]
 8004a42:	7013      	strb	r3, [r2, #0]
 8004a44:	463b      	mov	r3, r7
 8004a46:	461f      	mov	r7, r3
 8004a48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	2a39      	cmp	r2, #57	; 0x39
 8004a50:	d050      	beq.n	8004af4 <_dtoa_r+0xb74>
 8004a52:	3201      	adds	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	e747      	b.n	80048e8 <_dtoa_r+0x968>
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	dd03      	ble.n	8004a64 <_dtoa_r+0xae4>
 8004a5c:	2b39      	cmp	r3, #57	; 0x39
 8004a5e:	d0ee      	beq.n	8004a3e <_dtoa_r+0xabe>
 8004a60:	3301      	adds	r3, #1
 8004a62:	e7c7      	b.n	80049f4 <_dtoa_r+0xa74>
 8004a64:	9a08      	ldr	r2, [sp, #32]
 8004a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004a6c:	428a      	cmp	r2, r1
 8004a6e:	d02a      	beq.n	8004ac6 <_dtoa_r+0xb46>
 8004a70:	4659      	mov	r1, fp
 8004a72:	2300      	movs	r3, #0
 8004a74:	220a      	movs	r2, #10
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fb16 	bl	80050a8 <__multadd>
 8004a7c:	45b0      	cmp	r8, r6
 8004a7e:	4683      	mov	fp, r0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	f04f 020a 	mov.w	r2, #10
 8004a88:	4641      	mov	r1, r8
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	d107      	bne.n	8004a9e <_dtoa_r+0xb1e>
 8004a8e:	f000 fb0b 	bl	80050a8 <__multadd>
 8004a92:	4680      	mov	r8, r0
 8004a94:	4606      	mov	r6, r0
 8004a96:	9b08      	ldr	r3, [sp, #32]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	9308      	str	r3, [sp, #32]
 8004a9c:	e775      	b.n	800498a <_dtoa_r+0xa0a>
 8004a9e:	f000 fb03 	bl	80050a8 <__multadd>
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	220a      	movs	r2, #10
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 fafc 	bl	80050a8 <__multadd>
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	e7f0      	b.n	8004a96 <_dtoa_r+0xb16>
 8004ab4:	f1b9 0f00 	cmp.w	r9, #0
 8004ab8:	bfcc      	ite	gt
 8004aba:	464f      	movgt	r7, r9
 8004abc:	2701      	movle	r7, #1
 8004abe:	f04f 0800 	mov.w	r8, #0
 8004ac2:	9a03      	ldr	r2, [sp, #12]
 8004ac4:	4417      	add	r7, r2
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4628      	mov	r0, r5
 8004acc:	9308      	str	r3, [sp, #32]
 8004ace:	f000 fc97 	bl	8005400 <__lshift>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4683      	mov	fp, r0
 8004ad6:	f000 fd03 	bl	80054e0 <__mcmp>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	dcb2      	bgt.n	8004a44 <_dtoa_r+0xac4>
 8004ade:	d102      	bne.n	8004ae6 <_dtoa_r+0xb66>
 8004ae0:	9b08      	ldr	r3, [sp, #32]
 8004ae2:	07db      	lsls	r3, r3, #31
 8004ae4:	d4ae      	bmi.n	8004a44 <_dtoa_r+0xac4>
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	461f      	mov	r7, r3
 8004aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aee:	2a30      	cmp	r2, #48	; 0x30
 8004af0:	d0fa      	beq.n	8004ae8 <_dtoa_r+0xb68>
 8004af2:	e6f9      	b.n	80048e8 <_dtoa_r+0x968>
 8004af4:	9a03      	ldr	r2, [sp, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d1a5      	bne.n	8004a46 <_dtoa_r+0xac6>
 8004afa:	2331      	movs	r3, #49	; 0x31
 8004afc:	f10a 0a01 	add.w	sl, sl, #1
 8004b00:	e779      	b.n	80049f6 <_dtoa_r+0xa76>
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <_dtoa_r+0xbd4>)
 8004b04:	f7ff baa8 	b.w	8004058 <_dtoa_r+0xd8>
 8004b08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f47f aa81 	bne.w	8004012 <_dtoa_r+0x92>
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <_dtoa_r+0xbd8>)
 8004b12:	f7ff baa1 	b.w	8004058 <_dtoa_r+0xd8>
 8004b16:	f1b9 0f00 	cmp.w	r9, #0
 8004b1a:	dc03      	bgt.n	8004b24 <_dtoa_r+0xba4>
 8004b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	f73f aecb 	bgt.w	80048ba <_dtoa_r+0x93a>
 8004b24:	9f03      	ldr	r7, [sp, #12]
 8004b26:	4621      	mov	r1, r4
 8004b28:	4658      	mov	r0, fp
 8004b2a:	f7ff f99b 	bl	8003e64 <quorem>
 8004b2e:	9a03      	ldr	r2, [sp, #12]
 8004b30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004b34:	f807 3b01 	strb.w	r3, [r7], #1
 8004b38:	1aba      	subs	r2, r7, r2
 8004b3a:	4591      	cmp	r9, r2
 8004b3c:	ddba      	ble.n	8004ab4 <_dtoa_r+0xb34>
 8004b3e:	4659      	mov	r1, fp
 8004b40:	2300      	movs	r3, #0
 8004b42:	220a      	movs	r2, #10
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 faaf 	bl	80050a8 <__multadd>
 8004b4a:	4683      	mov	fp, r0
 8004b4c:	e7eb      	b.n	8004b26 <_dtoa_r+0xba6>
 8004b4e:	bf00      	nop
 8004b50:	080060b7 	.word	0x080060b7
 8004b54:	08006014 	.word	0x08006014
 8004b58:	08006038 	.word	0x08006038

08004b5c <__sflush_r>:
 8004b5c:	898a      	ldrh	r2, [r1, #12]
 8004b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b60:	4605      	mov	r5, r0
 8004b62:	0710      	lsls	r0, r2, #28
 8004b64:	460c      	mov	r4, r1
 8004b66:	d457      	bmi.n	8004c18 <__sflush_r+0xbc>
 8004b68:	684b      	ldr	r3, [r1, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dc04      	bgt.n	8004b78 <__sflush_r+0x1c>
 8004b6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dc01      	bgt.n	8004b78 <__sflush_r+0x1c>
 8004b74:	2000      	movs	r0, #0
 8004b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b7a:	2e00      	cmp	r6, #0
 8004b7c:	d0fa      	beq.n	8004b74 <__sflush_r+0x18>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b84:	682f      	ldr	r7, [r5, #0]
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	d032      	beq.n	8004bf0 <__sflush_r+0x94>
 8004b8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	075a      	lsls	r2, r3, #29
 8004b90:	d505      	bpl.n	8004b9e <__sflush_r+0x42>
 8004b92:	6863      	ldr	r3, [r4, #4]
 8004b94:	1ac0      	subs	r0, r0, r3
 8004b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b98:	b10b      	cbz	r3, 8004b9e <__sflush_r+0x42>
 8004b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b9c:	1ac0      	subs	r0, r0, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	6a21      	ldr	r1, [r4, #32]
 8004ba8:	47b0      	blx	r6
 8004baa:	1c43      	adds	r3, r0, #1
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	d106      	bne.n	8004bbe <__sflush_r+0x62>
 8004bb0:	6829      	ldr	r1, [r5, #0]
 8004bb2:	291d      	cmp	r1, #29
 8004bb4:	d82c      	bhi.n	8004c10 <__sflush_r+0xb4>
 8004bb6:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <__sflush_r+0x100>)
 8004bb8:	40ca      	lsrs	r2, r1
 8004bba:	07d6      	lsls	r6, r2, #31
 8004bbc:	d528      	bpl.n	8004c10 <__sflush_r+0xb4>
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	6062      	str	r2, [r4, #4]
 8004bc2:	6922      	ldr	r2, [r4, #16]
 8004bc4:	04d9      	lsls	r1, r3, #19
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	d504      	bpl.n	8004bd4 <__sflush_r+0x78>
 8004bca:	1c42      	adds	r2, r0, #1
 8004bcc:	d101      	bne.n	8004bd2 <__sflush_r+0x76>
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	b903      	cbnz	r3, 8004bd4 <__sflush_r+0x78>
 8004bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8004bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bd6:	602f      	str	r7, [r5, #0]
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d0cb      	beq.n	8004b74 <__sflush_r+0x18>
 8004bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d002      	beq.n	8004bea <__sflush_r+0x8e>
 8004be4:	4628      	mov	r0, r5
 8004be6:	f000 fd93 	bl	8005710 <_free_r>
 8004bea:	2000      	movs	r0, #0
 8004bec:	6360      	str	r0, [r4, #52]	; 0x34
 8004bee:	e7c2      	b.n	8004b76 <__sflush_r+0x1a>
 8004bf0:	6a21      	ldr	r1, [r4, #32]
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b0      	blx	r6
 8004bf8:	1c41      	adds	r1, r0, #1
 8004bfa:	d1c7      	bne.n	8004b8c <__sflush_r+0x30>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0c4      	beq.n	8004b8c <__sflush_r+0x30>
 8004c02:	2b1d      	cmp	r3, #29
 8004c04:	d001      	beq.n	8004c0a <__sflush_r+0xae>
 8004c06:	2b16      	cmp	r3, #22
 8004c08:	d101      	bne.n	8004c0e <__sflush_r+0xb2>
 8004c0a:	602f      	str	r7, [r5, #0]
 8004c0c:	e7b2      	b.n	8004b74 <__sflush_r+0x18>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	e7ae      	b.n	8004b76 <__sflush_r+0x1a>
 8004c18:	690f      	ldr	r7, [r1, #16]
 8004c1a:	2f00      	cmp	r7, #0
 8004c1c:	d0aa      	beq.n	8004b74 <__sflush_r+0x18>
 8004c1e:	0793      	lsls	r3, r2, #30
 8004c20:	bf18      	it	ne
 8004c22:	2300      	movne	r3, #0
 8004c24:	680e      	ldr	r6, [r1, #0]
 8004c26:	bf08      	it	eq
 8004c28:	694b      	ldreq	r3, [r1, #20]
 8004c2a:	1bf6      	subs	r6, r6, r7
 8004c2c:	600f      	str	r7, [r1, #0]
 8004c2e:	608b      	str	r3, [r1, #8]
 8004c30:	2e00      	cmp	r6, #0
 8004c32:	dd9f      	ble.n	8004b74 <__sflush_r+0x18>
 8004c34:	4633      	mov	r3, r6
 8004c36:	463a      	mov	r2, r7
 8004c38:	4628      	mov	r0, r5
 8004c3a:	6a21      	ldr	r1, [r4, #32]
 8004c3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c40:	47e0      	blx	ip
 8004c42:	2800      	cmp	r0, #0
 8004c44:	dc06      	bgt.n	8004c54 <__sflush_r+0xf8>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	e790      	b.n	8004b76 <__sflush_r+0x1a>
 8004c54:	4407      	add	r7, r0
 8004c56:	1a36      	subs	r6, r6, r0
 8004c58:	e7ea      	b.n	8004c30 <__sflush_r+0xd4>
 8004c5a:	bf00      	nop
 8004c5c:	20400001 	.word	0x20400001

08004c60 <_fflush_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	690b      	ldr	r3, [r1, #16]
 8004c64:	4605      	mov	r5, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	b913      	cbnz	r3, 8004c70 <_fflush_r+0x10>
 8004c6a:	2500      	movs	r5, #0
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	b118      	cbz	r0, 8004c7a <_fflush_r+0x1a>
 8004c72:	6983      	ldr	r3, [r0, #24]
 8004c74:	b90b      	cbnz	r3, 8004c7a <_fflush_r+0x1a>
 8004c76:	f000 f887 	bl	8004d88 <__sinit>
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <_fflush_r+0x6c>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	d11b      	bne.n	8004cb8 <_fflush_r+0x58>
 8004c80:	686c      	ldr	r4, [r5, #4]
 8004c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0ef      	beq.n	8004c6a <_fflush_r+0xa>
 8004c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c8c:	07d0      	lsls	r0, r2, #31
 8004c8e:	d404      	bmi.n	8004c9a <_fflush_r+0x3a>
 8004c90:	0599      	lsls	r1, r3, #22
 8004c92:	d402      	bmi.n	8004c9a <_fflush_r+0x3a>
 8004c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c96:	f000 f91a 	bl	8004ece <__retarget_lock_acquire_recursive>
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	f7ff ff5d 	bl	8004b5c <__sflush_r>
 8004ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	07da      	lsls	r2, r3, #31
 8004ca8:	d4e0      	bmi.n	8004c6c <_fflush_r+0xc>
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	059b      	lsls	r3, r3, #22
 8004cae:	d4dd      	bmi.n	8004c6c <_fflush_r+0xc>
 8004cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb2:	f000 f90d 	bl	8004ed0 <__retarget_lock_release_recursive>
 8004cb6:	e7d9      	b.n	8004c6c <_fflush_r+0xc>
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <_fflush_r+0x70>)
 8004cba:	429c      	cmp	r4, r3
 8004cbc:	d101      	bne.n	8004cc2 <_fflush_r+0x62>
 8004cbe:	68ac      	ldr	r4, [r5, #8]
 8004cc0:	e7df      	b.n	8004c82 <_fflush_r+0x22>
 8004cc2:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <_fflush_r+0x74>)
 8004cc4:	429c      	cmp	r4, r3
 8004cc6:	bf08      	it	eq
 8004cc8:	68ec      	ldreq	r4, [r5, #12]
 8004cca:	e7da      	b.n	8004c82 <_fflush_r+0x22>
 8004ccc:	080060e8 	.word	0x080060e8
 8004cd0:	08006108 	.word	0x08006108
 8004cd4:	080060c8 	.word	0x080060c8

08004cd8 <std>:
 8004cd8:	2300      	movs	r3, #0
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	4604      	mov	r4, r0
 8004cde:	e9c0 3300 	strd	r3, r3, [r0]
 8004ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ce6:	6083      	str	r3, [r0, #8]
 8004ce8:	8181      	strh	r1, [r0, #12]
 8004cea:	6643      	str	r3, [r0, #100]	; 0x64
 8004cec:	81c2      	strh	r2, [r0, #14]
 8004cee:	6183      	str	r3, [r0, #24]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	305c      	adds	r0, #92	; 0x5c
 8004cf6:	f7fe faff 	bl	80032f8 <memset>
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <std+0x38>)
 8004cfc:	6224      	str	r4, [r4, #32]
 8004cfe:	6263      	str	r3, [r4, #36]	; 0x24
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <std+0x3c>)
 8004d02:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <std+0x40>)
 8004d06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <std+0x44>)
 8004d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	bf00      	nop
 8004d10:	08005b99 	.word	0x08005b99
 8004d14:	08005bbb 	.word	0x08005bbb
 8004d18:	08005bf3 	.word	0x08005bf3
 8004d1c:	08005c17 	.word	0x08005c17

08004d20 <_cleanup_r>:
 8004d20:	4901      	ldr	r1, [pc, #4]	; (8004d28 <_cleanup_r+0x8>)
 8004d22:	f000 b8af 	b.w	8004e84 <_fwalk_reent>
 8004d26:	bf00      	nop
 8004d28:	08004c61 	.word	0x08004c61

08004d2c <__sfmoreglue>:
 8004d2c:	2268      	movs	r2, #104	; 0x68
 8004d2e:	b570      	push	{r4, r5, r6, lr}
 8004d30:	1e4d      	subs	r5, r1, #1
 8004d32:	4355      	muls	r5, r2
 8004d34:	460e      	mov	r6, r1
 8004d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d3a:	f000 fd51 	bl	80057e0 <_malloc_r>
 8004d3e:	4604      	mov	r4, r0
 8004d40:	b140      	cbz	r0, 8004d54 <__sfmoreglue+0x28>
 8004d42:	2100      	movs	r1, #0
 8004d44:	e9c0 1600 	strd	r1, r6, [r0]
 8004d48:	300c      	adds	r0, #12
 8004d4a:	60a0      	str	r0, [r4, #8]
 8004d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d50:	f7fe fad2 	bl	80032f8 <memset>
 8004d54:	4620      	mov	r0, r4
 8004d56:	bd70      	pop	{r4, r5, r6, pc}

08004d58 <__sfp_lock_acquire>:
 8004d58:	4801      	ldr	r0, [pc, #4]	; (8004d60 <__sfp_lock_acquire+0x8>)
 8004d5a:	f000 b8b8 	b.w	8004ece <__retarget_lock_acquire_recursive>
 8004d5e:	bf00      	nop
 8004d60:	200002b1 	.word	0x200002b1

08004d64 <__sfp_lock_release>:
 8004d64:	4801      	ldr	r0, [pc, #4]	; (8004d6c <__sfp_lock_release+0x8>)
 8004d66:	f000 b8b3 	b.w	8004ed0 <__retarget_lock_release_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	200002b1 	.word	0x200002b1

08004d70 <__sinit_lock_acquire>:
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <__sinit_lock_acquire+0x8>)
 8004d72:	f000 b8ac 	b.w	8004ece <__retarget_lock_acquire_recursive>
 8004d76:	bf00      	nop
 8004d78:	200002b2 	.word	0x200002b2

08004d7c <__sinit_lock_release>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__sinit_lock_release+0x8>)
 8004d7e:	f000 b8a7 	b.w	8004ed0 <__retarget_lock_release_recursive>
 8004d82:	bf00      	nop
 8004d84:	200002b2 	.word	0x200002b2

08004d88 <__sinit>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	f7ff fff0 	bl	8004d70 <__sinit_lock_acquire>
 8004d90:	69a3      	ldr	r3, [r4, #24]
 8004d92:	b11b      	cbz	r3, 8004d9c <__sinit+0x14>
 8004d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d98:	f7ff bff0 	b.w	8004d7c <__sinit_lock_release>
 8004d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004da0:	6523      	str	r3, [r4, #80]	; 0x50
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <__sinit+0x68>)
 8004da4:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <__sinit+0x6c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	bf08      	it	eq
 8004dae:	2301      	moveq	r3, #1
 8004db0:	4620      	mov	r0, r4
 8004db2:	bf08      	it	eq
 8004db4:	61a3      	streq	r3, [r4, #24]
 8004db6:	f000 f81f 	bl	8004df8 <__sfp>
 8004dba:	6060      	str	r0, [r4, #4]
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f000 f81b 	bl	8004df8 <__sfp>
 8004dc2:	60a0      	str	r0, [r4, #8]
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 f817 	bl	8004df8 <__sfp>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2104      	movs	r1, #4
 8004dce:	60e0      	str	r0, [r4, #12]
 8004dd0:	6860      	ldr	r0, [r4, #4]
 8004dd2:	f7ff ff81 	bl	8004cd8 <std>
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	2109      	movs	r1, #9
 8004dda:	68a0      	ldr	r0, [r4, #8]
 8004ddc:	f7ff ff7c 	bl	8004cd8 <std>
 8004de0:	2202      	movs	r2, #2
 8004de2:	2112      	movs	r1, #18
 8004de4:	68e0      	ldr	r0, [r4, #12]
 8004de6:	f7ff ff77 	bl	8004cd8 <std>
 8004dea:	2301      	movs	r3, #1
 8004dec:	61a3      	str	r3, [r4, #24]
 8004dee:	e7d1      	b.n	8004d94 <__sinit+0xc>
 8004df0:	08006000 	.word	0x08006000
 8004df4:	08004d21 	.word	0x08004d21

08004df8 <__sfp>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	4607      	mov	r7, r0
 8004dfc:	f7ff ffac 	bl	8004d58 <__sfp_lock_acquire>
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <__sfp+0x84>)
 8004e02:	681e      	ldr	r6, [r3, #0]
 8004e04:	69b3      	ldr	r3, [r6, #24]
 8004e06:	b913      	cbnz	r3, 8004e0e <__sfp+0x16>
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7ff ffbd 	bl	8004d88 <__sinit>
 8004e0e:	3648      	adds	r6, #72	; 0x48
 8004e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	d503      	bpl.n	8004e20 <__sfp+0x28>
 8004e18:	6833      	ldr	r3, [r6, #0]
 8004e1a:	b30b      	cbz	r3, 8004e60 <__sfp+0x68>
 8004e1c:	6836      	ldr	r6, [r6, #0]
 8004e1e:	e7f7      	b.n	8004e10 <__sfp+0x18>
 8004e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e24:	b9d5      	cbnz	r5, 8004e5c <__sfp+0x64>
 8004e26:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <__sfp+0x88>)
 8004e28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e2c:	60e3      	str	r3, [r4, #12]
 8004e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e30:	f000 f84c 	bl	8004ecc <__retarget_lock_init_recursive>
 8004e34:	f7ff ff96 	bl	8004d64 <__sfp_lock_release>
 8004e38:	2208      	movs	r2, #8
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e44:	6025      	str	r5, [r4, #0]
 8004e46:	61a5      	str	r5, [r4, #24]
 8004e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e4c:	f7fe fa54 	bl	80032f8 <memset>
 8004e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e58:	4620      	mov	r0, r4
 8004e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e5c:	3468      	adds	r4, #104	; 0x68
 8004e5e:	e7d9      	b.n	8004e14 <__sfp+0x1c>
 8004e60:	2104      	movs	r1, #4
 8004e62:	4638      	mov	r0, r7
 8004e64:	f7ff ff62 	bl	8004d2c <__sfmoreglue>
 8004e68:	4604      	mov	r4, r0
 8004e6a:	6030      	str	r0, [r6, #0]
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d1d5      	bne.n	8004e1c <__sfp+0x24>
 8004e70:	f7ff ff78 	bl	8004d64 <__sfp_lock_release>
 8004e74:	230c      	movs	r3, #12
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	e7ee      	b.n	8004e58 <__sfp+0x60>
 8004e7a:	bf00      	nop
 8004e7c:	08006000 	.word	0x08006000
 8004e80:	ffff0001 	.word	0xffff0001

08004e84 <_fwalk_reent>:
 8004e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e88:	4606      	mov	r6, r0
 8004e8a:	4688      	mov	r8, r1
 8004e8c:	2700      	movs	r7, #0
 8004e8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e96:	f1b9 0901 	subs.w	r9, r9, #1
 8004e9a:	d505      	bpl.n	8004ea8 <_fwalk_reent+0x24>
 8004e9c:	6824      	ldr	r4, [r4, #0]
 8004e9e:	2c00      	cmp	r4, #0
 8004ea0:	d1f7      	bne.n	8004e92 <_fwalk_reent+0xe>
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ea8:	89ab      	ldrh	r3, [r5, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d907      	bls.n	8004ebe <_fwalk_reent+0x3a>
 8004eae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	d003      	beq.n	8004ebe <_fwalk_reent+0x3a>
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4630      	mov	r0, r6
 8004eba:	47c0      	blx	r8
 8004ebc:	4307      	orrs	r7, r0
 8004ebe:	3568      	adds	r5, #104	; 0x68
 8004ec0:	e7e9      	b.n	8004e96 <_fwalk_reent+0x12>
	...

08004ec4 <_localeconv_r>:
 8004ec4:	4800      	ldr	r0, [pc, #0]	; (8004ec8 <_localeconv_r+0x4>)
 8004ec6:	4770      	bx	lr
 8004ec8:	20000160 	.word	0x20000160

08004ecc <__retarget_lock_init_recursive>:
 8004ecc:	4770      	bx	lr

08004ece <__retarget_lock_acquire_recursive>:
 8004ece:	4770      	bx	lr

08004ed0 <__retarget_lock_release_recursive>:
 8004ed0:	4770      	bx	lr

08004ed2 <__swhatbuf_r>:
 8004ed2:	b570      	push	{r4, r5, r6, lr}
 8004ed4:	460e      	mov	r6, r1
 8004ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eda:	4614      	mov	r4, r2
 8004edc:	2900      	cmp	r1, #0
 8004ede:	461d      	mov	r5, r3
 8004ee0:	b096      	sub	sp, #88	; 0x58
 8004ee2:	da08      	bge.n	8004ef6 <__swhatbuf_r+0x24>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004eea:	602a      	str	r2, [r5, #0]
 8004eec:	061a      	lsls	r2, r3, #24
 8004eee:	d410      	bmi.n	8004f12 <__swhatbuf_r+0x40>
 8004ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef4:	e00e      	b.n	8004f14 <__swhatbuf_r+0x42>
 8004ef6:	466a      	mov	r2, sp
 8004ef8:	f000 fee4 	bl	8005cc4 <_fstat_r>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	dbf1      	blt.n	8004ee4 <__swhatbuf_r+0x12>
 8004f00:	9a01      	ldr	r2, [sp, #4]
 8004f02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f0a:	425a      	negs	r2, r3
 8004f0c:	415a      	adcs	r2, r3
 8004f0e:	602a      	str	r2, [r5, #0]
 8004f10:	e7ee      	b.n	8004ef0 <__swhatbuf_r+0x1e>
 8004f12:	2340      	movs	r3, #64	; 0x40
 8004f14:	2000      	movs	r0, #0
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	b016      	add	sp, #88	; 0x58
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}

08004f1c <__smakebuf_r>:
 8004f1c:	898b      	ldrh	r3, [r1, #12]
 8004f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f20:	079d      	lsls	r5, r3, #30
 8004f22:	4606      	mov	r6, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	d507      	bpl.n	8004f38 <__smakebuf_r+0x1c>
 8004f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	2301      	movs	r3, #1
 8004f32:	6163      	str	r3, [r4, #20]
 8004f34:	b002      	add	sp, #8
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
 8004f38:	466a      	mov	r2, sp
 8004f3a:	ab01      	add	r3, sp, #4
 8004f3c:	f7ff ffc9 	bl	8004ed2 <__swhatbuf_r>
 8004f40:	9900      	ldr	r1, [sp, #0]
 8004f42:	4605      	mov	r5, r0
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 fc4b 	bl	80057e0 <_malloc_r>
 8004f4a:	b948      	cbnz	r0, 8004f60 <__smakebuf_r+0x44>
 8004f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f50:	059a      	lsls	r2, r3, #22
 8004f52:	d4ef      	bmi.n	8004f34 <__smakebuf_r+0x18>
 8004f54:	f023 0303 	bic.w	r3, r3, #3
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	e7e3      	b.n	8004f28 <__smakebuf_r+0xc>
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <__smakebuf_r+0x7c>)
 8004f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	6020      	str	r0, [r4, #0]
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	9b00      	ldr	r3, [sp, #0]
 8004f70:	6120      	str	r0, [r4, #16]
 8004f72:	6163      	str	r3, [r4, #20]
 8004f74:	9b01      	ldr	r3, [sp, #4]
 8004f76:	b15b      	cbz	r3, 8004f90 <__smakebuf_r+0x74>
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7e:	f000 feb3 	bl	8005ce8 <_isatty_r>
 8004f82:	b128      	cbz	r0, 8004f90 <__smakebuf_r+0x74>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	89a0      	ldrh	r0, [r4, #12]
 8004f92:	4305      	orrs	r5, r0
 8004f94:	81a5      	strh	r5, [r4, #12]
 8004f96:	e7cd      	b.n	8004f34 <__smakebuf_r+0x18>
 8004f98:	08004d21 	.word	0x08004d21

08004f9c <malloc>:
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <malloc+0xc>)
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	f000 bc1d 	b.w	80057e0 <_malloc_r>
 8004fa6:	bf00      	nop
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <memchr>:
 8004fac:	4603      	mov	r3, r0
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	b2c9      	uxtb	r1, r1
 8004fb2:	4402      	add	r2, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	d101      	bne.n	8004fbe <memchr+0x12>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e003      	b.n	8004fc6 <memchr+0x1a>
 8004fbe:	7804      	ldrb	r4, [r0, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	428c      	cmp	r4, r1
 8004fc4:	d1f6      	bne.n	8004fb4 <memchr+0x8>
 8004fc6:	bd10      	pop	{r4, pc}

08004fc8 <memcpy>:
 8004fc8:	440a      	add	r2, r1
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd0:	d100      	bne.n	8004fd4 <memcpy+0xc>
 8004fd2:	4770      	bx	lr
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe0:	d1f9      	bne.n	8004fd6 <memcpy+0xe>
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <_Balloc>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	b976      	cbnz	r6, 800500c <_Balloc+0x28>
 8004fee:	2010      	movs	r0, #16
 8004ff0:	f7ff ffd4 	bl	8004f9c <malloc>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6260      	str	r0, [r4, #36]	; 0x24
 8004ff8:	b920      	cbnz	r0, 8005004 <_Balloc+0x20>
 8004ffa:	2166      	movs	r1, #102	; 0x66
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <_Balloc+0x78>)
 8004ffe:	4818      	ldr	r0, [pc, #96]	; (8005060 <_Balloc+0x7c>)
 8005000:	f000 fe20 	bl	8005c44 <__assert_func>
 8005004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005008:	6006      	str	r6, [r0, #0]
 800500a:	60c6      	str	r6, [r0, #12]
 800500c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800500e:	68f3      	ldr	r3, [r6, #12]
 8005010:	b183      	cbz	r3, 8005034 <_Balloc+0x50>
 8005012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800501a:	b9b8      	cbnz	r0, 800504c <_Balloc+0x68>
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f605 	lsl.w	r6, r1, r5
 8005022:	1d72      	adds	r2, r6, #5
 8005024:	4620      	mov	r0, r4
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	f000 fb5e 	bl	80056e8 <_calloc_r>
 800502c:	b160      	cbz	r0, 8005048 <_Balloc+0x64>
 800502e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005032:	e00e      	b.n	8005052 <_Balloc+0x6e>
 8005034:	2221      	movs	r2, #33	; 0x21
 8005036:	2104      	movs	r1, #4
 8005038:	4620      	mov	r0, r4
 800503a:	f000 fb55 	bl	80056e8 <_calloc_r>
 800503e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005040:	60f0      	str	r0, [r6, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e4      	bne.n	8005012 <_Balloc+0x2e>
 8005048:	2000      	movs	r0, #0
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	6802      	ldr	r2, [r0, #0]
 800504e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005052:	2300      	movs	r3, #0
 8005054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005058:	e7f7      	b.n	800504a <_Balloc+0x66>
 800505a:	bf00      	nop
 800505c:	08006045 	.word	0x08006045
 8005060:	08006128 	.word	0x08006128

08005064 <_Bfree>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005068:	4605      	mov	r5, r0
 800506a:	460c      	mov	r4, r1
 800506c:	b976      	cbnz	r6, 800508c <_Bfree+0x28>
 800506e:	2010      	movs	r0, #16
 8005070:	f7ff ff94 	bl	8004f9c <malloc>
 8005074:	4602      	mov	r2, r0
 8005076:	6268      	str	r0, [r5, #36]	; 0x24
 8005078:	b920      	cbnz	r0, 8005084 <_Bfree+0x20>
 800507a:	218a      	movs	r1, #138	; 0x8a
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <_Bfree+0x3c>)
 800507e:	4809      	ldr	r0, [pc, #36]	; (80050a4 <_Bfree+0x40>)
 8005080:	f000 fde0 	bl	8005c44 <__assert_func>
 8005084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005088:	6006      	str	r6, [r0, #0]
 800508a:	60c6      	str	r6, [r0, #12]
 800508c:	b13c      	cbz	r4, 800509e <_Bfree+0x3a>
 800508e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005090:	6862      	ldr	r2, [r4, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005098:	6021      	str	r1, [r4, #0]
 800509a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	08006045 	.word	0x08006045
 80050a4:	08006128 	.word	0x08006128

080050a8 <__multadd>:
 80050a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ac:	4607      	mov	r7, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	461e      	mov	r6, r3
 80050b2:	2000      	movs	r0, #0
 80050b4:	690d      	ldr	r5, [r1, #16]
 80050b6:	f101 0c14 	add.w	ip, r1, #20
 80050ba:	f8dc 3000 	ldr.w	r3, [ip]
 80050be:	3001      	adds	r0, #1
 80050c0:	b299      	uxth	r1, r3
 80050c2:	fb02 6101 	mla	r1, r2, r1, r6
 80050c6:	0c1e      	lsrs	r6, r3, #16
 80050c8:	0c0b      	lsrs	r3, r1, #16
 80050ca:	fb02 3306 	mla	r3, r2, r6, r3
 80050ce:	b289      	uxth	r1, r1
 80050d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80050d4:	4285      	cmp	r5, r0
 80050d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80050da:	f84c 1b04 	str.w	r1, [ip], #4
 80050de:	dcec      	bgt.n	80050ba <__multadd+0x12>
 80050e0:	b30e      	cbz	r6, 8005126 <__multadd+0x7e>
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dc19      	bgt.n	800511c <__multadd+0x74>
 80050e8:	6861      	ldr	r1, [r4, #4]
 80050ea:	4638      	mov	r0, r7
 80050ec:	3101      	adds	r1, #1
 80050ee:	f7ff ff79 	bl	8004fe4 <_Balloc>
 80050f2:	4680      	mov	r8, r0
 80050f4:	b928      	cbnz	r0, 8005102 <__multadd+0x5a>
 80050f6:	4602      	mov	r2, r0
 80050f8:	21b5      	movs	r1, #181	; 0xb5
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <__multadd+0x84>)
 80050fc:	480c      	ldr	r0, [pc, #48]	; (8005130 <__multadd+0x88>)
 80050fe:	f000 fda1 	bl	8005c44 <__assert_func>
 8005102:	6922      	ldr	r2, [r4, #16]
 8005104:	f104 010c 	add.w	r1, r4, #12
 8005108:	3202      	adds	r2, #2
 800510a:	0092      	lsls	r2, r2, #2
 800510c:	300c      	adds	r0, #12
 800510e:	f7ff ff5b 	bl	8004fc8 <memcpy>
 8005112:	4621      	mov	r1, r4
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff ffa5 	bl	8005064 <_Bfree>
 800511a:	4644      	mov	r4, r8
 800511c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005120:	3501      	adds	r5, #1
 8005122:	615e      	str	r6, [r3, #20]
 8005124:	6125      	str	r5, [r4, #16]
 8005126:	4620      	mov	r0, r4
 8005128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800512c:	080060b7 	.word	0x080060b7
 8005130:	08006128 	.word	0x08006128

08005134 <__hi0bits>:
 8005134:	0c02      	lsrs	r2, r0, #16
 8005136:	0412      	lsls	r2, r2, #16
 8005138:	4603      	mov	r3, r0
 800513a:	b9ca      	cbnz	r2, 8005170 <__hi0bits+0x3c>
 800513c:	0403      	lsls	r3, r0, #16
 800513e:	2010      	movs	r0, #16
 8005140:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005144:	bf04      	itt	eq
 8005146:	021b      	lsleq	r3, r3, #8
 8005148:	3008      	addeq	r0, #8
 800514a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800514e:	bf04      	itt	eq
 8005150:	011b      	lsleq	r3, r3, #4
 8005152:	3004      	addeq	r0, #4
 8005154:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005158:	bf04      	itt	eq
 800515a:	009b      	lsleq	r3, r3, #2
 800515c:	3002      	addeq	r0, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	db05      	blt.n	800516e <__hi0bits+0x3a>
 8005162:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005166:	f100 0001 	add.w	r0, r0, #1
 800516a:	bf08      	it	eq
 800516c:	2020      	moveq	r0, #32
 800516e:	4770      	bx	lr
 8005170:	2000      	movs	r0, #0
 8005172:	e7e5      	b.n	8005140 <__hi0bits+0xc>

08005174 <__lo0bits>:
 8005174:	6803      	ldr	r3, [r0, #0]
 8005176:	4602      	mov	r2, r0
 8005178:	f013 0007 	ands.w	r0, r3, #7
 800517c:	d00b      	beq.n	8005196 <__lo0bits+0x22>
 800517e:	07d9      	lsls	r1, r3, #31
 8005180:	d421      	bmi.n	80051c6 <__lo0bits+0x52>
 8005182:	0798      	lsls	r0, r3, #30
 8005184:	bf49      	itett	mi
 8005186:	085b      	lsrmi	r3, r3, #1
 8005188:	089b      	lsrpl	r3, r3, #2
 800518a:	2001      	movmi	r0, #1
 800518c:	6013      	strmi	r3, [r2, #0]
 800518e:	bf5c      	itt	pl
 8005190:	2002      	movpl	r0, #2
 8005192:	6013      	strpl	r3, [r2, #0]
 8005194:	4770      	bx	lr
 8005196:	b299      	uxth	r1, r3
 8005198:	b909      	cbnz	r1, 800519e <__lo0bits+0x2a>
 800519a:	2010      	movs	r0, #16
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	b2d9      	uxtb	r1, r3
 80051a0:	b909      	cbnz	r1, 80051a6 <__lo0bits+0x32>
 80051a2:	3008      	adds	r0, #8
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	0719      	lsls	r1, r3, #28
 80051a8:	bf04      	itt	eq
 80051aa:	091b      	lsreq	r3, r3, #4
 80051ac:	3004      	addeq	r0, #4
 80051ae:	0799      	lsls	r1, r3, #30
 80051b0:	bf04      	itt	eq
 80051b2:	089b      	lsreq	r3, r3, #2
 80051b4:	3002      	addeq	r0, #2
 80051b6:	07d9      	lsls	r1, r3, #31
 80051b8:	d403      	bmi.n	80051c2 <__lo0bits+0x4e>
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	f100 0001 	add.w	r0, r0, #1
 80051c0:	d003      	beq.n	80051ca <__lo0bits+0x56>
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4770      	bx	lr
 80051c6:	2000      	movs	r0, #0
 80051c8:	4770      	bx	lr
 80051ca:	2020      	movs	r0, #32
 80051cc:	4770      	bx	lr
	...

080051d0 <__i2b>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	460c      	mov	r4, r1
 80051d4:	2101      	movs	r1, #1
 80051d6:	f7ff ff05 	bl	8004fe4 <_Balloc>
 80051da:	4602      	mov	r2, r0
 80051dc:	b928      	cbnz	r0, 80051ea <__i2b+0x1a>
 80051de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80051e2:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <__i2b+0x24>)
 80051e4:	4804      	ldr	r0, [pc, #16]	; (80051f8 <__i2b+0x28>)
 80051e6:	f000 fd2d 	bl	8005c44 <__assert_func>
 80051ea:	2301      	movs	r3, #1
 80051ec:	6144      	str	r4, [r0, #20]
 80051ee:	6103      	str	r3, [r0, #16]
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	bf00      	nop
 80051f4:	080060b7 	.word	0x080060b7
 80051f8:	08006128 	.word	0x08006128

080051fc <__multiply>:
 80051fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	4691      	mov	r9, r2
 8005202:	690a      	ldr	r2, [r1, #16]
 8005204:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005208:	460c      	mov	r4, r1
 800520a:	429a      	cmp	r2, r3
 800520c:	bfbe      	ittt	lt
 800520e:	460b      	movlt	r3, r1
 8005210:	464c      	movlt	r4, r9
 8005212:	4699      	movlt	r9, r3
 8005214:	6927      	ldr	r7, [r4, #16]
 8005216:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800521a:	68a3      	ldr	r3, [r4, #8]
 800521c:	6861      	ldr	r1, [r4, #4]
 800521e:	eb07 060a 	add.w	r6, r7, sl
 8005222:	42b3      	cmp	r3, r6
 8005224:	b085      	sub	sp, #20
 8005226:	bfb8      	it	lt
 8005228:	3101      	addlt	r1, #1
 800522a:	f7ff fedb 	bl	8004fe4 <_Balloc>
 800522e:	b930      	cbnz	r0, 800523e <__multiply+0x42>
 8005230:	4602      	mov	r2, r0
 8005232:	f240 115d 	movw	r1, #349	; 0x15d
 8005236:	4b43      	ldr	r3, [pc, #268]	; (8005344 <__multiply+0x148>)
 8005238:	4843      	ldr	r0, [pc, #268]	; (8005348 <__multiply+0x14c>)
 800523a:	f000 fd03 	bl	8005c44 <__assert_func>
 800523e:	f100 0514 	add.w	r5, r0, #20
 8005242:	462b      	mov	r3, r5
 8005244:	2200      	movs	r2, #0
 8005246:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800524a:	4543      	cmp	r3, r8
 800524c:	d321      	bcc.n	8005292 <__multiply+0x96>
 800524e:	f104 0314 	add.w	r3, r4, #20
 8005252:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005256:	f109 0314 	add.w	r3, r9, #20
 800525a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800525e:	9202      	str	r2, [sp, #8]
 8005260:	1b3a      	subs	r2, r7, r4
 8005262:	3a15      	subs	r2, #21
 8005264:	f022 0203 	bic.w	r2, r2, #3
 8005268:	3204      	adds	r2, #4
 800526a:	f104 0115 	add.w	r1, r4, #21
 800526e:	428f      	cmp	r7, r1
 8005270:	bf38      	it	cc
 8005272:	2204      	movcc	r2, #4
 8005274:	9201      	str	r2, [sp, #4]
 8005276:	9a02      	ldr	r2, [sp, #8]
 8005278:	9303      	str	r3, [sp, #12]
 800527a:	429a      	cmp	r2, r3
 800527c:	d80c      	bhi.n	8005298 <__multiply+0x9c>
 800527e:	2e00      	cmp	r6, #0
 8005280:	dd03      	ble.n	800528a <__multiply+0x8e>
 8005282:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005286:	2b00      	cmp	r3, #0
 8005288:	d059      	beq.n	800533e <__multiply+0x142>
 800528a:	6106      	str	r6, [r0, #16]
 800528c:	b005      	add	sp, #20
 800528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005292:	f843 2b04 	str.w	r2, [r3], #4
 8005296:	e7d8      	b.n	800524a <__multiply+0x4e>
 8005298:	f8b3 a000 	ldrh.w	sl, [r3]
 800529c:	f1ba 0f00 	cmp.w	sl, #0
 80052a0:	d023      	beq.n	80052ea <__multiply+0xee>
 80052a2:	46a9      	mov	r9, r5
 80052a4:	f04f 0c00 	mov.w	ip, #0
 80052a8:	f104 0e14 	add.w	lr, r4, #20
 80052ac:	f85e 2b04 	ldr.w	r2, [lr], #4
 80052b0:	f8d9 1000 	ldr.w	r1, [r9]
 80052b4:	fa1f fb82 	uxth.w	fp, r2
 80052b8:	b289      	uxth	r1, r1
 80052ba:	fb0a 110b 	mla	r1, sl, fp, r1
 80052be:	4461      	add	r1, ip
 80052c0:	f8d9 c000 	ldr.w	ip, [r9]
 80052c4:	0c12      	lsrs	r2, r2, #16
 80052c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80052ca:	fb0a c202 	mla	r2, sl, r2, ip
 80052ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80052d2:	b289      	uxth	r1, r1
 80052d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80052d8:	4577      	cmp	r7, lr
 80052da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80052de:	f849 1b04 	str.w	r1, [r9], #4
 80052e2:	d8e3      	bhi.n	80052ac <__multiply+0xb0>
 80052e4:	9a01      	ldr	r2, [sp, #4]
 80052e6:	f845 c002 	str.w	ip, [r5, r2]
 80052ea:	9a03      	ldr	r2, [sp, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80052f2:	f1b9 0f00 	cmp.w	r9, #0
 80052f6:	d020      	beq.n	800533a <__multiply+0x13e>
 80052f8:	46ae      	mov	lr, r5
 80052fa:	f04f 0a00 	mov.w	sl, #0
 80052fe:	6829      	ldr	r1, [r5, #0]
 8005300:	f104 0c14 	add.w	ip, r4, #20
 8005304:	f8bc b000 	ldrh.w	fp, [ip]
 8005308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800530c:	b289      	uxth	r1, r1
 800530e:	fb09 220b 	mla	r2, r9, fp, r2
 8005312:	4492      	add	sl, r2
 8005314:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005318:	f84e 1b04 	str.w	r1, [lr], #4
 800531c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005320:	f8be 1000 	ldrh.w	r1, [lr]
 8005324:	0c12      	lsrs	r2, r2, #16
 8005326:	fb09 1102 	mla	r1, r9, r2, r1
 800532a:	4567      	cmp	r7, ip
 800532c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005330:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005334:	d8e6      	bhi.n	8005304 <__multiply+0x108>
 8005336:	9a01      	ldr	r2, [sp, #4]
 8005338:	50a9      	str	r1, [r5, r2]
 800533a:	3504      	adds	r5, #4
 800533c:	e79b      	b.n	8005276 <__multiply+0x7a>
 800533e:	3e01      	subs	r6, #1
 8005340:	e79d      	b.n	800527e <__multiply+0x82>
 8005342:	bf00      	nop
 8005344:	080060b7 	.word	0x080060b7
 8005348:	08006128 	.word	0x08006128

0800534c <__pow5mult>:
 800534c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005350:	4615      	mov	r5, r2
 8005352:	f012 0203 	ands.w	r2, r2, #3
 8005356:	4606      	mov	r6, r0
 8005358:	460f      	mov	r7, r1
 800535a:	d007      	beq.n	800536c <__pow5mult+0x20>
 800535c:	4c25      	ldr	r4, [pc, #148]	; (80053f4 <__pow5mult+0xa8>)
 800535e:	3a01      	subs	r2, #1
 8005360:	2300      	movs	r3, #0
 8005362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005366:	f7ff fe9f 	bl	80050a8 <__multadd>
 800536a:	4607      	mov	r7, r0
 800536c:	10ad      	asrs	r5, r5, #2
 800536e:	d03d      	beq.n	80053ec <__pow5mult+0xa0>
 8005370:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005372:	b97c      	cbnz	r4, 8005394 <__pow5mult+0x48>
 8005374:	2010      	movs	r0, #16
 8005376:	f7ff fe11 	bl	8004f9c <malloc>
 800537a:	4602      	mov	r2, r0
 800537c:	6270      	str	r0, [r6, #36]	; 0x24
 800537e:	b928      	cbnz	r0, 800538c <__pow5mult+0x40>
 8005380:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005384:	4b1c      	ldr	r3, [pc, #112]	; (80053f8 <__pow5mult+0xac>)
 8005386:	481d      	ldr	r0, [pc, #116]	; (80053fc <__pow5mult+0xb0>)
 8005388:	f000 fc5c 	bl	8005c44 <__assert_func>
 800538c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005390:	6004      	str	r4, [r0, #0]
 8005392:	60c4      	str	r4, [r0, #12]
 8005394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800539c:	b94c      	cbnz	r4, 80053b2 <__pow5mult+0x66>
 800539e:	f240 2171 	movw	r1, #625	; 0x271
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ff14 	bl	80051d0 <__i2b>
 80053a8:	2300      	movs	r3, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80053b0:	6003      	str	r3, [r0, #0]
 80053b2:	f04f 0900 	mov.w	r9, #0
 80053b6:	07eb      	lsls	r3, r5, #31
 80053b8:	d50a      	bpl.n	80053d0 <__pow5mult+0x84>
 80053ba:	4639      	mov	r1, r7
 80053bc:	4622      	mov	r2, r4
 80053be:	4630      	mov	r0, r6
 80053c0:	f7ff ff1c 	bl	80051fc <__multiply>
 80053c4:	4680      	mov	r8, r0
 80053c6:	4639      	mov	r1, r7
 80053c8:	4630      	mov	r0, r6
 80053ca:	f7ff fe4b 	bl	8005064 <_Bfree>
 80053ce:	4647      	mov	r7, r8
 80053d0:	106d      	asrs	r5, r5, #1
 80053d2:	d00b      	beq.n	80053ec <__pow5mult+0xa0>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	b938      	cbnz	r0, 80053e8 <__pow5mult+0x9c>
 80053d8:	4622      	mov	r2, r4
 80053da:	4621      	mov	r1, r4
 80053dc:	4630      	mov	r0, r6
 80053de:	f7ff ff0d 	bl	80051fc <__multiply>
 80053e2:	6020      	str	r0, [r4, #0]
 80053e4:	f8c0 9000 	str.w	r9, [r0]
 80053e8:	4604      	mov	r4, r0
 80053ea:	e7e4      	b.n	80053b6 <__pow5mult+0x6a>
 80053ec:	4638      	mov	r0, r7
 80053ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f2:	bf00      	nop
 80053f4:	08006278 	.word	0x08006278
 80053f8:	08006045 	.word	0x08006045
 80053fc:	08006128 	.word	0x08006128

08005400 <__lshift>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	460c      	mov	r4, r1
 8005406:	4607      	mov	r7, r0
 8005408:	4691      	mov	r9, r2
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	6849      	ldr	r1, [r1, #4]
 800540e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005412:	68a3      	ldr	r3, [r4, #8]
 8005414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005418:	f108 0601 	add.w	r6, r8, #1
 800541c:	42b3      	cmp	r3, r6
 800541e:	db0b      	blt.n	8005438 <__lshift+0x38>
 8005420:	4638      	mov	r0, r7
 8005422:	f7ff fddf 	bl	8004fe4 <_Balloc>
 8005426:	4605      	mov	r5, r0
 8005428:	b948      	cbnz	r0, 800543e <__lshift+0x3e>
 800542a:	4602      	mov	r2, r0
 800542c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005430:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <__lshift+0xd8>)
 8005432:	482a      	ldr	r0, [pc, #168]	; (80054dc <__lshift+0xdc>)
 8005434:	f000 fc06 	bl	8005c44 <__assert_func>
 8005438:	3101      	adds	r1, #1
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	e7ee      	b.n	800541c <__lshift+0x1c>
 800543e:	2300      	movs	r3, #0
 8005440:	f100 0114 	add.w	r1, r0, #20
 8005444:	f100 0210 	add.w	r2, r0, #16
 8005448:	4618      	mov	r0, r3
 800544a:	4553      	cmp	r3, sl
 800544c:	db37      	blt.n	80054be <__lshift+0xbe>
 800544e:	6920      	ldr	r0, [r4, #16]
 8005450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005454:	f104 0314 	add.w	r3, r4, #20
 8005458:	f019 091f 	ands.w	r9, r9, #31
 800545c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005464:	d02f      	beq.n	80054c6 <__lshift+0xc6>
 8005466:	468a      	mov	sl, r1
 8005468:	f04f 0c00 	mov.w	ip, #0
 800546c:	f1c9 0e20 	rsb	lr, r9, #32
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	fa02 f209 	lsl.w	r2, r2, r9
 8005476:	ea42 020c 	orr.w	r2, r2, ip
 800547a:	f84a 2b04 	str.w	r2, [sl], #4
 800547e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005482:	4298      	cmp	r0, r3
 8005484:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005488:	d8f2      	bhi.n	8005470 <__lshift+0x70>
 800548a:	1b03      	subs	r3, r0, r4
 800548c:	3b15      	subs	r3, #21
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	3304      	adds	r3, #4
 8005494:	f104 0215 	add.w	r2, r4, #21
 8005498:	4290      	cmp	r0, r2
 800549a:	bf38      	it	cc
 800549c:	2304      	movcc	r3, #4
 800549e:	f841 c003 	str.w	ip, [r1, r3]
 80054a2:	f1bc 0f00 	cmp.w	ip, #0
 80054a6:	d001      	beq.n	80054ac <__lshift+0xac>
 80054a8:	f108 0602 	add.w	r6, r8, #2
 80054ac:	3e01      	subs	r6, #1
 80054ae:	4638      	mov	r0, r7
 80054b0:	4621      	mov	r1, r4
 80054b2:	612e      	str	r6, [r5, #16]
 80054b4:	f7ff fdd6 	bl	8005064 <_Bfree>
 80054b8:	4628      	mov	r0, r5
 80054ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054be:	f842 0f04 	str.w	r0, [r2, #4]!
 80054c2:	3301      	adds	r3, #1
 80054c4:	e7c1      	b.n	800544a <__lshift+0x4a>
 80054c6:	3904      	subs	r1, #4
 80054c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054cc:	4298      	cmp	r0, r3
 80054ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80054d2:	d8f9      	bhi.n	80054c8 <__lshift+0xc8>
 80054d4:	e7ea      	b.n	80054ac <__lshift+0xac>
 80054d6:	bf00      	nop
 80054d8:	080060b7 	.word	0x080060b7
 80054dc:	08006128 	.word	0x08006128

080054e0 <__mcmp>:
 80054e0:	4603      	mov	r3, r0
 80054e2:	690a      	ldr	r2, [r1, #16]
 80054e4:	6900      	ldr	r0, [r0, #16]
 80054e6:	b530      	push	{r4, r5, lr}
 80054e8:	1a80      	subs	r0, r0, r2
 80054ea:	d10d      	bne.n	8005508 <__mcmp+0x28>
 80054ec:	3314      	adds	r3, #20
 80054ee:	3114      	adds	r1, #20
 80054f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80054f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80054f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005500:	4295      	cmp	r5, r2
 8005502:	d002      	beq.n	800550a <__mcmp+0x2a>
 8005504:	d304      	bcc.n	8005510 <__mcmp+0x30>
 8005506:	2001      	movs	r0, #1
 8005508:	bd30      	pop	{r4, r5, pc}
 800550a:	42a3      	cmp	r3, r4
 800550c:	d3f4      	bcc.n	80054f8 <__mcmp+0x18>
 800550e:	e7fb      	b.n	8005508 <__mcmp+0x28>
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	e7f8      	b.n	8005508 <__mcmp+0x28>
	...

08005518 <__mdiff>:
 8005518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	460d      	mov	r5, r1
 800551e:	4607      	mov	r7, r0
 8005520:	4611      	mov	r1, r2
 8005522:	4628      	mov	r0, r5
 8005524:	4614      	mov	r4, r2
 8005526:	f7ff ffdb 	bl	80054e0 <__mcmp>
 800552a:	1e06      	subs	r6, r0, #0
 800552c:	d111      	bne.n	8005552 <__mdiff+0x3a>
 800552e:	4631      	mov	r1, r6
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff fd57 	bl	8004fe4 <_Balloc>
 8005536:	4602      	mov	r2, r0
 8005538:	b928      	cbnz	r0, 8005546 <__mdiff+0x2e>
 800553a:	f240 2132 	movw	r1, #562	; 0x232
 800553e:	4b3a      	ldr	r3, [pc, #232]	; (8005628 <__mdiff+0x110>)
 8005540:	483a      	ldr	r0, [pc, #232]	; (800562c <__mdiff+0x114>)
 8005542:	f000 fb7f 	bl	8005c44 <__assert_func>
 8005546:	2301      	movs	r3, #1
 8005548:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800554c:	4610      	mov	r0, r2
 800554e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	bfa4      	itt	ge
 8005554:	4623      	movge	r3, r4
 8005556:	462c      	movge	r4, r5
 8005558:	4638      	mov	r0, r7
 800555a:	6861      	ldr	r1, [r4, #4]
 800555c:	bfa6      	itte	ge
 800555e:	461d      	movge	r5, r3
 8005560:	2600      	movge	r6, #0
 8005562:	2601      	movlt	r6, #1
 8005564:	f7ff fd3e 	bl	8004fe4 <_Balloc>
 8005568:	4602      	mov	r2, r0
 800556a:	b918      	cbnz	r0, 8005574 <__mdiff+0x5c>
 800556c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005570:	4b2d      	ldr	r3, [pc, #180]	; (8005628 <__mdiff+0x110>)
 8005572:	e7e5      	b.n	8005540 <__mdiff+0x28>
 8005574:	f102 0814 	add.w	r8, r2, #20
 8005578:	46c2      	mov	sl, r8
 800557a:	f04f 0c00 	mov.w	ip, #0
 800557e:	6927      	ldr	r7, [r4, #16]
 8005580:	60c6      	str	r6, [r0, #12]
 8005582:	692e      	ldr	r6, [r5, #16]
 8005584:	f104 0014 	add.w	r0, r4, #20
 8005588:	f105 0914 	add.w	r9, r5, #20
 800558c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005590:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005594:	3410      	adds	r4, #16
 8005596:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800559a:	f859 3b04 	ldr.w	r3, [r9], #4
 800559e:	fa1f f18b 	uxth.w	r1, fp
 80055a2:	448c      	add	ip, r1
 80055a4:	b299      	uxth	r1, r3
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	ebac 0101 	sub.w	r1, ip, r1
 80055ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80055b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80055b4:	b289      	uxth	r1, r1
 80055b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80055ba:	454e      	cmp	r6, r9
 80055bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80055c0:	f84a 3b04 	str.w	r3, [sl], #4
 80055c4:	d8e7      	bhi.n	8005596 <__mdiff+0x7e>
 80055c6:	1b73      	subs	r3, r6, r5
 80055c8:	3b15      	subs	r3, #21
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	3515      	adds	r5, #21
 80055d0:	3304      	adds	r3, #4
 80055d2:	42ae      	cmp	r6, r5
 80055d4:	bf38      	it	cc
 80055d6:	2304      	movcc	r3, #4
 80055d8:	4418      	add	r0, r3
 80055da:	4443      	add	r3, r8
 80055dc:	461e      	mov	r6, r3
 80055de:	4605      	mov	r5, r0
 80055e0:	4575      	cmp	r5, lr
 80055e2:	d30e      	bcc.n	8005602 <__mdiff+0xea>
 80055e4:	f10e 0103 	add.w	r1, lr, #3
 80055e8:	1a09      	subs	r1, r1, r0
 80055ea:	f021 0103 	bic.w	r1, r1, #3
 80055ee:	3803      	subs	r0, #3
 80055f0:	4586      	cmp	lr, r0
 80055f2:	bf38      	it	cc
 80055f4:	2100      	movcc	r1, #0
 80055f6:	4419      	add	r1, r3
 80055f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80055fc:	b18b      	cbz	r3, 8005622 <__mdiff+0x10a>
 80055fe:	6117      	str	r7, [r2, #16]
 8005600:	e7a4      	b.n	800554c <__mdiff+0x34>
 8005602:	f855 8b04 	ldr.w	r8, [r5], #4
 8005606:	fa1f f188 	uxth.w	r1, r8
 800560a:	4461      	add	r1, ip
 800560c:	140c      	asrs	r4, r1, #16
 800560e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005612:	b289      	uxth	r1, r1
 8005614:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005618:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800561c:	f846 1b04 	str.w	r1, [r6], #4
 8005620:	e7de      	b.n	80055e0 <__mdiff+0xc8>
 8005622:	3f01      	subs	r7, #1
 8005624:	e7e8      	b.n	80055f8 <__mdiff+0xe0>
 8005626:	bf00      	nop
 8005628:	080060b7 	.word	0x080060b7
 800562c:	08006128 	.word	0x08006128

08005630 <__d2b>:
 8005630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005634:	2101      	movs	r1, #1
 8005636:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800563a:	4690      	mov	r8, r2
 800563c:	461d      	mov	r5, r3
 800563e:	f7ff fcd1 	bl	8004fe4 <_Balloc>
 8005642:	4604      	mov	r4, r0
 8005644:	b930      	cbnz	r0, 8005654 <__d2b+0x24>
 8005646:	4602      	mov	r2, r0
 8005648:	f240 310a 	movw	r1, #778	; 0x30a
 800564c:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <__d2b+0xb0>)
 800564e:	4825      	ldr	r0, [pc, #148]	; (80056e4 <__d2b+0xb4>)
 8005650:	f000 faf8 	bl	8005c44 <__assert_func>
 8005654:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005658:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800565c:	bb2d      	cbnz	r5, 80056aa <__d2b+0x7a>
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	f1b8 0300 	subs.w	r3, r8, #0
 8005664:	d026      	beq.n	80056b4 <__d2b+0x84>
 8005666:	4668      	mov	r0, sp
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	f7ff fd83 	bl	8005174 <__lo0bits>
 800566e:	9900      	ldr	r1, [sp, #0]
 8005670:	b1f0      	cbz	r0, 80056b0 <__d2b+0x80>
 8005672:	9a01      	ldr	r2, [sp, #4]
 8005674:	f1c0 0320 	rsb	r3, r0, #32
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	430b      	orrs	r3, r1
 800567e:	40c2      	lsrs	r2, r0
 8005680:	6163      	str	r3, [r4, #20]
 8005682:	9201      	str	r2, [sp, #4]
 8005684:	9b01      	ldr	r3, [sp, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2102      	movne	r1, #2
 800568c:	2101      	moveq	r1, #1
 800568e:	61a3      	str	r3, [r4, #24]
 8005690:	6121      	str	r1, [r4, #16]
 8005692:	b1c5      	cbz	r5, 80056c6 <__d2b+0x96>
 8005694:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005698:	4405      	add	r5, r0
 800569a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800569e:	603d      	str	r5, [r7, #0]
 80056a0:	6030      	str	r0, [r6, #0]
 80056a2:	4620      	mov	r0, r4
 80056a4:	b002      	add	sp, #8
 80056a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ae:	e7d6      	b.n	800565e <__d2b+0x2e>
 80056b0:	6161      	str	r1, [r4, #20]
 80056b2:	e7e7      	b.n	8005684 <__d2b+0x54>
 80056b4:	a801      	add	r0, sp, #4
 80056b6:	f7ff fd5d 	bl	8005174 <__lo0bits>
 80056ba:	2101      	movs	r1, #1
 80056bc:	9b01      	ldr	r3, [sp, #4]
 80056be:	6121      	str	r1, [r4, #16]
 80056c0:	6163      	str	r3, [r4, #20]
 80056c2:	3020      	adds	r0, #32
 80056c4:	e7e5      	b.n	8005692 <__d2b+0x62>
 80056c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80056ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80056ce:	6038      	str	r0, [r7, #0]
 80056d0:	6918      	ldr	r0, [r3, #16]
 80056d2:	f7ff fd2f 	bl	8005134 <__hi0bits>
 80056d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80056da:	6031      	str	r1, [r6, #0]
 80056dc:	e7e1      	b.n	80056a2 <__d2b+0x72>
 80056de:	bf00      	nop
 80056e0:	080060b7 	.word	0x080060b7
 80056e4:	08006128 	.word	0x08006128

080056e8 <_calloc_r>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	fba1 5402 	umull	r5, r4, r1, r2
 80056ee:	b934      	cbnz	r4, 80056fe <_calloc_r+0x16>
 80056f0:	4629      	mov	r1, r5
 80056f2:	f000 f875 	bl	80057e0 <_malloc_r>
 80056f6:	4606      	mov	r6, r0
 80056f8:	b928      	cbnz	r0, 8005706 <_calloc_r+0x1e>
 80056fa:	4630      	mov	r0, r6
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	220c      	movs	r2, #12
 8005700:	2600      	movs	r6, #0
 8005702:	6002      	str	r2, [r0, #0]
 8005704:	e7f9      	b.n	80056fa <_calloc_r+0x12>
 8005706:	462a      	mov	r2, r5
 8005708:	4621      	mov	r1, r4
 800570a:	f7fd fdf5 	bl	80032f8 <memset>
 800570e:	e7f4      	b.n	80056fa <_calloc_r+0x12>

08005710 <_free_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4605      	mov	r5, r0
 8005714:	2900      	cmp	r1, #0
 8005716:	d040      	beq.n	800579a <_free_r+0x8a>
 8005718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800571c:	1f0c      	subs	r4, r1, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	bfb8      	it	lt
 8005722:	18e4      	addlt	r4, r4, r3
 8005724:	f000 fb14 	bl	8005d50 <__malloc_lock>
 8005728:	4a1c      	ldr	r2, [pc, #112]	; (800579c <_free_r+0x8c>)
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	b933      	cbnz	r3, 800573c <_free_r+0x2c>
 800572e:	6063      	str	r3, [r4, #4]
 8005730:	6014      	str	r4, [r2, #0]
 8005732:	4628      	mov	r0, r5
 8005734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005738:	f000 bb10 	b.w	8005d5c <__malloc_unlock>
 800573c:	42a3      	cmp	r3, r4
 800573e:	d908      	bls.n	8005752 <_free_r+0x42>
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	1821      	adds	r1, r4, r0
 8005744:	428b      	cmp	r3, r1
 8005746:	bf01      	itttt	eq
 8005748:	6819      	ldreq	r1, [r3, #0]
 800574a:	685b      	ldreq	r3, [r3, #4]
 800574c:	1809      	addeq	r1, r1, r0
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	e7ed      	b.n	800572e <_free_r+0x1e>
 8005752:	461a      	mov	r2, r3
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	b10b      	cbz	r3, 800575c <_free_r+0x4c>
 8005758:	42a3      	cmp	r3, r4
 800575a:	d9fa      	bls.n	8005752 <_free_r+0x42>
 800575c:	6811      	ldr	r1, [r2, #0]
 800575e:	1850      	adds	r0, r2, r1
 8005760:	42a0      	cmp	r0, r4
 8005762:	d10b      	bne.n	800577c <_free_r+0x6c>
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	4401      	add	r1, r0
 8005768:	1850      	adds	r0, r2, r1
 800576a:	4283      	cmp	r3, r0
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	d1e0      	bne.n	8005732 <_free_r+0x22>
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4401      	add	r1, r0
 8005776:	6011      	str	r1, [r2, #0]
 8005778:	6053      	str	r3, [r2, #4]
 800577a:	e7da      	b.n	8005732 <_free_r+0x22>
 800577c:	d902      	bls.n	8005784 <_free_r+0x74>
 800577e:	230c      	movs	r3, #12
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	e7d6      	b.n	8005732 <_free_r+0x22>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	1821      	adds	r1, r4, r0
 8005788:	428b      	cmp	r3, r1
 800578a:	bf01      	itttt	eq
 800578c:	6819      	ldreq	r1, [r3, #0]
 800578e:	685b      	ldreq	r3, [r3, #4]
 8005790:	1809      	addeq	r1, r1, r0
 8005792:	6021      	streq	r1, [r4, #0]
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	6054      	str	r4, [r2, #4]
 8005798:	e7cb      	b.n	8005732 <_free_r+0x22>
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	200002b4 	.word	0x200002b4

080057a0 <sbrk_aligned>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	4e0e      	ldr	r6, [pc, #56]	; (80057dc <sbrk_aligned+0x3c>)
 80057a4:	460c      	mov	r4, r1
 80057a6:	6831      	ldr	r1, [r6, #0]
 80057a8:	4605      	mov	r5, r0
 80057aa:	b911      	cbnz	r1, 80057b2 <sbrk_aligned+0x12>
 80057ac:	f000 f9e4 	bl	8005b78 <_sbrk_r>
 80057b0:	6030      	str	r0, [r6, #0]
 80057b2:	4621      	mov	r1, r4
 80057b4:	4628      	mov	r0, r5
 80057b6:	f000 f9df 	bl	8005b78 <_sbrk_r>
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	d00a      	beq.n	80057d4 <sbrk_aligned+0x34>
 80057be:	1cc4      	adds	r4, r0, #3
 80057c0:	f024 0403 	bic.w	r4, r4, #3
 80057c4:	42a0      	cmp	r0, r4
 80057c6:	d007      	beq.n	80057d8 <sbrk_aligned+0x38>
 80057c8:	1a21      	subs	r1, r4, r0
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 f9d4 	bl	8005b78 <_sbrk_r>
 80057d0:	3001      	adds	r0, #1
 80057d2:	d101      	bne.n	80057d8 <sbrk_aligned+0x38>
 80057d4:	f04f 34ff 	mov.w	r4, #4294967295
 80057d8:	4620      	mov	r0, r4
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	200002b8 	.word	0x200002b8

080057e0 <_malloc_r>:
 80057e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e4:	1ccd      	adds	r5, r1, #3
 80057e6:	f025 0503 	bic.w	r5, r5, #3
 80057ea:	3508      	adds	r5, #8
 80057ec:	2d0c      	cmp	r5, #12
 80057ee:	bf38      	it	cc
 80057f0:	250c      	movcc	r5, #12
 80057f2:	2d00      	cmp	r5, #0
 80057f4:	4607      	mov	r7, r0
 80057f6:	db01      	blt.n	80057fc <_malloc_r+0x1c>
 80057f8:	42a9      	cmp	r1, r5
 80057fa:	d905      	bls.n	8005808 <_malloc_r+0x28>
 80057fc:	230c      	movs	r3, #12
 80057fe:	2600      	movs	r6, #0
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4630      	mov	r0, r6
 8005804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005808:	4e2e      	ldr	r6, [pc, #184]	; (80058c4 <_malloc_r+0xe4>)
 800580a:	f000 faa1 	bl	8005d50 <__malloc_lock>
 800580e:	6833      	ldr	r3, [r6, #0]
 8005810:	461c      	mov	r4, r3
 8005812:	bb34      	cbnz	r4, 8005862 <_malloc_r+0x82>
 8005814:	4629      	mov	r1, r5
 8005816:	4638      	mov	r0, r7
 8005818:	f7ff ffc2 	bl	80057a0 <sbrk_aligned>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	4604      	mov	r4, r0
 8005820:	d14d      	bne.n	80058be <_malloc_r+0xde>
 8005822:	6834      	ldr	r4, [r6, #0]
 8005824:	4626      	mov	r6, r4
 8005826:	2e00      	cmp	r6, #0
 8005828:	d140      	bne.n	80058ac <_malloc_r+0xcc>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	4631      	mov	r1, r6
 800582e:	4638      	mov	r0, r7
 8005830:	eb04 0803 	add.w	r8, r4, r3
 8005834:	f000 f9a0 	bl	8005b78 <_sbrk_r>
 8005838:	4580      	cmp	r8, r0
 800583a:	d13a      	bne.n	80058b2 <_malloc_r+0xd2>
 800583c:	6821      	ldr	r1, [r4, #0]
 800583e:	3503      	adds	r5, #3
 8005840:	1a6d      	subs	r5, r5, r1
 8005842:	f025 0503 	bic.w	r5, r5, #3
 8005846:	3508      	adds	r5, #8
 8005848:	2d0c      	cmp	r5, #12
 800584a:	bf38      	it	cc
 800584c:	250c      	movcc	r5, #12
 800584e:	4638      	mov	r0, r7
 8005850:	4629      	mov	r1, r5
 8005852:	f7ff ffa5 	bl	80057a0 <sbrk_aligned>
 8005856:	3001      	adds	r0, #1
 8005858:	d02b      	beq.n	80058b2 <_malloc_r+0xd2>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	442b      	add	r3, r5
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	e00e      	b.n	8005880 <_malloc_r+0xa0>
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	1b52      	subs	r2, r2, r5
 8005866:	d41e      	bmi.n	80058a6 <_malloc_r+0xc6>
 8005868:	2a0b      	cmp	r2, #11
 800586a:	d916      	bls.n	800589a <_malloc_r+0xba>
 800586c:	1961      	adds	r1, r4, r5
 800586e:	42a3      	cmp	r3, r4
 8005870:	6025      	str	r5, [r4, #0]
 8005872:	bf18      	it	ne
 8005874:	6059      	strne	r1, [r3, #4]
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	bf08      	it	eq
 800587a:	6031      	streq	r1, [r6, #0]
 800587c:	5162      	str	r2, [r4, r5]
 800587e:	604b      	str	r3, [r1, #4]
 8005880:	4638      	mov	r0, r7
 8005882:	f104 060b 	add.w	r6, r4, #11
 8005886:	f000 fa69 	bl	8005d5c <__malloc_unlock>
 800588a:	f026 0607 	bic.w	r6, r6, #7
 800588e:	1d23      	adds	r3, r4, #4
 8005890:	1af2      	subs	r2, r6, r3
 8005892:	d0b6      	beq.n	8005802 <_malloc_r+0x22>
 8005894:	1b9b      	subs	r3, r3, r6
 8005896:	50a3      	str	r3, [r4, r2]
 8005898:	e7b3      	b.n	8005802 <_malloc_r+0x22>
 800589a:	6862      	ldr	r2, [r4, #4]
 800589c:	42a3      	cmp	r3, r4
 800589e:	bf0c      	ite	eq
 80058a0:	6032      	streq	r2, [r6, #0]
 80058a2:	605a      	strne	r2, [r3, #4]
 80058a4:	e7ec      	b.n	8005880 <_malloc_r+0xa0>
 80058a6:	4623      	mov	r3, r4
 80058a8:	6864      	ldr	r4, [r4, #4]
 80058aa:	e7b2      	b.n	8005812 <_malloc_r+0x32>
 80058ac:	4634      	mov	r4, r6
 80058ae:	6876      	ldr	r6, [r6, #4]
 80058b0:	e7b9      	b.n	8005826 <_malloc_r+0x46>
 80058b2:	230c      	movs	r3, #12
 80058b4:	4638      	mov	r0, r7
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	f000 fa50 	bl	8005d5c <__malloc_unlock>
 80058bc:	e7a1      	b.n	8005802 <_malloc_r+0x22>
 80058be:	6025      	str	r5, [r4, #0]
 80058c0:	e7de      	b.n	8005880 <_malloc_r+0xa0>
 80058c2:	bf00      	nop
 80058c4:	200002b4 	.word	0x200002b4

080058c8 <__sfputc_r>:
 80058c8:	6893      	ldr	r3, [r2, #8]
 80058ca:	b410      	push	{r4}
 80058cc:	3b01      	subs	r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	6093      	str	r3, [r2, #8]
 80058d2:	da07      	bge.n	80058e4 <__sfputc_r+0x1c>
 80058d4:	6994      	ldr	r4, [r2, #24]
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	db01      	blt.n	80058de <__sfputc_r+0x16>
 80058da:	290a      	cmp	r1, #10
 80058dc:	d102      	bne.n	80058e4 <__sfputc_r+0x1c>
 80058de:	bc10      	pop	{r4}
 80058e0:	f7fe ba00 	b.w	8003ce4 <__swbuf_r>
 80058e4:	6813      	ldr	r3, [r2, #0]
 80058e6:	1c58      	adds	r0, r3, #1
 80058e8:	6010      	str	r0, [r2, #0]
 80058ea:	7019      	strb	r1, [r3, #0]
 80058ec:	4608      	mov	r0, r1
 80058ee:	bc10      	pop	{r4}
 80058f0:	4770      	bx	lr

080058f2 <__sfputs_r>:
 80058f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f4:	4606      	mov	r6, r0
 80058f6:	460f      	mov	r7, r1
 80058f8:	4614      	mov	r4, r2
 80058fa:	18d5      	adds	r5, r2, r3
 80058fc:	42ac      	cmp	r4, r5
 80058fe:	d101      	bne.n	8005904 <__sfputs_r+0x12>
 8005900:	2000      	movs	r0, #0
 8005902:	e007      	b.n	8005914 <__sfputs_r+0x22>
 8005904:	463a      	mov	r2, r7
 8005906:	4630      	mov	r0, r6
 8005908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590c:	f7ff ffdc 	bl	80058c8 <__sfputc_r>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d1f3      	bne.n	80058fc <__sfputs_r+0xa>
 8005914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005918 <_vfiprintf_r>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	460d      	mov	r5, r1
 800591e:	4614      	mov	r4, r2
 8005920:	4698      	mov	r8, r3
 8005922:	4606      	mov	r6, r0
 8005924:	b09d      	sub	sp, #116	; 0x74
 8005926:	b118      	cbz	r0, 8005930 <_vfiprintf_r+0x18>
 8005928:	6983      	ldr	r3, [r0, #24]
 800592a:	b90b      	cbnz	r3, 8005930 <_vfiprintf_r+0x18>
 800592c:	f7ff fa2c 	bl	8004d88 <__sinit>
 8005930:	4b89      	ldr	r3, [pc, #548]	; (8005b58 <_vfiprintf_r+0x240>)
 8005932:	429d      	cmp	r5, r3
 8005934:	d11b      	bne.n	800596e <_vfiprintf_r+0x56>
 8005936:	6875      	ldr	r5, [r6, #4]
 8005938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800593a:	07d9      	lsls	r1, r3, #31
 800593c:	d405      	bmi.n	800594a <_vfiprintf_r+0x32>
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	059a      	lsls	r2, r3, #22
 8005942:	d402      	bmi.n	800594a <_vfiprintf_r+0x32>
 8005944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005946:	f7ff fac2 	bl	8004ece <__retarget_lock_acquire_recursive>
 800594a:	89ab      	ldrh	r3, [r5, #12]
 800594c:	071b      	lsls	r3, r3, #28
 800594e:	d501      	bpl.n	8005954 <_vfiprintf_r+0x3c>
 8005950:	692b      	ldr	r3, [r5, #16]
 8005952:	b9eb      	cbnz	r3, 8005990 <_vfiprintf_r+0x78>
 8005954:	4629      	mov	r1, r5
 8005956:	4630      	mov	r0, r6
 8005958:	f7fe fa16 	bl	8003d88 <__swsetup_r>
 800595c:	b1c0      	cbz	r0, 8005990 <_vfiprintf_r+0x78>
 800595e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005960:	07dc      	lsls	r4, r3, #31
 8005962:	d50e      	bpl.n	8005982 <_vfiprintf_r+0x6a>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	b01d      	add	sp, #116	; 0x74
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	4b7b      	ldr	r3, [pc, #492]	; (8005b5c <_vfiprintf_r+0x244>)
 8005970:	429d      	cmp	r5, r3
 8005972:	d101      	bne.n	8005978 <_vfiprintf_r+0x60>
 8005974:	68b5      	ldr	r5, [r6, #8]
 8005976:	e7df      	b.n	8005938 <_vfiprintf_r+0x20>
 8005978:	4b79      	ldr	r3, [pc, #484]	; (8005b60 <_vfiprintf_r+0x248>)
 800597a:	429d      	cmp	r5, r3
 800597c:	bf08      	it	eq
 800597e:	68f5      	ldreq	r5, [r6, #12]
 8005980:	e7da      	b.n	8005938 <_vfiprintf_r+0x20>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	0598      	lsls	r0, r3, #22
 8005986:	d4ed      	bmi.n	8005964 <_vfiprintf_r+0x4c>
 8005988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800598a:	f7ff faa1 	bl	8004ed0 <__retarget_lock_release_recursive>
 800598e:	e7e9      	b.n	8005964 <_vfiprintf_r+0x4c>
 8005990:	2300      	movs	r3, #0
 8005992:	9309      	str	r3, [sp, #36]	; 0x24
 8005994:	2320      	movs	r3, #32
 8005996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800599a:	2330      	movs	r3, #48	; 0x30
 800599c:	f04f 0901 	mov.w	r9, #1
 80059a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b64 <_vfiprintf_r+0x24c>
 80059a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ac:	4623      	mov	r3, r4
 80059ae:	469a      	mov	sl, r3
 80059b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059b4:	b10a      	cbz	r2, 80059ba <_vfiprintf_r+0xa2>
 80059b6:	2a25      	cmp	r2, #37	; 0x25
 80059b8:	d1f9      	bne.n	80059ae <_vfiprintf_r+0x96>
 80059ba:	ebba 0b04 	subs.w	fp, sl, r4
 80059be:	d00b      	beq.n	80059d8 <_vfiprintf_r+0xc0>
 80059c0:	465b      	mov	r3, fp
 80059c2:	4622      	mov	r2, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	4630      	mov	r0, r6
 80059c8:	f7ff ff93 	bl	80058f2 <__sfputs_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	f000 80aa 	beq.w	8005b26 <_vfiprintf_r+0x20e>
 80059d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059d4:	445a      	add	r2, fp
 80059d6:	9209      	str	r2, [sp, #36]	; 0x24
 80059d8:	f89a 3000 	ldrb.w	r3, [sl]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80a2 	beq.w	8005b26 <_vfiprintf_r+0x20e>
 80059e2:	2300      	movs	r3, #0
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ec:	f10a 0a01 	add.w	sl, sl, #1
 80059f0:	9304      	str	r3, [sp, #16]
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059f8:	931a      	str	r3, [sp, #104]	; 0x68
 80059fa:	4654      	mov	r4, sl
 80059fc:	2205      	movs	r2, #5
 80059fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a02:	4858      	ldr	r0, [pc, #352]	; (8005b64 <_vfiprintf_r+0x24c>)
 8005a04:	f7ff fad2 	bl	8004fac <memchr>
 8005a08:	9a04      	ldr	r2, [sp, #16]
 8005a0a:	b9d8      	cbnz	r0, 8005a44 <_vfiprintf_r+0x12c>
 8005a0c:	06d1      	lsls	r1, r2, #27
 8005a0e:	bf44      	itt	mi
 8005a10:	2320      	movmi	r3, #32
 8005a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a16:	0713      	lsls	r3, r2, #28
 8005a18:	bf44      	itt	mi
 8005a1a:	232b      	movmi	r3, #43	; 0x2b
 8005a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a20:	f89a 3000 	ldrb.w	r3, [sl]
 8005a24:	2b2a      	cmp	r3, #42	; 0x2a
 8005a26:	d015      	beq.n	8005a54 <_vfiprintf_r+0x13c>
 8005a28:	4654      	mov	r4, sl
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f04f 0c0a 	mov.w	ip, #10
 8005a30:	9a07      	ldr	r2, [sp, #28]
 8005a32:	4621      	mov	r1, r4
 8005a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a38:	3b30      	subs	r3, #48	; 0x30
 8005a3a:	2b09      	cmp	r3, #9
 8005a3c:	d94e      	bls.n	8005adc <_vfiprintf_r+0x1c4>
 8005a3e:	b1b0      	cbz	r0, 8005a6e <_vfiprintf_r+0x156>
 8005a40:	9207      	str	r2, [sp, #28]
 8005a42:	e014      	b.n	8005a6e <_vfiprintf_r+0x156>
 8005a44:	eba0 0308 	sub.w	r3, r0, r8
 8005a48:	fa09 f303 	lsl.w	r3, r9, r3
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	46a2      	mov	sl, r4
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	e7d2      	b.n	80059fa <_vfiprintf_r+0xe2>
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	1d19      	adds	r1, r3, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	9103      	str	r1, [sp, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bfbb      	ittet	lt
 8005a60:	425b      	neglt	r3, r3
 8005a62:	f042 0202 	orrlt.w	r2, r2, #2
 8005a66:	9307      	strge	r3, [sp, #28]
 8005a68:	9307      	strlt	r3, [sp, #28]
 8005a6a:	bfb8      	it	lt
 8005a6c:	9204      	strlt	r2, [sp, #16]
 8005a6e:	7823      	ldrb	r3, [r4, #0]
 8005a70:	2b2e      	cmp	r3, #46	; 0x2e
 8005a72:	d10c      	bne.n	8005a8e <_vfiprintf_r+0x176>
 8005a74:	7863      	ldrb	r3, [r4, #1]
 8005a76:	2b2a      	cmp	r3, #42	; 0x2a
 8005a78:	d135      	bne.n	8005ae6 <_vfiprintf_r+0x1ce>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	3402      	adds	r4, #2
 8005a7e:	1d1a      	adds	r2, r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	9203      	str	r2, [sp, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bfb8      	it	lt
 8005a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a8c:	9305      	str	r3, [sp, #20]
 8005a8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005b68 <_vfiprintf_r+0x250>
 8005a92:	2203      	movs	r2, #3
 8005a94:	4650      	mov	r0, sl
 8005a96:	7821      	ldrb	r1, [r4, #0]
 8005a98:	f7ff fa88 	bl	8004fac <memchr>
 8005a9c:	b140      	cbz	r0, 8005ab0 <_vfiprintf_r+0x198>
 8005a9e:	2340      	movs	r3, #64	; 0x40
 8005aa0:	eba0 000a 	sub.w	r0, r0, sl
 8005aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8005aa8:	9b04      	ldr	r3, [sp, #16]
 8005aaa:	3401      	adds	r4, #1
 8005aac:	4303      	orrs	r3, r0
 8005aae:	9304      	str	r3, [sp, #16]
 8005ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab4:	2206      	movs	r2, #6
 8005ab6:	482d      	ldr	r0, [pc, #180]	; (8005b6c <_vfiprintf_r+0x254>)
 8005ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005abc:	f7ff fa76 	bl	8004fac <memchr>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d03f      	beq.n	8005b44 <_vfiprintf_r+0x22c>
 8005ac4:	4b2a      	ldr	r3, [pc, #168]	; (8005b70 <_vfiprintf_r+0x258>)
 8005ac6:	bb1b      	cbnz	r3, 8005b10 <_vfiprintf_r+0x1f8>
 8005ac8:	9b03      	ldr	r3, [sp, #12]
 8005aca:	3307      	adds	r3, #7
 8005acc:	f023 0307 	bic.w	r3, r3, #7
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	9303      	str	r3, [sp, #12]
 8005ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad6:	443b      	add	r3, r7
 8005ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ada:	e767      	b.n	80059ac <_vfiprintf_r+0x94>
 8005adc:	460c      	mov	r4, r1
 8005ade:	2001      	movs	r0, #1
 8005ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ae4:	e7a5      	b.n	8005a32 <_vfiprintf_r+0x11a>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f04f 0c0a 	mov.w	ip, #10
 8005aec:	4619      	mov	r1, r3
 8005aee:	3401      	adds	r4, #1
 8005af0:	9305      	str	r3, [sp, #20]
 8005af2:	4620      	mov	r0, r4
 8005af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005af8:	3a30      	subs	r2, #48	; 0x30
 8005afa:	2a09      	cmp	r2, #9
 8005afc:	d903      	bls.n	8005b06 <_vfiprintf_r+0x1ee>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0c5      	beq.n	8005a8e <_vfiprintf_r+0x176>
 8005b02:	9105      	str	r1, [sp, #20]
 8005b04:	e7c3      	b.n	8005a8e <_vfiprintf_r+0x176>
 8005b06:	4604      	mov	r4, r0
 8005b08:	2301      	movs	r3, #1
 8005b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b0e:	e7f0      	b.n	8005af2 <_vfiprintf_r+0x1da>
 8005b10:	ab03      	add	r3, sp, #12
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	462a      	mov	r2, r5
 8005b16:	4630      	mov	r0, r6
 8005b18:	4b16      	ldr	r3, [pc, #88]	; (8005b74 <_vfiprintf_r+0x25c>)
 8005b1a:	a904      	add	r1, sp, #16
 8005b1c:	f7fd fc92 	bl	8003444 <_printf_float>
 8005b20:	4607      	mov	r7, r0
 8005b22:	1c78      	adds	r0, r7, #1
 8005b24:	d1d6      	bne.n	8005ad4 <_vfiprintf_r+0x1bc>
 8005b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b28:	07d9      	lsls	r1, r3, #31
 8005b2a:	d405      	bmi.n	8005b38 <_vfiprintf_r+0x220>
 8005b2c:	89ab      	ldrh	r3, [r5, #12]
 8005b2e:	059a      	lsls	r2, r3, #22
 8005b30:	d402      	bmi.n	8005b38 <_vfiprintf_r+0x220>
 8005b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b34:	f7ff f9cc 	bl	8004ed0 <__retarget_lock_release_recursive>
 8005b38:	89ab      	ldrh	r3, [r5, #12]
 8005b3a:	065b      	lsls	r3, r3, #25
 8005b3c:	f53f af12 	bmi.w	8005964 <_vfiprintf_r+0x4c>
 8005b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b42:	e711      	b.n	8005968 <_vfiprintf_r+0x50>
 8005b44:	ab03      	add	r3, sp, #12
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	462a      	mov	r2, r5
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <_vfiprintf_r+0x25c>)
 8005b4e:	a904      	add	r1, sp, #16
 8005b50:	f7fd ff14 	bl	800397c <_printf_i>
 8005b54:	e7e4      	b.n	8005b20 <_vfiprintf_r+0x208>
 8005b56:	bf00      	nop
 8005b58:	080060e8 	.word	0x080060e8
 8005b5c:	08006108 	.word	0x08006108
 8005b60:	080060c8 	.word	0x080060c8
 8005b64:	08006284 	.word	0x08006284
 8005b68:	0800628a 	.word	0x0800628a
 8005b6c:	0800628e 	.word	0x0800628e
 8005b70:	08003445 	.word	0x08003445
 8005b74:	080058f3 	.word	0x080058f3

08005b78 <_sbrk_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4d05      	ldr	r5, [pc, #20]	; (8005b94 <_sbrk_r+0x1c>)
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	f7fb ff88 	bl	8001a98 <_sbrk>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_sbrk_r+0x1a>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_sbrk_r+0x1a>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	200002bc 	.word	0x200002bc

08005b98 <__sread>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba0:	f000 f8e2 	bl	8005d68 <_read_r>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	bfab      	itete	ge
 8005ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005baa:	89a3      	ldrhlt	r3, [r4, #12]
 8005bac:	181b      	addge	r3, r3, r0
 8005bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bb2:	bfac      	ite	ge
 8005bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bb6:	81a3      	strhlt	r3, [r4, #12]
 8005bb8:	bd10      	pop	{r4, pc}

08005bba <__swrite>:
 8005bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	461f      	mov	r7, r3
 8005bc0:	898b      	ldrh	r3, [r1, #12]
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	05db      	lsls	r3, r3, #23
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	4616      	mov	r6, r2
 8005bca:	d505      	bpl.n	8005bd8 <__swrite+0x1e>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd4:	f000 f898 	bl	8005d08 <_lseek_r>
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	4632      	mov	r2, r6
 8005bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	4628      	mov	r0, r5
 8005be4:	463b      	mov	r3, r7
 8005be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bee:	f000 b817 	b.w	8005c20 <_write_r>

08005bf2 <__sseek>:
 8005bf2:	b510      	push	{r4, lr}
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfa:	f000 f885 	bl	8005d08 <_lseek_r>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	bf15      	itete	ne
 8005c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c0e:	81a3      	strheq	r3, [r4, #12]
 8005c10:	bf18      	it	ne
 8005c12:	81a3      	strhne	r3, [r4, #12]
 8005c14:	bd10      	pop	{r4, pc}

08005c16 <__sclose>:
 8005c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1a:	f000 b831 	b.w	8005c80 <_close_r>
	...

08005c20 <_write_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4d05      	ldr	r5, [pc, #20]	; (8005c40 <_write_r+0x20>)
 8005c2c:	602a      	str	r2, [r5, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f7fb fee6 	bl	8001a00 <_write>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_write_r+0x1e>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_write_r+0x1e>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	200002bc 	.word	0x200002bc

08005c44 <__assert_func>:
 8005c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c46:	4614      	mov	r4, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <__assert_func+0x2c>)
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68d8      	ldr	r0, [r3, #12]
 8005c52:	b14c      	cbz	r4, 8005c68 <__assert_func+0x24>
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <__assert_func+0x30>)
 8005c56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c5a:	9100      	str	r1, [sp, #0]
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	4906      	ldr	r1, [pc, #24]	; (8005c78 <__assert_func+0x34>)
 8005c60:	f000 f81e 	bl	8005ca0 <fiprintf>
 8005c64:	f000 f89f 	bl	8005da6 <abort>
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <__assert_func+0x38>)
 8005c6a:	461c      	mov	r4, r3
 8005c6c:	e7f3      	b.n	8005c56 <__assert_func+0x12>
 8005c6e:	bf00      	nop
 8005c70:	2000000c 	.word	0x2000000c
 8005c74:	08006295 	.word	0x08006295
 8005c78:	080062a2 	.word	0x080062a2
 8005c7c:	080062d0 	.word	0x080062d0

08005c80 <_close_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	2300      	movs	r3, #0
 8005c84:	4d05      	ldr	r5, [pc, #20]	; (8005c9c <_close_r+0x1c>)
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	f7fb fed4 	bl	8001a38 <_close>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_close_r+0x1a>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_close_r+0x1a>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	200002bc 	.word	0x200002bc

08005ca0 <fiprintf>:
 8005ca0:	b40e      	push	{r1, r2, r3}
 8005ca2:	b503      	push	{r0, r1, lr}
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	ab03      	add	r3, sp, #12
 8005ca8:	4805      	ldr	r0, [pc, #20]	; (8005cc0 <fiprintf+0x20>)
 8005caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cae:	6800      	ldr	r0, [r0, #0]
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	f7ff fe31 	bl	8005918 <_vfiprintf_r>
 8005cb6:	b002      	add	sp, #8
 8005cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cbc:	b003      	add	sp, #12
 8005cbe:	4770      	bx	lr
 8005cc0:	2000000c 	.word	0x2000000c

08005cc4 <_fstat_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4d06      	ldr	r5, [pc, #24]	; (8005ce4 <_fstat_r+0x20>)
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	f7fb febc 	bl	8001a4e <_fstat>
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	d102      	bne.n	8005ce0 <_fstat_r+0x1c>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	b103      	cbz	r3, 8005ce0 <_fstat_r+0x1c>
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	bd38      	pop	{r3, r4, r5, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200002bc 	.word	0x200002bc

08005ce8 <_isatty_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	2300      	movs	r3, #0
 8005cec:	4d05      	ldr	r5, [pc, #20]	; (8005d04 <_isatty_r+0x1c>)
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fb feba 	bl	8001a6c <_isatty>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_isatty_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_isatty_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200002bc 	.word	0x200002bc

08005d08 <_lseek_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	2200      	movs	r2, #0
 8005d12:	4d05      	ldr	r5, [pc, #20]	; (8005d28 <_lseek_r+0x20>)
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fb feb2 	bl	8001a80 <_lseek>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_lseek_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_lseek_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200002bc 	.word	0x200002bc

08005d2c <__ascii_mbtowc>:
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	b901      	cbnz	r1, 8005d32 <__ascii_mbtowc+0x6>
 8005d30:	a901      	add	r1, sp, #4
 8005d32:	b142      	cbz	r2, 8005d46 <__ascii_mbtowc+0x1a>
 8005d34:	b14b      	cbz	r3, 8005d4a <__ascii_mbtowc+0x1e>
 8005d36:	7813      	ldrb	r3, [r2, #0]
 8005d38:	600b      	str	r3, [r1, #0]
 8005d3a:	7812      	ldrb	r2, [r2, #0]
 8005d3c:	1e10      	subs	r0, r2, #0
 8005d3e:	bf18      	it	ne
 8005d40:	2001      	movne	r0, #1
 8005d42:	b002      	add	sp, #8
 8005d44:	4770      	bx	lr
 8005d46:	4610      	mov	r0, r2
 8005d48:	e7fb      	b.n	8005d42 <__ascii_mbtowc+0x16>
 8005d4a:	f06f 0001 	mvn.w	r0, #1
 8005d4e:	e7f8      	b.n	8005d42 <__ascii_mbtowc+0x16>

08005d50 <__malloc_lock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <__malloc_lock+0x8>)
 8005d52:	f7ff b8bc 	b.w	8004ece <__retarget_lock_acquire_recursive>
 8005d56:	bf00      	nop
 8005d58:	200002b0 	.word	0x200002b0

08005d5c <__malloc_unlock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	; (8005d64 <__malloc_unlock+0x8>)
 8005d5e:	f7ff b8b7 	b.w	8004ed0 <__retarget_lock_release_recursive>
 8005d62:	bf00      	nop
 8005d64:	200002b0 	.word	0x200002b0

08005d68 <_read_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	2200      	movs	r2, #0
 8005d72:	4d05      	ldr	r5, [pc, #20]	; (8005d88 <_read_r+0x20>)
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fb fe25 	bl	80019c6 <_read>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_read_r+0x1e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_read_r+0x1e>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	200002bc 	.word	0x200002bc

08005d8c <__ascii_wctomb>:
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4608      	mov	r0, r1
 8005d90:	b141      	cbz	r1, 8005da4 <__ascii_wctomb+0x18>
 8005d92:	2aff      	cmp	r2, #255	; 0xff
 8005d94:	d904      	bls.n	8005da0 <__ascii_wctomb+0x14>
 8005d96:	228a      	movs	r2, #138	; 0x8a
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	4770      	bx	lr
 8005da0:	2001      	movs	r0, #1
 8005da2:	700a      	strb	r2, [r1, #0]
 8005da4:	4770      	bx	lr

08005da6 <abort>:
 8005da6:	2006      	movs	r0, #6
 8005da8:	b508      	push	{r3, lr}
 8005daa:	f000 f82b 	bl	8005e04 <raise>
 8005dae:	2001      	movs	r0, #1
 8005db0:	f7fb fdff 	bl	80019b2 <_exit>

08005db4 <_raise_r>:
 8005db4:	291f      	cmp	r1, #31
 8005db6:	b538      	push	{r3, r4, r5, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	460d      	mov	r5, r1
 8005dbc:	d904      	bls.n	8005dc8 <_raise_r+0x14>
 8005dbe:	2316      	movs	r3, #22
 8005dc0:	6003      	str	r3, [r0, #0]
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005dca:	b112      	cbz	r2, 8005dd2 <_raise_r+0x1e>
 8005dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dd0:	b94b      	cbnz	r3, 8005de6 <_raise_r+0x32>
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 f830 	bl	8005e38 <_getpid_r>
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4601      	mov	r1, r0
 8005ddc:	4620      	mov	r0, r4
 8005dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de2:	f000 b817 	b.w	8005e14 <_kill_r>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d00a      	beq.n	8005e00 <_raise_r+0x4c>
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	d103      	bne.n	8005df6 <_raise_r+0x42>
 8005dee:	2316      	movs	r3, #22
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	2001      	movs	r0, #1
 8005df4:	e7e7      	b.n	8005dc6 <_raise_r+0x12>
 8005df6:	2400      	movs	r4, #0
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dfe:	4798      	blx	r3
 8005e00:	2000      	movs	r0, #0
 8005e02:	e7e0      	b.n	8005dc6 <_raise_r+0x12>

08005e04 <raise>:
 8005e04:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <raise+0xc>)
 8005e06:	4601      	mov	r1, r0
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f7ff bfd3 	b.w	8005db4 <_raise_r>
 8005e0e:	bf00      	nop
 8005e10:	2000000c 	.word	0x2000000c

08005e14 <_kill_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	2300      	movs	r3, #0
 8005e18:	4d06      	ldr	r5, [pc, #24]	; (8005e34 <_kill_r+0x20>)
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	f7fb fdb6 	bl	8001992 <_kill>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d102      	bne.n	8005e30 <_kill_r+0x1c>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	b103      	cbz	r3, 8005e30 <_kill_r+0x1c>
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	200002bc 	.word	0x200002bc

08005e38 <_getpid_r>:
 8005e38:	f7fb bda4 	b.w	8001984 <_getpid>

08005e3c <_init>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr

08005e48 <_fini>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr
