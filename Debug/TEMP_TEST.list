
TEMP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08005e98  08005e98  00015e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800643c  0800643c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800643c  0800643c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800643c  0800643c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200001e0  08006620  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08006620  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a099  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d5  00000000  00000000  0002a29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  0002c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a9  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c346  00000000  00000000  00045b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b809  00000000  00000000  00051e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c0  00000000  00000000  000dd6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e7c 	.word	0x08005e7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005e7c 	.word	0x08005e7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <delay>:
int Search_ROM();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delay) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <delay+0x2c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay) {
 8000f54:	bf00      	nop
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <delay+0x2c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f9      	bhi.n	8000f56 <delay+0x12>

	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001fc 	.word	0x200001fc

08000f74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f7a:	f000 fe11 	bl	8001ba0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f7e:	f000 f8d1 	bl	8001124 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f82:	f000 f98f 	bl	80012a4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000f86:	f000 f963 	bl	8001250 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000f8a:	f000 f911 	bl	80011b0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000f8e:	4855      	ldr	r0, [pc, #340]	; (80010e4 <main+0x170>)
 8000f90:	f001 fd8e 	bl	8002ab0 <HAL_TIM_Base_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	printf("\n\n\n\n\n\nFrom TEMP Sensor Test\r\n");
 8000f94:	4854      	ldr	r0, [pc, #336]	; (80010e8 <main+0x174>)
 8000f96:	f002 febf 	bl	8003d18 <puts>

	last_discrepancy = 0;
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <main+0x178>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

	while (Search_ROM()) {
 8000fa0:	e036      	b.n	8001010 <main+0x9c>

		memcpy((uint8_t*) &ROM_id[count - 1], new_rom_id, sizeof(new_rom_id));
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <main+0x17c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4a52      	ldr	r2, [pc, #328]	; (80010f4 <main+0x180>)
 8000fac:	4413      	add	r3, r2
 8000fae:	4952      	ldr	r1, [pc, #328]	; (80010f8 <main+0x184>)
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	cb03      	ldmia	r3!, {r0, r1}
 8000fb6:	6010      	str	r0, [r2, #0]
 8000fb8:	6051      	str	r1, [r2, #4]
		printf("\n\n");
 8000fba:	4850      	ldr	r0, [pc, #320]	; (80010fc <main+0x188>)
 8000fbc:	f002 feac 	bl	8003d18 <puts>
		printf("Room id of the sensor=%d\n",count);
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <main+0x17c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	484e      	ldr	r0, [pc, #312]	; (8001100 <main+0x18c>)
 8000fc8:	f002 fe20 	bl	8003c0c <iprintf>
		for (int i = 0; i < 8; i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00f      	b.n	8000ff2 <main+0x7e>
			printf("0x%x ",((uint8_t*) &ROM_id[count - 1])[i]);
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <main+0x17c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <main+0x180>)
 8000fdc:	441a      	add	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4847      	ldr	r0, [pc, #284]	; (8001104 <main+0x190>)
 8000fe8:	f002 fe10 	bl	8003c0c <iprintf>
		for (int i = 0; i < 8; i++) {
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b07      	cmp	r3, #7
 8000ff6:	ddec      	ble.n	8000fd2 <main+0x5e>
		}
		printf("\n\n");
 8000ff8:	4840      	ldr	r0, [pc, #256]	; (80010fc <main+0x188>)
 8000ffa:	f002 fe8d 	bl	8003d18 <puts>

		if (FLAG_DONE == 1) {
 8000ffe:	4b42      	ldr	r3, [pc, #264]	; (8001108 <main+0x194>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d00a      	beq.n	800101c <main+0xa8>
			break;
		}
		memset(new_rom_id, 0, sizeof(new_rom_id));
 8001006:	2208      	movs	r2, #8
 8001008:	2100      	movs	r1, #0
 800100a:	483b      	ldr	r0, [pc, #236]	; (80010f8 <main+0x184>)
 800100c:	f002 f996 	bl	800333c <memset>
	while (Search_ROM()) {
 8001010:	f000 fa8e 	bl	8001530 <Search_ROM>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1c3      	bne.n	8000fa2 <main+0x2e>
 800101a:	e000      	b.n	800101e <main+0xaa>
			break;
 800101c:	bf00      	nop

	}

	printf("Number of devices on bus = %u\n", count);
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <main+0x17c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	4839      	ldr	r0, [pc, #228]	; (800110c <main+0x198>)
 8001026:	f002 fdf1 	bl	8003c0c <iprintf>
//			printf("0x%x ", new_rom_id[i]);
//		}
//		printf("}\n");
//	}

	Presence = DS18B20_Start();
 800102a:	f000 f9b1 	bl	8001390 <DS18B20_Start>
 800102e:	4603      	mov	r3, r0
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <main+0x19c>)
 8001032:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <main+0x19c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d002      	beq.n	8001042 <main+0xce>
		printf("Presence not detected\n");
 800103c:	4835      	ldr	r0, [pc, #212]	; (8001114 <main+0x1a0>)
 800103e:	f002 fe6b 	bl	8003d18 <puts>
	}

	Match_ROM(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 fb88 	bl	8001758 <Match_ROM>

	DS18B20_Write(0x44, 0);		// Convert T
 8001048:	2100      	movs	r1, #0
 800104a:	2044      	movs	r0, #68	; 0x44
 800104c:	f000 f9d2 	bl	80013f4 <DS18B20_Write>
	Presence = DS18B20_Start();
 8001050:	f000 f99e 	bl	8001390 <DS18B20_Start>
 8001054:	4603      	mov	r3, r0
 8001056:	4a2e      	ldr	r2, [pc, #184]	; (8001110 <main+0x19c>)
 8001058:	6013      	str	r3, [r2, #0]
	Match_ROM(0);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 fb7c 	bl	8001758 <Match_ROM>

	DS18B20_Write(0xBE, 0);		// Read Scratch pad
 8001060:	2100      	movs	r1, #0
 8001062:	20be      	movs	r0, #190	; 0xbe
 8001064:	f000 f9c6 	bl	80013f4 <DS18B20_Write>
	uint8_t data[9] = { 0 };
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	711a      	strb	r2, [r3, #4]

	for (int i = 0; i < 9; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e00c      	b.n	8001096 <main+0x122>
		data[i] = DS18B20_Read(0);
 800107c:	2000      	movs	r0, #0
 800107e:	f000 fa0d 	bl	800149c <DS18B20_Read>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	1d3a      	adds	r2, r7, #4
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4413      	add	r3, r2
 800108c:	460a      	mov	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++) {
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	3301      	adds	r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b08      	cmp	r3, #8
 800109a:	ddef      	ble.n	800107c <main+0x108>
	}

	TEMP = (data[1] << 8) | data[0];
 800109c:	797b      	ldrb	r3, [r7, #5]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	793b      	ldrb	r3, [r7, #4]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <main+0x1a4>)
 80010ae:	801a      	strh	r2, [r3, #0]
	Temperature = (float) TEMP / 16;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <main+0x1a4>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fd9d 	bl	8000bf4 <__aeabi_ui2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fea3 	bl	8000e0c <__aeabi_fdiv>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <main+0x1a8>)
 80010cc:	601a      	str	r2, [r3, #0]

	printf("Temperature = %f \n", Temperature);
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <main+0x1a8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9a8 	bl	8000428 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <main+0x1ac>)
 80010de:	f002 fd95 	bl	8003c0c <iprintf>

	while (1) {
 80010e2:	e7fe      	b.n	80010e2 <main+0x16e>
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	08005e98 	.word	0x08005e98
 80010ec:	200002f5 	.word	0x200002f5
 80010f0:	200002f7 	.word	0x200002f7
 80010f4:	20000298 	.word	0x20000298
 80010f8:	200002e8 	.word	0x200002e8
 80010fc:	08005eb8 	.word	0x08005eb8
 8001100:	08005ebc 	.word	0x08005ebc
 8001104:	08005ed8 	.word	0x08005ed8
 8001108:	200002f6 	.word	0x200002f6
 800110c:	08005ee0 	.word	0x08005ee0
 8001110:	20000288 	.word	0x20000288
 8001114:	08005f00 	.word	0x08005f00
 8001118:	20000290 	.word	0x20000290
 800111c:	2000028c 	.word	0x2000028c
 8001120:	08005f18 	.word	0x08005f18

08001124 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b090      	sub	sp, #64	; 0x40
 8001128:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f902 	bl	800333c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001162:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4618      	mov	r0, r3
 800116e:	f001 f835 	bl	80021dc <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x58>
		Error_Handler();
 8001178:	f000 fb4a 	bl	8001810 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 faa2 	bl	80026e0 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x82>
		Error_Handler();
 80011a2:	f000 fb35 	bl	8001810 <Error_Handler>
	}
}
 80011a6:	bf00      	nop
 80011a8:	3740      	adds	r7, #64	; 0x40
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_TIM1_Init+0x98>)
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <MX_TIM1_Init+0x9c>)
 80011d0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_TIM1_Init+0x98>)
 80011d4:	2247      	movs	r2, #71	; 0x47
 80011d6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_TIM1_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_TIM1_Init+0x98>)
 80011e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_TIM1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_TIM1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_TIM1_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011f8:	4813      	ldr	r0, [pc, #76]	; (8001248 <MX_TIM1_Init+0x98>)
 80011fa:	f001 fc09 	bl	8002a10 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x58>
		Error_Handler();
 8001204:	f000 fb04 	bl	8001810 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_TIM1_Init+0x98>)
 8001216:	f001 fc95 	bl	8002b44 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x74>
		Error_Handler();
 8001220:	f000 faf6 	bl	8001810 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_TIM1_Init+0x98>)
 8001232:	f001 fe43 	bl	8002ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800123c:	f000 fae8 	bl	8001810 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001fc 	.word	0x200001fc
 800124c:	40012c00 	.word	0x40012c00

08001250 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_USART1_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001288:	f001 fe76 	bl	8002f78 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001292:	f000 fabd 	bl	8001810 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000244 	.word	0x20000244
 80012a0:	40013800 	.word	0x40013800

080012a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a28      	ldr	r2, [pc, #160]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_GPIO_Init+0xbc>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_GPIO_Init+0xbc>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a16      	ldr	r2, [pc, #88]	; (8001360 <MX_GPIO_Init+0xbc>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_GPIO_Init+0xbc>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_GPIO_Init+0xc0>)
 8001320:	f000 ff43 	bl	80021aa <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2302      	movs	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <MX_GPIO_Init+0xc0>)
 800133e:	f000 fd99 	bl	8001e74 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001346:	2303      	movs	r3, #3
 8001348:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_GPIO_Init+0xc4>)
 8001352:	f000 fd8f 	bl	8001e74 <HAL_GPIO_Init>

}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	40011000 	.word	0x40011000
 8001368:	40010c00 	.word	0x40010c00

0800136c <__io_putchar>:

int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001374:	1d39      	adds	r1, r7, #4
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	2201      	movs	r2, #1
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <__io_putchar+0x20>)
 800137e:	f001 fe48 	bl	8003012 <HAL_UART_Transmit>
	return ch;
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000244 	.word	0x20000244

08001390 <DS18B20_Start>:

int DS18B20_Start(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	int Response = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800139a:	2102      	movs	r1, #2
 800139c:	4814      	ldr	r0, [pc, #80]	; (80013f0 <DS18B20_Start+0x60>)
 800139e:	f000 f9fd 	bl	800179c <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin low
 80013a2:	2200      	movs	r2, #0
 80013a4:	2102      	movs	r1, #2
 80013a6:	4812      	ldr	r0, [pc, #72]	; (80013f0 <DS18B20_Start+0x60>)
 80013a8:	f000 feff 	bl	80021aa <HAL_GPIO_WritePin>
	delay(480);   // delay according to data sheet
 80013ac:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80013b0:	f7ff fdc8 	bl	8000f44 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80013b4:	2102      	movs	r1, #2
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <DS18B20_Start+0x60>)
 80013b8:	f000 fa0d 	bl	80017d6 <Set_Pin_Input>
	delay(80);    // delay according to data sheet
 80013bc:	2050      	movs	r0, #80	; 0x50
 80013be:	f7ff fdc1 	bl	8000f44 <delay>

	if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 80013c2:	2102      	movs	r1, #2
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <DS18B20_Start+0x60>)
 80013c6:	f000 fed9 	bl	800217c <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <DS18B20_Start+0x46>
		Response = 1; // if the pin is low i.e the presence pulse is detected
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	e002      	b.n	80013dc <DS18B20_Start+0x4c>
	else
		Response = -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	607b      	str	r3, [r7, #4]

	delay(400); // Waiting to complete the response cycle
 80013dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013e0:	f7ff fdb0 	bl	8000f44 <delay>

	return Response;
 80013e4:	687b      	ldr	r3, [r7, #4]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <DS18B20_Write>:

void DS18B20_Write(uint8_t data, uint8_t bit) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	71bb      	strb	r3, [r7, #6]
	int loop = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
	if (bit == 1) {
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <DS18B20_Write+0x20>
		loop = 1; // Bit write
 800140e:	2301      	movs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e001      	b.n	8001418 <DS18B20_Write+0x24>
	} else {
		loop = 8; // Byte write
 8001414:	2308      	movs	r3, #8
 8001416:	60fb      	str	r3, [r7, #12]
	}
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001418:	2102      	movs	r1, #2
 800141a:	481f      	ldr	r0, [pc, #124]	; (8001498 <DS18B20_Write+0xa4>)
 800141c:	f000 f9be 	bl	800179c <Set_Pin_Output>

	for (int i = 0; i < loop; i++) {
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	e02e      	b.n	8001484 <DS18B20_Write+0x90>

		if ((data & (1 << i)) != 0)  // if the bit is high
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	fa42 f303 	asr.w	r3, r2, r3
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d013      	beq.n	800145e <DS18B20_Write+0x6a>
				{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001436:	2102      	movs	r1, #2
 8001438:	4817      	ldr	r0, [pc, #92]	; (8001498 <DS18B20_Write+0xa4>)
 800143a:	f000 f9af 	bl	800179c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 800143e:	2200      	movs	r2, #0
 8001440:	2102      	movs	r1, #2
 8001442:	4815      	ldr	r0, [pc, #84]	; (8001498 <DS18B20_Write+0xa4>)
 8001444:	f000 feb1 	bl	80021aa <HAL_GPIO_WritePin>
			delay(1);  // wait for 1 us
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fd7b 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800144e:	2102      	movs	r1, #2
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <DS18B20_Write+0xa4>)
 8001452:	f000 f9c0 	bl	80017d6 <Set_Pin_Input>
			delay(60);  // wait for 60 us
 8001456:	203c      	movs	r0, #60	; 0x3c
 8001458:	f7ff fd74 	bl	8000f44 <delay>
 800145c:	e00f      	b.n	800147e <DS18B20_Write+0x8a>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800145e:	2102      	movs	r1, #2
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <DS18B20_Write+0xa4>)
 8001462:	f000 f99b 	bl	800179c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	480b      	ldr	r0, [pc, #44]	; (8001498 <DS18B20_Write+0xa4>)
 800146c:	f000 fe9d 	bl	80021aa <HAL_GPIO_WritePin>
			delay(60);  // wait for 60 us
 8001470:	203c      	movs	r0, #60	; 0x3c
 8001472:	f7ff fd67 	bl	8000f44 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001476:	2102      	movs	r1, #2
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <DS18B20_Write+0xa4>)
 800147a:	f000 f9ac 	bl	80017d6 <Set_Pin_Input>
	for (int i = 0; i < loop; i++) {
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	3301      	adds	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbcc      	blt.n	8001426 <DS18B20_Write+0x32>
		}
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40010c00 	.word	0x40010c00

0800149c <DS18B20_Read>:

uint8_t DS18B20_Read(uint8_t bit) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	int loop = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
	if (bit == 1) {  // Bit read
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d102      	bne.n	80014b6 <DS18B20_Read+0x1a>
		loop = 1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e001      	b.n	80014ba <DS18B20_Read+0x1e>
	} else {
		loop = 8; // Byte read
 80014b6:	2308      	movs	r3, #8
 80014b8:	617b      	str	r3, [r7, #20]
	}

	uint8_t value = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	74fb      	strb	r3, [r7, #19]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80014be:	2102      	movs	r1, #2
 80014c0:	481a      	ldr	r0, [pc, #104]	; (800152c <DS18B20_Read+0x90>)
 80014c2:	f000 f988 	bl	80017d6 <Set_Pin_Input>

	for (int i = 0; i < loop; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e026      	b.n	800151a <DS18B20_Read+0x7e>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80014cc:	2102      	movs	r1, #2
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <DS18B20_Read+0x90>)
 80014d0:	f000 f964 	bl	800179c <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the data pin LOW
 80014d4:	2200      	movs	r2, #0
 80014d6:	2102      	movs	r1, #2
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <DS18B20_Read+0x90>)
 80014da:	f000 fe66 	bl	80021aa <HAL_GPIO_WritePin>
		delay(5);  // wait for 5 us
 80014de:	2005      	movs	r0, #5
 80014e0:	f7ff fd30 	bl	8000f44 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80014e4:	2102      	movs	r1, #2
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <DS18B20_Read+0x90>)
 80014e8:	f000 f975 	bl	80017d6 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80014ec:	2102      	movs	r1, #2
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <DS18B20_Read+0x90>)
 80014f0:	f000 fe44 	bl	800217c <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <DS18B20_Read+0x72>
				{
			value |= 1 << i;  // read = 1
 80014fa:	2201      	movs	r2, #1
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	b25a      	sxtb	r2, r3
 8001504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001508:	4313      	orrs	r3, r2
 800150a:	b25b      	sxtb	r3, r3
 800150c:	74fb      	strb	r3, [r7, #19]
		}
		delay(60);  // wait for 60 us
 800150e:	203c      	movs	r0, #60	; 0x3c
 8001510:	f7ff fd18 	bl	8000f44 <delay>
	for (int i = 0; i < loop; i++) {
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	429a      	cmp	r2, r3
 8001520:	dbd4      	blt.n	80014cc <DS18B20_Read+0x30>
	}
	return value;
 8001522:	7cfb      	ldrb	r3, [r7, #19]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010c00 	.word	0x40010c00

08001530 <Search_ROM>:

int Search_ROM() {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

	Presence = DS18B20_Start();
 8001534:	f7ff ff2c 	bl	8001390 <DS18B20_Start>
 8001538:	4603      	mov	r3, r0
 800153a:	4a72      	ldr	r2, [pc, #456]	; (8001704 <Search_ROM+0x1d4>)
 800153c:	6013      	str	r3, [r2, #0]
	if (Presence != 1) {
 800153e:	4b71      	ldr	r3, [pc, #452]	; (8001704 <Search_ROM+0x1d4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d004      	beq.n	8001550 <Search_ROM+0x20>
		printf("Presence not detected\n");
 8001546:	4870      	ldr	r0, [pc, #448]	; (8001708 <Search_ROM+0x1d8>)
 8001548:	f002 fbe6 	bl	8003d18 <puts>
		return 0;
 800154c:	2300      	movs	r3, #0
 800154e:	e0d6      	b.n	80016fe <Search_ROM+0x1ce>
	}

	if (FLAG_DONE == SET) {
 8001550:	4b6e      	ldr	r3, [pc, #440]	; (800170c <Search_ROM+0x1dc>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <Search_ROM+0x2c>
		return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e0d0      	b.n	80016fe <Search_ROM+0x1ce>
	}
	HAL_Delay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f000 fb81 	bl	8001c64 <HAL_Delay>

	bit_number = 1;
 8001562:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <Search_ROM+0x1e0>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
	counts = 0;
 8001568:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <Search_ROM+0x1e4>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
//	last_zero = 0;
	discrepancy_marker = 0;
 800156e:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <Search_ROM+0x1e8>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	DS18B20_Write(0xF0, 0);  // Send Search ROM command
 8001574:	2100      	movs	r1, #0
 8001576:	20f0      	movs	r0, #240	; 0xf0
 8001578:	f7ff ff3c 	bl	80013f4 <DS18B20_Write>
	bit_counter = 0;
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <Search_ROM+0x1ec>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]

	do {

		bit_id = DS18B20_Read(1);				// read LSB bit value
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff ff8a 	bl	800149c <DS18B20_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b64      	ldr	r3, [pc, #400]	; (8001720 <Search_ROM+0x1f0>)
 800158e:	701a      	strb	r2, [r3, #0]
		bit_id_comp = DS18B20_Read(1);  // read LSB bit value complement
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ff83 	bl	800149c <DS18B20_Read>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b62      	ldr	r3, [pc, #392]	; (8001724 <Search_ROM+0x1f4>)
 800159c:	701a      	strb	r2, [r3, #0]

		if (bit_id && bit_id_comp) { // 11 is the case for false value indicating no more devices
 800159e:	4b60      	ldr	r3, [pc, #384]	; (8001720 <Search_ROM+0x1f0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <Search_ROM+0x88>
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <Search_ROM+0x1f4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <Search_ROM+0x88>
			printf("No more devices\n");
 80015ae:	485e      	ldr	r0, [pc, #376]	; (8001728 <Search_ROM+0x1f8>)
 80015b0:	f002 fbb2 	bl	8003d18 <puts>
			return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e0a2      	b.n	80016fe <Search_ROM+0x1ce>
		} else {
			if (bit_id == bit_id_comp) // 00 indicates both 0 and 1 bit value at LSB of available devices
 80015b8:	4b59      	ldr	r3, [pc, #356]	; (8001720 <Search_ROM+0x1f0>)
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <Search_ROM+0x1f4>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d13e      	bne.n	8001642 <Search_ROM+0x112>
					{
				printf("discrepancy bit number=%d\n", bit_number);
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <Search_ROM+0x1e0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4858      	ldr	r0, [pc, #352]	; (800172c <Search_ROM+0x1fc>)
 80015cc:	f002 fb1e 	bl	8003c0c <iprintf>
				if (bit_number == last_discrepancy) {
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <Search_ROM+0x1e0>)
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	4b56      	ldr	r3, [pc, #344]	; (8001730 <Search_ROM+0x200>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d106      	bne.n	80015ea <Search_ROM+0xba>
					search_value = 1;
 80015dc:	4b55      	ldr	r3, [pc, #340]	; (8001734 <Search_ROM+0x204>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
					printf("Search value = 1\n");
 80015e2:	4855      	ldr	r0, [pc, #340]	; (8001738 <Search_ROM+0x208>)
 80015e4:	f002 fb98 	bl	8003d18 <puts>
 80015e8:	e02f      	b.n	800164a <Search_ROM+0x11a>
				} else {
					if (bit_number > last_discrepancy) {
 80015ea:	4b49      	ldr	r3, [pc, #292]	; (8001710 <Search_ROM+0x1e0>)
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b50      	ldr	r3, [pc, #320]	; (8001730 <Search_ROM+0x200>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d910      	bls.n	8001618 <Search_ROM+0xe8>
						printf("Search value set to 0\n");
 80015f6:	4851      	ldr	r0, [pc, #324]	; (800173c <Search_ROM+0x20c>)
 80015f8:	f002 fb8e 	bl	8003d18 <puts>
						search_value = 0;
 80015fc:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <Search_ROM+0x204>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
						discrepancy_marker = bit_number;
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <Search_ROM+0x1e0>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <Search_ROM+0x1e8>)
 8001608:	701a      	strb	r2, [r3, #0]
						printf("discrepancy marker = %d\n", bit_number);
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <Search_ROM+0x1e0>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	484b      	ldr	r0, [pc, #300]	; (8001740 <Search_ROM+0x210>)
 8001612:	f002 fafb 	bl	8003c0c <iprintf>
 8001616:	e018      	b.n	800164a <Search_ROM+0x11a>
//						discrepancy_marker = bit_number;
					} else {
						printf("search value for else case = %d\n",
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <Search_ROM+0x204>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	4849      	ldr	r0, [pc, #292]	; (8001744 <Search_ROM+0x214>)
 8001620:	f002 faf4 	bl	8003c0c <iprintf>
								search_value);
						if (search_value == 0) {
 8001624:	4b43      	ldr	r3, [pc, #268]	; (8001734 <Search_ROM+0x204>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10e      	bne.n	800164a <Search_ROM+0x11a>
							discrepancy_marker = bit_number;
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <Search_ROM+0x1e0>)
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <Search_ROM+0x1e8>)
 8001632:	701a      	strb	r2, [r3, #0]
							printf("discrepancy marker = %d\n", bit_number);
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <Search_ROM+0x1e0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4841      	ldr	r0, [pc, #260]	; (8001740 <Search_ROM+0x210>)
 800163c:	f002 fae6 	bl	8003c0c <iprintf>
 8001640:	e003      	b.n	800164a <Search_ROM+0x11a>

					}
				}

			} else { // this indicates same 0 or 1 value at LSB of available devices
				search_value = bit_id;   // setting either 0 or 1 search
 8001642:	4b37      	ldr	r3, [pc, #220]	; (8001720 <Search_ROM+0x1f0>)
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <Search_ROM+0x204>)
 8001648:	701a      	strb	r2, [r3, #0]
			}
//			printf("%d\n", search_value);
			DS18B20_Write(search_value, 1);	// Selecting the devices having ongoing-LSB value as search value (0 or 1)
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <Search_ROM+0x204>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fecf 	bl	80013f4 <DS18B20_Write>
			new_rom_id[counts] |= search_value << bit_counter;
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <Search_ROM+0x1e4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <Search_ROM+0x218>)
 800165e:	5c9b      	ldrb	r3, [r3, r2]
 8001660:	b25a      	sxtb	r2, r3
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <Search_ROM+0x204>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <Search_ROM+0x1ec>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b259      	sxtb	r1, r3
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <Search_ROM+0x1e4>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	b2c9      	uxtb	r1, r1
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <Search_ROM+0x218>)
 8001680:	5499      	strb	r1, [r3, r2]
//				new_rom_id[counts] |= search_value << bit_counter;
//			}else if(search_value==0){
//				new_rom_id[counts] |= search_value << bit_counter;
//			}

			if (bit_number % 8 == 0) {
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <Search_ROM+0x1e0>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <Search_ROM+0x16c>
				counts++;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <Search_ROM+0x1e4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <Search_ROM+0x1e4>)
 800169a:	701a      	strb	r2, [r3, #0]

			}
			bit_counter++;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <Search_ROM+0x1ec>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <Search_ROM+0x1ec>)
 80016a6:	701a      	strb	r2, [r3, #0]
			if (bit_counter >= 8) {
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <Search_ROM+0x1ec>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	d902      	bls.n	80016b6 <Search_ROM+0x186>
				bit_counter = 0;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <Search_ROM+0x1ec>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
			}

		}

		bit_number++;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <Search_ROM+0x1e0>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <Search_ROM+0x1e0>)
 80016c0:	701a      	strb	r2, [r3, #0]
//
//		printf("bit counter = %d\n", bit_counter);
//		printf("counts = %d\n", counts);
//		printf("bit number = %d\n", bit_number);

	} while (bit_number < 65);
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <Search_ROM+0x1e0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b40      	cmp	r3, #64	; 0x40
 80016c8:	f67f af5b 	bls.w	8001582 <Search_ROM+0x52>

	last_discrepancy = discrepancy_marker;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <Search_ROM+0x1e8>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <Search_ROM+0x200>)
 80016d2:	701a      	strb	r2, [r3, #0]

	if (last_discrepancy == 0) {
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <Search_ROM+0x200>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d106      	bne.n	80016ea <Search_ROM+0x1ba>
		FLAG_DONE = SET;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <Search_ROM+0x1dc>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
		printf("Done Flag is SET\n");
 80016e2:	481a      	ldr	r0, [pc, #104]	; (800174c <Search_ROM+0x21c>)
 80016e4:	f002 fb18 	bl	8003d18 <puts>
 80016e8:	e002      	b.n	80016f0 <Search_ROM+0x1c0>
	} else {
		printf("Next cycle\n");
 80016ea:	4819      	ldr	r0, [pc, #100]	; (8001750 <Search_ROM+0x220>)
 80016ec:	f002 fb14 	bl	8003d18 <puts>
	}
	count = count + 1;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <Search_ROM+0x224>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <Search_ROM+0x224>)
 80016fa:	701a      	strb	r2, [r3, #0]
//	printf("count on first increment=%d\n", count);
//	count =count+1;
//	device_number=device_number+1;
//	printf("Count on last =%d\n",device_number);
//	printf(" main while run\n");
	return 1;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000288 	.word	0x20000288
 8001708:	08005f00 	.word	0x08005f00
 800170c:	200002f6 	.word	0x200002f6
 8001710:	200002f3 	.word	0x200002f3
 8001714:	200002f8 	.word	0x200002f8
 8001718:	200002f4 	.word	0x200002f4
 800171c:	200002f9 	.word	0x200002f9
 8001720:	200002f0 	.word	0x200002f0
 8001724:	200002f1 	.word	0x200002f1
 8001728:	08005f2c 	.word	0x08005f2c
 800172c:	08005f3c 	.word	0x08005f3c
 8001730:	200002f5 	.word	0x200002f5
 8001734:	200002f2 	.word	0x200002f2
 8001738:	08005f58 	.word	0x08005f58
 800173c:	08005f6c 	.word	0x08005f6c
 8001740:	08005f84 	.word	0x08005f84
 8001744:	08005fa0 	.word	0x08005fa0
 8001748:	200002e8 	.word	0x200002e8
 800174c:	08005fc4 	.word	0x08005fc4
 8001750:	08005fd8 	.word	0x08005fd8
 8001754:	200002f7 	.word	0x200002f7

08001758 <Match_ROM>:

void Match_ROM(int device) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

	DS18B20_Write(0x55, 0);
 8001760:	2100      	movs	r1, #0
 8001762:	2055      	movs	r0, #85	; 0x55
 8001764:	f7ff fe46 	bl	80013f4 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e00c      	b.n	8001788 <Match_ROM+0x30>
		DS18B20_Write((new_rom_id)[i + device * 8], 0);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	00da      	lsls	r2, r3, #3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <Match_ROM+0x40>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fe39 	bl	80013f4 <DS18B20_Write>
	for (int i = 0; i < 8; i++) {
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3301      	adds	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b07      	cmp	r3, #7
 800178c:	ddef      	ble.n	800176e <Match_ROM+0x16>
	}

}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002e8 	.word	0x200002e8

0800179c <Set_Pin_Output>:
//	value = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
//	printf("value = %d\n", value);
//
//	return value;
//}
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fb53 	bl	8001e74 <HAL_GPIO_Init>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fb36 	bl	8001e74 <HAL_GPIO_Init>
}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("From the error handler\n");
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <Error_Handler+0x10>)
 8001816:	f002 fa7f 	bl	8003d18 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181a:	b672      	cpsid	i
}
 800181c:	bf00      	nop
	__disable_irq();
	while (1) {
 800181e:	e7fe      	b.n	800181e <Error_Handler+0xe>
 8001820:	08005fe4 	.word	0x08005fe4

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_MspInit+0x5c>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_MspInit+0x5c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6193      	str	r3, [r2, #24]
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_MspInit+0x5c>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_MspInit+0x5c>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_MspInit+0x5c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_MspInit+0x5c>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_MspInit+0x60>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_MspInit+0x60>)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000

08001888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_TIM_Base_MspInit+0x34>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10b      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_TIM_Base_MspInit+0x38>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_TIM_Base_MspInit+0x38>)
 80018a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a4:	6193      	str	r3, [r2, #24]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_TIM_Base_MspInit+0x38>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40012c00 	.word	0x40012c00
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <HAL_UART_MspInit+0x8c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d131      	bne.n	8001948 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_MspInit+0x90>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_UART_MspInit+0x90>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_UART_MspInit+0x90>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <HAL_UART_MspInit+0x94>)
 800192a:	f000 faa3 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_UART_MspInit+0x94>)
 8001944:	f000 fa96 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40013800 	.word	0x40013800
 8001954:	40021000 	.word	0x40021000
 8001958:	40010800 	.word	0x40010800

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	printf("From NMI Handler\n");
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <NMI_Handler+0xc>)
 8001962:	f002 f9d9 	bl	8003d18 <puts>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001966:	e7fe      	b.n	8001966 <NMI_Handler+0xa>
 8001968:	08005ffc 	.word	0x08005ffc

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Hard fault handler\n");
 8001970:	4801      	ldr	r0, [pc, #4]	; (8001978 <HardFault_Handler+0xc>)
 8001972:	f002 f9d1 	bl	8003d18 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0xa>
 8001978:	08006010 	.word	0x08006010

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemMange Handler\n");
 8001980:	4801      	ldr	r0, [pc, #4]	; (8001988 <MemManage_Handler+0xc>)
 8001982:	f002 f9c9 	bl	8003d18 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <MemManage_Handler+0xa>
 8001988:	08006024 	.word	0x08006024

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <BusFault_Handler+0x4>

08001992 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <UsageFault_Handler+0x4>

08001998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 f934 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <_kill>:

int _kill(int pid, int sig)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e0:	f001 fc82 	bl	80032e8 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2216      	movs	r2, #22
 80019e8:	601a      	str	r2, [r3, #0]
	return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_exit>:

void _exit (int status)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffe7 	bl	80019d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a08:	e7fe      	b.n	8001a08 <_exit+0x12>

08001a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e00a      	b.n	8001a32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1c:	f3af 8000 	nop.w
 8001a20:	4601      	mov	r1, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	b2ca      	uxtb	r2, r1
 8001a2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf0      	blt.n	8001a1c <_read+0x12>
	}

return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e009      	b.n	8001a6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	60ba      	str	r2, [r7, #8]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fc84 	bl	800136c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbf1      	blt.n	8001a56 <_write+0x12>
	}
	return len;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_close>:

int _close(int file)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa2:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <_isatty>:

int _isatty(int file)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f001 fbec 	bl	80032e8 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20005000 	.word	0x20005000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200002fc 	.word	0x200002fc
 8001b44:	20000318 	.word	0x20000318

08001b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	; (8001b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	; (8001b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	; (8001b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b7a:	f7ff ffe5 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f001 fbb9 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b82:	f7ff f9f7 	bl	8000f74 <main>
  bx lr
 8001b86:	4770      	bx	lr
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b90:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 8001b94:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b98:	20000314 	.word	0x20000314

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_Init+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_Init+0x28>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f92b 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff fe32 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f935 	bl	8001e5a <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 f90b 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_IncTick+0x1c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x20>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <HAL_IncTick+0x20>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000300 	.word	0x20000300

08001c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <HAL_GetTick+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000300 	.word	0x20000300

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffe0 	bl	8001c50 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff90 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff49 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff5e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff90 	bl	8001d64 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5f 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffb0 	bl	8001dc8 <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b08b      	sub	sp, #44	; 0x2c
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e169      	b.n	800215c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8158 	bne.w	8002156 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a9a      	ldr	r2, [pc, #616]	; (8002114 <HAL_GPIO_Init+0x2a0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d05e      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001eb0:	4a98      	ldr	r2, [pc, #608]	; (8002114 <HAL_GPIO_Init+0x2a0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d875      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eb6:	4a98      	ldr	r2, [pc, #608]	; (8002118 <HAL_GPIO_Init+0x2a4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d058      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ebc:	4a96      	ldr	r2, [pc, #600]	; (8002118 <HAL_GPIO_Init+0x2a4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d86f      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ec2:	4a96      	ldr	r2, [pc, #600]	; (800211c <HAL_GPIO_Init+0x2a8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d052      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ec8:	4a94      	ldr	r2, [pc, #592]	; (800211c <HAL_GPIO_Init+0x2a8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d869      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ece:	4a94      	ldr	r2, [pc, #592]	; (8002120 <HAL_GPIO_Init+0x2ac>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04c      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ed4:	4a92      	ldr	r2, [pc, #584]	; (8002120 <HAL_GPIO_Init+0x2ac>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d863      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eda:	4a92      	ldr	r2, [pc, #584]	; (8002124 <HAL_GPIO_Init+0x2b0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d046      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ee0:	4a90      	ldr	r2, [pc, #576]	; (8002124 <HAL_GPIO_Init+0x2b0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d85d      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d82a      	bhi.n	8001f40 <HAL_GPIO_Init+0xcc>
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d859      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eee:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <HAL_GPIO_Init+0x80>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f6f 	.word	0x08001f6f
 8001ef8:	08001f49 	.word	0x08001f49
 8001efc:	08001f5b 	.word	0x08001f5b
 8001f00:	08001f9d 	.word	0x08001f9d
 8001f04:	08001fa3 	.word	0x08001fa3
 8001f08:	08001fa3 	.word	0x08001fa3
 8001f0c:	08001fa3 	.word	0x08001fa3
 8001f10:	08001fa3 	.word	0x08001fa3
 8001f14:	08001fa3 	.word	0x08001fa3
 8001f18:	08001fa3 	.word	0x08001fa3
 8001f1c:	08001fa3 	.word	0x08001fa3
 8001f20:	08001fa3 	.word	0x08001fa3
 8001f24:	08001fa3 	.word	0x08001fa3
 8001f28:	08001fa3 	.word	0x08001fa3
 8001f2c:	08001fa3 	.word	0x08001fa3
 8001f30:	08001fa3 	.word	0x08001fa3
 8001f34:	08001fa3 	.word	0x08001fa3
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f65 	.word	0x08001f65
 8001f40:	4a79      	ldr	r2, [pc, #484]	; (8002128 <HAL_GPIO_Init+0x2b4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f46:	e02c      	b.n	8001fa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e029      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	3304      	adds	r3, #4
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e024      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	3308      	adds	r3, #8
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e01f      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e01a      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f76:	2304      	movs	r3, #4
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e013      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	611a      	str	r2, [r3, #16]
          break;
 8001f8e:	e009      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	615a      	str	r2, [r3, #20]
          break;
 8001f9a:	e003      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          break;
 8001fa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d801      	bhi.n	8001fae <HAL_GPIO_Init+0x13a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_Init+0x13e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d802      	bhi.n	8001fc0 <HAL_GPIO_Init+0x14c>
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x152>
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	3b08      	subs	r3, #8
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	210f      	movs	r1, #15
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80b1 	beq.w	8002156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff4:	4b4d      	ldr	r3, [pc, #308]	; (800212c <HAL_GPIO_Init+0x2b8>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a4c      	ldr	r2, [pc, #304]	; (800212c <HAL_GPIO_Init+0x2b8>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b4a      	ldr	r3, [pc, #296]	; (800212c <HAL_GPIO_Init+0x2b8>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800200c:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_GPIO_Init+0x2bc>)
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a40      	ldr	r2, [pc, #256]	; (8002134 <HAL_GPIO_Init+0x2c0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_GPIO_Init+0x1ec>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3f      	ldr	r2, [pc, #252]	; (8002138 <HAL_GPIO_Init+0x2c4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x1e8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3e      	ldr	r2, [pc, #248]	; (800213c <HAL_GPIO_Init+0x2c8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x1e4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <HAL_GPIO_Init+0x2cc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x1e0>
 8002050:	2303      	movs	r3, #3
 8002052:	e006      	b.n	8002062 <HAL_GPIO_Init+0x1ee>
 8002054:	2304      	movs	r3, #4
 8002056:	e004      	b.n	8002062 <HAL_GPIO_Init+0x1ee>
 8002058:	2302      	movs	r3, #2
 800205a:	e002      	b.n	8002062 <HAL_GPIO_Init+0x1ee>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_GPIO_Init+0x1ee>
 8002060:	2300      	movs	r3, #0
 8002062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002064:	f002 0203 	and.w	r2, r2, #3
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	4093      	lsls	r3, r2
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002072:	492f      	ldr	r1, [pc, #188]	; (8002130 <HAL_GPIO_Init+0x2bc>)
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	492c      	ldr	r1, [pc, #176]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4928      	ldr	r1, [pc, #160]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4922      	ldr	r1, [pc, #136]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	491e      	ldr	r1, [pc, #120]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4918      	ldr	r1, [pc, #96]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4914      	ldr	r1, [pc, #80]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d021      	beq.n	8002148 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
 8002110:	e021      	b.n	8002156 <HAL_GPIO_Init+0x2e2>
 8002112:	bf00      	nop
 8002114:	10320000 	.word	0x10320000
 8002118:	10310000 	.word	0x10310000
 800211c:	10220000 	.word	0x10220000
 8002120:	10210000 	.word	0x10210000
 8002124:	10120000 	.word	0x10120000
 8002128:	10110000 	.word	0x10110000
 800212c:	40021000 	.word	0x40021000
 8002130:	40010000 	.word	0x40010000
 8002134:	40010800 	.word	0x40010800
 8002138:	40010c00 	.word	0x40010c00
 800213c:	40011000 	.word	0x40011000
 8002140:	40011400 	.word	0x40011400
 8002144:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_GPIO_Init+0x304>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	43db      	mvns	r3, r3
 8002150:	4909      	ldr	r1, [pc, #36]	; (8002178 <HAL_GPIO_Init+0x304>)
 8002152:	4013      	ands	r3, r2
 8002154:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	3301      	adds	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	f47f ae8e 	bne.w	8001e88 <HAL_GPIO_Init+0x14>
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	372c      	adds	r7, #44	; 0x2c
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	807b      	strh	r3, [r7, #2]
 80021b6:	4613      	mov	r3, r2
 80021b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ba:	787b      	ldrb	r3, [r7, #1]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021c6:	e003      	b.n	80021d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	041a      	lsls	r2, r3, #16
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	611a      	str	r2, [r3, #16]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e272      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8087 	beq.w	800230a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021fc:	4b92      	ldr	r3, [pc, #584]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b04      	cmp	r3, #4
 8002206:	d00c      	beq.n	8002222 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002208:	4b8f      	ldr	r3, [pc, #572]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d112      	bne.n	800223a <HAL_RCC_OscConfig+0x5e>
 8002214:	4b8c      	ldr	r3, [pc, #560]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d10b      	bne.n	800223a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002222:	4b89      	ldr	r3, [pc, #548]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d06c      	beq.n	8002308 <HAL_RCC_OscConfig+0x12c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d168      	bne.n	8002308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e24c      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x76>
 8002244:	4b80      	ldr	r3, [pc, #512]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a7f      	ldr	r2, [pc, #508]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	e02e      	b.n	80022b0 <HAL_RCC_OscConfig+0xd4>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x98>
 800225a:	4b7b      	ldr	r3, [pc, #492]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7a      	ldr	r2, [pc, #488]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b78      	ldr	r3, [pc, #480]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a77      	ldr	r2, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xd4>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0xbc>
 800227e:	4b72      	ldr	r3, [pc, #456]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a71      	ldr	r2, [pc, #452]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6e      	ldr	r2, [pc, #440]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xd4>
 8002298:	4b6b      	ldr	r3, [pc, #428]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6a      	ldr	r2, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a67      	ldr	r2, [pc, #412]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fcca 	bl	8001c50 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fcc6 	bl	8001c50 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e200      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b5d      	ldr	r3, [pc, #372]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xe4>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fcb6 	bl	8001c50 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fcb2 	bl	8001c50 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1ec      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x10c>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002316:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002322:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x18c>
 800232e:	4b46      	ldr	r3, [pc, #280]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x176>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1c0      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4939      	ldr	r1, [pc, #228]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	e03a      	b.n	80023de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x270>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff fc6b 	bl	8001c50 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237e:	f7ff fc67 	bl	8001c50 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1a1      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4927      	ldr	r1, [pc, #156]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_RCC_OscConfig+0x270>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff fc4a 	bl	8001c50 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff fc46 	bl	8001c50 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e180      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d03a      	beq.n	8002460 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d019      	beq.n	8002426 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f8:	f7ff fc2a 	bl	8001c50 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002400:	f7ff fc26 	bl	8001c50 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e160      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCC_OscConfig+0x26c>)
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800241e:	2001      	movs	r0, #1
 8002420:	f000 fad8 	bl	80029d4 <RCC_Delay>
 8002424:	e01c      	b.n	8002460 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242c:	f7ff fc10 	bl	8001c50 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002432:	e00f      	b.n	8002454 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7ff fc0c 	bl	8001c50 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d908      	bls.n	8002454 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e146      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	42420000 	.word	0x42420000
 8002450:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	4b92      	ldr	r3, [pc, #584]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e9      	bne.n	8002434 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a6 	beq.w	80025ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a87      	ldr	r2, [pc, #540]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b82      	ldr	r3, [pc, #520]	; (80026a4 <HAL_RCC_OscConfig+0x4c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d118      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b7f      	ldr	r3, [pc, #508]	; (80026a4 <HAL_RCC_OscConfig+0x4c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a7e      	ldr	r2, [pc, #504]	; (80026a4 <HAL_RCC_OscConfig+0x4c8>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7ff fbcd 	bl	8001c50 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ba:	f7ff fbc9 	bl	8001c50 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	; 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e103      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_RCC_OscConfig+0x4c8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x312>
 80024e0:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	e02d      	b.n	800254a <HAL_RCC_OscConfig+0x36e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0x334>
 80024f6:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a69      	ldr	r2, [pc, #420]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a66      	ldr	r2, [pc, #408]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 0304 	bic.w	r3, r3, #4
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	e01c      	b.n	800254a <HAL_RCC_OscConfig+0x36e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b05      	cmp	r3, #5
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_OscConfig+0x356>
 8002518:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a60      	ldr	r2, [pc, #384]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0x36e>
 8002532:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a5a      	ldr	r2, [pc, #360]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6213      	str	r3, [r2, #32]
 800253e:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4a57      	ldr	r2, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d015      	beq.n	800257e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002552:	f7ff fb7d 	bl	8001c50 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff fb79 	bl	8001c50 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0b1      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ee      	beq.n	800255a <HAL_RCC_OscConfig+0x37e>
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff fb67 	bl	8001c50 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7ff fb63 	bl	8001c50 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e09b      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ee      	bne.n	8002586 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d105      	bne.n	80025ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ae:	4b3c      	ldr	r3, [pc, #240]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4a3b      	ldr	r2, [pc, #236]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8087 	beq.w	80026d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d061      	beq.n	8002694 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d146      	bne.n	8002666 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff fb37 	bl	8001c50 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7ff fb33 	bl	8001c50 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e06d      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260c:	d108      	bne.n	8002620 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4921      	ldr	r1, [pc, #132]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a19      	ldr	r1, [r3, #32]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	430b      	orrs	r3, r1
 8002632:	491b      	ldr	r1, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7ff fb07 	bl	8001c50 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002646:	f7ff fb03 	bl	8001c50 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e03d      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x46a>
 8002664:	e035      	b.n	80026d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff faf0 	bl	8001c50 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff faec 	bl	8001c50 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e026      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x498>
 8002692:	e01e      	b.n	80026d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e019      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_OscConfig+0x500>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0d0      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d910      	bls.n	8002724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4965      	ldr	r1, [pc, #404]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0b8      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002754:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800275e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	494d      	ldr	r1, [pc, #308]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d040      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e07f      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e073      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06b      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4936      	ldr	r1, [pc, #216]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff fa3e 	bl	8001c50 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7ff fa3a 	bl	8001c50 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e053      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d210      	bcs.n	8002830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0207 	bic.w	r2, r3, #7
 8002816:	4922      	ldr	r1, [pc, #136]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e032      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4916      	ldr	r1, [pc, #88]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	490e      	ldr	r1, [pc, #56]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286e:	f000 f821 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002872:	4602      	mov	r2, r0
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	490a      	ldr	r1, [pc, #40]	; (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	5ccb      	ldrb	r3, [r1, r3]
 8002882:	fa22 f303 	lsr.w	r3, r2, r3
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1cc>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x1d0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f99c 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08006048 	.word	0x08006048
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000004 	.word	0x20000004

080028b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b490      	push	{r4, r7}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_GetSysClockFreq+0xac>)
 80028bc:	1d3c      	adds	r4, r7, #4
 80028be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028c4:	f240 2301 	movw	r3, #513	; 0x201
 80028c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x46>
 80028f2:	e02b      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	e02b      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	0c9b      	lsrs	r3, r3, #18
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3328      	adds	r3, #40	; 0x28
 8002904:	443b      	add	r3, r7
 8002906:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800290a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0c5b      	lsrs	r3, r3, #17
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	3328      	adds	r3, #40	; 0x28
 8002922:	443b      	add	r3, r7
 8002924:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002928:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292e:	fb03 f202 	mul.w	r2, r3, r2
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	e004      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	4a0b      	ldr	r2, [pc, #44]	; (800296c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	623b      	str	r3, [r7, #32]
      break;
 800294a:	e002      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb4>)
 800294e:	623b      	str	r3, [r7, #32]
      break;
 8002950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002952:	6a3b      	ldr	r3, [r7, #32]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bc90      	pop	{r4, r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	08006038 	.word	0x08006038
 8002964:	40021000 	.word	0x40021000
 8002968:	007a1200 	.word	0x007a1200
 800296c:	003d0900 	.word	0x003d0900

08002970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <HAL_RCC_GetHCLKFreq+0x10>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002988:	f7ff fff2 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4903      	ldr	r1, [pc, #12]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08006058 	.word	0x08006058

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b0:	f7ff ffde 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	0adb      	lsrs	r3, r3, #11
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4903      	ldr	r1, [pc, #12]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08006058 	.word	0x08006058

080029d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <RCC_Delay+0x34>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <RCC_Delay+0x38>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0a5b      	lsrs	r3, r3, #9
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029f0:	bf00      	nop
  }
  while (Delay --);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	60fa      	str	r2, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <RCC_Delay+0x1c>
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	10624dd3 	.word	0x10624dd3

08002a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e041      	b.n	8002aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe ff26 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 f93c 	bl	8002ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d001      	beq.n	8002ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_Base_Start+0x88>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_TIM_Base_Start+0x48>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d009      	beq.n	8002af8 <HAL_TIM_Base_Start+0x48>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIM_Base_Start+0x8c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_Base_Start+0x48>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <HAL_TIM_Base_Start+0x90>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d010      	beq.n	8002b2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	e007      	b.n	8002b2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40000800 	.word	0x40000800

08002b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_TIM_ConfigClockSource+0x18>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0b3      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x180>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b94:	d03e      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0xd0>
 8002b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9a:	f200 8087 	bhi.w	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba2:	f000 8085 	beq.w	8002cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	d87f      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bac:	2b70      	cmp	r3, #112	; 0x70
 8002bae:	d01a      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0xa2>
 8002bb0:	2b70      	cmp	r3, #112	; 0x70
 8002bb2:	d87b      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bb4:	2b60      	cmp	r3, #96	; 0x60
 8002bb6:	d050      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x116>
 8002bb8:	2b60      	cmp	r3, #96	; 0x60
 8002bba:	d877      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bbc:	2b50      	cmp	r3, #80	; 0x50
 8002bbe:	d03c      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0xf6>
 8002bc0:	2b50      	cmp	r3, #80	; 0x50
 8002bc2:	d873      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d058      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x136>
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d86f      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bcc:	2b30      	cmp	r3, #48	; 0x30
 8002bce:	d064      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
 8002bd0:	2b30      	cmp	r3, #48	; 0x30
 8002bd2:	d86b      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d060      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d867      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d05c      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d05a      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002be4:	e062      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6899      	ldr	r1, [r3, #8]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f000 f942 	bl	8002e7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	609a      	str	r2, [r3, #8]
      break;
 8002c12:	e04e      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6899      	ldr	r1, [r3, #8]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f000 f92b 	bl	8002e7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c36:	609a      	str	r2, [r3, #8]
      break;
 8002c38:	e03b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 f8a2 	bl	8002d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2150      	movs	r1, #80	; 0x50
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f8f9 	bl	8002e4a <TIM_ITRx_SetConfig>
      break;
 8002c58:	e02b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 f8c0 	bl	8002dec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2160      	movs	r1, #96	; 0x60
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f8e9 	bl	8002e4a <TIM_ITRx_SetConfig>
      break;
 8002c78:	e01b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 f882 	bl	8002d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2140      	movs	r1, #64	; 0x40
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f8d9 	bl	8002e4a <TIM_ITRx_SetConfig>
      break;
 8002c98:	e00b      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f000 f8d0 	bl	8002e4a <TIM_ITRx_SetConfig>
        break;
 8002caa:	e002      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cac:	bf00      	nop
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <TIM_Base_SetConfig+0xb8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <TIM_Base_SetConfig+0x30>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d007      	beq.n	8002cfc <TIM_Base_SetConfig+0x30>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <TIM_Base_SetConfig+0xbc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0x30>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a25      	ldr	r2, [pc, #148]	; (8002d8c <TIM_Base_SetConfig+0xc0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <TIM_Base_SetConfig+0xb8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x62>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <TIM_Base_SetConfig+0xbc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <TIM_Base_SetConfig+0xc0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <TIM_Base_SetConfig+0xb8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d103      	bne.n	8002d74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	615a      	str	r2, [r3, #20]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800

08002d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0201 	bic.w	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f023 030a 	bic.w	r3, r3, #10
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f023 0210 	bic.w	r2, r3, #16
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	031b      	lsls	r3, r3, #12
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f043 0307 	orr.w	r3, r3, #7
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	021a      	lsls	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	609a      	str	r2, [r3, #8]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e046      	b.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00e      	beq.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d009      	beq.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d004      	beq.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10c      	bne.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800

08002f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e03f      	b.n	800300a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fc90 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f905 	bl	80031cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b08a      	sub	sp, #40	; 0x28
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b20      	cmp	r3, #32
 8003030:	d17c      	bne.n	800312c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_UART_Transmit+0x2c>
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e075      	b.n	800312e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_UART_Transmit+0x3e>
 800304c:	2302      	movs	r3, #2
 800304e:	e06e      	b.n	800312e <HAL_UART_Transmit+0x11c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2221      	movs	r2, #33	; 0x21
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003066:	f7fe fdf3 	bl	8001c50 <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	d108      	bne.n	8003094 <HAL_UART_Transmit+0x82>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e003      	b.n	800309c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030a4:	e02a      	b.n	80030fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f840 	bl	8003136 <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e036      	b.n	800312e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3302      	adds	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e007      	b.n	80030ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	3301      	adds	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1cf      	bne.n	80030a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f810 	bl	8003136 <UART_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e006      	b.n	800312e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4613      	mov	r3, r2
 8003144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003146:	e02c      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d028      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0x30>
 8003156:	f7fe fd7b 	bl	8001c50 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	429a      	cmp	r2, r3
 8003164:	d21d      	bcs.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003174:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e00f      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d0c3      	beq.n	8003148 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003206:	f023 030c 	bic.w	r3, r3, #12
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	430b      	orrs	r3, r1
 8003212:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <UART_SetConfig+0x114>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003234:	f7ff fbba 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	e002      	b.n	8003242 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7ff fba2 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003240:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <UART_SetConfig+0x118>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	0119      	lsls	r1, r3, #4
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009a      	lsls	r2, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fbb2 f2f3 	udiv	r2, r2, r3
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <UART_SetConfig+0x118>)
 800327a:	fba3 0302 	umull	r0, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2064      	movs	r0, #100	; 0x64
 8003282:	fb00 f303 	mul.w	r3, r0, r3
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <UART_SetConfig+0x118>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003298:	4419      	add	r1, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009a      	lsls	r2, r3, #2
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <UART_SetConfig+0x118>)
 80032b2:	fba3 0302 	umull	r0, r3, r3, r2
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2064      	movs	r0, #100	; 0x64
 80032ba:	fb00 f303 	mul.w	r3, r0, r3
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	3332      	adds	r3, #50	; 0x32
 80032c4:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <UART_SetConfig+0x118>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	f003 020f 	and.w	r2, r3, #15
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	440a      	add	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40013800 	.word	0x40013800
 80032e4:	51eb851f 	.word	0x51eb851f

080032e8 <__errno>:
 80032e8:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <__errno+0x8>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	2600      	movs	r6, #0
 80032f8:	4d0c      	ldr	r5, [pc, #48]	; (800332c <__libc_init_array+0x38>)
 80032fa:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fc:	1b64      	subs	r4, r4, r5
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	f002 fdba 	bl	8005e7c <_init>
 8003308:	2600      	movs	r6, #0
 800330a:	4d0a      	ldr	r5, [pc, #40]	; (8003334 <__libc_init_array+0x40>)
 800330c:	4c0a      	ldr	r4, [pc, #40]	; (8003338 <__libc_init_array+0x44>)
 800330e:	1b64      	subs	r4, r4, r5
 8003310:	10a4      	asrs	r4, r4, #2
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f855 3b04 	ldr.w	r3, [r5], #4
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f855 3b04 	ldr.w	r3, [r5], #4
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	0800643c 	.word	0x0800643c
 8003330:	0800643c 	.word	0x0800643c
 8003334:	0800643c 	.word	0x0800643c
 8003338:	08006440 	.word	0x08006440

0800333c <memset>:
 800333c:	4603      	mov	r3, r0
 800333e:	4402      	add	r2, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	f803 1b01 	strb.w	r1, [r3], #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <__cvt>:
 800334c:	2b00      	cmp	r3, #0
 800334e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003352:	461f      	mov	r7, r3
 8003354:	bfbb      	ittet	lt
 8003356:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800335a:	461f      	movlt	r7, r3
 800335c:	2300      	movge	r3, #0
 800335e:	232d      	movlt	r3, #45	; 0x2d
 8003360:	b088      	sub	sp, #32
 8003362:	4614      	mov	r4, r2
 8003364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003366:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003368:	7013      	strb	r3, [r2, #0]
 800336a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800336c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003370:	f023 0820 	bic.w	r8, r3, #32
 8003374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003378:	d005      	beq.n	8003386 <__cvt+0x3a>
 800337a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800337e:	d100      	bne.n	8003382 <__cvt+0x36>
 8003380:	3501      	adds	r5, #1
 8003382:	2302      	movs	r3, #2
 8003384:	e000      	b.n	8003388 <__cvt+0x3c>
 8003386:	2303      	movs	r3, #3
 8003388:	aa07      	add	r2, sp, #28
 800338a:	9204      	str	r2, [sp, #16]
 800338c:	aa06      	add	r2, sp, #24
 800338e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003392:	e9cd 3500 	strd	r3, r5, [sp]
 8003396:	4622      	mov	r2, r4
 8003398:	463b      	mov	r3, r7
 800339a:	f000 fe11 	bl	8003fc0 <_dtoa_r>
 800339e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033a2:	4606      	mov	r6, r0
 80033a4:	d102      	bne.n	80033ac <__cvt+0x60>
 80033a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033a8:	07db      	lsls	r3, r3, #31
 80033aa:	d522      	bpl.n	80033f2 <__cvt+0xa6>
 80033ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80033b0:	eb06 0905 	add.w	r9, r6, r5
 80033b4:	d110      	bne.n	80033d8 <__cvt+0x8c>
 80033b6:	7833      	ldrb	r3, [r6, #0]
 80033b8:	2b30      	cmp	r3, #48	; 0x30
 80033ba:	d10a      	bne.n	80033d2 <__cvt+0x86>
 80033bc:	2200      	movs	r2, #0
 80033be:	2300      	movs	r3, #0
 80033c0:	4620      	mov	r0, r4
 80033c2:	4639      	mov	r1, r7
 80033c4:	f7fd faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80033c8:	b918      	cbnz	r0, 80033d2 <__cvt+0x86>
 80033ca:	f1c5 0501 	rsb	r5, r5, #1
 80033ce:	f8ca 5000 	str.w	r5, [sl]
 80033d2:	f8da 3000 	ldr.w	r3, [sl]
 80033d6:	4499      	add	r9, r3
 80033d8:	2200      	movs	r2, #0
 80033da:	2300      	movs	r3, #0
 80033dc:	4620      	mov	r0, r4
 80033de:	4639      	mov	r1, r7
 80033e0:	f7fd fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80033e4:	b108      	cbz	r0, 80033ea <__cvt+0x9e>
 80033e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80033ea:	2230      	movs	r2, #48	; 0x30
 80033ec:	9b07      	ldr	r3, [sp, #28]
 80033ee:	454b      	cmp	r3, r9
 80033f0:	d307      	bcc.n	8003402 <__cvt+0xb6>
 80033f2:	4630      	mov	r0, r6
 80033f4:	9b07      	ldr	r3, [sp, #28]
 80033f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033f8:	1b9b      	subs	r3, r3, r6
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	b008      	add	sp, #32
 80033fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003402:	1c59      	adds	r1, r3, #1
 8003404:	9107      	str	r1, [sp, #28]
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e7f0      	b.n	80033ec <__cvt+0xa0>

0800340a <__exponent>:
 800340a:	4603      	mov	r3, r0
 800340c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800340e:	2900      	cmp	r1, #0
 8003410:	f803 2b02 	strb.w	r2, [r3], #2
 8003414:	bfb6      	itet	lt
 8003416:	222d      	movlt	r2, #45	; 0x2d
 8003418:	222b      	movge	r2, #43	; 0x2b
 800341a:	4249      	neglt	r1, r1
 800341c:	2909      	cmp	r1, #9
 800341e:	7042      	strb	r2, [r0, #1]
 8003420:	dd2b      	ble.n	800347a <__exponent+0x70>
 8003422:	f10d 0407 	add.w	r4, sp, #7
 8003426:	46a4      	mov	ip, r4
 8003428:	270a      	movs	r7, #10
 800342a:	fb91 f6f7 	sdiv	r6, r1, r7
 800342e:	460a      	mov	r2, r1
 8003430:	46a6      	mov	lr, r4
 8003432:	fb07 1516 	mls	r5, r7, r6, r1
 8003436:	2a63      	cmp	r2, #99	; 0x63
 8003438:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800343c:	4631      	mov	r1, r6
 800343e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003442:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003446:	dcf0      	bgt.n	800342a <__exponent+0x20>
 8003448:	3130      	adds	r1, #48	; 0x30
 800344a:	f1ae 0502 	sub.w	r5, lr, #2
 800344e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003452:	4629      	mov	r1, r5
 8003454:	1c44      	adds	r4, r0, #1
 8003456:	4561      	cmp	r1, ip
 8003458:	d30a      	bcc.n	8003470 <__exponent+0x66>
 800345a:	f10d 0209 	add.w	r2, sp, #9
 800345e:	eba2 020e 	sub.w	r2, r2, lr
 8003462:	4565      	cmp	r5, ip
 8003464:	bf88      	it	hi
 8003466:	2200      	movhi	r2, #0
 8003468:	4413      	add	r3, r2
 800346a:	1a18      	subs	r0, r3, r0
 800346c:	b003      	add	sp, #12
 800346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003470:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003474:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003478:	e7ed      	b.n	8003456 <__exponent+0x4c>
 800347a:	2330      	movs	r3, #48	; 0x30
 800347c:	3130      	adds	r1, #48	; 0x30
 800347e:	7083      	strb	r3, [r0, #2]
 8003480:	70c1      	strb	r1, [r0, #3]
 8003482:	1d03      	adds	r3, r0, #4
 8003484:	e7f1      	b.n	800346a <__exponent+0x60>
	...

08003488 <_printf_float>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	b091      	sub	sp, #68	; 0x44
 800348e:	460c      	mov	r4, r1
 8003490:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003494:	4616      	mov	r6, r2
 8003496:	461f      	mov	r7, r3
 8003498:	4605      	mov	r5, r0
 800349a:	f001 fd33 	bl	8004f04 <_localeconv_r>
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	9309      	str	r3, [sp, #36]	; 0x24
 80034a4:	f7fc fe54 	bl	8000150 <strlen>
 80034a8:	2300      	movs	r3, #0
 80034aa:	930e      	str	r3, [sp, #56]	; 0x38
 80034ac:	f8d8 3000 	ldr.w	r3, [r8]
 80034b0:	900a      	str	r0, [sp, #40]	; 0x28
 80034b2:	3307      	adds	r3, #7
 80034b4:	f023 0307 	bic.w	r3, r3, #7
 80034b8:	f103 0208 	add.w	r2, r3, #8
 80034bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80034c0:	f8d4 b000 	ldr.w	fp, [r4]
 80034c4:	f8c8 2000 	str.w	r2, [r8]
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80034d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80034d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034da:	f04f 32ff 	mov.w	r2, #4294967295
 80034de:	4640      	mov	r0, r8
 80034e0:	4b9c      	ldr	r3, [pc, #624]	; (8003754 <_printf_float+0x2cc>)
 80034e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034e4:	f7fd fa92 	bl	8000a0c <__aeabi_dcmpun>
 80034e8:	bb70      	cbnz	r0, 8003548 <_printf_float+0xc0>
 80034ea:	f04f 32ff 	mov.w	r2, #4294967295
 80034ee:	4640      	mov	r0, r8
 80034f0:	4b98      	ldr	r3, [pc, #608]	; (8003754 <_printf_float+0x2cc>)
 80034f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034f4:	f7fd fa6c 	bl	80009d0 <__aeabi_dcmple>
 80034f8:	bb30      	cbnz	r0, 8003548 <_printf_float+0xc0>
 80034fa:	2200      	movs	r2, #0
 80034fc:	2300      	movs	r3, #0
 80034fe:	4640      	mov	r0, r8
 8003500:	4651      	mov	r1, sl
 8003502:	f7fd fa5b 	bl	80009bc <__aeabi_dcmplt>
 8003506:	b110      	cbz	r0, 800350e <_printf_float+0x86>
 8003508:	232d      	movs	r3, #45	; 0x2d
 800350a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800350e:	4b92      	ldr	r3, [pc, #584]	; (8003758 <_printf_float+0x2d0>)
 8003510:	4892      	ldr	r0, [pc, #584]	; (800375c <_printf_float+0x2d4>)
 8003512:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003516:	bf94      	ite	ls
 8003518:	4698      	movls	r8, r3
 800351a:	4680      	movhi	r8, r0
 800351c:	2303      	movs	r3, #3
 800351e:	f04f 0a00 	mov.w	sl, #0
 8003522:	6123      	str	r3, [r4, #16]
 8003524:	f02b 0304 	bic.w	r3, fp, #4
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	4633      	mov	r3, r6
 800352c:	4621      	mov	r1, r4
 800352e:	4628      	mov	r0, r5
 8003530:	9700      	str	r7, [sp, #0]
 8003532:	aa0f      	add	r2, sp, #60	; 0x3c
 8003534:	f000 f9d4 	bl	80038e0 <_printf_common>
 8003538:	3001      	adds	r0, #1
 800353a:	f040 8090 	bne.w	800365e <_printf_float+0x1d6>
 800353e:	f04f 30ff 	mov.w	r0, #4294967295
 8003542:	b011      	add	sp, #68	; 0x44
 8003544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003548:	4642      	mov	r2, r8
 800354a:	4653      	mov	r3, sl
 800354c:	4640      	mov	r0, r8
 800354e:	4651      	mov	r1, sl
 8003550:	f7fd fa5c 	bl	8000a0c <__aeabi_dcmpun>
 8003554:	b148      	cbz	r0, 800356a <_printf_float+0xe2>
 8003556:	f1ba 0f00 	cmp.w	sl, #0
 800355a:	bfb8      	it	lt
 800355c:	232d      	movlt	r3, #45	; 0x2d
 800355e:	4880      	ldr	r0, [pc, #512]	; (8003760 <_printf_float+0x2d8>)
 8003560:	bfb8      	it	lt
 8003562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003566:	4b7f      	ldr	r3, [pc, #508]	; (8003764 <_printf_float+0x2dc>)
 8003568:	e7d3      	b.n	8003512 <_printf_float+0x8a>
 800356a:	6863      	ldr	r3, [r4, #4]
 800356c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	d142      	bne.n	80035fa <_printf_float+0x172>
 8003574:	2306      	movs	r3, #6
 8003576:	6063      	str	r3, [r4, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	9206      	str	r2, [sp, #24]
 800357c:	aa0e      	add	r2, sp, #56	; 0x38
 800357e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003582:	aa0d      	add	r2, sp, #52	; 0x34
 8003584:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003588:	9203      	str	r2, [sp, #12]
 800358a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800358e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	4642      	mov	r2, r8
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4628      	mov	r0, r5
 800359c:	4653      	mov	r3, sl
 800359e:	910b      	str	r1, [sp, #44]	; 0x2c
 80035a0:	f7ff fed4 	bl	800334c <__cvt>
 80035a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035a6:	4680      	mov	r8, r0
 80035a8:	2947      	cmp	r1, #71	; 0x47
 80035aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035ac:	d108      	bne.n	80035c0 <_printf_float+0x138>
 80035ae:	1cc8      	adds	r0, r1, #3
 80035b0:	db02      	blt.n	80035b8 <_printf_float+0x130>
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	4299      	cmp	r1, r3
 80035b6:	dd40      	ble.n	800363a <_printf_float+0x1b2>
 80035b8:	f1a9 0902 	sub.w	r9, r9, #2
 80035bc:	fa5f f989 	uxtb.w	r9, r9
 80035c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80035c4:	d81f      	bhi.n	8003606 <_printf_float+0x17e>
 80035c6:	464a      	mov	r2, r9
 80035c8:	3901      	subs	r1, #1
 80035ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035ce:	910d      	str	r1, [sp, #52]	; 0x34
 80035d0:	f7ff ff1b 	bl	800340a <__exponent>
 80035d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035d6:	4682      	mov	sl, r0
 80035d8:	1813      	adds	r3, r2, r0
 80035da:	2a01      	cmp	r2, #1
 80035dc:	6123      	str	r3, [r4, #16]
 80035de:	dc02      	bgt.n	80035e6 <_printf_float+0x15e>
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	07d2      	lsls	r2, r2, #31
 80035e4:	d501      	bpl.n	80035ea <_printf_float+0x162>
 80035e6:	3301      	adds	r3, #1
 80035e8:	6123      	str	r3, [r4, #16]
 80035ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d09b      	beq.n	800352a <_printf_float+0xa2>
 80035f2:	232d      	movs	r3, #45	; 0x2d
 80035f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f8:	e797      	b.n	800352a <_printf_float+0xa2>
 80035fa:	2947      	cmp	r1, #71	; 0x47
 80035fc:	d1bc      	bne.n	8003578 <_printf_float+0xf0>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ba      	bne.n	8003578 <_printf_float+0xf0>
 8003602:	2301      	movs	r3, #1
 8003604:	e7b7      	b.n	8003576 <_printf_float+0xee>
 8003606:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800360a:	d118      	bne.n	800363e <_printf_float+0x1b6>
 800360c:	2900      	cmp	r1, #0
 800360e:	6863      	ldr	r3, [r4, #4]
 8003610:	dd0b      	ble.n	800362a <_printf_float+0x1a2>
 8003612:	6121      	str	r1, [r4, #16]
 8003614:	b913      	cbnz	r3, 800361c <_printf_float+0x194>
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	07d0      	lsls	r0, r2, #31
 800361a:	d502      	bpl.n	8003622 <_printf_float+0x19a>
 800361c:	3301      	adds	r3, #1
 800361e:	440b      	add	r3, r1
 8003620:	6123      	str	r3, [r4, #16]
 8003622:	f04f 0a00 	mov.w	sl, #0
 8003626:	65a1      	str	r1, [r4, #88]	; 0x58
 8003628:	e7df      	b.n	80035ea <_printf_float+0x162>
 800362a:	b913      	cbnz	r3, 8003632 <_printf_float+0x1aa>
 800362c:	6822      	ldr	r2, [r4, #0]
 800362e:	07d2      	lsls	r2, r2, #31
 8003630:	d501      	bpl.n	8003636 <_printf_float+0x1ae>
 8003632:	3302      	adds	r3, #2
 8003634:	e7f4      	b.n	8003620 <_printf_float+0x198>
 8003636:	2301      	movs	r3, #1
 8003638:	e7f2      	b.n	8003620 <_printf_float+0x198>
 800363a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800363e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003640:	4299      	cmp	r1, r3
 8003642:	db05      	blt.n	8003650 <_printf_float+0x1c8>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	6121      	str	r1, [r4, #16]
 8003648:	07d8      	lsls	r0, r3, #31
 800364a:	d5ea      	bpl.n	8003622 <_printf_float+0x19a>
 800364c:	1c4b      	adds	r3, r1, #1
 800364e:	e7e7      	b.n	8003620 <_printf_float+0x198>
 8003650:	2900      	cmp	r1, #0
 8003652:	bfcc      	ite	gt
 8003654:	2201      	movgt	r2, #1
 8003656:	f1c1 0202 	rsble	r2, r1, #2
 800365a:	4413      	add	r3, r2
 800365c:	e7e0      	b.n	8003620 <_printf_float+0x198>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	055a      	lsls	r2, r3, #21
 8003662:	d407      	bmi.n	8003674 <_printf_float+0x1ec>
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	4642      	mov	r2, r8
 8003668:	4631      	mov	r1, r6
 800366a:	4628      	mov	r0, r5
 800366c:	47b8      	blx	r7
 800366e:	3001      	adds	r0, #1
 8003670:	d12b      	bne.n	80036ca <_printf_float+0x242>
 8003672:	e764      	b.n	800353e <_printf_float+0xb6>
 8003674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003678:	f240 80dd 	bls.w	8003836 <_printf_float+0x3ae>
 800367c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003680:	2200      	movs	r2, #0
 8003682:	2300      	movs	r3, #0
 8003684:	f7fd f990 	bl	80009a8 <__aeabi_dcmpeq>
 8003688:	2800      	cmp	r0, #0
 800368a:	d033      	beq.n	80036f4 <_printf_float+0x26c>
 800368c:	2301      	movs	r3, #1
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	4a35      	ldr	r2, [pc, #212]	; (8003768 <_printf_float+0x2e0>)
 8003694:	47b8      	blx	r7
 8003696:	3001      	adds	r0, #1
 8003698:	f43f af51 	beq.w	800353e <_printf_float+0xb6>
 800369c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036a0:	429a      	cmp	r2, r3
 80036a2:	db02      	blt.n	80036aa <_printf_float+0x222>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	07d8      	lsls	r0, r3, #31
 80036a8:	d50f      	bpl.n	80036ca <_printf_float+0x242>
 80036aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036ae:	4631      	mov	r1, r6
 80036b0:	4628      	mov	r0, r5
 80036b2:	47b8      	blx	r7
 80036b4:	3001      	adds	r0, #1
 80036b6:	f43f af42 	beq.w	800353e <_printf_float+0xb6>
 80036ba:	f04f 0800 	mov.w	r8, #0
 80036be:	f104 091a 	add.w	r9, r4, #26
 80036c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036c4:	3b01      	subs	r3, #1
 80036c6:	4543      	cmp	r3, r8
 80036c8:	dc09      	bgt.n	80036de <_printf_float+0x256>
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	079b      	lsls	r3, r3, #30
 80036ce:	f100 8102 	bmi.w	80038d6 <_printf_float+0x44e>
 80036d2:	68e0      	ldr	r0, [r4, #12]
 80036d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036d6:	4298      	cmp	r0, r3
 80036d8:	bfb8      	it	lt
 80036da:	4618      	movlt	r0, r3
 80036dc:	e731      	b.n	8003542 <_printf_float+0xba>
 80036de:	2301      	movs	r3, #1
 80036e0:	464a      	mov	r2, r9
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	f43f af28 	beq.w	800353e <_printf_float+0xb6>
 80036ee:	f108 0801 	add.w	r8, r8, #1
 80036f2:	e7e6      	b.n	80036c2 <_printf_float+0x23a>
 80036f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	dc38      	bgt.n	800376c <_printf_float+0x2e4>
 80036fa:	2301      	movs	r3, #1
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <_printf_float+0x2e0>)
 8003702:	47b8      	blx	r7
 8003704:	3001      	adds	r0, #1
 8003706:	f43f af1a 	beq.w	800353e <_printf_float+0xb6>
 800370a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800370e:	4313      	orrs	r3, r2
 8003710:	d102      	bne.n	8003718 <_printf_float+0x290>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	07d9      	lsls	r1, r3, #31
 8003716:	d5d8      	bpl.n	80036ca <_printf_float+0x242>
 8003718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800371c:	4631      	mov	r1, r6
 800371e:	4628      	mov	r0, r5
 8003720:	47b8      	blx	r7
 8003722:	3001      	adds	r0, #1
 8003724:	f43f af0b 	beq.w	800353e <_printf_float+0xb6>
 8003728:	f04f 0900 	mov.w	r9, #0
 800372c:	f104 0a1a 	add.w	sl, r4, #26
 8003730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003732:	425b      	negs	r3, r3
 8003734:	454b      	cmp	r3, r9
 8003736:	dc01      	bgt.n	800373c <_printf_float+0x2b4>
 8003738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800373a:	e794      	b.n	8003666 <_printf_float+0x1de>
 800373c:	2301      	movs	r3, #1
 800373e:	4652      	mov	r2, sl
 8003740:	4631      	mov	r1, r6
 8003742:	4628      	mov	r0, r5
 8003744:	47b8      	blx	r7
 8003746:	3001      	adds	r0, #1
 8003748:	f43f aef9 	beq.w	800353e <_printf_float+0xb6>
 800374c:	f109 0901 	add.w	r9, r9, #1
 8003750:	e7ee      	b.n	8003730 <_printf_float+0x2a8>
 8003752:	bf00      	nop
 8003754:	7fefffff 	.word	0x7fefffff
 8003758:	08006064 	.word	0x08006064
 800375c:	08006068 	.word	0x08006068
 8003760:	08006070 	.word	0x08006070
 8003764:	0800606c 	.word	0x0800606c
 8003768:	08006074 	.word	0x08006074
 800376c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800376e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003770:	429a      	cmp	r2, r3
 8003772:	bfa8      	it	ge
 8003774:	461a      	movge	r2, r3
 8003776:	2a00      	cmp	r2, #0
 8003778:	4691      	mov	r9, r2
 800377a:	dc37      	bgt.n	80037ec <_printf_float+0x364>
 800377c:	f04f 0b00 	mov.w	fp, #0
 8003780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003784:	f104 021a 	add.w	r2, r4, #26
 8003788:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800378c:	ebaa 0309 	sub.w	r3, sl, r9
 8003790:	455b      	cmp	r3, fp
 8003792:	dc33      	bgt.n	80037fc <_printf_float+0x374>
 8003794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003798:	429a      	cmp	r2, r3
 800379a:	db3b      	blt.n	8003814 <_printf_float+0x38c>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	07da      	lsls	r2, r3, #31
 80037a0:	d438      	bmi.n	8003814 <_printf_float+0x38c>
 80037a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80037a6:	eba3 020a 	sub.w	r2, r3, sl
 80037aa:	eba3 0901 	sub.w	r9, r3, r1
 80037ae:	4591      	cmp	r9, r2
 80037b0:	bfa8      	it	ge
 80037b2:	4691      	movge	r9, r2
 80037b4:	f1b9 0f00 	cmp.w	r9, #0
 80037b8:	dc34      	bgt.n	8003824 <_printf_float+0x39c>
 80037ba:	f04f 0800 	mov.w	r8, #0
 80037be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037c2:	f104 0a1a 	add.w	sl, r4, #26
 80037c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	eba3 0309 	sub.w	r3, r3, r9
 80037d0:	4543      	cmp	r3, r8
 80037d2:	f77f af7a 	ble.w	80036ca <_printf_float+0x242>
 80037d6:	2301      	movs	r3, #1
 80037d8:	4652      	mov	r2, sl
 80037da:	4631      	mov	r1, r6
 80037dc:	4628      	mov	r0, r5
 80037de:	47b8      	blx	r7
 80037e0:	3001      	adds	r0, #1
 80037e2:	f43f aeac 	beq.w	800353e <_printf_float+0xb6>
 80037e6:	f108 0801 	add.w	r8, r8, #1
 80037ea:	e7ec      	b.n	80037c6 <_printf_float+0x33e>
 80037ec:	4613      	mov	r3, r2
 80037ee:	4631      	mov	r1, r6
 80037f0:	4642      	mov	r2, r8
 80037f2:	4628      	mov	r0, r5
 80037f4:	47b8      	blx	r7
 80037f6:	3001      	adds	r0, #1
 80037f8:	d1c0      	bne.n	800377c <_printf_float+0x2f4>
 80037fa:	e6a0      	b.n	800353e <_printf_float+0xb6>
 80037fc:	2301      	movs	r3, #1
 80037fe:	4631      	mov	r1, r6
 8003800:	4628      	mov	r0, r5
 8003802:	920b      	str	r2, [sp, #44]	; 0x2c
 8003804:	47b8      	blx	r7
 8003806:	3001      	adds	r0, #1
 8003808:	f43f ae99 	beq.w	800353e <_printf_float+0xb6>
 800380c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800380e:	f10b 0b01 	add.w	fp, fp, #1
 8003812:	e7b9      	b.n	8003788 <_printf_float+0x300>
 8003814:	4631      	mov	r1, r6
 8003816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800381a:	4628      	mov	r0, r5
 800381c:	47b8      	blx	r7
 800381e:	3001      	adds	r0, #1
 8003820:	d1bf      	bne.n	80037a2 <_printf_float+0x31a>
 8003822:	e68c      	b.n	800353e <_printf_float+0xb6>
 8003824:	464b      	mov	r3, r9
 8003826:	4631      	mov	r1, r6
 8003828:	4628      	mov	r0, r5
 800382a:	eb08 020a 	add.w	r2, r8, sl
 800382e:	47b8      	blx	r7
 8003830:	3001      	adds	r0, #1
 8003832:	d1c2      	bne.n	80037ba <_printf_float+0x332>
 8003834:	e683      	b.n	800353e <_printf_float+0xb6>
 8003836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003838:	2a01      	cmp	r2, #1
 800383a:	dc01      	bgt.n	8003840 <_printf_float+0x3b8>
 800383c:	07db      	lsls	r3, r3, #31
 800383e:	d537      	bpl.n	80038b0 <_printf_float+0x428>
 8003840:	2301      	movs	r3, #1
 8003842:	4642      	mov	r2, r8
 8003844:	4631      	mov	r1, r6
 8003846:	4628      	mov	r0, r5
 8003848:	47b8      	blx	r7
 800384a:	3001      	adds	r0, #1
 800384c:	f43f ae77 	beq.w	800353e <_printf_float+0xb6>
 8003850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003854:	4631      	mov	r1, r6
 8003856:	4628      	mov	r0, r5
 8003858:	47b8      	blx	r7
 800385a:	3001      	adds	r0, #1
 800385c:	f43f ae6f 	beq.w	800353e <_printf_float+0xb6>
 8003860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003864:	2200      	movs	r2, #0
 8003866:	2300      	movs	r3, #0
 8003868:	f7fd f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800386c:	b9d8      	cbnz	r0, 80038a6 <_printf_float+0x41e>
 800386e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003870:	f108 0201 	add.w	r2, r8, #1
 8003874:	3b01      	subs	r3, #1
 8003876:	4631      	mov	r1, r6
 8003878:	4628      	mov	r0, r5
 800387a:	47b8      	blx	r7
 800387c:	3001      	adds	r0, #1
 800387e:	d10e      	bne.n	800389e <_printf_float+0x416>
 8003880:	e65d      	b.n	800353e <_printf_float+0xb6>
 8003882:	2301      	movs	r3, #1
 8003884:	464a      	mov	r2, r9
 8003886:	4631      	mov	r1, r6
 8003888:	4628      	mov	r0, r5
 800388a:	47b8      	blx	r7
 800388c:	3001      	adds	r0, #1
 800388e:	f43f ae56 	beq.w	800353e <_printf_float+0xb6>
 8003892:	f108 0801 	add.w	r8, r8, #1
 8003896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003898:	3b01      	subs	r3, #1
 800389a:	4543      	cmp	r3, r8
 800389c:	dcf1      	bgt.n	8003882 <_printf_float+0x3fa>
 800389e:	4653      	mov	r3, sl
 80038a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80038a4:	e6e0      	b.n	8003668 <_printf_float+0x1e0>
 80038a6:	f04f 0800 	mov.w	r8, #0
 80038aa:	f104 091a 	add.w	r9, r4, #26
 80038ae:	e7f2      	b.n	8003896 <_printf_float+0x40e>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4642      	mov	r2, r8
 80038b4:	e7df      	b.n	8003876 <_printf_float+0x3ee>
 80038b6:	2301      	movs	r3, #1
 80038b8:	464a      	mov	r2, r9
 80038ba:	4631      	mov	r1, r6
 80038bc:	4628      	mov	r0, r5
 80038be:	47b8      	blx	r7
 80038c0:	3001      	adds	r0, #1
 80038c2:	f43f ae3c 	beq.w	800353e <_printf_float+0xb6>
 80038c6:	f108 0801 	add.w	r8, r8, #1
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80038ce:	1a5b      	subs	r3, r3, r1
 80038d0:	4543      	cmp	r3, r8
 80038d2:	dcf0      	bgt.n	80038b6 <_printf_float+0x42e>
 80038d4:	e6fd      	b.n	80036d2 <_printf_float+0x24a>
 80038d6:	f04f 0800 	mov.w	r8, #0
 80038da:	f104 0919 	add.w	r9, r4, #25
 80038de:	e7f4      	b.n	80038ca <_printf_float+0x442>

080038e0 <_printf_common>:
 80038e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	4616      	mov	r6, r2
 80038e6:	4699      	mov	r9, r3
 80038e8:	688a      	ldr	r2, [r1, #8]
 80038ea:	690b      	ldr	r3, [r1, #16]
 80038ec:	4607      	mov	r7, r0
 80038ee:	4293      	cmp	r3, r2
 80038f0:	bfb8      	it	lt
 80038f2:	4613      	movlt	r3, r2
 80038f4:	6033      	str	r3, [r6, #0]
 80038f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038fa:	460c      	mov	r4, r1
 80038fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003900:	b10a      	cbz	r2, 8003906 <_printf_common+0x26>
 8003902:	3301      	adds	r3, #1
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	0699      	lsls	r1, r3, #26
 800390a:	bf42      	ittt	mi
 800390c:	6833      	ldrmi	r3, [r6, #0]
 800390e:	3302      	addmi	r3, #2
 8003910:	6033      	strmi	r3, [r6, #0]
 8003912:	6825      	ldr	r5, [r4, #0]
 8003914:	f015 0506 	ands.w	r5, r5, #6
 8003918:	d106      	bne.n	8003928 <_printf_common+0x48>
 800391a:	f104 0a19 	add.w	sl, r4, #25
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	6832      	ldr	r2, [r6, #0]
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	42ab      	cmp	r3, r5
 8003926:	dc28      	bgt.n	800397a <_printf_common+0x9a>
 8003928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800392c:	1e13      	subs	r3, r2, #0
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	bf18      	it	ne
 8003932:	2301      	movne	r3, #1
 8003934:	0692      	lsls	r2, r2, #26
 8003936:	d42d      	bmi.n	8003994 <_printf_common+0xb4>
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d020      	beq.n	8003988 <_printf_common+0xa8>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	68e5      	ldr	r5, [r4, #12]
 800394a:	f003 0306 	and.w	r3, r3, #6
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf18      	it	ne
 8003952:	2500      	movne	r5, #0
 8003954:	6832      	ldr	r2, [r6, #0]
 8003956:	f04f 0600 	mov.w	r6, #0
 800395a:	68a3      	ldr	r3, [r4, #8]
 800395c:	bf08      	it	eq
 800395e:	1aad      	subeq	r5, r5, r2
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	bf08      	it	eq
 8003964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003968:	4293      	cmp	r3, r2
 800396a:	bfc4      	itt	gt
 800396c:	1a9b      	subgt	r3, r3, r2
 800396e:	18ed      	addgt	r5, r5, r3
 8003970:	341a      	adds	r4, #26
 8003972:	42b5      	cmp	r5, r6
 8003974:	d11a      	bne.n	80039ac <_printf_common+0xcc>
 8003976:	2000      	movs	r0, #0
 8003978:	e008      	b.n	800398c <_printf_common+0xac>
 800397a:	2301      	movs	r3, #1
 800397c:	4652      	mov	r2, sl
 800397e:	4649      	mov	r1, r9
 8003980:	4638      	mov	r0, r7
 8003982:	47c0      	blx	r8
 8003984:	3001      	adds	r0, #1
 8003986:	d103      	bne.n	8003990 <_printf_common+0xb0>
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003990:	3501      	adds	r5, #1
 8003992:	e7c4      	b.n	800391e <_printf_common+0x3e>
 8003994:	2030      	movs	r0, #48	; 0x30
 8003996:	18e1      	adds	r1, r4, r3
 8003998:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a2:	4422      	add	r2, r4
 80039a4:	3302      	adds	r3, #2
 80039a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039aa:	e7c5      	b.n	8003938 <_printf_common+0x58>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4622      	mov	r2, r4
 80039b0:	4649      	mov	r1, r9
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c0      	blx	r8
 80039b6:	3001      	adds	r0, #1
 80039b8:	d0e6      	beq.n	8003988 <_printf_common+0xa8>
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7d9      	b.n	8003972 <_printf_common+0x92>
	...

080039c0 <_printf_i>:
 80039c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c4:	7e0f      	ldrb	r7, [r1, #24]
 80039c6:	4691      	mov	r9, r2
 80039c8:	2f78      	cmp	r7, #120	; 0x78
 80039ca:	4680      	mov	r8, r0
 80039cc:	460c      	mov	r4, r1
 80039ce:	469a      	mov	sl, r3
 80039d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039d6:	d807      	bhi.n	80039e8 <_printf_i+0x28>
 80039d8:	2f62      	cmp	r7, #98	; 0x62
 80039da:	d80a      	bhi.n	80039f2 <_printf_i+0x32>
 80039dc:	2f00      	cmp	r7, #0
 80039de:	f000 80d9 	beq.w	8003b94 <_printf_i+0x1d4>
 80039e2:	2f58      	cmp	r7, #88	; 0x58
 80039e4:	f000 80a4 	beq.w	8003b30 <_printf_i+0x170>
 80039e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039f0:	e03a      	b.n	8003a68 <_printf_i+0xa8>
 80039f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039f6:	2b15      	cmp	r3, #21
 80039f8:	d8f6      	bhi.n	80039e8 <_printf_i+0x28>
 80039fa:	a101      	add	r1, pc, #4	; (adr r1, 8003a00 <_printf_i+0x40>)
 80039fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003a6d 	.word	0x08003a6d
 8003a08:	080039e9 	.word	0x080039e9
 8003a0c:	080039e9 	.word	0x080039e9
 8003a10:	080039e9 	.word	0x080039e9
 8003a14:	080039e9 	.word	0x080039e9
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	080039e9 	.word	0x080039e9
 8003a20:	080039e9 	.word	0x080039e9
 8003a24:	080039e9 	.word	0x080039e9
 8003a28:	080039e9 	.word	0x080039e9
 8003a2c:	08003b7b 	.word	0x08003b7b
 8003a30:	08003a9d 	.word	0x08003a9d
 8003a34:	08003b5d 	.word	0x08003b5d
 8003a38:	080039e9 	.word	0x080039e9
 8003a3c:	080039e9 	.word	0x080039e9
 8003a40:	08003b9d 	.word	0x08003b9d
 8003a44:	080039e9 	.word	0x080039e9
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	080039e9 	.word	0x080039e9
 8003a50:	080039e9 	.word	0x080039e9
 8003a54:	08003b65 	.word	0x08003b65
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	1d1a      	adds	r2, r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	602a      	str	r2, [r5, #0]
 8003a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0a4      	b.n	8003bb6 <_printf_i+0x1f6>
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	6829      	ldr	r1, [r5, #0]
 8003a70:	0606      	lsls	r6, r0, #24
 8003a72:	f101 0304 	add.w	r3, r1, #4
 8003a76:	d50a      	bpl.n	8003a8e <_printf_i+0xce>
 8003a78:	680e      	ldr	r6, [r1, #0]
 8003a7a:	602b      	str	r3, [r5, #0]
 8003a7c:	2e00      	cmp	r6, #0
 8003a7e:	da03      	bge.n	8003a88 <_printf_i+0xc8>
 8003a80:	232d      	movs	r3, #45	; 0x2d
 8003a82:	4276      	negs	r6, r6
 8003a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a88:	230a      	movs	r3, #10
 8003a8a:	485e      	ldr	r0, [pc, #376]	; (8003c04 <_printf_i+0x244>)
 8003a8c:	e019      	b.n	8003ac2 <_printf_i+0x102>
 8003a8e:	680e      	ldr	r6, [r1, #0]
 8003a90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	bf18      	it	ne
 8003a98:	b236      	sxthne	r6, r6
 8003a9a:	e7ef      	b.n	8003a7c <_printf_i+0xbc>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	1d19      	adds	r1, r3, #4
 8003aa2:	6029      	str	r1, [r5, #0]
 8003aa4:	0601      	lsls	r1, r0, #24
 8003aa6:	d501      	bpl.n	8003aac <_printf_i+0xec>
 8003aa8:	681e      	ldr	r6, [r3, #0]
 8003aaa:	e002      	b.n	8003ab2 <_printf_i+0xf2>
 8003aac:	0646      	lsls	r6, r0, #25
 8003aae:	d5fb      	bpl.n	8003aa8 <_printf_i+0xe8>
 8003ab0:	881e      	ldrh	r6, [r3, #0]
 8003ab2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2308      	moveq	r3, #8
 8003ab8:	230a      	movne	r3, #10
 8003aba:	4852      	ldr	r0, [pc, #328]	; (8003c04 <_printf_i+0x244>)
 8003abc:	2100      	movs	r1, #0
 8003abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ac2:	6865      	ldr	r5, [r4, #4]
 8003ac4:	2d00      	cmp	r5, #0
 8003ac6:	bfa8      	it	ge
 8003ac8:	6821      	ldrge	r1, [r4, #0]
 8003aca:	60a5      	str	r5, [r4, #8]
 8003acc:	bfa4      	itt	ge
 8003ace:	f021 0104 	bicge.w	r1, r1, #4
 8003ad2:	6021      	strge	r1, [r4, #0]
 8003ad4:	b90e      	cbnz	r6, 8003ada <_printf_i+0x11a>
 8003ad6:	2d00      	cmp	r5, #0
 8003ad8:	d04d      	beq.n	8003b76 <_printf_i+0x1b6>
 8003ada:	4615      	mov	r5, r2
 8003adc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ae0:	fb03 6711 	mls	r7, r3, r1, r6
 8003ae4:	5dc7      	ldrb	r7, [r0, r7]
 8003ae6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003aea:	4637      	mov	r7, r6
 8003aec:	42bb      	cmp	r3, r7
 8003aee:	460e      	mov	r6, r1
 8003af0:	d9f4      	bls.n	8003adc <_printf_i+0x11c>
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d10b      	bne.n	8003b0e <_printf_i+0x14e>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	07de      	lsls	r6, r3, #31
 8003afa:	d508      	bpl.n	8003b0e <_printf_i+0x14e>
 8003afc:	6923      	ldr	r3, [r4, #16]
 8003afe:	6861      	ldr	r1, [r4, #4]
 8003b00:	4299      	cmp	r1, r3
 8003b02:	bfde      	ittt	le
 8003b04:	2330      	movle	r3, #48	; 0x30
 8003b06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b0e:	1b52      	subs	r2, r2, r5
 8003b10:	6122      	str	r2, [r4, #16]
 8003b12:	464b      	mov	r3, r9
 8003b14:	4621      	mov	r1, r4
 8003b16:	4640      	mov	r0, r8
 8003b18:	f8cd a000 	str.w	sl, [sp]
 8003b1c:	aa03      	add	r2, sp, #12
 8003b1e:	f7ff fedf 	bl	80038e0 <_printf_common>
 8003b22:	3001      	adds	r0, #1
 8003b24:	d14c      	bne.n	8003bc0 <_printf_i+0x200>
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2a:	b004      	add	sp, #16
 8003b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b30:	4834      	ldr	r0, [pc, #208]	; (8003c04 <_printf_i+0x244>)
 8003b32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b36:	6829      	ldr	r1, [r5, #0]
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b3e:	6029      	str	r1, [r5, #0]
 8003b40:	061d      	lsls	r5, r3, #24
 8003b42:	d514      	bpl.n	8003b6e <_printf_i+0x1ae>
 8003b44:	07df      	lsls	r7, r3, #31
 8003b46:	bf44      	itt	mi
 8003b48:	f043 0320 	orrmi.w	r3, r3, #32
 8003b4c:	6023      	strmi	r3, [r4, #0]
 8003b4e:	b91e      	cbnz	r6, 8003b58 <_printf_i+0x198>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	f023 0320 	bic.w	r3, r3, #32
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	2310      	movs	r3, #16
 8003b5a:	e7af      	b.n	8003abc <_printf_i+0xfc>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	f043 0320 	orr.w	r3, r3, #32
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	2378      	movs	r3, #120	; 0x78
 8003b66:	4828      	ldr	r0, [pc, #160]	; (8003c08 <_printf_i+0x248>)
 8003b68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b6c:	e7e3      	b.n	8003b36 <_printf_i+0x176>
 8003b6e:	0659      	lsls	r1, r3, #25
 8003b70:	bf48      	it	mi
 8003b72:	b2b6      	uxthmi	r6, r6
 8003b74:	e7e6      	b.n	8003b44 <_printf_i+0x184>
 8003b76:	4615      	mov	r5, r2
 8003b78:	e7bb      	b.n	8003af2 <_printf_i+0x132>
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	6826      	ldr	r6, [r4, #0]
 8003b7e:	1d18      	adds	r0, r3, #4
 8003b80:	6961      	ldr	r1, [r4, #20]
 8003b82:	6028      	str	r0, [r5, #0]
 8003b84:	0635      	lsls	r5, r6, #24
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	d501      	bpl.n	8003b8e <_printf_i+0x1ce>
 8003b8a:	6019      	str	r1, [r3, #0]
 8003b8c:	e002      	b.n	8003b94 <_printf_i+0x1d4>
 8003b8e:	0670      	lsls	r0, r6, #25
 8003b90:	d5fb      	bpl.n	8003b8a <_printf_i+0x1ca>
 8003b92:	8019      	strh	r1, [r3, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	4615      	mov	r5, r2
 8003b98:	6123      	str	r3, [r4, #16]
 8003b9a:	e7ba      	b.n	8003b12 <_printf_i+0x152>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	1d1a      	adds	r2, r3, #4
 8003ba2:	602a      	str	r2, [r5, #0]
 8003ba4:	681d      	ldr	r5, [r3, #0]
 8003ba6:	6862      	ldr	r2, [r4, #4]
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f001 fa1f 	bl	8004fec <memchr>
 8003bae:	b108      	cbz	r0, 8003bb4 <_printf_i+0x1f4>
 8003bb0:	1b40      	subs	r0, r0, r5
 8003bb2:	6060      	str	r0, [r4, #4]
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	6123      	str	r3, [r4, #16]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bbe:	e7a8      	b.n	8003b12 <_printf_i+0x152>
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	47d0      	blx	sl
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d0ab      	beq.n	8003b26 <_printf_i+0x166>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	079b      	lsls	r3, r3, #30
 8003bd2:	d413      	bmi.n	8003bfc <_printf_i+0x23c>
 8003bd4:	68e0      	ldr	r0, [r4, #12]
 8003bd6:	9b03      	ldr	r3, [sp, #12]
 8003bd8:	4298      	cmp	r0, r3
 8003bda:	bfb8      	it	lt
 8003bdc:	4618      	movlt	r0, r3
 8003bde:	e7a4      	b.n	8003b2a <_printf_i+0x16a>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4632      	mov	r2, r6
 8003be4:	4649      	mov	r1, r9
 8003be6:	4640      	mov	r0, r8
 8003be8:	47d0      	blx	sl
 8003bea:	3001      	adds	r0, #1
 8003bec:	d09b      	beq.n	8003b26 <_printf_i+0x166>
 8003bee:	3501      	adds	r5, #1
 8003bf0:	68e3      	ldr	r3, [r4, #12]
 8003bf2:	9903      	ldr	r1, [sp, #12]
 8003bf4:	1a5b      	subs	r3, r3, r1
 8003bf6:	42ab      	cmp	r3, r5
 8003bf8:	dcf2      	bgt.n	8003be0 <_printf_i+0x220>
 8003bfa:	e7eb      	b.n	8003bd4 <_printf_i+0x214>
 8003bfc:	2500      	movs	r5, #0
 8003bfe:	f104 0619 	add.w	r6, r4, #25
 8003c02:	e7f5      	b.n	8003bf0 <_printf_i+0x230>
 8003c04:	08006076 	.word	0x08006076
 8003c08:	08006087 	.word	0x08006087

08003c0c <iprintf>:
 8003c0c:	b40f      	push	{r0, r1, r2, r3}
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <iprintf+0x2c>)
 8003c10:	b513      	push	{r0, r1, r4, lr}
 8003c12:	681c      	ldr	r4, [r3, #0]
 8003c14:	b124      	cbz	r4, 8003c20 <iprintf+0x14>
 8003c16:	69a3      	ldr	r3, [r4, #24]
 8003c18:	b913      	cbnz	r3, 8003c20 <iprintf+0x14>
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f001 f8d4 	bl	8004dc8 <__sinit>
 8003c20:	ab05      	add	r3, sp, #20
 8003c22:	4620      	mov	r0, r4
 8003c24:	9a04      	ldr	r2, [sp, #16]
 8003c26:	68a1      	ldr	r1, [r4, #8]
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	f001 fe95 	bl	8005958 <_vfiprintf_r>
 8003c2e:	b002      	add	sp, #8
 8003c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c34:	b004      	add	sp, #16
 8003c36:	4770      	bx	lr
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <_puts_r>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	460e      	mov	r6, r1
 8003c40:	4605      	mov	r5, r0
 8003c42:	b118      	cbz	r0, 8003c4c <_puts_r+0x10>
 8003c44:	6983      	ldr	r3, [r0, #24]
 8003c46:	b90b      	cbnz	r3, 8003c4c <_puts_r+0x10>
 8003c48:	f001 f8be 	bl	8004dc8 <__sinit>
 8003c4c:	69ab      	ldr	r3, [r5, #24]
 8003c4e:	68ac      	ldr	r4, [r5, #8]
 8003c50:	b913      	cbnz	r3, 8003c58 <_puts_r+0x1c>
 8003c52:	4628      	mov	r0, r5
 8003c54:	f001 f8b8 	bl	8004dc8 <__sinit>
 8003c58:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <_puts_r+0xd0>)
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	d120      	bne.n	8003ca0 <_puts_r+0x64>
 8003c5e:	686c      	ldr	r4, [r5, #4]
 8003c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c62:	07db      	lsls	r3, r3, #31
 8003c64:	d405      	bmi.n	8003c72 <_puts_r+0x36>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	0598      	lsls	r0, r3, #22
 8003c6a:	d402      	bmi.n	8003c72 <_puts_r+0x36>
 8003c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c6e:	f001 f94e 	bl	8004f0e <__retarget_lock_acquire_recursive>
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	0719      	lsls	r1, r3, #28
 8003c76:	d51d      	bpl.n	8003cb4 <_puts_r+0x78>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	b1db      	cbz	r3, 8003cb4 <_puts_r+0x78>
 8003c7c:	3e01      	subs	r6, #1
 8003c7e:	68a3      	ldr	r3, [r4, #8]
 8003c80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c84:	3b01      	subs	r3, #1
 8003c86:	60a3      	str	r3, [r4, #8]
 8003c88:	bb39      	cbnz	r1, 8003cda <_puts_r+0x9e>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da38      	bge.n	8003d00 <_puts_r+0xc4>
 8003c8e:	4622      	mov	r2, r4
 8003c90:	210a      	movs	r1, #10
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 f848 	bl	8003d28 <__swbuf_r>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d011      	beq.n	8003cc0 <_puts_r+0x84>
 8003c9c:	250a      	movs	r5, #10
 8003c9e:	e011      	b.n	8003cc4 <_puts_r+0x88>
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <_puts_r+0xd4>)
 8003ca2:	429c      	cmp	r4, r3
 8003ca4:	d101      	bne.n	8003caa <_puts_r+0x6e>
 8003ca6:	68ac      	ldr	r4, [r5, #8]
 8003ca8:	e7da      	b.n	8003c60 <_puts_r+0x24>
 8003caa:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <_puts_r+0xd8>)
 8003cac:	429c      	cmp	r4, r3
 8003cae:	bf08      	it	eq
 8003cb0:	68ec      	ldreq	r4, [r5, #12]
 8003cb2:	e7d5      	b.n	8003c60 <_puts_r+0x24>
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 f888 	bl	8003dcc <__swsetup_r>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d0dd      	beq.n	8003c7c <_puts_r+0x40>
 8003cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8003cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cc6:	07da      	lsls	r2, r3, #31
 8003cc8:	d405      	bmi.n	8003cd6 <_puts_r+0x9a>
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	059b      	lsls	r3, r3, #22
 8003cce:	d402      	bmi.n	8003cd6 <_puts_r+0x9a>
 8003cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cd2:	f001 f91d 	bl	8004f10 <__retarget_lock_release_recursive>
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da04      	bge.n	8003ce8 <_puts_r+0xac>
 8003cde:	69a2      	ldr	r2, [r4, #24]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	dc06      	bgt.n	8003cf2 <_puts_r+0xb6>
 8003ce4:	290a      	cmp	r1, #10
 8003ce6:	d004      	beq.n	8003cf2 <_puts_r+0xb6>
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	6022      	str	r2, [r4, #0]
 8003cee:	7019      	strb	r1, [r3, #0]
 8003cf0:	e7c5      	b.n	8003c7e <_puts_r+0x42>
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f000 f817 	bl	8003d28 <__swbuf_r>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d1bf      	bne.n	8003c7e <_puts_r+0x42>
 8003cfe:	e7df      	b.n	8003cc0 <_puts_r+0x84>
 8003d00:	250a      	movs	r5, #10
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	6022      	str	r2, [r4, #0]
 8003d08:	701d      	strb	r5, [r3, #0]
 8003d0a:	e7db      	b.n	8003cc4 <_puts_r+0x88>
 8003d0c:	08006148 	.word	0x08006148
 8003d10:	08006168 	.word	0x08006168
 8003d14:	08006128 	.word	0x08006128

08003d18 <puts>:
 8003d18:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <puts+0xc>)
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f7ff bf8d 	b.w	8003c3c <_puts_r>
 8003d22:	bf00      	nop
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <__swbuf_r>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	460e      	mov	r6, r1
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	4605      	mov	r5, r0
 8003d30:	b118      	cbz	r0, 8003d3a <__swbuf_r+0x12>
 8003d32:	6983      	ldr	r3, [r0, #24]
 8003d34:	b90b      	cbnz	r3, 8003d3a <__swbuf_r+0x12>
 8003d36:	f001 f847 	bl	8004dc8 <__sinit>
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <__swbuf_r+0x98>)
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	d12b      	bne.n	8003d98 <__swbuf_r+0x70>
 8003d40:	686c      	ldr	r4, [r5, #4]
 8003d42:	69a3      	ldr	r3, [r4, #24]
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	071a      	lsls	r2, r3, #28
 8003d4a:	d52f      	bpl.n	8003dac <__swbuf_r+0x84>
 8003d4c:	6923      	ldr	r3, [r4, #16]
 8003d4e:	b36b      	cbz	r3, 8003dac <__swbuf_r+0x84>
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	6820      	ldr	r0, [r4, #0]
 8003d54:	b2f6      	uxtb	r6, r6
 8003d56:	1ac0      	subs	r0, r0, r3
 8003d58:	6963      	ldr	r3, [r4, #20]
 8003d5a:	4637      	mov	r7, r6
 8003d5c:	4283      	cmp	r3, r0
 8003d5e:	dc04      	bgt.n	8003d6a <__swbuf_r+0x42>
 8003d60:	4621      	mov	r1, r4
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 ff9c 	bl	8004ca0 <_fflush_r>
 8003d68:	bb30      	cbnz	r0, 8003db8 <__swbuf_r+0x90>
 8003d6a:	68a3      	ldr	r3, [r4, #8]
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	60a3      	str	r3, [r4, #8]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	6022      	str	r2, [r4, #0]
 8003d78:	701e      	strb	r6, [r3, #0]
 8003d7a:	6963      	ldr	r3, [r4, #20]
 8003d7c:	4283      	cmp	r3, r0
 8003d7e:	d004      	beq.n	8003d8a <__swbuf_r+0x62>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	07db      	lsls	r3, r3, #31
 8003d84:	d506      	bpl.n	8003d94 <__swbuf_r+0x6c>
 8003d86:	2e0a      	cmp	r6, #10
 8003d88:	d104      	bne.n	8003d94 <__swbuf_r+0x6c>
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 ff87 	bl	8004ca0 <_fflush_r>
 8003d92:	b988      	cbnz	r0, 8003db8 <__swbuf_r+0x90>
 8003d94:	4638      	mov	r0, r7
 8003d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <__swbuf_r+0x9c>)
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	d101      	bne.n	8003da2 <__swbuf_r+0x7a>
 8003d9e:	68ac      	ldr	r4, [r5, #8]
 8003da0:	e7cf      	b.n	8003d42 <__swbuf_r+0x1a>
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <__swbuf_r+0xa0>)
 8003da4:	429c      	cmp	r4, r3
 8003da6:	bf08      	it	eq
 8003da8:	68ec      	ldreq	r4, [r5, #12]
 8003daa:	e7ca      	b.n	8003d42 <__swbuf_r+0x1a>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f80c 	bl	8003dcc <__swsetup_r>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d0cb      	beq.n	8003d50 <__swbuf_r+0x28>
 8003db8:	f04f 37ff 	mov.w	r7, #4294967295
 8003dbc:	e7ea      	b.n	8003d94 <__swbuf_r+0x6c>
 8003dbe:	bf00      	nop
 8003dc0:	08006148 	.word	0x08006148
 8003dc4:	08006168 	.word	0x08006168
 8003dc8:	08006128 	.word	0x08006128

08003dcc <__swsetup_r>:
 8003dcc:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <__swsetup_r+0xcc>)
 8003dce:	b570      	push	{r4, r5, r6, lr}
 8003dd0:	681d      	ldr	r5, [r3, #0]
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	b125      	cbz	r5, 8003de2 <__swsetup_r+0x16>
 8003dd8:	69ab      	ldr	r3, [r5, #24]
 8003dda:	b913      	cbnz	r3, 8003de2 <__swsetup_r+0x16>
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 fff3 	bl	8004dc8 <__sinit>
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <__swsetup_r+0xd0>)
 8003de4:	429c      	cmp	r4, r3
 8003de6:	d10f      	bne.n	8003e08 <__swsetup_r+0x3c>
 8003de8:	686c      	ldr	r4, [r5, #4]
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003df0:	0719      	lsls	r1, r3, #28
 8003df2:	d42c      	bmi.n	8003e4e <__swsetup_r+0x82>
 8003df4:	06dd      	lsls	r5, r3, #27
 8003df6:	d411      	bmi.n	8003e1c <__swsetup_r+0x50>
 8003df8:	2309      	movs	r3, #9
 8003dfa:	6033      	str	r3, [r6, #0]
 8003dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	e03e      	b.n	8003e86 <__swsetup_r+0xba>
 8003e08:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <__swsetup_r+0xd4>)
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	d101      	bne.n	8003e12 <__swsetup_r+0x46>
 8003e0e:	68ac      	ldr	r4, [r5, #8]
 8003e10:	e7eb      	b.n	8003dea <__swsetup_r+0x1e>
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <__swsetup_r+0xd8>)
 8003e14:	429c      	cmp	r4, r3
 8003e16:	bf08      	it	eq
 8003e18:	68ec      	ldreq	r4, [r5, #12]
 8003e1a:	e7e6      	b.n	8003dea <__swsetup_r+0x1e>
 8003e1c:	0758      	lsls	r0, r3, #29
 8003e1e:	d512      	bpl.n	8003e46 <__swsetup_r+0x7a>
 8003e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e22:	b141      	cbz	r1, 8003e36 <__swsetup_r+0x6a>
 8003e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	d002      	beq.n	8003e32 <__swsetup_r+0x66>
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f001 fc8f 	bl	8005750 <_free_r>
 8003e32:	2300      	movs	r3, #0
 8003e34:	6363      	str	r3, [r4, #52]	; 0x34
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	89a3      	ldrh	r3, [r4, #12]
 8003e48:	f043 0308 	orr.w	r3, r3, #8
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	b94b      	cbnz	r3, 8003e66 <__swsetup_r+0x9a>
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d003      	beq.n	8003e66 <__swsetup_r+0x9a>
 8003e5e:	4621      	mov	r1, r4
 8003e60:	4630      	mov	r0, r6
 8003e62:	f001 f87b 	bl	8004f5c <__smakebuf_r>
 8003e66:	89a0      	ldrh	r0, [r4, #12]
 8003e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e6c:	f010 0301 	ands.w	r3, r0, #1
 8003e70:	d00a      	beq.n	8003e88 <__swsetup_r+0xbc>
 8003e72:	2300      	movs	r3, #0
 8003e74:	60a3      	str	r3, [r4, #8]
 8003e76:	6963      	ldr	r3, [r4, #20]
 8003e78:	425b      	negs	r3, r3
 8003e7a:	61a3      	str	r3, [r4, #24]
 8003e7c:	6923      	ldr	r3, [r4, #16]
 8003e7e:	b943      	cbnz	r3, 8003e92 <__swsetup_r+0xc6>
 8003e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e84:	d1ba      	bne.n	8003dfc <__swsetup_r+0x30>
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	0781      	lsls	r1, r0, #30
 8003e8a:	bf58      	it	pl
 8003e8c:	6963      	ldrpl	r3, [r4, #20]
 8003e8e:	60a3      	str	r3, [r4, #8]
 8003e90:	e7f4      	b.n	8003e7c <__swsetup_r+0xb0>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e7f7      	b.n	8003e86 <__swsetup_r+0xba>
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c
 8003e9c:	08006148 	.word	0x08006148
 8003ea0:	08006168 	.word	0x08006168
 8003ea4:	08006128 	.word	0x08006128

08003ea8 <quorem>:
 8003ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	6903      	ldr	r3, [r0, #16]
 8003eae:	690c      	ldr	r4, [r1, #16]
 8003eb0:	4607      	mov	r7, r0
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	f2c0 8082 	blt.w	8003fbc <quorem+0x114>
 8003eb8:	3c01      	subs	r4, #1
 8003eba:	f100 0514 	add.w	r5, r0, #20
 8003ebe:	f101 0814 	add.w	r8, r1, #20
 8003ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ed8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ee0:	d331      	bcc.n	8003f46 <quorem+0x9e>
 8003ee2:	f04f 0e00 	mov.w	lr, #0
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	46ac      	mov	ip, r5
 8003eea:	46f2      	mov	sl, lr
 8003eec:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ef0:	b293      	uxth	r3, r2
 8003ef2:	fb06 e303 	mla	r3, r6, r3, lr
 8003ef6:	0c12      	lsrs	r2, r2, #16
 8003ef8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	fb06 e202 	mla	r2, r6, r2, lr
 8003f02:	ebaa 0303 	sub.w	r3, sl, r3
 8003f06:	f8dc a000 	ldr.w	sl, [ip]
 8003f0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f0e:	fa1f fa8a 	uxth.w	sl, sl
 8003f12:	4453      	add	r3, sl
 8003f14:	f8dc a000 	ldr.w	sl, [ip]
 8003f18:	b292      	uxth	r2, r2
 8003f1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003f1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f28:	4581      	cmp	r9, r0
 8003f2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f2e:	f84c 3b04 	str.w	r3, [ip], #4
 8003f32:	d2db      	bcs.n	8003eec <quorem+0x44>
 8003f34:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f38:	b92b      	cbnz	r3, 8003f46 <quorem+0x9e>
 8003f3a:	9b01      	ldr	r3, [sp, #4]
 8003f3c:	3b04      	subs	r3, #4
 8003f3e:	429d      	cmp	r5, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	d32f      	bcc.n	8003fa4 <quorem+0xfc>
 8003f44:	613c      	str	r4, [r7, #16]
 8003f46:	4638      	mov	r0, r7
 8003f48:	f001 faea 	bl	8005520 <__mcmp>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	db25      	blt.n	8003f9c <quorem+0xf4>
 8003f50:	4628      	mov	r0, r5
 8003f52:	f04f 0c00 	mov.w	ip, #0
 8003f56:	3601      	adds	r6, #1
 8003f58:	f858 1b04 	ldr.w	r1, [r8], #4
 8003f5c:	f8d0 e000 	ldr.w	lr, [r0]
 8003f60:	b28b      	uxth	r3, r1
 8003f62:	ebac 0303 	sub.w	r3, ip, r3
 8003f66:	fa1f f28e 	uxth.w	r2, lr
 8003f6a:	4413      	add	r3, r2
 8003f6c:	0c0a      	lsrs	r2, r1, #16
 8003f6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f7c:	45c1      	cmp	r9, r8
 8003f7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f82:	f840 3b04 	str.w	r3, [r0], #4
 8003f86:	d2e7      	bcs.n	8003f58 <quorem+0xb0>
 8003f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f90:	b922      	cbnz	r2, 8003f9c <quorem+0xf4>
 8003f92:	3b04      	subs	r3, #4
 8003f94:	429d      	cmp	r5, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	d30a      	bcc.n	8003fb0 <quorem+0x108>
 8003f9a:	613c      	str	r4, [r7, #16]
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	b003      	add	sp, #12
 8003fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	3b04      	subs	r3, #4
 8003fa8:	2a00      	cmp	r2, #0
 8003faa:	d1cb      	bne.n	8003f44 <quorem+0x9c>
 8003fac:	3c01      	subs	r4, #1
 8003fae:	e7c6      	b.n	8003f3e <quorem+0x96>
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	3b04      	subs	r3, #4
 8003fb4:	2a00      	cmp	r2, #0
 8003fb6:	d1f0      	bne.n	8003f9a <quorem+0xf2>
 8003fb8:	3c01      	subs	r4, #1
 8003fba:	e7eb      	b.n	8003f94 <quorem+0xec>
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e7ee      	b.n	8003f9e <quorem+0xf6>

08003fc0 <_dtoa_r>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003fca:	b099      	sub	sp, #100	; 0x64
 8003fcc:	4605      	mov	r5, r0
 8003fce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003fd6:	b974      	cbnz	r4, 8003ff6 <_dtoa_r+0x36>
 8003fd8:	2010      	movs	r0, #16
 8003fda:	f000 ffff 	bl	8004fdc <malloc>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6268      	str	r0, [r5, #36]	; 0x24
 8003fe2:	b920      	cbnz	r0, 8003fee <_dtoa_r+0x2e>
 8003fe4:	21ea      	movs	r1, #234	; 0xea
 8003fe6:	4ba8      	ldr	r3, [pc, #672]	; (8004288 <_dtoa_r+0x2c8>)
 8003fe8:	48a8      	ldr	r0, [pc, #672]	; (800428c <_dtoa_r+0x2cc>)
 8003fea:	f001 fe4b 	bl	8005c84 <__assert_func>
 8003fee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ff2:	6004      	str	r4, [r0, #0]
 8003ff4:	60c4      	str	r4, [r0, #12]
 8003ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	b151      	cbz	r1, 8004012 <_dtoa_r+0x52>
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	2301      	movs	r3, #1
 8004000:	4093      	lsls	r3, r2
 8004002:	604a      	str	r2, [r1, #4]
 8004004:	608b      	str	r3, [r1, #8]
 8004006:	4628      	mov	r0, r5
 8004008:	f001 f84c 	bl	80050a4 <_Bfree>
 800400c:	2200      	movs	r2, #0
 800400e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	1e3b      	subs	r3, r7, #0
 8004014:	bfaf      	iteee	ge
 8004016:	2300      	movge	r3, #0
 8004018:	2201      	movlt	r2, #1
 800401a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800401e:	9305      	strlt	r3, [sp, #20]
 8004020:	bfa8      	it	ge
 8004022:	f8c8 3000 	strge.w	r3, [r8]
 8004026:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800402a:	4b99      	ldr	r3, [pc, #612]	; (8004290 <_dtoa_r+0x2d0>)
 800402c:	bfb8      	it	lt
 800402e:	f8c8 2000 	strlt.w	r2, [r8]
 8004032:	ea33 0309 	bics.w	r3, r3, r9
 8004036:	d119      	bne.n	800406c <_dtoa_r+0xac>
 8004038:	f242 730f 	movw	r3, #9999	; 0x270f
 800403c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004044:	4333      	orrs	r3, r6
 8004046:	f000 857f 	beq.w	8004b48 <_dtoa_r+0xb88>
 800404a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800404c:	b953      	cbnz	r3, 8004064 <_dtoa_r+0xa4>
 800404e:	4b91      	ldr	r3, [pc, #580]	; (8004294 <_dtoa_r+0x2d4>)
 8004050:	e022      	b.n	8004098 <_dtoa_r+0xd8>
 8004052:	4b91      	ldr	r3, [pc, #580]	; (8004298 <_dtoa_r+0x2d8>)
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	3308      	adds	r3, #8
 8004058:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	9803      	ldr	r0, [sp, #12]
 800405e:	b019      	add	sp, #100	; 0x64
 8004060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004064:	4b8b      	ldr	r3, [pc, #556]	; (8004294 <_dtoa_r+0x2d4>)
 8004066:	9303      	str	r3, [sp, #12]
 8004068:	3303      	adds	r3, #3
 800406a:	e7f5      	b.n	8004058 <_dtoa_r+0x98>
 800406c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004070:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004078:	2200      	movs	r2, #0
 800407a:	2300      	movs	r3, #0
 800407c:	f7fc fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8004080:	4680      	mov	r8, r0
 8004082:	b158      	cbz	r0, 800409c <_dtoa_r+0xdc>
 8004084:	2301      	movs	r3, #1
 8004086:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8558 	beq.w	8004b42 <_dtoa_r+0xb82>
 8004092:	4882      	ldr	r0, [pc, #520]	; (800429c <_dtoa_r+0x2dc>)
 8004094:	6018      	str	r0, [r3, #0]
 8004096:	1e43      	subs	r3, r0, #1
 8004098:	9303      	str	r3, [sp, #12]
 800409a:	e7df      	b.n	800405c <_dtoa_r+0x9c>
 800409c:	ab16      	add	r3, sp, #88	; 0x58
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	ab17      	add	r3, sp, #92	; 0x5c
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4628      	mov	r0, r5
 80040a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80040aa:	f001 fae1 	bl	8005670 <__d2b>
 80040ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80040b2:	4683      	mov	fp, r0
 80040b4:	2c00      	cmp	r4, #0
 80040b6:	d07f      	beq.n	80041b8 <_dtoa_r+0x1f8>
 80040b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80040c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80040ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80040ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80040d2:	2200      	movs	r2, #0
 80040d4:	4b72      	ldr	r3, [pc, #456]	; (80042a0 <_dtoa_r+0x2e0>)
 80040d6:	f7fc f847 	bl	8000168 <__aeabi_dsub>
 80040da:	a365      	add	r3, pc, #404	; (adr r3, 8004270 <_dtoa_r+0x2b0>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f7fc f9fa 	bl	80004d8 <__aeabi_dmul>
 80040e4:	a364      	add	r3, pc, #400	; (adr r3, 8004278 <_dtoa_r+0x2b8>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f83f 	bl	800016c <__adddf3>
 80040ee:	4606      	mov	r6, r0
 80040f0:	4620      	mov	r0, r4
 80040f2:	460f      	mov	r7, r1
 80040f4:	f7fc f986 	bl	8000404 <__aeabi_i2d>
 80040f8:	a361      	add	r3, pc, #388	; (adr r3, 8004280 <_dtoa_r+0x2c0>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc f9eb 	bl	80004d8 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4630      	mov	r0, r6
 8004108:	4639      	mov	r1, r7
 800410a:	f7fc f82f 	bl	800016c <__adddf3>
 800410e:	4606      	mov	r6, r0
 8004110:	460f      	mov	r7, r1
 8004112:	f7fc fc91 	bl	8000a38 <__aeabi_d2iz>
 8004116:	2200      	movs	r2, #0
 8004118:	4682      	mov	sl, r0
 800411a:	2300      	movs	r3, #0
 800411c:	4630      	mov	r0, r6
 800411e:	4639      	mov	r1, r7
 8004120:	f7fc fc4c 	bl	80009bc <__aeabi_dcmplt>
 8004124:	b148      	cbz	r0, 800413a <_dtoa_r+0x17a>
 8004126:	4650      	mov	r0, sl
 8004128:	f7fc f96c 	bl	8000404 <__aeabi_i2d>
 800412c:	4632      	mov	r2, r6
 800412e:	463b      	mov	r3, r7
 8004130:	f7fc fc3a 	bl	80009a8 <__aeabi_dcmpeq>
 8004134:	b908      	cbnz	r0, 800413a <_dtoa_r+0x17a>
 8004136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800413a:	f1ba 0f16 	cmp.w	sl, #22
 800413e:	d858      	bhi.n	80041f2 <_dtoa_r+0x232>
 8004140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004144:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <_dtoa_r+0x2e4>)
 8004146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fc35 	bl	80009bc <__aeabi_dcmplt>
 8004152:	2800      	cmp	r0, #0
 8004154:	d04f      	beq.n	80041f6 <_dtoa_r+0x236>
 8004156:	2300      	movs	r3, #0
 8004158:	f10a 3aff 	add.w	sl, sl, #4294967295
 800415c:	930f      	str	r3, [sp, #60]	; 0x3c
 800415e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004160:	1b1c      	subs	r4, r3, r4
 8004162:	1e63      	subs	r3, r4, #1
 8004164:	9309      	str	r3, [sp, #36]	; 0x24
 8004166:	bf49      	itett	mi
 8004168:	f1c4 0301 	rsbmi	r3, r4, #1
 800416c:	2300      	movpl	r3, #0
 800416e:	9306      	strmi	r3, [sp, #24]
 8004170:	2300      	movmi	r3, #0
 8004172:	bf54      	ite	pl
 8004174:	9306      	strpl	r3, [sp, #24]
 8004176:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004178:	f1ba 0f00 	cmp.w	sl, #0
 800417c:	db3d      	blt.n	80041fa <_dtoa_r+0x23a>
 800417e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004180:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004184:	4453      	add	r3, sl
 8004186:	9309      	str	r3, [sp, #36]	; 0x24
 8004188:	2300      	movs	r3, #0
 800418a:	930a      	str	r3, [sp, #40]	; 0x28
 800418c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800418e:	2b09      	cmp	r3, #9
 8004190:	f200 808c 	bhi.w	80042ac <_dtoa_r+0x2ec>
 8004194:	2b05      	cmp	r3, #5
 8004196:	bfc4      	itt	gt
 8004198:	3b04      	subgt	r3, #4
 800419a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800419c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800419e:	bfc8      	it	gt
 80041a0:	2400      	movgt	r4, #0
 80041a2:	f1a3 0302 	sub.w	r3, r3, #2
 80041a6:	bfd8      	it	le
 80041a8:	2401      	movle	r4, #1
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	f200 808a 	bhi.w	80042c4 <_dtoa_r+0x304>
 80041b0:	e8df f003 	tbb	[pc, r3]
 80041b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80041b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80041bc:	441c      	add	r4, r3
 80041be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	bfc3      	ittte	gt
 80041c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80041ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80041d2:	f1c3 0320 	rsble	r3, r3, #32
 80041d6:	bfc6      	itte	gt
 80041d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80041dc:	4318      	orrgt	r0, r3
 80041de:	fa06 f003 	lslle.w	r0, r6, r3
 80041e2:	f7fc f8ff 	bl	80003e4 <__aeabi_ui2d>
 80041e6:	2301      	movs	r3, #1
 80041e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80041ec:	3c01      	subs	r4, #1
 80041ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80041f0:	e76f      	b.n	80040d2 <_dtoa_r+0x112>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e7b2      	b.n	800415c <_dtoa_r+0x19c>
 80041f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80041f8:	e7b1      	b.n	800415e <_dtoa_r+0x19e>
 80041fa:	9b06      	ldr	r3, [sp, #24]
 80041fc:	eba3 030a 	sub.w	r3, r3, sl
 8004200:	9306      	str	r3, [sp, #24]
 8004202:	f1ca 0300 	rsb	r3, sl, #0
 8004206:	930a      	str	r3, [sp, #40]	; 0x28
 8004208:	2300      	movs	r3, #0
 800420a:	930e      	str	r3, [sp, #56]	; 0x38
 800420c:	e7be      	b.n	800418c <_dtoa_r+0x1cc>
 800420e:	2300      	movs	r3, #0
 8004210:	930b      	str	r3, [sp, #44]	; 0x2c
 8004212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004214:	2b00      	cmp	r3, #0
 8004216:	dc58      	bgt.n	80042ca <_dtoa_r+0x30a>
 8004218:	f04f 0901 	mov.w	r9, #1
 800421c:	464b      	mov	r3, r9
 800421e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004222:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004226:	2200      	movs	r2, #0
 8004228:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800422a:	6042      	str	r2, [r0, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	f102 0614 	add.w	r6, r2, #20
 8004232:	429e      	cmp	r6, r3
 8004234:	6841      	ldr	r1, [r0, #4]
 8004236:	d94e      	bls.n	80042d6 <_dtoa_r+0x316>
 8004238:	4628      	mov	r0, r5
 800423a:	f000 fef3 	bl	8005024 <_Balloc>
 800423e:	9003      	str	r0, [sp, #12]
 8004240:	2800      	cmp	r0, #0
 8004242:	d14c      	bne.n	80042de <_dtoa_r+0x31e>
 8004244:	4602      	mov	r2, r0
 8004246:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <_dtoa_r+0x2e8>)
 800424c:	e6cc      	b.n	8003fe8 <_dtoa_r+0x28>
 800424e:	2301      	movs	r3, #1
 8004250:	e7de      	b.n	8004210 <_dtoa_r+0x250>
 8004252:	2300      	movs	r3, #0
 8004254:	930b      	str	r3, [sp, #44]	; 0x2c
 8004256:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004258:	eb0a 0903 	add.w	r9, sl, r3
 800425c:	f109 0301 	add.w	r3, r9, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	9308      	str	r3, [sp, #32]
 8004264:	bfb8      	it	lt
 8004266:	2301      	movlt	r3, #1
 8004268:	e7dd      	b.n	8004226 <_dtoa_r+0x266>
 800426a:	2301      	movs	r3, #1
 800426c:	e7f2      	b.n	8004254 <_dtoa_r+0x294>
 800426e:	bf00      	nop
 8004270:	636f4361 	.word	0x636f4361
 8004274:	3fd287a7 	.word	0x3fd287a7
 8004278:	8b60c8b3 	.word	0x8b60c8b3
 800427c:	3fc68a28 	.word	0x3fc68a28
 8004280:	509f79fb 	.word	0x509f79fb
 8004284:	3fd34413 	.word	0x3fd34413
 8004288:	080060a5 	.word	0x080060a5
 800428c:	080060bc 	.word	0x080060bc
 8004290:	7ff00000 	.word	0x7ff00000
 8004294:	080060a1 	.word	0x080060a1
 8004298:	08006098 	.word	0x08006098
 800429c:	08006075 	.word	0x08006075
 80042a0:	3ff80000 	.word	0x3ff80000
 80042a4:	08006210 	.word	0x08006210
 80042a8:	08006117 	.word	0x08006117
 80042ac:	2401      	movs	r4, #1
 80042ae:	2300      	movs	r3, #0
 80042b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80042b2:	9322      	str	r3, [sp, #136]	; 0x88
 80042b4:	f04f 39ff 	mov.w	r9, #4294967295
 80042b8:	2200      	movs	r2, #0
 80042ba:	2312      	movs	r3, #18
 80042bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80042c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80042c2:	e7b0      	b.n	8004226 <_dtoa_r+0x266>
 80042c4:	2301      	movs	r3, #1
 80042c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042c8:	e7f4      	b.n	80042b4 <_dtoa_r+0x2f4>
 80042ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80042ce:	464b      	mov	r3, r9
 80042d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80042d4:	e7a7      	b.n	8004226 <_dtoa_r+0x266>
 80042d6:	3101      	adds	r1, #1
 80042d8:	6041      	str	r1, [r0, #4]
 80042da:	0052      	lsls	r2, r2, #1
 80042dc:	e7a7      	b.n	800422e <_dtoa_r+0x26e>
 80042de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042e0:	9a03      	ldr	r2, [sp, #12]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	9b08      	ldr	r3, [sp, #32]
 80042e6:	2b0e      	cmp	r3, #14
 80042e8:	f200 80a8 	bhi.w	800443c <_dtoa_r+0x47c>
 80042ec:	2c00      	cmp	r4, #0
 80042ee:	f000 80a5 	beq.w	800443c <_dtoa_r+0x47c>
 80042f2:	f1ba 0f00 	cmp.w	sl, #0
 80042f6:	dd34      	ble.n	8004362 <_dtoa_r+0x3a2>
 80042f8:	4a9a      	ldr	r2, [pc, #616]	; (8004564 <_dtoa_r+0x5a4>)
 80042fa:	f00a 030f 	and.w	r3, sl, #15
 80042fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004302:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004306:	e9d3 3400 	ldrd	r3, r4, [r3]
 800430a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800430e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004312:	d016      	beq.n	8004342 <_dtoa_r+0x382>
 8004314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004318:	4b93      	ldr	r3, [pc, #588]	; (8004568 <_dtoa_r+0x5a8>)
 800431a:	2703      	movs	r7, #3
 800431c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004320:	f7fc fa04 	bl	800072c <__aeabi_ddiv>
 8004324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004328:	f004 040f 	and.w	r4, r4, #15
 800432c:	4e8e      	ldr	r6, [pc, #568]	; (8004568 <_dtoa_r+0x5a8>)
 800432e:	b954      	cbnz	r4, 8004346 <_dtoa_r+0x386>
 8004330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004338:	f7fc f9f8 	bl	800072c <__aeabi_ddiv>
 800433c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004340:	e029      	b.n	8004396 <_dtoa_r+0x3d6>
 8004342:	2702      	movs	r7, #2
 8004344:	e7f2      	b.n	800432c <_dtoa_r+0x36c>
 8004346:	07e1      	lsls	r1, r4, #31
 8004348:	d508      	bpl.n	800435c <_dtoa_r+0x39c>
 800434a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800434e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004352:	f7fc f8c1 	bl	80004d8 <__aeabi_dmul>
 8004356:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800435a:	3701      	adds	r7, #1
 800435c:	1064      	asrs	r4, r4, #1
 800435e:	3608      	adds	r6, #8
 8004360:	e7e5      	b.n	800432e <_dtoa_r+0x36e>
 8004362:	f000 80a5 	beq.w	80044b0 <_dtoa_r+0x4f0>
 8004366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800436a:	f1ca 0400 	rsb	r4, sl, #0
 800436e:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <_dtoa_r+0x5a4>)
 8004370:	f004 020f 	and.w	r2, r4, #15
 8004374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fc f8ac 	bl	80004d8 <__aeabi_dmul>
 8004380:	2702      	movs	r7, #2
 8004382:	2300      	movs	r3, #0
 8004384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004388:	4e77      	ldr	r6, [pc, #476]	; (8004568 <_dtoa_r+0x5a8>)
 800438a:	1124      	asrs	r4, r4, #4
 800438c:	2c00      	cmp	r4, #0
 800438e:	f040 8084 	bne.w	800449a <_dtoa_r+0x4da>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1d2      	bne.n	800433c <_dtoa_r+0x37c>
 8004396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 808b 	beq.w	80044b4 <_dtoa_r+0x4f4>
 800439e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043aa:	2200      	movs	r2, #0
 80043ac:	4b6f      	ldr	r3, [pc, #444]	; (800456c <_dtoa_r+0x5ac>)
 80043ae:	f7fc fb05 	bl	80009bc <__aeabi_dcmplt>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d07e      	beq.n	80044b4 <_dtoa_r+0x4f4>
 80043b6:	9b08      	ldr	r3, [sp, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d07b      	beq.n	80044b4 <_dtoa_r+0x4f4>
 80043bc:	f1b9 0f00 	cmp.w	r9, #0
 80043c0:	dd38      	ble.n	8004434 <_dtoa_r+0x474>
 80043c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043c6:	2200      	movs	r2, #0
 80043c8:	4b69      	ldr	r3, [pc, #420]	; (8004570 <_dtoa_r+0x5b0>)
 80043ca:	f7fc f885 	bl	80004d8 <__aeabi_dmul>
 80043ce:	464c      	mov	r4, r9
 80043d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80043d8:	3701      	adds	r7, #1
 80043da:	4638      	mov	r0, r7
 80043dc:	f7fc f812 	bl	8000404 <__aeabi_i2d>
 80043e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e4:	f7fc f878 	bl	80004d8 <__aeabi_dmul>
 80043e8:	2200      	movs	r2, #0
 80043ea:	4b62      	ldr	r3, [pc, #392]	; (8004574 <_dtoa_r+0x5b4>)
 80043ec:	f7fb febe 	bl	800016c <__adddf3>
 80043f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80043f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043f8:	9611      	str	r6, [sp, #68]	; 0x44
 80043fa:	2c00      	cmp	r4, #0
 80043fc:	d15d      	bne.n	80044ba <_dtoa_r+0x4fa>
 80043fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004402:	2200      	movs	r2, #0
 8004404:	4b5c      	ldr	r3, [pc, #368]	; (8004578 <_dtoa_r+0x5b8>)
 8004406:	f7fb feaf 	bl	8000168 <__aeabi_dsub>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004412:	4633      	mov	r3, r6
 8004414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004416:	f7fc faef 	bl	80009f8 <__aeabi_dcmpgt>
 800441a:	2800      	cmp	r0, #0
 800441c:	f040 829c 	bne.w	8004958 <_dtoa_r+0x998>
 8004420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004426:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800442a:	f7fc fac7 	bl	80009bc <__aeabi_dcmplt>
 800442e:	2800      	cmp	r0, #0
 8004430:	f040 8290 	bne.w	8004954 <_dtoa_r+0x994>
 8004434:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004438:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800443c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800443e:	2b00      	cmp	r3, #0
 8004440:	f2c0 8152 	blt.w	80046e8 <_dtoa_r+0x728>
 8004444:	f1ba 0f0e 	cmp.w	sl, #14
 8004448:	f300 814e 	bgt.w	80046e8 <_dtoa_r+0x728>
 800444c:	4b45      	ldr	r3, [pc, #276]	; (8004564 <_dtoa_r+0x5a4>)
 800444e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004452:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004456:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800445a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800445c:	2b00      	cmp	r3, #0
 800445e:	f280 80db 	bge.w	8004618 <_dtoa_r+0x658>
 8004462:	9b08      	ldr	r3, [sp, #32]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f300 80d7 	bgt.w	8004618 <_dtoa_r+0x658>
 800446a:	f040 8272 	bne.w	8004952 <_dtoa_r+0x992>
 800446e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004472:	2200      	movs	r2, #0
 8004474:	4b40      	ldr	r3, [pc, #256]	; (8004578 <_dtoa_r+0x5b8>)
 8004476:	f7fc f82f 	bl	80004d8 <__aeabi_dmul>
 800447a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800447e:	f7fc fab1 	bl	80009e4 <__aeabi_dcmpge>
 8004482:	9c08      	ldr	r4, [sp, #32]
 8004484:	4626      	mov	r6, r4
 8004486:	2800      	cmp	r0, #0
 8004488:	f040 8248 	bne.w	800491c <_dtoa_r+0x95c>
 800448c:	2331      	movs	r3, #49	; 0x31
 800448e:	9f03      	ldr	r7, [sp, #12]
 8004490:	f10a 0a01 	add.w	sl, sl, #1
 8004494:	f807 3b01 	strb.w	r3, [r7], #1
 8004498:	e244      	b.n	8004924 <_dtoa_r+0x964>
 800449a:	07e2      	lsls	r2, r4, #31
 800449c:	d505      	bpl.n	80044aa <_dtoa_r+0x4ea>
 800449e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044a2:	f7fc f819 	bl	80004d8 <__aeabi_dmul>
 80044a6:	2301      	movs	r3, #1
 80044a8:	3701      	adds	r7, #1
 80044aa:	1064      	asrs	r4, r4, #1
 80044ac:	3608      	adds	r6, #8
 80044ae:	e76d      	b.n	800438c <_dtoa_r+0x3cc>
 80044b0:	2702      	movs	r7, #2
 80044b2:	e770      	b.n	8004396 <_dtoa_r+0x3d6>
 80044b4:	46d0      	mov	r8, sl
 80044b6:	9c08      	ldr	r4, [sp, #32]
 80044b8:	e78f      	b.n	80043da <_dtoa_r+0x41a>
 80044ba:	9903      	ldr	r1, [sp, #12]
 80044bc:	4b29      	ldr	r3, [pc, #164]	; (8004564 <_dtoa_r+0x5a4>)
 80044be:	4421      	add	r1, r4
 80044c0:	9112      	str	r1, [sp, #72]	; 0x48
 80044c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80044cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044d0:	2900      	cmp	r1, #0
 80044d2:	d055      	beq.n	8004580 <_dtoa_r+0x5c0>
 80044d4:	2000      	movs	r0, #0
 80044d6:	4929      	ldr	r1, [pc, #164]	; (800457c <_dtoa_r+0x5bc>)
 80044d8:	f7fc f928 	bl	800072c <__aeabi_ddiv>
 80044dc:	463b      	mov	r3, r7
 80044de:	4632      	mov	r2, r6
 80044e0:	f7fb fe42 	bl	8000168 <__aeabi_dsub>
 80044e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044e8:	9f03      	ldr	r7, [sp, #12]
 80044ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ee:	f7fc faa3 	bl	8000a38 <__aeabi_d2iz>
 80044f2:	4604      	mov	r4, r0
 80044f4:	f7fb ff86 	bl	8000404 <__aeabi_i2d>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004500:	f7fb fe32 	bl	8000168 <__aeabi_dsub>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	3430      	adds	r4, #48	; 0x30
 800450a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800450e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004512:	f807 4b01 	strb.w	r4, [r7], #1
 8004516:	f7fc fa51 	bl	80009bc <__aeabi_dcmplt>
 800451a:	2800      	cmp	r0, #0
 800451c:	d174      	bne.n	8004608 <_dtoa_r+0x648>
 800451e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004522:	2000      	movs	r0, #0
 8004524:	4911      	ldr	r1, [pc, #68]	; (800456c <_dtoa_r+0x5ac>)
 8004526:	f7fb fe1f 	bl	8000168 <__aeabi_dsub>
 800452a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800452e:	f7fc fa45 	bl	80009bc <__aeabi_dcmplt>
 8004532:	2800      	cmp	r0, #0
 8004534:	f040 80b7 	bne.w	80046a6 <_dtoa_r+0x6e6>
 8004538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800453a:	429f      	cmp	r7, r3
 800453c:	f43f af7a 	beq.w	8004434 <_dtoa_r+0x474>
 8004540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004544:	2200      	movs	r2, #0
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <_dtoa_r+0x5b0>)
 8004548:	f7fb ffc6 	bl	80004d8 <__aeabi_dmul>
 800454c:	2200      	movs	r2, #0
 800454e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <_dtoa_r+0x5b0>)
 8004558:	f7fb ffbe 	bl	80004d8 <__aeabi_dmul>
 800455c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004560:	e7c3      	b.n	80044ea <_dtoa_r+0x52a>
 8004562:	bf00      	nop
 8004564:	08006210 	.word	0x08006210
 8004568:	080061e8 	.word	0x080061e8
 800456c:	3ff00000 	.word	0x3ff00000
 8004570:	40240000 	.word	0x40240000
 8004574:	401c0000 	.word	0x401c0000
 8004578:	40140000 	.word	0x40140000
 800457c:	3fe00000 	.word	0x3fe00000
 8004580:	4630      	mov	r0, r6
 8004582:	4639      	mov	r1, r7
 8004584:	f7fb ffa8 	bl	80004d8 <__aeabi_dmul>
 8004588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800458a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800458e:	9c03      	ldr	r4, [sp, #12]
 8004590:	9314      	str	r3, [sp, #80]	; 0x50
 8004592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004596:	f7fc fa4f 	bl	8000a38 <__aeabi_d2iz>
 800459a:	9015      	str	r0, [sp, #84]	; 0x54
 800459c:	f7fb ff32 	bl	8000404 <__aeabi_i2d>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045a8:	f7fb fdde 	bl	8000168 <__aeabi_dsub>
 80045ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045ae:	4606      	mov	r6, r0
 80045b0:	3330      	adds	r3, #48	; 0x30
 80045b2:	f804 3b01 	strb.w	r3, [r4], #1
 80045b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045b8:	460f      	mov	r7, r1
 80045ba:	429c      	cmp	r4, r3
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	d124      	bne.n	800460c <_dtoa_r+0x64c>
 80045c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045c6:	4bb0      	ldr	r3, [pc, #704]	; (8004888 <_dtoa_r+0x8c8>)
 80045c8:	f7fb fdd0 	bl	800016c <__adddf3>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4630      	mov	r0, r6
 80045d2:	4639      	mov	r1, r7
 80045d4:	f7fc fa10 	bl	80009f8 <__aeabi_dcmpgt>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d163      	bne.n	80046a4 <_dtoa_r+0x6e4>
 80045dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045e0:	2000      	movs	r0, #0
 80045e2:	49a9      	ldr	r1, [pc, #676]	; (8004888 <_dtoa_r+0x8c8>)
 80045e4:	f7fb fdc0 	bl	8000168 <__aeabi_dsub>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4630      	mov	r0, r6
 80045ee:	4639      	mov	r1, r7
 80045f0:	f7fc f9e4 	bl	80009bc <__aeabi_dcmplt>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f43f af1d 	beq.w	8004434 <_dtoa_r+0x474>
 80045fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80045fc:	1e7b      	subs	r3, r7, #1
 80045fe:	9314      	str	r3, [sp, #80]	; 0x50
 8004600:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d0f8      	beq.n	80045fa <_dtoa_r+0x63a>
 8004608:	46c2      	mov	sl, r8
 800460a:	e03b      	b.n	8004684 <_dtoa_r+0x6c4>
 800460c:	4b9f      	ldr	r3, [pc, #636]	; (800488c <_dtoa_r+0x8cc>)
 800460e:	f7fb ff63 	bl	80004d8 <__aeabi_dmul>
 8004612:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004616:	e7bc      	b.n	8004592 <_dtoa_r+0x5d2>
 8004618:	9f03      	ldr	r7, [sp, #12]
 800461a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800461e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	f7fc f881 	bl	800072c <__aeabi_ddiv>
 800462a:	f7fc fa05 	bl	8000a38 <__aeabi_d2iz>
 800462e:	4604      	mov	r4, r0
 8004630:	f7fb fee8 	bl	8000404 <__aeabi_i2d>
 8004634:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004638:	f7fb ff4e 	bl	80004d8 <__aeabi_dmul>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4640      	mov	r0, r8
 8004642:	4649      	mov	r1, r9
 8004644:	f7fb fd90 	bl	8000168 <__aeabi_dsub>
 8004648:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800464c:	f807 6b01 	strb.w	r6, [r7], #1
 8004650:	9e03      	ldr	r6, [sp, #12]
 8004652:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004656:	1bbe      	subs	r6, r7, r6
 8004658:	45b4      	cmp	ip, r6
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	d136      	bne.n	80046ce <_dtoa_r+0x70e>
 8004660:	f7fb fd84 	bl	800016c <__adddf3>
 8004664:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004668:	4680      	mov	r8, r0
 800466a:	4689      	mov	r9, r1
 800466c:	f7fc f9c4 	bl	80009f8 <__aeabi_dcmpgt>
 8004670:	bb58      	cbnz	r0, 80046ca <_dtoa_r+0x70a>
 8004672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004676:	4640      	mov	r0, r8
 8004678:	4649      	mov	r1, r9
 800467a:	f7fc f995 	bl	80009a8 <__aeabi_dcmpeq>
 800467e:	b108      	cbz	r0, 8004684 <_dtoa_r+0x6c4>
 8004680:	07e1      	lsls	r1, r4, #31
 8004682:	d422      	bmi.n	80046ca <_dtoa_r+0x70a>
 8004684:	4628      	mov	r0, r5
 8004686:	4659      	mov	r1, fp
 8004688:	f000 fd0c 	bl	80050a4 <_Bfree>
 800468c:	2300      	movs	r3, #0
 800468e:	703b      	strb	r3, [r7, #0]
 8004690:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004692:	f10a 0001 	add.w	r0, sl, #1
 8004696:	6018      	str	r0, [r3, #0]
 8004698:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800469a:	2b00      	cmp	r3, #0
 800469c:	f43f acde 	beq.w	800405c <_dtoa_r+0x9c>
 80046a0:	601f      	str	r7, [r3, #0]
 80046a2:	e4db      	b.n	800405c <_dtoa_r+0x9c>
 80046a4:	4627      	mov	r7, r4
 80046a6:	463b      	mov	r3, r7
 80046a8:	461f      	mov	r7, r3
 80046aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046ae:	2a39      	cmp	r2, #57	; 0x39
 80046b0:	d107      	bne.n	80046c2 <_dtoa_r+0x702>
 80046b2:	9a03      	ldr	r2, [sp, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1f7      	bne.n	80046a8 <_dtoa_r+0x6e8>
 80046b8:	2230      	movs	r2, #48	; 0x30
 80046ba:	9903      	ldr	r1, [sp, #12]
 80046bc:	f108 0801 	add.w	r8, r8, #1
 80046c0:	700a      	strb	r2, [r1, #0]
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	3201      	adds	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e79e      	b.n	8004608 <_dtoa_r+0x648>
 80046ca:	46d0      	mov	r8, sl
 80046cc:	e7eb      	b.n	80046a6 <_dtoa_r+0x6e6>
 80046ce:	2200      	movs	r2, #0
 80046d0:	4b6e      	ldr	r3, [pc, #440]	; (800488c <_dtoa_r+0x8cc>)
 80046d2:	f7fb ff01 	bl	80004d8 <__aeabi_dmul>
 80046d6:	2200      	movs	r2, #0
 80046d8:	2300      	movs	r3, #0
 80046da:	4680      	mov	r8, r0
 80046dc:	4689      	mov	r9, r1
 80046de:	f7fc f963 	bl	80009a8 <__aeabi_dcmpeq>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d09b      	beq.n	800461e <_dtoa_r+0x65e>
 80046e6:	e7cd      	b.n	8004684 <_dtoa_r+0x6c4>
 80046e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	f000 80d0 	beq.w	8004890 <_dtoa_r+0x8d0>
 80046f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80046f2:	2a01      	cmp	r2, #1
 80046f4:	f300 80ae 	bgt.w	8004854 <_dtoa_r+0x894>
 80046f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	f000 80a6 	beq.w	800484c <_dtoa_r+0x88c>
 8004700:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004704:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004706:	9f06      	ldr	r7, [sp, #24]
 8004708:	9a06      	ldr	r2, [sp, #24]
 800470a:	2101      	movs	r1, #1
 800470c:	441a      	add	r2, r3
 800470e:	9206      	str	r2, [sp, #24]
 8004710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004712:	4628      	mov	r0, r5
 8004714:	441a      	add	r2, r3
 8004716:	9209      	str	r2, [sp, #36]	; 0x24
 8004718:	f000 fd7a 	bl	8005210 <__i2b>
 800471c:	4606      	mov	r6, r0
 800471e:	2f00      	cmp	r7, #0
 8004720:	dd0c      	ble.n	800473c <_dtoa_r+0x77c>
 8004722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	dd09      	ble.n	800473c <_dtoa_r+0x77c>
 8004728:	42bb      	cmp	r3, r7
 800472a:	bfa8      	it	ge
 800472c:	463b      	movge	r3, r7
 800472e:	9a06      	ldr	r2, [sp, #24]
 8004730:	1aff      	subs	r7, r7, r3
 8004732:	1ad2      	subs	r2, r2, r3
 8004734:	9206      	str	r2, [sp, #24]
 8004736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	9309      	str	r3, [sp, #36]	; 0x24
 800473c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473e:	b1f3      	cbz	r3, 800477e <_dtoa_r+0x7be>
 8004740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80a8 	beq.w	8004898 <_dtoa_r+0x8d8>
 8004748:	2c00      	cmp	r4, #0
 800474a:	dd10      	ble.n	800476e <_dtoa_r+0x7ae>
 800474c:	4631      	mov	r1, r6
 800474e:	4622      	mov	r2, r4
 8004750:	4628      	mov	r0, r5
 8004752:	f000 fe1b 	bl	800538c <__pow5mult>
 8004756:	465a      	mov	r2, fp
 8004758:	4601      	mov	r1, r0
 800475a:	4606      	mov	r6, r0
 800475c:	4628      	mov	r0, r5
 800475e:	f000 fd6d 	bl	800523c <__multiply>
 8004762:	4680      	mov	r8, r0
 8004764:	4659      	mov	r1, fp
 8004766:	4628      	mov	r0, r5
 8004768:	f000 fc9c 	bl	80050a4 <_Bfree>
 800476c:	46c3      	mov	fp, r8
 800476e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004770:	1b1a      	subs	r2, r3, r4
 8004772:	d004      	beq.n	800477e <_dtoa_r+0x7be>
 8004774:	4659      	mov	r1, fp
 8004776:	4628      	mov	r0, r5
 8004778:	f000 fe08 	bl	800538c <__pow5mult>
 800477c:	4683      	mov	fp, r0
 800477e:	2101      	movs	r1, #1
 8004780:	4628      	mov	r0, r5
 8004782:	f000 fd45 	bl	8005210 <__i2b>
 8004786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004788:	4604      	mov	r4, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	f340 8086 	ble.w	800489c <_dtoa_r+0x8dc>
 8004790:	461a      	mov	r2, r3
 8004792:	4601      	mov	r1, r0
 8004794:	4628      	mov	r0, r5
 8004796:	f000 fdf9 	bl	800538c <__pow5mult>
 800479a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800479c:	4604      	mov	r4, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	dd7f      	ble.n	80048a2 <_dtoa_r+0x8e2>
 80047a2:	f04f 0800 	mov.w	r8, #0
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047ac:	6918      	ldr	r0, [r3, #16]
 80047ae:	f000 fce1 	bl	8005174 <__hi0bits>
 80047b2:	f1c0 0020 	rsb	r0, r0, #32
 80047b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b8:	4418      	add	r0, r3
 80047ba:	f010 001f 	ands.w	r0, r0, #31
 80047be:	f000 8092 	beq.w	80048e6 <_dtoa_r+0x926>
 80047c2:	f1c0 0320 	rsb	r3, r0, #32
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	f340 808a 	ble.w	80048e0 <_dtoa_r+0x920>
 80047cc:	f1c0 001c 	rsb	r0, r0, #28
 80047d0:	9b06      	ldr	r3, [sp, #24]
 80047d2:	4407      	add	r7, r0
 80047d4:	4403      	add	r3, r0
 80047d6:	9306      	str	r3, [sp, #24]
 80047d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047da:	4403      	add	r3, r0
 80047dc:	9309      	str	r3, [sp, #36]	; 0x24
 80047de:	9b06      	ldr	r3, [sp, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	dd05      	ble.n	80047f0 <_dtoa_r+0x830>
 80047e4:	4659      	mov	r1, fp
 80047e6:	461a      	mov	r2, r3
 80047e8:	4628      	mov	r0, r5
 80047ea:	f000 fe29 	bl	8005440 <__lshift>
 80047ee:	4683      	mov	fp, r0
 80047f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	dd05      	ble.n	8004802 <_dtoa_r+0x842>
 80047f6:	4621      	mov	r1, r4
 80047f8:	461a      	mov	r2, r3
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 fe20 	bl	8005440 <__lshift>
 8004800:	4604      	mov	r4, r0
 8004802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d070      	beq.n	80048ea <_dtoa_r+0x92a>
 8004808:	4621      	mov	r1, r4
 800480a:	4658      	mov	r0, fp
 800480c:	f000 fe88 	bl	8005520 <__mcmp>
 8004810:	2800      	cmp	r0, #0
 8004812:	da6a      	bge.n	80048ea <_dtoa_r+0x92a>
 8004814:	2300      	movs	r3, #0
 8004816:	4659      	mov	r1, fp
 8004818:	220a      	movs	r2, #10
 800481a:	4628      	mov	r0, r5
 800481c:	f000 fc64 	bl	80050e8 <__multadd>
 8004820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004822:	4683      	mov	fp, r0
 8004824:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8194 	beq.w	8004b56 <_dtoa_r+0xb96>
 800482e:	4631      	mov	r1, r6
 8004830:	2300      	movs	r3, #0
 8004832:	220a      	movs	r2, #10
 8004834:	4628      	mov	r0, r5
 8004836:	f000 fc57 	bl	80050e8 <__multadd>
 800483a:	f1b9 0f00 	cmp.w	r9, #0
 800483e:	4606      	mov	r6, r0
 8004840:	f300 8093 	bgt.w	800496a <_dtoa_r+0x9aa>
 8004844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004846:	2b02      	cmp	r3, #2
 8004848:	dc57      	bgt.n	80048fa <_dtoa_r+0x93a>
 800484a:	e08e      	b.n	800496a <_dtoa_r+0x9aa>
 800484c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800484e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004852:	e757      	b.n	8004704 <_dtoa_r+0x744>
 8004854:	9b08      	ldr	r3, [sp, #32]
 8004856:	1e5c      	subs	r4, r3, #1
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	42a3      	cmp	r3, r4
 800485c:	bfb7      	itett	lt
 800485e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004860:	1b1c      	subge	r4, r3, r4
 8004862:	1ae2      	sublt	r2, r4, r3
 8004864:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004866:	bfbe      	ittt	lt
 8004868:	940a      	strlt	r4, [sp, #40]	; 0x28
 800486a:	189b      	addlt	r3, r3, r2
 800486c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800486e:	9b08      	ldr	r3, [sp, #32]
 8004870:	bfb8      	it	lt
 8004872:	2400      	movlt	r4, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	bfbb      	ittet	lt
 8004878:	9b06      	ldrlt	r3, [sp, #24]
 800487a:	9a08      	ldrlt	r2, [sp, #32]
 800487c:	9f06      	ldrge	r7, [sp, #24]
 800487e:	1a9f      	sublt	r7, r3, r2
 8004880:	bfac      	ite	ge
 8004882:	9b08      	ldrge	r3, [sp, #32]
 8004884:	2300      	movlt	r3, #0
 8004886:	e73f      	b.n	8004708 <_dtoa_r+0x748>
 8004888:	3fe00000 	.word	0x3fe00000
 800488c:	40240000 	.word	0x40240000
 8004890:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004892:	9f06      	ldr	r7, [sp, #24]
 8004894:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004896:	e742      	b.n	800471e <_dtoa_r+0x75e>
 8004898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800489a:	e76b      	b.n	8004774 <_dtoa_r+0x7b4>
 800489c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800489e:	2b01      	cmp	r3, #1
 80048a0:	dc19      	bgt.n	80048d6 <_dtoa_r+0x916>
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	b9bb      	cbnz	r3, 80048d6 <_dtoa_r+0x916>
 80048a6:	9b05      	ldr	r3, [sp, #20]
 80048a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ac:	b99b      	cbnz	r3, 80048d6 <_dtoa_r+0x916>
 80048ae:	9b05      	ldr	r3, [sp, #20]
 80048b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048b4:	0d1b      	lsrs	r3, r3, #20
 80048b6:	051b      	lsls	r3, r3, #20
 80048b8:	b183      	cbz	r3, 80048dc <_dtoa_r+0x91c>
 80048ba:	f04f 0801 	mov.w	r8, #1
 80048be:	9b06      	ldr	r3, [sp, #24]
 80048c0:	3301      	adds	r3, #1
 80048c2:	9306      	str	r3, [sp, #24]
 80048c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f47f af6a 	bne.w	80047a6 <_dtoa_r+0x7e6>
 80048d2:	2001      	movs	r0, #1
 80048d4:	e76f      	b.n	80047b6 <_dtoa_r+0x7f6>
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	e7f6      	b.n	80048ca <_dtoa_r+0x90a>
 80048dc:	4698      	mov	r8, r3
 80048de:	e7f4      	b.n	80048ca <_dtoa_r+0x90a>
 80048e0:	f43f af7d 	beq.w	80047de <_dtoa_r+0x81e>
 80048e4:	4618      	mov	r0, r3
 80048e6:	301c      	adds	r0, #28
 80048e8:	e772      	b.n	80047d0 <_dtoa_r+0x810>
 80048ea:	9b08      	ldr	r3, [sp, #32]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	dc36      	bgt.n	800495e <_dtoa_r+0x99e>
 80048f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	dd33      	ble.n	800495e <_dtoa_r+0x99e>
 80048f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048fa:	f1b9 0f00 	cmp.w	r9, #0
 80048fe:	d10d      	bne.n	800491c <_dtoa_r+0x95c>
 8004900:	4621      	mov	r1, r4
 8004902:	464b      	mov	r3, r9
 8004904:	2205      	movs	r2, #5
 8004906:	4628      	mov	r0, r5
 8004908:	f000 fbee 	bl	80050e8 <__multadd>
 800490c:	4601      	mov	r1, r0
 800490e:	4604      	mov	r4, r0
 8004910:	4658      	mov	r0, fp
 8004912:	f000 fe05 	bl	8005520 <__mcmp>
 8004916:	2800      	cmp	r0, #0
 8004918:	f73f adb8 	bgt.w	800448c <_dtoa_r+0x4cc>
 800491c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800491e:	9f03      	ldr	r7, [sp, #12]
 8004920:	ea6f 0a03 	mvn.w	sl, r3
 8004924:	f04f 0800 	mov.w	r8, #0
 8004928:	4621      	mov	r1, r4
 800492a:	4628      	mov	r0, r5
 800492c:	f000 fbba 	bl	80050a4 <_Bfree>
 8004930:	2e00      	cmp	r6, #0
 8004932:	f43f aea7 	beq.w	8004684 <_dtoa_r+0x6c4>
 8004936:	f1b8 0f00 	cmp.w	r8, #0
 800493a:	d005      	beq.n	8004948 <_dtoa_r+0x988>
 800493c:	45b0      	cmp	r8, r6
 800493e:	d003      	beq.n	8004948 <_dtoa_r+0x988>
 8004940:	4641      	mov	r1, r8
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fbae 	bl	80050a4 <_Bfree>
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	f000 fbaa 	bl	80050a4 <_Bfree>
 8004950:	e698      	b.n	8004684 <_dtoa_r+0x6c4>
 8004952:	2400      	movs	r4, #0
 8004954:	4626      	mov	r6, r4
 8004956:	e7e1      	b.n	800491c <_dtoa_r+0x95c>
 8004958:	46c2      	mov	sl, r8
 800495a:	4626      	mov	r6, r4
 800495c:	e596      	b.n	800448c <_dtoa_r+0x4cc>
 800495e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80fd 	beq.w	8004b64 <_dtoa_r+0xba4>
 800496a:	2f00      	cmp	r7, #0
 800496c:	dd05      	ble.n	800497a <_dtoa_r+0x9ba>
 800496e:	4631      	mov	r1, r6
 8004970:	463a      	mov	r2, r7
 8004972:	4628      	mov	r0, r5
 8004974:	f000 fd64 	bl	8005440 <__lshift>
 8004978:	4606      	mov	r6, r0
 800497a:	f1b8 0f00 	cmp.w	r8, #0
 800497e:	d05c      	beq.n	8004a3a <_dtoa_r+0xa7a>
 8004980:	4628      	mov	r0, r5
 8004982:	6871      	ldr	r1, [r6, #4]
 8004984:	f000 fb4e 	bl	8005024 <_Balloc>
 8004988:	4607      	mov	r7, r0
 800498a:	b928      	cbnz	r0, 8004998 <_dtoa_r+0x9d8>
 800498c:	4602      	mov	r2, r0
 800498e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004992:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <_dtoa_r+0xbd0>)
 8004994:	f7ff bb28 	b.w	8003fe8 <_dtoa_r+0x28>
 8004998:	6932      	ldr	r2, [r6, #16]
 800499a:	f106 010c 	add.w	r1, r6, #12
 800499e:	3202      	adds	r2, #2
 80049a0:	0092      	lsls	r2, r2, #2
 80049a2:	300c      	adds	r0, #12
 80049a4:	f000 fb30 	bl	8005008 <memcpy>
 80049a8:	2201      	movs	r2, #1
 80049aa:	4639      	mov	r1, r7
 80049ac:	4628      	mov	r0, r5
 80049ae:	f000 fd47 	bl	8005440 <__lshift>
 80049b2:	46b0      	mov	r8, r6
 80049b4:	4606      	mov	r6, r0
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	9308      	str	r3, [sp, #32]
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	444b      	add	r3, r9
 80049c0:	930a      	str	r3, [sp, #40]	; 0x28
 80049c2:	9b04      	ldr	r3, [sp, #16]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ca:	9b08      	ldr	r3, [sp, #32]
 80049cc:	4621      	mov	r1, r4
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4658      	mov	r0, fp
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	f7ff fa68 	bl	8003ea8 <quorem>
 80049d8:	4603      	mov	r3, r0
 80049da:	4641      	mov	r1, r8
 80049dc:	3330      	adds	r3, #48	; 0x30
 80049de:	9006      	str	r0, [sp, #24]
 80049e0:	4658      	mov	r0, fp
 80049e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e4:	f000 fd9c 	bl	8005520 <__mcmp>
 80049e8:	4632      	mov	r2, r6
 80049ea:	4681      	mov	r9, r0
 80049ec:	4621      	mov	r1, r4
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 fdb2 	bl	8005558 <__mdiff>
 80049f4:	68c2      	ldr	r2, [r0, #12]
 80049f6:	4607      	mov	r7, r0
 80049f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049fa:	bb02      	cbnz	r2, 8004a3e <_dtoa_r+0xa7e>
 80049fc:	4601      	mov	r1, r0
 80049fe:	4658      	mov	r0, fp
 8004a00:	f000 fd8e 	bl	8005520 <__mcmp>
 8004a04:	4602      	mov	r2, r0
 8004a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a08:	4639      	mov	r1, r7
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004a10:	f000 fb48 	bl	80050a4 <_Bfree>
 8004a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a18:	9f08      	ldr	r7, [sp, #32]
 8004a1a:	ea43 0102 	orr.w	r1, r3, r2
 8004a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a20:	430b      	orrs	r3, r1
 8004a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a24:	d10d      	bne.n	8004a42 <_dtoa_r+0xa82>
 8004a26:	2b39      	cmp	r3, #57	; 0x39
 8004a28:	d029      	beq.n	8004a7e <_dtoa_r+0xabe>
 8004a2a:	f1b9 0f00 	cmp.w	r9, #0
 8004a2e:	dd01      	ble.n	8004a34 <_dtoa_r+0xa74>
 8004a30:	9b06      	ldr	r3, [sp, #24]
 8004a32:	3331      	adds	r3, #49	; 0x31
 8004a34:	9a04      	ldr	r2, [sp, #16]
 8004a36:	7013      	strb	r3, [r2, #0]
 8004a38:	e776      	b.n	8004928 <_dtoa_r+0x968>
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	e7b9      	b.n	80049b2 <_dtoa_r+0x9f2>
 8004a3e:	2201      	movs	r2, #1
 8004a40:	e7e2      	b.n	8004a08 <_dtoa_r+0xa48>
 8004a42:	f1b9 0f00 	cmp.w	r9, #0
 8004a46:	db06      	blt.n	8004a56 <_dtoa_r+0xa96>
 8004a48:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004a4a:	ea41 0909 	orr.w	r9, r1, r9
 8004a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a50:	ea59 0101 	orrs.w	r1, r9, r1
 8004a54:	d120      	bne.n	8004a98 <_dtoa_r+0xad8>
 8004a56:	2a00      	cmp	r2, #0
 8004a58:	ddec      	ble.n	8004a34 <_dtoa_r+0xa74>
 8004a5a:	4659      	mov	r1, fp
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4628      	mov	r0, r5
 8004a60:	9308      	str	r3, [sp, #32]
 8004a62:	f000 fced 	bl	8005440 <__lshift>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4683      	mov	fp, r0
 8004a6a:	f000 fd59 	bl	8005520 <__mcmp>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	9b08      	ldr	r3, [sp, #32]
 8004a72:	dc02      	bgt.n	8004a7a <_dtoa_r+0xaba>
 8004a74:	d1de      	bne.n	8004a34 <_dtoa_r+0xa74>
 8004a76:	07da      	lsls	r2, r3, #31
 8004a78:	d5dc      	bpl.n	8004a34 <_dtoa_r+0xa74>
 8004a7a:	2b39      	cmp	r3, #57	; 0x39
 8004a7c:	d1d8      	bne.n	8004a30 <_dtoa_r+0xa70>
 8004a7e:	2339      	movs	r3, #57	; 0x39
 8004a80:	9a04      	ldr	r2, [sp, #16]
 8004a82:	7013      	strb	r3, [r2, #0]
 8004a84:	463b      	mov	r3, r7
 8004a86:	461f      	mov	r7, r3
 8004a88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	2a39      	cmp	r2, #57	; 0x39
 8004a90:	d050      	beq.n	8004b34 <_dtoa_r+0xb74>
 8004a92:	3201      	adds	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e747      	b.n	8004928 <_dtoa_r+0x968>
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	dd03      	ble.n	8004aa4 <_dtoa_r+0xae4>
 8004a9c:	2b39      	cmp	r3, #57	; 0x39
 8004a9e:	d0ee      	beq.n	8004a7e <_dtoa_r+0xabe>
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	e7c7      	b.n	8004a34 <_dtoa_r+0xa74>
 8004aa4:	9a08      	ldr	r2, [sp, #32]
 8004aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004aa8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004aac:	428a      	cmp	r2, r1
 8004aae:	d02a      	beq.n	8004b06 <_dtoa_r+0xb46>
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	220a      	movs	r2, #10
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 fb16 	bl	80050e8 <__multadd>
 8004abc:	45b0      	cmp	r8, r6
 8004abe:	4683      	mov	fp, r0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	f04f 020a 	mov.w	r2, #10
 8004ac8:	4641      	mov	r1, r8
 8004aca:	4628      	mov	r0, r5
 8004acc:	d107      	bne.n	8004ade <_dtoa_r+0xb1e>
 8004ace:	f000 fb0b 	bl	80050e8 <__multadd>
 8004ad2:	4680      	mov	r8, r0
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	9b08      	ldr	r3, [sp, #32]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	9308      	str	r3, [sp, #32]
 8004adc:	e775      	b.n	80049ca <_dtoa_r+0xa0a>
 8004ade:	f000 fb03 	bl	80050e8 <__multadd>
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4680      	mov	r8, r0
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	220a      	movs	r2, #10
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 fafc 	bl	80050e8 <__multadd>
 8004af0:	4606      	mov	r6, r0
 8004af2:	e7f0      	b.n	8004ad6 <_dtoa_r+0xb16>
 8004af4:	f1b9 0f00 	cmp.w	r9, #0
 8004af8:	bfcc      	ite	gt
 8004afa:	464f      	movgt	r7, r9
 8004afc:	2701      	movle	r7, #1
 8004afe:	f04f 0800 	mov.w	r8, #0
 8004b02:	9a03      	ldr	r2, [sp, #12]
 8004b04:	4417      	add	r7, r2
 8004b06:	4659      	mov	r1, fp
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	9308      	str	r3, [sp, #32]
 8004b0e:	f000 fc97 	bl	8005440 <__lshift>
 8004b12:	4621      	mov	r1, r4
 8004b14:	4683      	mov	fp, r0
 8004b16:	f000 fd03 	bl	8005520 <__mcmp>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	dcb2      	bgt.n	8004a84 <_dtoa_r+0xac4>
 8004b1e:	d102      	bne.n	8004b26 <_dtoa_r+0xb66>
 8004b20:	9b08      	ldr	r3, [sp, #32]
 8004b22:	07db      	lsls	r3, r3, #31
 8004b24:	d4ae      	bmi.n	8004a84 <_dtoa_r+0xac4>
 8004b26:	463b      	mov	r3, r7
 8004b28:	461f      	mov	r7, r3
 8004b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b2e:	2a30      	cmp	r2, #48	; 0x30
 8004b30:	d0fa      	beq.n	8004b28 <_dtoa_r+0xb68>
 8004b32:	e6f9      	b.n	8004928 <_dtoa_r+0x968>
 8004b34:	9a03      	ldr	r2, [sp, #12]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d1a5      	bne.n	8004a86 <_dtoa_r+0xac6>
 8004b3a:	2331      	movs	r3, #49	; 0x31
 8004b3c:	f10a 0a01 	add.w	sl, sl, #1
 8004b40:	e779      	b.n	8004a36 <_dtoa_r+0xa76>
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <_dtoa_r+0xbd4>)
 8004b44:	f7ff baa8 	b.w	8004098 <_dtoa_r+0xd8>
 8004b48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f aa81 	bne.w	8004052 <_dtoa_r+0x92>
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <_dtoa_r+0xbd8>)
 8004b52:	f7ff baa1 	b.w	8004098 <_dtoa_r+0xd8>
 8004b56:	f1b9 0f00 	cmp.w	r9, #0
 8004b5a:	dc03      	bgt.n	8004b64 <_dtoa_r+0xba4>
 8004b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	f73f aecb 	bgt.w	80048fa <_dtoa_r+0x93a>
 8004b64:	9f03      	ldr	r7, [sp, #12]
 8004b66:	4621      	mov	r1, r4
 8004b68:	4658      	mov	r0, fp
 8004b6a:	f7ff f99d 	bl	8003ea8 <quorem>
 8004b6e:	9a03      	ldr	r2, [sp, #12]
 8004b70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004b74:	f807 3b01 	strb.w	r3, [r7], #1
 8004b78:	1aba      	subs	r2, r7, r2
 8004b7a:	4591      	cmp	r9, r2
 8004b7c:	ddba      	ble.n	8004af4 <_dtoa_r+0xb34>
 8004b7e:	4659      	mov	r1, fp
 8004b80:	2300      	movs	r3, #0
 8004b82:	220a      	movs	r2, #10
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 faaf 	bl	80050e8 <__multadd>
 8004b8a:	4683      	mov	fp, r0
 8004b8c:	e7eb      	b.n	8004b66 <_dtoa_r+0xba6>
 8004b8e:	bf00      	nop
 8004b90:	08006117 	.word	0x08006117
 8004b94:	08006074 	.word	0x08006074
 8004b98:	08006098 	.word	0x08006098

08004b9c <__sflush_r>:
 8004b9c:	898a      	ldrh	r2, [r1, #12]
 8004b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	0710      	lsls	r0, r2, #28
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	d457      	bmi.n	8004c58 <__sflush_r+0xbc>
 8004ba8:	684b      	ldr	r3, [r1, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dc04      	bgt.n	8004bb8 <__sflush_r+0x1c>
 8004bae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	dc01      	bgt.n	8004bb8 <__sflush_r+0x1c>
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bba:	2e00      	cmp	r6, #0
 8004bbc:	d0fa      	beq.n	8004bb4 <__sflush_r+0x18>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bc4:	682f      	ldr	r7, [r5, #0]
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	d032      	beq.n	8004c30 <__sflush_r+0x94>
 8004bca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	075a      	lsls	r2, r3, #29
 8004bd0:	d505      	bpl.n	8004bde <__sflush_r+0x42>
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	1ac0      	subs	r0, r0, r3
 8004bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bd8:	b10b      	cbz	r3, 8004bde <__sflush_r+0x42>
 8004bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bdc:	1ac0      	subs	r0, r0, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	4602      	mov	r2, r0
 8004be2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004be4:	4628      	mov	r0, r5
 8004be6:	6a21      	ldr	r1, [r4, #32]
 8004be8:	47b0      	blx	r6
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	d106      	bne.n	8004bfe <__sflush_r+0x62>
 8004bf0:	6829      	ldr	r1, [r5, #0]
 8004bf2:	291d      	cmp	r1, #29
 8004bf4:	d82c      	bhi.n	8004c50 <__sflush_r+0xb4>
 8004bf6:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <__sflush_r+0x100>)
 8004bf8:	40ca      	lsrs	r2, r1
 8004bfa:	07d6      	lsls	r6, r2, #31
 8004bfc:	d528      	bpl.n	8004c50 <__sflush_r+0xb4>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	6062      	str	r2, [r4, #4]
 8004c02:	6922      	ldr	r2, [r4, #16]
 8004c04:	04d9      	lsls	r1, r3, #19
 8004c06:	6022      	str	r2, [r4, #0]
 8004c08:	d504      	bpl.n	8004c14 <__sflush_r+0x78>
 8004c0a:	1c42      	adds	r2, r0, #1
 8004c0c:	d101      	bne.n	8004c12 <__sflush_r+0x76>
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	b903      	cbnz	r3, 8004c14 <__sflush_r+0x78>
 8004c12:	6560      	str	r0, [r4, #84]	; 0x54
 8004c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c16:	602f      	str	r7, [r5, #0]
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	d0cb      	beq.n	8004bb4 <__sflush_r+0x18>
 8004c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c20:	4299      	cmp	r1, r3
 8004c22:	d002      	beq.n	8004c2a <__sflush_r+0x8e>
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 fd93 	bl	8005750 <_free_r>
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c2e:	e7c2      	b.n	8004bb6 <__sflush_r+0x1a>
 8004c30:	6a21      	ldr	r1, [r4, #32]
 8004c32:	2301      	movs	r3, #1
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b0      	blx	r6
 8004c38:	1c41      	adds	r1, r0, #1
 8004c3a:	d1c7      	bne.n	8004bcc <__sflush_r+0x30>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0c4      	beq.n	8004bcc <__sflush_r+0x30>
 8004c42:	2b1d      	cmp	r3, #29
 8004c44:	d001      	beq.n	8004c4a <__sflush_r+0xae>
 8004c46:	2b16      	cmp	r3, #22
 8004c48:	d101      	bne.n	8004c4e <__sflush_r+0xb2>
 8004c4a:	602f      	str	r7, [r5, #0]
 8004c4c:	e7b2      	b.n	8004bb4 <__sflush_r+0x18>
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c54:	81a3      	strh	r3, [r4, #12]
 8004c56:	e7ae      	b.n	8004bb6 <__sflush_r+0x1a>
 8004c58:	690f      	ldr	r7, [r1, #16]
 8004c5a:	2f00      	cmp	r7, #0
 8004c5c:	d0aa      	beq.n	8004bb4 <__sflush_r+0x18>
 8004c5e:	0793      	lsls	r3, r2, #30
 8004c60:	bf18      	it	ne
 8004c62:	2300      	movne	r3, #0
 8004c64:	680e      	ldr	r6, [r1, #0]
 8004c66:	bf08      	it	eq
 8004c68:	694b      	ldreq	r3, [r1, #20]
 8004c6a:	1bf6      	subs	r6, r6, r7
 8004c6c:	600f      	str	r7, [r1, #0]
 8004c6e:	608b      	str	r3, [r1, #8]
 8004c70:	2e00      	cmp	r6, #0
 8004c72:	dd9f      	ble.n	8004bb4 <__sflush_r+0x18>
 8004c74:	4633      	mov	r3, r6
 8004c76:	463a      	mov	r2, r7
 8004c78:	4628      	mov	r0, r5
 8004c7a:	6a21      	ldr	r1, [r4, #32]
 8004c7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004c80:	47e0      	blx	ip
 8004c82:	2800      	cmp	r0, #0
 8004c84:	dc06      	bgt.n	8004c94 <__sflush_r+0xf8>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	e790      	b.n	8004bb6 <__sflush_r+0x1a>
 8004c94:	4407      	add	r7, r0
 8004c96:	1a36      	subs	r6, r6, r0
 8004c98:	e7ea      	b.n	8004c70 <__sflush_r+0xd4>
 8004c9a:	bf00      	nop
 8004c9c:	20400001 	.word	0x20400001

08004ca0 <_fflush_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	690b      	ldr	r3, [r1, #16]
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	b913      	cbnz	r3, 8004cb0 <_fflush_r+0x10>
 8004caa:	2500      	movs	r5, #0
 8004cac:	4628      	mov	r0, r5
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	b118      	cbz	r0, 8004cba <_fflush_r+0x1a>
 8004cb2:	6983      	ldr	r3, [r0, #24]
 8004cb4:	b90b      	cbnz	r3, 8004cba <_fflush_r+0x1a>
 8004cb6:	f000 f887 	bl	8004dc8 <__sinit>
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <_fflush_r+0x6c>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d11b      	bne.n	8004cf8 <_fflush_r+0x58>
 8004cc0:	686c      	ldr	r4, [r5, #4]
 8004cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ef      	beq.n	8004caa <_fflush_r+0xa>
 8004cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ccc:	07d0      	lsls	r0, r2, #31
 8004cce:	d404      	bmi.n	8004cda <_fflush_r+0x3a>
 8004cd0:	0599      	lsls	r1, r3, #22
 8004cd2:	d402      	bmi.n	8004cda <_fflush_r+0x3a>
 8004cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd6:	f000 f91a 	bl	8004f0e <__retarget_lock_acquire_recursive>
 8004cda:	4628      	mov	r0, r5
 8004cdc:	4621      	mov	r1, r4
 8004cde:	f7ff ff5d 	bl	8004b9c <__sflush_r>
 8004ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	07da      	lsls	r2, r3, #31
 8004ce8:	d4e0      	bmi.n	8004cac <_fflush_r+0xc>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	059b      	lsls	r3, r3, #22
 8004cee:	d4dd      	bmi.n	8004cac <_fflush_r+0xc>
 8004cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf2:	f000 f90d 	bl	8004f10 <__retarget_lock_release_recursive>
 8004cf6:	e7d9      	b.n	8004cac <_fflush_r+0xc>
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <_fflush_r+0x70>)
 8004cfa:	429c      	cmp	r4, r3
 8004cfc:	d101      	bne.n	8004d02 <_fflush_r+0x62>
 8004cfe:	68ac      	ldr	r4, [r5, #8]
 8004d00:	e7df      	b.n	8004cc2 <_fflush_r+0x22>
 8004d02:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <_fflush_r+0x74>)
 8004d04:	429c      	cmp	r4, r3
 8004d06:	bf08      	it	eq
 8004d08:	68ec      	ldreq	r4, [r5, #12]
 8004d0a:	e7da      	b.n	8004cc2 <_fflush_r+0x22>
 8004d0c:	08006148 	.word	0x08006148
 8004d10:	08006168 	.word	0x08006168
 8004d14:	08006128 	.word	0x08006128

08004d18 <std>:
 8004d18:	2300      	movs	r3, #0
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d26:	6083      	str	r3, [r0, #8]
 8004d28:	8181      	strh	r1, [r0, #12]
 8004d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d2c:	81c2      	strh	r2, [r0, #14]
 8004d2e:	6183      	str	r3, [r0, #24]
 8004d30:	4619      	mov	r1, r3
 8004d32:	2208      	movs	r2, #8
 8004d34:	305c      	adds	r0, #92	; 0x5c
 8004d36:	f7fe fb01 	bl	800333c <memset>
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <std+0x38>)
 8004d3c:	6224      	str	r4, [r4, #32]
 8004d3e:	6263      	str	r3, [r4, #36]	; 0x24
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <std+0x3c>)
 8004d42:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <std+0x40>)
 8004d46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <std+0x44>)
 8004d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d4c:	bd10      	pop	{r4, pc}
 8004d4e:	bf00      	nop
 8004d50:	08005bd9 	.word	0x08005bd9
 8004d54:	08005bfb 	.word	0x08005bfb
 8004d58:	08005c33 	.word	0x08005c33
 8004d5c:	08005c57 	.word	0x08005c57

08004d60 <_cleanup_r>:
 8004d60:	4901      	ldr	r1, [pc, #4]	; (8004d68 <_cleanup_r+0x8>)
 8004d62:	f000 b8af 	b.w	8004ec4 <_fwalk_reent>
 8004d66:	bf00      	nop
 8004d68:	08004ca1 	.word	0x08004ca1

08004d6c <__sfmoreglue>:
 8004d6c:	2268      	movs	r2, #104	; 0x68
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	1e4d      	subs	r5, r1, #1
 8004d72:	4355      	muls	r5, r2
 8004d74:	460e      	mov	r6, r1
 8004d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d7a:	f000 fd51 	bl	8005820 <_malloc_r>
 8004d7e:	4604      	mov	r4, r0
 8004d80:	b140      	cbz	r0, 8004d94 <__sfmoreglue+0x28>
 8004d82:	2100      	movs	r1, #0
 8004d84:	e9c0 1600 	strd	r1, r6, [r0]
 8004d88:	300c      	adds	r0, #12
 8004d8a:	60a0      	str	r0, [r4, #8]
 8004d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d90:	f7fe fad4 	bl	800333c <memset>
 8004d94:	4620      	mov	r0, r4
 8004d96:	bd70      	pop	{r4, r5, r6, pc}

08004d98 <__sfp_lock_acquire>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__sfp_lock_acquire+0x8>)
 8004d9a:	f000 b8b8 	b.w	8004f0e <__retarget_lock_acquire_recursive>
 8004d9e:	bf00      	nop
 8004da0:	20000305 	.word	0x20000305

08004da4 <__sfp_lock_release>:
 8004da4:	4801      	ldr	r0, [pc, #4]	; (8004dac <__sfp_lock_release+0x8>)
 8004da6:	f000 b8b3 	b.w	8004f10 <__retarget_lock_release_recursive>
 8004daa:	bf00      	nop
 8004dac:	20000305 	.word	0x20000305

08004db0 <__sinit_lock_acquire>:
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <__sinit_lock_acquire+0x8>)
 8004db2:	f000 b8ac 	b.w	8004f0e <__retarget_lock_acquire_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000306 	.word	0x20000306

08004dbc <__sinit_lock_release>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	; (8004dc4 <__sinit_lock_release+0x8>)
 8004dbe:	f000 b8a7 	b.w	8004f10 <__retarget_lock_release_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20000306 	.word	0x20000306

08004dc8 <__sinit>:
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	4604      	mov	r4, r0
 8004dcc:	f7ff fff0 	bl	8004db0 <__sinit_lock_acquire>
 8004dd0:	69a3      	ldr	r3, [r4, #24]
 8004dd2:	b11b      	cbz	r3, 8004ddc <__sinit+0x14>
 8004dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd8:	f7ff bff0 	b.w	8004dbc <__sinit_lock_release>
 8004ddc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004de0:	6523      	str	r3, [r4, #80]	; 0x50
 8004de2:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <__sinit+0x68>)
 8004de4:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <__sinit+0x6c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	bf08      	it	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	4620      	mov	r0, r4
 8004df2:	bf08      	it	eq
 8004df4:	61a3      	streq	r3, [r4, #24]
 8004df6:	f000 f81f 	bl	8004e38 <__sfp>
 8004dfa:	6060      	str	r0, [r4, #4]
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 f81b 	bl	8004e38 <__sfp>
 8004e02:	60a0      	str	r0, [r4, #8]
 8004e04:	4620      	mov	r0, r4
 8004e06:	f000 f817 	bl	8004e38 <__sfp>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2104      	movs	r1, #4
 8004e0e:	60e0      	str	r0, [r4, #12]
 8004e10:	6860      	ldr	r0, [r4, #4]
 8004e12:	f7ff ff81 	bl	8004d18 <std>
 8004e16:	2201      	movs	r2, #1
 8004e18:	2109      	movs	r1, #9
 8004e1a:	68a0      	ldr	r0, [r4, #8]
 8004e1c:	f7ff ff7c 	bl	8004d18 <std>
 8004e20:	2202      	movs	r2, #2
 8004e22:	2112      	movs	r1, #18
 8004e24:	68e0      	ldr	r0, [r4, #12]
 8004e26:	f7ff ff77 	bl	8004d18 <std>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61a3      	str	r3, [r4, #24]
 8004e2e:	e7d1      	b.n	8004dd4 <__sinit+0xc>
 8004e30:	08006060 	.word	0x08006060
 8004e34:	08004d61 	.word	0x08004d61

08004e38 <__sfp>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	4607      	mov	r7, r0
 8004e3c:	f7ff ffac 	bl	8004d98 <__sfp_lock_acquire>
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <__sfp+0x84>)
 8004e42:	681e      	ldr	r6, [r3, #0]
 8004e44:	69b3      	ldr	r3, [r6, #24]
 8004e46:	b913      	cbnz	r3, 8004e4e <__sfp+0x16>
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f7ff ffbd 	bl	8004dc8 <__sinit>
 8004e4e:	3648      	adds	r6, #72	; 0x48
 8004e50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	d503      	bpl.n	8004e60 <__sfp+0x28>
 8004e58:	6833      	ldr	r3, [r6, #0]
 8004e5a:	b30b      	cbz	r3, 8004ea0 <__sfp+0x68>
 8004e5c:	6836      	ldr	r6, [r6, #0]
 8004e5e:	e7f7      	b.n	8004e50 <__sfp+0x18>
 8004e60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e64:	b9d5      	cbnz	r5, 8004e9c <__sfp+0x64>
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <__sfp+0x88>)
 8004e68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e6c:	60e3      	str	r3, [r4, #12]
 8004e6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e70:	f000 f84c 	bl	8004f0c <__retarget_lock_init_recursive>
 8004e74:	f7ff ff96 	bl	8004da4 <__sfp_lock_release>
 8004e78:	2208      	movs	r2, #8
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e84:	6025      	str	r5, [r4, #0]
 8004e86:	61a5      	str	r5, [r4, #24]
 8004e88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e8c:	f7fe fa56 	bl	800333c <memset>
 8004e90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e98:	4620      	mov	r0, r4
 8004e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9c:	3468      	adds	r4, #104	; 0x68
 8004e9e:	e7d9      	b.n	8004e54 <__sfp+0x1c>
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f7ff ff62 	bl	8004d6c <__sfmoreglue>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	6030      	str	r0, [r6, #0]
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d1d5      	bne.n	8004e5c <__sfp+0x24>
 8004eb0:	f7ff ff78 	bl	8004da4 <__sfp_lock_release>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	e7ee      	b.n	8004e98 <__sfp+0x60>
 8004eba:	bf00      	nop
 8004ebc:	08006060 	.word	0x08006060
 8004ec0:	ffff0001 	.word	0xffff0001

08004ec4 <_fwalk_reent>:
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	4606      	mov	r6, r0
 8004eca:	4688      	mov	r8, r1
 8004ecc:	2700      	movs	r7, #0
 8004ece:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ed2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ed6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eda:	d505      	bpl.n	8004ee8 <_fwalk_reent+0x24>
 8004edc:	6824      	ldr	r4, [r4, #0]
 8004ede:	2c00      	cmp	r4, #0
 8004ee0:	d1f7      	bne.n	8004ed2 <_fwalk_reent+0xe>
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee8:	89ab      	ldrh	r3, [r5, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d907      	bls.n	8004efe <_fwalk_reent+0x3a>
 8004eee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	d003      	beq.n	8004efe <_fwalk_reent+0x3a>
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4630      	mov	r0, r6
 8004efa:	47c0      	blx	r8
 8004efc:	4307      	orrs	r7, r0
 8004efe:	3568      	adds	r5, #104	; 0x68
 8004f00:	e7e9      	b.n	8004ed6 <_fwalk_reent+0x12>
	...

08004f04 <_localeconv_r>:
 8004f04:	4800      	ldr	r0, [pc, #0]	; (8004f08 <_localeconv_r+0x4>)
 8004f06:	4770      	bx	lr
 8004f08:	20000160 	.word	0x20000160

08004f0c <__retarget_lock_init_recursive>:
 8004f0c:	4770      	bx	lr

08004f0e <__retarget_lock_acquire_recursive>:
 8004f0e:	4770      	bx	lr

08004f10 <__retarget_lock_release_recursive>:
 8004f10:	4770      	bx	lr

08004f12 <__swhatbuf_r>:
 8004f12:	b570      	push	{r4, r5, r6, lr}
 8004f14:	460e      	mov	r6, r1
 8004f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1a:	4614      	mov	r4, r2
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	461d      	mov	r5, r3
 8004f20:	b096      	sub	sp, #88	; 0x58
 8004f22:	da08      	bge.n	8004f36 <__swhatbuf_r+0x24>
 8004f24:	2200      	movs	r2, #0
 8004f26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f2a:	602a      	str	r2, [r5, #0]
 8004f2c:	061a      	lsls	r2, r3, #24
 8004f2e:	d410      	bmi.n	8004f52 <__swhatbuf_r+0x40>
 8004f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f34:	e00e      	b.n	8004f54 <__swhatbuf_r+0x42>
 8004f36:	466a      	mov	r2, sp
 8004f38:	f000 fee4 	bl	8005d04 <_fstat_r>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	dbf1      	blt.n	8004f24 <__swhatbuf_r+0x12>
 8004f40:	9a01      	ldr	r2, [sp, #4]
 8004f42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f4a:	425a      	negs	r2, r3
 8004f4c:	415a      	adcs	r2, r3
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	e7ee      	b.n	8004f30 <__swhatbuf_r+0x1e>
 8004f52:	2340      	movs	r3, #64	; 0x40
 8004f54:	2000      	movs	r0, #0
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	b016      	add	sp, #88	; 0x58
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}

08004f5c <__smakebuf_r>:
 8004f5c:	898b      	ldrh	r3, [r1, #12]
 8004f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f60:	079d      	lsls	r5, r3, #30
 8004f62:	4606      	mov	r6, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	d507      	bpl.n	8004f78 <__smakebuf_r+0x1c>
 8004f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	6123      	str	r3, [r4, #16]
 8004f70:	2301      	movs	r3, #1
 8004f72:	6163      	str	r3, [r4, #20]
 8004f74:	b002      	add	sp, #8
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	466a      	mov	r2, sp
 8004f7a:	ab01      	add	r3, sp, #4
 8004f7c:	f7ff ffc9 	bl	8004f12 <__swhatbuf_r>
 8004f80:	9900      	ldr	r1, [sp, #0]
 8004f82:	4605      	mov	r5, r0
 8004f84:	4630      	mov	r0, r6
 8004f86:	f000 fc4b 	bl	8005820 <_malloc_r>
 8004f8a:	b948      	cbnz	r0, 8004fa0 <__smakebuf_r+0x44>
 8004f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f90:	059a      	lsls	r2, r3, #22
 8004f92:	d4ef      	bmi.n	8004f74 <__smakebuf_r+0x18>
 8004f94:	f023 0303 	bic.w	r3, r3, #3
 8004f98:	f043 0302 	orr.w	r3, r3, #2
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	e7e3      	b.n	8004f68 <__smakebuf_r+0xc>
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <__smakebuf_r+0x7c>)
 8004fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	6020      	str	r0, [r4, #0]
 8004fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fac:	81a3      	strh	r3, [r4, #12]
 8004fae:	9b00      	ldr	r3, [sp, #0]
 8004fb0:	6120      	str	r0, [r4, #16]
 8004fb2:	6163      	str	r3, [r4, #20]
 8004fb4:	9b01      	ldr	r3, [sp, #4]
 8004fb6:	b15b      	cbz	r3, 8004fd0 <__smakebuf_r+0x74>
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fbe:	f000 feb3 	bl	8005d28 <_isatty_r>
 8004fc2:	b128      	cbz	r0, 8004fd0 <__smakebuf_r+0x74>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	89a0      	ldrh	r0, [r4, #12]
 8004fd2:	4305      	orrs	r5, r0
 8004fd4:	81a5      	strh	r5, [r4, #12]
 8004fd6:	e7cd      	b.n	8004f74 <__smakebuf_r+0x18>
 8004fd8:	08004d61 	.word	0x08004d61

08004fdc <malloc>:
 8004fdc:	4b02      	ldr	r3, [pc, #8]	; (8004fe8 <malloc+0xc>)
 8004fde:	4601      	mov	r1, r0
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	f000 bc1d 	b.w	8005820 <_malloc_r>
 8004fe6:	bf00      	nop
 8004fe8:	2000000c 	.word	0x2000000c

08004fec <memchr>:
 8004fec:	4603      	mov	r3, r0
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	b2c9      	uxtb	r1, r1
 8004ff2:	4402      	add	r2, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	d101      	bne.n	8004ffe <memchr+0x12>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e003      	b.n	8005006 <memchr+0x1a>
 8004ffe:	7804      	ldrb	r4, [r0, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	428c      	cmp	r4, r1
 8005004:	d1f6      	bne.n	8004ff4 <memchr+0x8>
 8005006:	bd10      	pop	{r4, pc}

08005008 <memcpy>:
 8005008:	440a      	add	r2, r1
 800500a:	4291      	cmp	r1, r2
 800500c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005010:	d100      	bne.n	8005014 <memcpy+0xc>
 8005012:	4770      	bx	lr
 8005014:	b510      	push	{r4, lr}
 8005016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800501a:	4291      	cmp	r1, r2
 800501c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005020:	d1f9      	bne.n	8005016 <memcpy+0xe>
 8005022:	bd10      	pop	{r4, pc}

08005024 <_Balloc>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005028:	4604      	mov	r4, r0
 800502a:	460d      	mov	r5, r1
 800502c:	b976      	cbnz	r6, 800504c <_Balloc+0x28>
 800502e:	2010      	movs	r0, #16
 8005030:	f7ff ffd4 	bl	8004fdc <malloc>
 8005034:	4602      	mov	r2, r0
 8005036:	6260      	str	r0, [r4, #36]	; 0x24
 8005038:	b920      	cbnz	r0, 8005044 <_Balloc+0x20>
 800503a:	2166      	movs	r1, #102	; 0x66
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <_Balloc+0x78>)
 800503e:	4818      	ldr	r0, [pc, #96]	; (80050a0 <_Balloc+0x7c>)
 8005040:	f000 fe20 	bl	8005c84 <__assert_func>
 8005044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005048:	6006      	str	r6, [r0, #0]
 800504a:	60c6      	str	r6, [r0, #12]
 800504c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800504e:	68f3      	ldr	r3, [r6, #12]
 8005050:	b183      	cbz	r3, 8005074 <_Balloc+0x50>
 8005052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800505a:	b9b8      	cbnz	r0, 800508c <_Balloc+0x68>
 800505c:	2101      	movs	r1, #1
 800505e:	fa01 f605 	lsl.w	r6, r1, r5
 8005062:	1d72      	adds	r2, r6, #5
 8005064:	4620      	mov	r0, r4
 8005066:	0092      	lsls	r2, r2, #2
 8005068:	f000 fb5e 	bl	8005728 <_calloc_r>
 800506c:	b160      	cbz	r0, 8005088 <_Balloc+0x64>
 800506e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005072:	e00e      	b.n	8005092 <_Balloc+0x6e>
 8005074:	2221      	movs	r2, #33	; 0x21
 8005076:	2104      	movs	r1, #4
 8005078:	4620      	mov	r0, r4
 800507a:	f000 fb55 	bl	8005728 <_calloc_r>
 800507e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005080:	60f0      	str	r0, [r6, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e4      	bne.n	8005052 <_Balloc+0x2e>
 8005088:	2000      	movs	r0, #0
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	6802      	ldr	r2, [r0, #0]
 800508e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005092:	2300      	movs	r3, #0
 8005094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005098:	e7f7      	b.n	800508a <_Balloc+0x66>
 800509a:	bf00      	nop
 800509c:	080060a5 	.word	0x080060a5
 80050a0:	08006188 	.word	0x08006188

080050a4 <_Bfree>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050a8:	4605      	mov	r5, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	b976      	cbnz	r6, 80050cc <_Bfree+0x28>
 80050ae:	2010      	movs	r0, #16
 80050b0:	f7ff ff94 	bl	8004fdc <malloc>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6268      	str	r0, [r5, #36]	; 0x24
 80050b8:	b920      	cbnz	r0, 80050c4 <_Bfree+0x20>
 80050ba:	218a      	movs	r1, #138	; 0x8a
 80050bc:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <_Bfree+0x3c>)
 80050be:	4809      	ldr	r0, [pc, #36]	; (80050e4 <_Bfree+0x40>)
 80050c0:	f000 fde0 	bl	8005c84 <__assert_func>
 80050c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050c8:	6006      	str	r6, [r0, #0]
 80050ca:	60c6      	str	r6, [r0, #12]
 80050cc:	b13c      	cbz	r4, 80050de <_Bfree+0x3a>
 80050ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050d0:	6862      	ldr	r2, [r4, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050d8:	6021      	str	r1, [r4, #0]
 80050da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	080060a5 	.word	0x080060a5
 80050e4:	08006188 	.word	0x08006188

080050e8 <__multadd>:
 80050e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ec:	4607      	mov	r7, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	461e      	mov	r6, r3
 80050f2:	2000      	movs	r0, #0
 80050f4:	690d      	ldr	r5, [r1, #16]
 80050f6:	f101 0c14 	add.w	ip, r1, #20
 80050fa:	f8dc 3000 	ldr.w	r3, [ip]
 80050fe:	3001      	adds	r0, #1
 8005100:	b299      	uxth	r1, r3
 8005102:	fb02 6101 	mla	r1, r2, r1, r6
 8005106:	0c1e      	lsrs	r6, r3, #16
 8005108:	0c0b      	lsrs	r3, r1, #16
 800510a:	fb02 3306 	mla	r3, r2, r6, r3
 800510e:	b289      	uxth	r1, r1
 8005110:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005114:	4285      	cmp	r5, r0
 8005116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800511a:	f84c 1b04 	str.w	r1, [ip], #4
 800511e:	dcec      	bgt.n	80050fa <__multadd+0x12>
 8005120:	b30e      	cbz	r6, 8005166 <__multadd+0x7e>
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	42ab      	cmp	r3, r5
 8005126:	dc19      	bgt.n	800515c <__multadd+0x74>
 8005128:	6861      	ldr	r1, [r4, #4]
 800512a:	4638      	mov	r0, r7
 800512c:	3101      	adds	r1, #1
 800512e:	f7ff ff79 	bl	8005024 <_Balloc>
 8005132:	4680      	mov	r8, r0
 8005134:	b928      	cbnz	r0, 8005142 <__multadd+0x5a>
 8005136:	4602      	mov	r2, r0
 8005138:	21b5      	movs	r1, #181	; 0xb5
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <__multadd+0x84>)
 800513c:	480c      	ldr	r0, [pc, #48]	; (8005170 <__multadd+0x88>)
 800513e:	f000 fda1 	bl	8005c84 <__assert_func>
 8005142:	6922      	ldr	r2, [r4, #16]
 8005144:	f104 010c 	add.w	r1, r4, #12
 8005148:	3202      	adds	r2, #2
 800514a:	0092      	lsls	r2, r2, #2
 800514c:	300c      	adds	r0, #12
 800514e:	f7ff ff5b 	bl	8005008 <memcpy>
 8005152:	4621      	mov	r1, r4
 8005154:	4638      	mov	r0, r7
 8005156:	f7ff ffa5 	bl	80050a4 <_Bfree>
 800515a:	4644      	mov	r4, r8
 800515c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005160:	3501      	adds	r5, #1
 8005162:	615e      	str	r6, [r3, #20]
 8005164:	6125      	str	r5, [r4, #16]
 8005166:	4620      	mov	r0, r4
 8005168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800516c:	08006117 	.word	0x08006117
 8005170:	08006188 	.word	0x08006188

08005174 <__hi0bits>:
 8005174:	0c02      	lsrs	r2, r0, #16
 8005176:	0412      	lsls	r2, r2, #16
 8005178:	4603      	mov	r3, r0
 800517a:	b9ca      	cbnz	r2, 80051b0 <__hi0bits+0x3c>
 800517c:	0403      	lsls	r3, r0, #16
 800517e:	2010      	movs	r0, #16
 8005180:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005184:	bf04      	itt	eq
 8005186:	021b      	lsleq	r3, r3, #8
 8005188:	3008      	addeq	r0, #8
 800518a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800518e:	bf04      	itt	eq
 8005190:	011b      	lsleq	r3, r3, #4
 8005192:	3004      	addeq	r0, #4
 8005194:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005198:	bf04      	itt	eq
 800519a:	009b      	lsleq	r3, r3, #2
 800519c:	3002      	addeq	r0, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	db05      	blt.n	80051ae <__hi0bits+0x3a>
 80051a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80051a6:	f100 0001 	add.w	r0, r0, #1
 80051aa:	bf08      	it	eq
 80051ac:	2020      	moveq	r0, #32
 80051ae:	4770      	bx	lr
 80051b0:	2000      	movs	r0, #0
 80051b2:	e7e5      	b.n	8005180 <__hi0bits+0xc>

080051b4 <__lo0bits>:
 80051b4:	6803      	ldr	r3, [r0, #0]
 80051b6:	4602      	mov	r2, r0
 80051b8:	f013 0007 	ands.w	r0, r3, #7
 80051bc:	d00b      	beq.n	80051d6 <__lo0bits+0x22>
 80051be:	07d9      	lsls	r1, r3, #31
 80051c0:	d421      	bmi.n	8005206 <__lo0bits+0x52>
 80051c2:	0798      	lsls	r0, r3, #30
 80051c4:	bf49      	itett	mi
 80051c6:	085b      	lsrmi	r3, r3, #1
 80051c8:	089b      	lsrpl	r3, r3, #2
 80051ca:	2001      	movmi	r0, #1
 80051cc:	6013      	strmi	r3, [r2, #0]
 80051ce:	bf5c      	itt	pl
 80051d0:	2002      	movpl	r0, #2
 80051d2:	6013      	strpl	r3, [r2, #0]
 80051d4:	4770      	bx	lr
 80051d6:	b299      	uxth	r1, r3
 80051d8:	b909      	cbnz	r1, 80051de <__lo0bits+0x2a>
 80051da:	2010      	movs	r0, #16
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	b2d9      	uxtb	r1, r3
 80051e0:	b909      	cbnz	r1, 80051e6 <__lo0bits+0x32>
 80051e2:	3008      	adds	r0, #8
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	0719      	lsls	r1, r3, #28
 80051e8:	bf04      	itt	eq
 80051ea:	091b      	lsreq	r3, r3, #4
 80051ec:	3004      	addeq	r0, #4
 80051ee:	0799      	lsls	r1, r3, #30
 80051f0:	bf04      	itt	eq
 80051f2:	089b      	lsreq	r3, r3, #2
 80051f4:	3002      	addeq	r0, #2
 80051f6:	07d9      	lsls	r1, r3, #31
 80051f8:	d403      	bmi.n	8005202 <__lo0bits+0x4e>
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	f100 0001 	add.w	r0, r0, #1
 8005200:	d003      	beq.n	800520a <__lo0bits+0x56>
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	4770      	bx	lr
 8005206:	2000      	movs	r0, #0
 8005208:	4770      	bx	lr
 800520a:	2020      	movs	r0, #32
 800520c:	4770      	bx	lr
	...

08005210 <__i2b>:
 8005210:	b510      	push	{r4, lr}
 8005212:	460c      	mov	r4, r1
 8005214:	2101      	movs	r1, #1
 8005216:	f7ff ff05 	bl	8005024 <_Balloc>
 800521a:	4602      	mov	r2, r0
 800521c:	b928      	cbnz	r0, 800522a <__i2b+0x1a>
 800521e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005222:	4b04      	ldr	r3, [pc, #16]	; (8005234 <__i2b+0x24>)
 8005224:	4804      	ldr	r0, [pc, #16]	; (8005238 <__i2b+0x28>)
 8005226:	f000 fd2d 	bl	8005c84 <__assert_func>
 800522a:	2301      	movs	r3, #1
 800522c:	6144      	str	r4, [r0, #20]
 800522e:	6103      	str	r3, [r0, #16]
 8005230:	bd10      	pop	{r4, pc}
 8005232:	bf00      	nop
 8005234:	08006117 	.word	0x08006117
 8005238:	08006188 	.word	0x08006188

0800523c <__multiply>:
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	4691      	mov	r9, r2
 8005242:	690a      	ldr	r2, [r1, #16]
 8005244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005248:	460c      	mov	r4, r1
 800524a:	429a      	cmp	r2, r3
 800524c:	bfbe      	ittt	lt
 800524e:	460b      	movlt	r3, r1
 8005250:	464c      	movlt	r4, r9
 8005252:	4699      	movlt	r9, r3
 8005254:	6927      	ldr	r7, [r4, #16]
 8005256:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800525a:	68a3      	ldr	r3, [r4, #8]
 800525c:	6861      	ldr	r1, [r4, #4]
 800525e:	eb07 060a 	add.w	r6, r7, sl
 8005262:	42b3      	cmp	r3, r6
 8005264:	b085      	sub	sp, #20
 8005266:	bfb8      	it	lt
 8005268:	3101      	addlt	r1, #1
 800526a:	f7ff fedb 	bl	8005024 <_Balloc>
 800526e:	b930      	cbnz	r0, 800527e <__multiply+0x42>
 8005270:	4602      	mov	r2, r0
 8005272:	f240 115d 	movw	r1, #349	; 0x15d
 8005276:	4b43      	ldr	r3, [pc, #268]	; (8005384 <__multiply+0x148>)
 8005278:	4843      	ldr	r0, [pc, #268]	; (8005388 <__multiply+0x14c>)
 800527a:	f000 fd03 	bl	8005c84 <__assert_func>
 800527e:	f100 0514 	add.w	r5, r0, #20
 8005282:	462b      	mov	r3, r5
 8005284:	2200      	movs	r2, #0
 8005286:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800528a:	4543      	cmp	r3, r8
 800528c:	d321      	bcc.n	80052d2 <__multiply+0x96>
 800528e:	f104 0314 	add.w	r3, r4, #20
 8005292:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005296:	f109 0314 	add.w	r3, r9, #20
 800529a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800529e:	9202      	str	r2, [sp, #8]
 80052a0:	1b3a      	subs	r2, r7, r4
 80052a2:	3a15      	subs	r2, #21
 80052a4:	f022 0203 	bic.w	r2, r2, #3
 80052a8:	3204      	adds	r2, #4
 80052aa:	f104 0115 	add.w	r1, r4, #21
 80052ae:	428f      	cmp	r7, r1
 80052b0:	bf38      	it	cc
 80052b2:	2204      	movcc	r2, #4
 80052b4:	9201      	str	r2, [sp, #4]
 80052b6:	9a02      	ldr	r2, [sp, #8]
 80052b8:	9303      	str	r3, [sp, #12]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d80c      	bhi.n	80052d8 <__multiply+0x9c>
 80052be:	2e00      	cmp	r6, #0
 80052c0:	dd03      	ble.n	80052ca <__multiply+0x8e>
 80052c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d059      	beq.n	800537e <__multiply+0x142>
 80052ca:	6106      	str	r6, [r0, #16]
 80052cc:	b005      	add	sp, #20
 80052ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d2:	f843 2b04 	str.w	r2, [r3], #4
 80052d6:	e7d8      	b.n	800528a <__multiply+0x4e>
 80052d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80052dc:	f1ba 0f00 	cmp.w	sl, #0
 80052e0:	d023      	beq.n	800532a <__multiply+0xee>
 80052e2:	46a9      	mov	r9, r5
 80052e4:	f04f 0c00 	mov.w	ip, #0
 80052e8:	f104 0e14 	add.w	lr, r4, #20
 80052ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80052f0:	f8d9 1000 	ldr.w	r1, [r9]
 80052f4:	fa1f fb82 	uxth.w	fp, r2
 80052f8:	b289      	uxth	r1, r1
 80052fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80052fe:	4461      	add	r1, ip
 8005300:	f8d9 c000 	ldr.w	ip, [r9]
 8005304:	0c12      	lsrs	r2, r2, #16
 8005306:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800530a:	fb0a c202 	mla	r2, sl, r2, ip
 800530e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005312:	b289      	uxth	r1, r1
 8005314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005318:	4577      	cmp	r7, lr
 800531a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800531e:	f849 1b04 	str.w	r1, [r9], #4
 8005322:	d8e3      	bhi.n	80052ec <__multiply+0xb0>
 8005324:	9a01      	ldr	r2, [sp, #4]
 8005326:	f845 c002 	str.w	ip, [r5, r2]
 800532a:	9a03      	ldr	r2, [sp, #12]
 800532c:	3304      	adds	r3, #4
 800532e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005332:	f1b9 0f00 	cmp.w	r9, #0
 8005336:	d020      	beq.n	800537a <__multiply+0x13e>
 8005338:	46ae      	mov	lr, r5
 800533a:	f04f 0a00 	mov.w	sl, #0
 800533e:	6829      	ldr	r1, [r5, #0]
 8005340:	f104 0c14 	add.w	ip, r4, #20
 8005344:	f8bc b000 	ldrh.w	fp, [ip]
 8005348:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800534c:	b289      	uxth	r1, r1
 800534e:	fb09 220b 	mla	r2, r9, fp, r2
 8005352:	4492      	add	sl, r2
 8005354:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005358:	f84e 1b04 	str.w	r1, [lr], #4
 800535c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005360:	f8be 1000 	ldrh.w	r1, [lr]
 8005364:	0c12      	lsrs	r2, r2, #16
 8005366:	fb09 1102 	mla	r1, r9, r2, r1
 800536a:	4567      	cmp	r7, ip
 800536c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005370:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005374:	d8e6      	bhi.n	8005344 <__multiply+0x108>
 8005376:	9a01      	ldr	r2, [sp, #4]
 8005378:	50a9      	str	r1, [r5, r2]
 800537a:	3504      	adds	r5, #4
 800537c:	e79b      	b.n	80052b6 <__multiply+0x7a>
 800537e:	3e01      	subs	r6, #1
 8005380:	e79d      	b.n	80052be <__multiply+0x82>
 8005382:	bf00      	nop
 8005384:	08006117 	.word	0x08006117
 8005388:	08006188 	.word	0x08006188

0800538c <__pow5mult>:
 800538c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005390:	4615      	mov	r5, r2
 8005392:	f012 0203 	ands.w	r2, r2, #3
 8005396:	4606      	mov	r6, r0
 8005398:	460f      	mov	r7, r1
 800539a:	d007      	beq.n	80053ac <__pow5mult+0x20>
 800539c:	4c25      	ldr	r4, [pc, #148]	; (8005434 <__pow5mult+0xa8>)
 800539e:	3a01      	subs	r2, #1
 80053a0:	2300      	movs	r3, #0
 80053a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053a6:	f7ff fe9f 	bl	80050e8 <__multadd>
 80053aa:	4607      	mov	r7, r0
 80053ac:	10ad      	asrs	r5, r5, #2
 80053ae:	d03d      	beq.n	800542c <__pow5mult+0xa0>
 80053b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053b2:	b97c      	cbnz	r4, 80053d4 <__pow5mult+0x48>
 80053b4:	2010      	movs	r0, #16
 80053b6:	f7ff fe11 	bl	8004fdc <malloc>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6270      	str	r0, [r6, #36]	; 0x24
 80053be:	b928      	cbnz	r0, 80053cc <__pow5mult+0x40>
 80053c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80053c4:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <__pow5mult+0xac>)
 80053c6:	481d      	ldr	r0, [pc, #116]	; (800543c <__pow5mult+0xb0>)
 80053c8:	f000 fc5c 	bl	8005c84 <__assert_func>
 80053cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053d0:	6004      	str	r4, [r0, #0]
 80053d2:	60c4      	str	r4, [r0, #12]
 80053d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053dc:	b94c      	cbnz	r4, 80053f2 <__pow5mult+0x66>
 80053de:	f240 2171 	movw	r1, #625	; 0x271
 80053e2:	4630      	mov	r0, r6
 80053e4:	f7ff ff14 	bl	8005210 <__i2b>
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	f04f 0900 	mov.w	r9, #0
 80053f6:	07eb      	lsls	r3, r5, #31
 80053f8:	d50a      	bpl.n	8005410 <__pow5mult+0x84>
 80053fa:	4639      	mov	r1, r7
 80053fc:	4622      	mov	r2, r4
 80053fe:	4630      	mov	r0, r6
 8005400:	f7ff ff1c 	bl	800523c <__multiply>
 8005404:	4680      	mov	r8, r0
 8005406:	4639      	mov	r1, r7
 8005408:	4630      	mov	r0, r6
 800540a:	f7ff fe4b 	bl	80050a4 <_Bfree>
 800540e:	4647      	mov	r7, r8
 8005410:	106d      	asrs	r5, r5, #1
 8005412:	d00b      	beq.n	800542c <__pow5mult+0xa0>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	b938      	cbnz	r0, 8005428 <__pow5mult+0x9c>
 8005418:	4622      	mov	r2, r4
 800541a:	4621      	mov	r1, r4
 800541c:	4630      	mov	r0, r6
 800541e:	f7ff ff0d 	bl	800523c <__multiply>
 8005422:	6020      	str	r0, [r4, #0]
 8005424:	f8c0 9000 	str.w	r9, [r0]
 8005428:	4604      	mov	r4, r0
 800542a:	e7e4      	b.n	80053f6 <__pow5mult+0x6a>
 800542c:	4638      	mov	r0, r7
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005432:	bf00      	nop
 8005434:	080062d8 	.word	0x080062d8
 8005438:	080060a5 	.word	0x080060a5
 800543c:	08006188 	.word	0x08006188

08005440 <__lshift>:
 8005440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	460c      	mov	r4, r1
 8005446:	4607      	mov	r7, r0
 8005448:	4691      	mov	r9, r2
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	6849      	ldr	r1, [r1, #4]
 800544e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005458:	f108 0601 	add.w	r6, r8, #1
 800545c:	42b3      	cmp	r3, r6
 800545e:	db0b      	blt.n	8005478 <__lshift+0x38>
 8005460:	4638      	mov	r0, r7
 8005462:	f7ff fddf 	bl	8005024 <_Balloc>
 8005466:	4605      	mov	r5, r0
 8005468:	b948      	cbnz	r0, 800547e <__lshift+0x3e>
 800546a:	4602      	mov	r2, r0
 800546c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005470:	4b29      	ldr	r3, [pc, #164]	; (8005518 <__lshift+0xd8>)
 8005472:	482a      	ldr	r0, [pc, #168]	; (800551c <__lshift+0xdc>)
 8005474:	f000 fc06 	bl	8005c84 <__assert_func>
 8005478:	3101      	adds	r1, #1
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	e7ee      	b.n	800545c <__lshift+0x1c>
 800547e:	2300      	movs	r3, #0
 8005480:	f100 0114 	add.w	r1, r0, #20
 8005484:	f100 0210 	add.w	r2, r0, #16
 8005488:	4618      	mov	r0, r3
 800548a:	4553      	cmp	r3, sl
 800548c:	db37      	blt.n	80054fe <__lshift+0xbe>
 800548e:	6920      	ldr	r0, [r4, #16]
 8005490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005494:	f104 0314 	add.w	r3, r4, #20
 8005498:	f019 091f 	ands.w	r9, r9, #31
 800549c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054a4:	d02f      	beq.n	8005506 <__lshift+0xc6>
 80054a6:	468a      	mov	sl, r1
 80054a8:	f04f 0c00 	mov.w	ip, #0
 80054ac:	f1c9 0e20 	rsb	lr, r9, #32
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	fa02 f209 	lsl.w	r2, r2, r9
 80054b6:	ea42 020c 	orr.w	r2, r2, ip
 80054ba:	f84a 2b04 	str.w	r2, [sl], #4
 80054be:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c2:	4298      	cmp	r0, r3
 80054c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80054c8:	d8f2      	bhi.n	80054b0 <__lshift+0x70>
 80054ca:	1b03      	subs	r3, r0, r4
 80054cc:	3b15      	subs	r3, #21
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	3304      	adds	r3, #4
 80054d4:	f104 0215 	add.w	r2, r4, #21
 80054d8:	4290      	cmp	r0, r2
 80054da:	bf38      	it	cc
 80054dc:	2304      	movcc	r3, #4
 80054de:	f841 c003 	str.w	ip, [r1, r3]
 80054e2:	f1bc 0f00 	cmp.w	ip, #0
 80054e6:	d001      	beq.n	80054ec <__lshift+0xac>
 80054e8:	f108 0602 	add.w	r6, r8, #2
 80054ec:	3e01      	subs	r6, #1
 80054ee:	4638      	mov	r0, r7
 80054f0:	4621      	mov	r1, r4
 80054f2:	612e      	str	r6, [r5, #16]
 80054f4:	f7ff fdd6 	bl	80050a4 <_Bfree>
 80054f8:	4628      	mov	r0, r5
 80054fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8005502:	3301      	adds	r3, #1
 8005504:	e7c1      	b.n	800548a <__lshift+0x4a>
 8005506:	3904      	subs	r1, #4
 8005508:	f853 2b04 	ldr.w	r2, [r3], #4
 800550c:	4298      	cmp	r0, r3
 800550e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005512:	d8f9      	bhi.n	8005508 <__lshift+0xc8>
 8005514:	e7ea      	b.n	80054ec <__lshift+0xac>
 8005516:	bf00      	nop
 8005518:	08006117 	.word	0x08006117
 800551c:	08006188 	.word	0x08006188

08005520 <__mcmp>:
 8005520:	4603      	mov	r3, r0
 8005522:	690a      	ldr	r2, [r1, #16]
 8005524:	6900      	ldr	r0, [r0, #16]
 8005526:	b530      	push	{r4, r5, lr}
 8005528:	1a80      	subs	r0, r0, r2
 800552a:	d10d      	bne.n	8005548 <__mcmp+0x28>
 800552c:	3314      	adds	r3, #20
 800552e:	3114      	adds	r1, #20
 8005530:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005534:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800553c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005540:	4295      	cmp	r5, r2
 8005542:	d002      	beq.n	800554a <__mcmp+0x2a>
 8005544:	d304      	bcc.n	8005550 <__mcmp+0x30>
 8005546:	2001      	movs	r0, #1
 8005548:	bd30      	pop	{r4, r5, pc}
 800554a:	42a3      	cmp	r3, r4
 800554c:	d3f4      	bcc.n	8005538 <__mcmp+0x18>
 800554e:	e7fb      	b.n	8005548 <__mcmp+0x28>
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	e7f8      	b.n	8005548 <__mcmp+0x28>
	...

08005558 <__mdiff>:
 8005558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	460d      	mov	r5, r1
 800555e:	4607      	mov	r7, r0
 8005560:	4611      	mov	r1, r2
 8005562:	4628      	mov	r0, r5
 8005564:	4614      	mov	r4, r2
 8005566:	f7ff ffdb 	bl	8005520 <__mcmp>
 800556a:	1e06      	subs	r6, r0, #0
 800556c:	d111      	bne.n	8005592 <__mdiff+0x3a>
 800556e:	4631      	mov	r1, r6
 8005570:	4638      	mov	r0, r7
 8005572:	f7ff fd57 	bl	8005024 <_Balloc>
 8005576:	4602      	mov	r2, r0
 8005578:	b928      	cbnz	r0, 8005586 <__mdiff+0x2e>
 800557a:	f240 2132 	movw	r1, #562	; 0x232
 800557e:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <__mdiff+0x110>)
 8005580:	483a      	ldr	r0, [pc, #232]	; (800566c <__mdiff+0x114>)
 8005582:	f000 fb7f 	bl	8005c84 <__assert_func>
 8005586:	2301      	movs	r3, #1
 8005588:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800558c:	4610      	mov	r0, r2
 800558e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	bfa4      	itt	ge
 8005594:	4623      	movge	r3, r4
 8005596:	462c      	movge	r4, r5
 8005598:	4638      	mov	r0, r7
 800559a:	6861      	ldr	r1, [r4, #4]
 800559c:	bfa6      	itte	ge
 800559e:	461d      	movge	r5, r3
 80055a0:	2600      	movge	r6, #0
 80055a2:	2601      	movlt	r6, #1
 80055a4:	f7ff fd3e 	bl	8005024 <_Balloc>
 80055a8:	4602      	mov	r2, r0
 80055aa:	b918      	cbnz	r0, 80055b4 <__mdiff+0x5c>
 80055ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80055b0:	4b2d      	ldr	r3, [pc, #180]	; (8005668 <__mdiff+0x110>)
 80055b2:	e7e5      	b.n	8005580 <__mdiff+0x28>
 80055b4:	f102 0814 	add.w	r8, r2, #20
 80055b8:	46c2      	mov	sl, r8
 80055ba:	f04f 0c00 	mov.w	ip, #0
 80055be:	6927      	ldr	r7, [r4, #16]
 80055c0:	60c6      	str	r6, [r0, #12]
 80055c2:	692e      	ldr	r6, [r5, #16]
 80055c4:	f104 0014 	add.w	r0, r4, #20
 80055c8:	f105 0914 	add.w	r9, r5, #20
 80055cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80055d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055d4:	3410      	adds	r4, #16
 80055d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80055da:	f859 3b04 	ldr.w	r3, [r9], #4
 80055de:	fa1f f18b 	uxth.w	r1, fp
 80055e2:	448c      	add	ip, r1
 80055e4:	b299      	uxth	r1, r3
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	ebac 0101 	sub.w	r1, ip, r1
 80055ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80055f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80055f4:	b289      	uxth	r1, r1
 80055f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80055fa:	454e      	cmp	r6, r9
 80055fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005600:	f84a 3b04 	str.w	r3, [sl], #4
 8005604:	d8e7      	bhi.n	80055d6 <__mdiff+0x7e>
 8005606:	1b73      	subs	r3, r6, r5
 8005608:	3b15      	subs	r3, #21
 800560a:	f023 0303 	bic.w	r3, r3, #3
 800560e:	3515      	adds	r5, #21
 8005610:	3304      	adds	r3, #4
 8005612:	42ae      	cmp	r6, r5
 8005614:	bf38      	it	cc
 8005616:	2304      	movcc	r3, #4
 8005618:	4418      	add	r0, r3
 800561a:	4443      	add	r3, r8
 800561c:	461e      	mov	r6, r3
 800561e:	4605      	mov	r5, r0
 8005620:	4575      	cmp	r5, lr
 8005622:	d30e      	bcc.n	8005642 <__mdiff+0xea>
 8005624:	f10e 0103 	add.w	r1, lr, #3
 8005628:	1a09      	subs	r1, r1, r0
 800562a:	f021 0103 	bic.w	r1, r1, #3
 800562e:	3803      	subs	r0, #3
 8005630:	4586      	cmp	lr, r0
 8005632:	bf38      	it	cc
 8005634:	2100      	movcc	r1, #0
 8005636:	4419      	add	r1, r3
 8005638:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800563c:	b18b      	cbz	r3, 8005662 <__mdiff+0x10a>
 800563e:	6117      	str	r7, [r2, #16]
 8005640:	e7a4      	b.n	800558c <__mdiff+0x34>
 8005642:	f855 8b04 	ldr.w	r8, [r5], #4
 8005646:	fa1f f188 	uxth.w	r1, r8
 800564a:	4461      	add	r1, ip
 800564c:	140c      	asrs	r4, r1, #16
 800564e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005652:	b289      	uxth	r1, r1
 8005654:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005658:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800565c:	f846 1b04 	str.w	r1, [r6], #4
 8005660:	e7de      	b.n	8005620 <__mdiff+0xc8>
 8005662:	3f01      	subs	r7, #1
 8005664:	e7e8      	b.n	8005638 <__mdiff+0xe0>
 8005666:	bf00      	nop
 8005668:	08006117 	.word	0x08006117
 800566c:	08006188 	.word	0x08006188

08005670 <__d2b>:
 8005670:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005674:	2101      	movs	r1, #1
 8005676:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800567a:	4690      	mov	r8, r2
 800567c:	461d      	mov	r5, r3
 800567e:	f7ff fcd1 	bl	8005024 <_Balloc>
 8005682:	4604      	mov	r4, r0
 8005684:	b930      	cbnz	r0, 8005694 <__d2b+0x24>
 8005686:	4602      	mov	r2, r0
 8005688:	f240 310a 	movw	r1, #778	; 0x30a
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <__d2b+0xb0>)
 800568e:	4825      	ldr	r0, [pc, #148]	; (8005724 <__d2b+0xb4>)
 8005690:	f000 faf8 	bl	8005c84 <__assert_func>
 8005694:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005698:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800569c:	bb2d      	cbnz	r5, 80056ea <__d2b+0x7a>
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	f1b8 0300 	subs.w	r3, r8, #0
 80056a4:	d026      	beq.n	80056f4 <__d2b+0x84>
 80056a6:	4668      	mov	r0, sp
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	f7ff fd83 	bl	80051b4 <__lo0bits>
 80056ae:	9900      	ldr	r1, [sp, #0]
 80056b0:	b1f0      	cbz	r0, 80056f0 <__d2b+0x80>
 80056b2:	9a01      	ldr	r2, [sp, #4]
 80056b4:	f1c0 0320 	rsb	r3, r0, #32
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	430b      	orrs	r3, r1
 80056be:	40c2      	lsrs	r2, r0
 80056c0:	6163      	str	r3, [r4, #20]
 80056c2:	9201      	str	r2, [sp, #4]
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bf14      	ite	ne
 80056ca:	2102      	movne	r1, #2
 80056cc:	2101      	moveq	r1, #1
 80056ce:	61a3      	str	r3, [r4, #24]
 80056d0:	6121      	str	r1, [r4, #16]
 80056d2:	b1c5      	cbz	r5, 8005706 <__d2b+0x96>
 80056d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80056d8:	4405      	add	r5, r0
 80056da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056de:	603d      	str	r5, [r7, #0]
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4620      	mov	r0, r4
 80056e4:	b002      	add	sp, #8
 80056e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ee:	e7d6      	b.n	800569e <__d2b+0x2e>
 80056f0:	6161      	str	r1, [r4, #20]
 80056f2:	e7e7      	b.n	80056c4 <__d2b+0x54>
 80056f4:	a801      	add	r0, sp, #4
 80056f6:	f7ff fd5d 	bl	80051b4 <__lo0bits>
 80056fa:	2101      	movs	r1, #1
 80056fc:	9b01      	ldr	r3, [sp, #4]
 80056fe:	6121      	str	r1, [r4, #16]
 8005700:	6163      	str	r3, [r4, #20]
 8005702:	3020      	adds	r0, #32
 8005704:	e7e5      	b.n	80056d2 <__d2b+0x62>
 8005706:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800570a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800570e:	6038      	str	r0, [r7, #0]
 8005710:	6918      	ldr	r0, [r3, #16]
 8005712:	f7ff fd2f 	bl	8005174 <__hi0bits>
 8005716:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800571a:	6031      	str	r1, [r6, #0]
 800571c:	e7e1      	b.n	80056e2 <__d2b+0x72>
 800571e:	bf00      	nop
 8005720:	08006117 	.word	0x08006117
 8005724:	08006188 	.word	0x08006188

08005728 <_calloc_r>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	fba1 5402 	umull	r5, r4, r1, r2
 800572e:	b934      	cbnz	r4, 800573e <_calloc_r+0x16>
 8005730:	4629      	mov	r1, r5
 8005732:	f000 f875 	bl	8005820 <_malloc_r>
 8005736:	4606      	mov	r6, r0
 8005738:	b928      	cbnz	r0, 8005746 <_calloc_r+0x1e>
 800573a:	4630      	mov	r0, r6
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	220c      	movs	r2, #12
 8005740:	2600      	movs	r6, #0
 8005742:	6002      	str	r2, [r0, #0]
 8005744:	e7f9      	b.n	800573a <_calloc_r+0x12>
 8005746:	462a      	mov	r2, r5
 8005748:	4621      	mov	r1, r4
 800574a:	f7fd fdf7 	bl	800333c <memset>
 800574e:	e7f4      	b.n	800573a <_calloc_r+0x12>

08005750 <_free_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4605      	mov	r5, r0
 8005754:	2900      	cmp	r1, #0
 8005756:	d040      	beq.n	80057da <_free_r+0x8a>
 8005758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800575c:	1f0c      	subs	r4, r1, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	bfb8      	it	lt
 8005762:	18e4      	addlt	r4, r4, r3
 8005764:	f000 fb14 	bl	8005d90 <__malloc_lock>
 8005768:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <_free_r+0x8c>)
 800576a:	6813      	ldr	r3, [r2, #0]
 800576c:	b933      	cbnz	r3, 800577c <_free_r+0x2c>
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	6014      	str	r4, [r2, #0]
 8005772:	4628      	mov	r0, r5
 8005774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005778:	f000 bb10 	b.w	8005d9c <__malloc_unlock>
 800577c:	42a3      	cmp	r3, r4
 800577e:	d908      	bls.n	8005792 <_free_r+0x42>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	1821      	adds	r1, r4, r0
 8005784:	428b      	cmp	r3, r1
 8005786:	bf01      	itttt	eq
 8005788:	6819      	ldreq	r1, [r3, #0]
 800578a:	685b      	ldreq	r3, [r3, #4]
 800578c:	1809      	addeq	r1, r1, r0
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	e7ed      	b.n	800576e <_free_r+0x1e>
 8005792:	461a      	mov	r2, r3
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	b10b      	cbz	r3, 800579c <_free_r+0x4c>
 8005798:	42a3      	cmp	r3, r4
 800579a:	d9fa      	bls.n	8005792 <_free_r+0x42>
 800579c:	6811      	ldr	r1, [r2, #0]
 800579e:	1850      	adds	r0, r2, r1
 80057a0:	42a0      	cmp	r0, r4
 80057a2:	d10b      	bne.n	80057bc <_free_r+0x6c>
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	4401      	add	r1, r0
 80057a8:	1850      	adds	r0, r2, r1
 80057aa:	4283      	cmp	r3, r0
 80057ac:	6011      	str	r1, [r2, #0]
 80057ae:	d1e0      	bne.n	8005772 <_free_r+0x22>
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4401      	add	r1, r0
 80057b6:	6011      	str	r1, [r2, #0]
 80057b8:	6053      	str	r3, [r2, #4]
 80057ba:	e7da      	b.n	8005772 <_free_r+0x22>
 80057bc:	d902      	bls.n	80057c4 <_free_r+0x74>
 80057be:	230c      	movs	r3, #12
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	e7d6      	b.n	8005772 <_free_r+0x22>
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	1821      	adds	r1, r4, r0
 80057c8:	428b      	cmp	r3, r1
 80057ca:	bf01      	itttt	eq
 80057cc:	6819      	ldreq	r1, [r3, #0]
 80057ce:	685b      	ldreq	r3, [r3, #4]
 80057d0:	1809      	addeq	r1, r1, r0
 80057d2:	6021      	streq	r1, [r4, #0]
 80057d4:	6063      	str	r3, [r4, #4]
 80057d6:	6054      	str	r4, [r2, #4]
 80057d8:	e7cb      	b.n	8005772 <_free_r+0x22>
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	20000308 	.word	0x20000308

080057e0 <sbrk_aligned>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4e0e      	ldr	r6, [pc, #56]	; (800581c <sbrk_aligned+0x3c>)
 80057e4:	460c      	mov	r4, r1
 80057e6:	6831      	ldr	r1, [r6, #0]
 80057e8:	4605      	mov	r5, r0
 80057ea:	b911      	cbnz	r1, 80057f2 <sbrk_aligned+0x12>
 80057ec:	f000 f9e4 	bl	8005bb8 <_sbrk_r>
 80057f0:	6030      	str	r0, [r6, #0]
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 f9df 	bl	8005bb8 <_sbrk_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d00a      	beq.n	8005814 <sbrk_aligned+0x34>
 80057fe:	1cc4      	adds	r4, r0, #3
 8005800:	f024 0403 	bic.w	r4, r4, #3
 8005804:	42a0      	cmp	r0, r4
 8005806:	d007      	beq.n	8005818 <sbrk_aligned+0x38>
 8005808:	1a21      	subs	r1, r4, r0
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f9d4 	bl	8005bb8 <_sbrk_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d101      	bne.n	8005818 <sbrk_aligned+0x38>
 8005814:	f04f 34ff 	mov.w	r4, #4294967295
 8005818:	4620      	mov	r0, r4
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	2000030c 	.word	0x2000030c

08005820 <_malloc_r>:
 8005820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005824:	1ccd      	adds	r5, r1, #3
 8005826:	f025 0503 	bic.w	r5, r5, #3
 800582a:	3508      	adds	r5, #8
 800582c:	2d0c      	cmp	r5, #12
 800582e:	bf38      	it	cc
 8005830:	250c      	movcc	r5, #12
 8005832:	2d00      	cmp	r5, #0
 8005834:	4607      	mov	r7, r0
 8005836:	db01      	blt.n	800583c <_malloc_r+0x1c>
 8005838:	42a9      	cmp	r1, r5
 800583a:	d905      	bls.n	8005848 <_malloc_r+0x28>
 800583c:	230c      	movs	r3, #12
 800583e:	2600      	movs	r6, #0
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	4630      	mov	r0, r6
 8005844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005848:	4e2e      	ldr	r6, [pc, #184]	; (8005904 <_malloc_r+0xe4>)
 800584a:	f000 faa1 	bl	8005d90 <__malloc_lock>
 800584e:	6833      	ldr	r3, [r6, #0]
 8005850:	461c      	mov	r4, r3
 8005852:	bb34      	cbnz	r4, 80058a2 <_malloc_r+0x82>
 8005854:	4629      	mov	r1, r5
 8005856:	4638      	mov	r0, r7
 8005858:	f7ff ffc2 	bl	80057e0 <sbrk_aligned>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	4604      	mov	r4, r0
 8005860:	d14d      	bne.n	80058fe <_malloc_r+0xde>
 8005862:	6834      	ldr	r4, [r6, #0]
 8005864:	4626      	mov	r6, r4
 8005866:	2e00      	cmp	r6, #0
 8005868:	d140      	bne.n	80058ec <_malloc_r+0xcc>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	4631      	mov	r1, r6
 800586e:	4638      	mov	r0, r7
 8005870:	eb04 0803 	add.w	r8, r4, r3
 8005874:	f000 f9a0 	bl	8005bb8 <_sbrk_r>
 8005878:	4580      	cmp	r8, r0
 800587a:	d13a      	bne.n	80058f2 <_malloc_r+0xd2>
 800587c:	6821      	ldr	r1, [r4, #0]
 800587e:	3503      	adds	r5, #3
 8005880:	1a6d      	subs	r5, r5, r1
 8005882:	f025 0503 	bic.w	r5, r5, #3
 8005886:	3508      	adds	r5, #8
 8005888:	2d0c      	cmp	r5, #12
 800588a:	bf38      	it	cc
 800588c:	250c      	movcc	r5, #12
 800588e:	4638      	mov	r0, r7
 8005890:	4629      	mov	r1, r5
 8005892:	f7ff ffa5 	bl	80057e0 <sbrk_aligned>
 8005896:	3001      	adds	r0, #1
 8005898:	d02b      	beq.n	80058f2 <_malloc_r+0xd2>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	442b      	add	r3, r5
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	e00e      	b.n	80058c0 <_malloc_r+0xa0>
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	1b52      	subs	r2, r2, r5
 80058a6:	d41e      	bmi.n	80058e6 <_malloc_r+0xc6>
 80058a8:	2a0b      	cmp	r2, #11
 80058aa:	d916      	bls.n	80058da <_malloc_r+0xba>
 80058ac:	1961      	adds	r1, r4, r5
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	6025      	str	r5, [r4, #0]
 80058b2:	bf18      	it	ne
 80058b4:	6059      	strne	r1, [r3, #4]
 80058b6:	6863      	ldr	r3, [r4, #4]
 80058b8:	bf08      	it	eq
 80058ba:	6031      	streq	r1, [r6, #0]
 80058bc:	5162      	str	r2, [r4, r5]
 80058be:	604b      	str	r3, [r1, #4]
 80058c0:	4638      	mov	r0, r7
 80058c2:	f104 060b 	add.w	r6, r4, #11
 80058c6:	f000 fa69 	bl	8005d9c <__malloc_unlock>
 80058ca:	f026 0607 	bic.w	r6, r6, #7
 80058ce:	1d23      	adds	r3, r4, #4
 80058d0:	1af2      	subs	r2, r6, r3
 80058d2:	d0b6      	beq.n	8005842 <_malloc_r+0x22>
 80058d4:	1b9b      	subs	r3, r3, r6
 80058d6:	50a3      	str	r3, [r4, r2]
 80058d8:	e7b3      	b.n	8005842 <_malloc_r+0x22>
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	42a3      	cmp	r3, r4
 80058de:	bf0c      	ite	eq
 80058e0:	6032      	streq	r2, [r6, #0]
 80058e2:	605a      	strne	r2, [r3, #4]
 80058e4:	e7ec      	b.n	80058c0 <_malloc_r+0xa0>
 80058e6:	4623      	mov	r3, r4
 80058e8:	6864      	ldr	r4, [r4, #4]
 80058ea:	e7b2      	b.n	8005852 <_malloc_r+0x32>
 80058ec:	4634      	mov	r4, r6
 80058ee:	6876      	ldr	r6, [r6, #4]
 80058f0:	e7b9      	b.n	8005866 <_malloc_r+0x46>
 80058f2:	230c      	movs	r3, #12
 80058f4:	4638      	mov	r0, r7
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	f000 fa50 	bl	8005d9c <__malloc_unlock>
 80058fc:	e7a1      	b.n	8005842 <_malloc_r+0x22>
 80058fe:	6025      	str	r5, [r4, #0]
 8005900:	e7de      	b.n	80058c0 <_malloc_r+0xa0>
 8005902:	bf00      	nop
 8005904:	20000308 	.word	0x20000308

08005908 <__sfputc_r>:
 8005908:	6893      	ldr	r3, [r2, #8]
 800590a:	b410      	push	{r4}
 800590c:	3b01      	subs	r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	6093      	str	r3, [r2, #8]
 8005912:	da07      	bge.n	8005924 <__sfputc_r+0x1c>
 8005914:	6994      	ldr	r4, [r2, #24]
 8005916:	42a3      	cmp	r3, r4
 8005918:	db01      	blt.n	800591e <__sfputc_r+0x16>
 800591a:	290a      	cmp	r1, #10
 800591c:	d102      	bne.n	8005924 <__sfputc_r+0x1c>
 800591e:	bc10      	pop	{r4}
 8005920:	f7fe ba02 	b.w	8003d28 <__swbuf_r>
 8005924:	6813      	ldr	r3, [r2, #0]
 8005926:	1c58      	adds	r0, r3, #1
 8005928:	6010      	str	r0, [r2, #0]
 800592a:	7019      	strb	r1, [r3, #0]
 800592c:	4608      	mov	r0, r1
 800592e:	bc10      	pop	{r4}
 8005930:	4770      	bx	lr

08005932 <__sfputs_r>:
 8005932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	4614      	mov	r4, r2
 800593a:	18d5      	adds	r5, r2, r3
 800593c:	42ac      	cmp	r4, r5
 800593e:	d101      	bne.n	8005944 <__sfputs_r+0x12>
 8005940:	2000      	movs	r0, #0
 8005942:	e007      	b.n	8005954 <__sfputs_r+0x22>
 8005944:	463a      	mov	r2, r7
 8005946:	4630      	mov	r0, r6
 8005948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594c:	f7ff ffdc 	bl	8005908 <__sfputc_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d1f3      	bne.n	800593c <__sfputs_r+0xa>
 8005954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005958 <_vfiprintf_r>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	460d      	mov	r5, r1
 800595e:	4614      	mov	r4, r2
 8005960:	4698      	mov	r8, r3
 8005962:	4606      	mov	r6, r0
 8005964:	b09d      	sub	sp, #116	; 0x74
 8005966:	b118      	cbz	r0, 8005970 <_vfiprintf_r+0x18>
 8005968:	6983      	ldr	r3, [r0, #24]
 800596a:	b90b      	cbnz	r3, 8005970 <_vfiprintf_r+0x18>
 800596c:	f7ff fa2c 	bl	8004dc8 <__sinit>
 8005970:	4b89      	ldr	r3, [pc, #548]	; (8005b98 <_vfiprintf_r+0x240>)
 8005972:	429d      	cmp	r5, r3
 8005974:	d11b      	bne.n	80059ae <_vfiprintf_r+0x56>
 8005976:	6875      	ldr	r5, [r6, #4]
 8005978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800597a:	07d9      	lsls	r1, r3, #31
 800597c:	d405      	bmi.n	800598a <_vfiprintf_r+0x32>
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	059a      	lsls	r2, r3, #22
 8005982:	d402      	bmi.n	800598a <_vfiprintf_r+0x32>
 8005984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005986:	f7ff fac2 	bl	8004f0e <__retarget_lock_acquire_recursive>
 800598a:	89ab      	ldrh	r3, [r5, #12]
 800598c:	071b      	lsls	r3, r3, #28
 800598e:	d501      	bpl.n	8005994 <_vfiprintf_r+0x3c>
 8005990:	692b      	ldr	r3, [r5, #16]
 8005992:	b9eb      	cbnz	r3, 80059d0 <_vfiprintf_r+0x78>
 8005994:	4629      	mov	r1, r5
 8005996:	4630      	mov	r0, r6
 8005998:	f7fe fa18 	bl	8003dcc <__swsetup_r>
 800599c:	b1c0      	cbz	r0, 80059d0 <_vfiprintf_r+0x78>
 800599e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059a0:	07dc      	lsls	r4, r3, #31
 80059a2:	d50e      	bpl.n	80059c2 <_vfiprintf_r+0x6a>
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	b01d      	add	sp, #116	; 0x74
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <_vfiprintf_r+0x244>)
 80059b0:	429d      	cmp	r5, r3
 80059b2:	d101      	bne.n	80059b8 <_vfiprintf_r+0x60>
 80059b4:	68b5      	ldr	r5, [r6, #8]
 80059b6:	e7df      	b.n	8005978 <_vfiprintf_r+0x20>
 80059b8:	4b79      	ldr	r3, [pc, #484]	; (8005ba0 <_vfiprintf_r+0x248>)
 80059ba:	429d      	cmp	r5, r3
 80059bc:	bf08      	it	eq
 80059be:	68f5      	ldreq	r5, [r6, #12]
 80059c0:	e7da      	b.n	8005978 <_vfiprintf_r+0x20>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	0598      	lsls	r0, r3, #22
 80059c6:	d4ed      	bmi.n	80059a4 <_vfiprintf_r+0x4c>
 80059c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ca:	f7ff faa1 	bl	8004f10 <__retarget_lock_release_recursive>
 80059ce:	e7e9      	b.n	80059a4 <_vfiprintf_r+0x4c>
 80059d0:	2300      	movs	r3, #0
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	2320      	movs	r3, #32
 80059d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059da:	2330      	movs	r3, #48	; 0x30
 80059dc:	f04f 0901 	mov.w	r9, #1
 80059e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ba4 <_vfiprintf_r+0x24c>
 80059e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ec:	4623      	mov	r3, r4
 80059ee:	469a      	mov	sl, r3
 80059f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f4:	b10a      	cbz	r2, 80059fa <_vfiprintf_r+0xa2>
 80059f6:	2a25      	cmp	r2, #37	; 0x25
 80059f8:	d1f9      	bne.n	80059ee <_vfiprintf_r+0x96>
 80059fa:	ebba 0b04 	subs.w	fp, sl, r4
 80059fe:	d00b      	beq.n	8005a18 <_vfiprintf_r+0xc0>
 8005a00:	465b      	mov	r3, fp
 8005a02:	4622      	mov	r2, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7ff ff93 	bl	8005932 <__sfputs_r>
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f000 80aa 	beq.w	8005b66 <_vfiprintf_r+0x20e>
 8005a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a14:	445a      	add	r2, fp
 8005a16:	9209      	str	r2, [sp, #36]	; 0x24
 8005a18:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a2 	beq.w	8005b66 <_vfiprintf_r+0x20e>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f04f 32ff 	mov.w	r2, #4294967295
 8005a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2c:	f10a 0a01 	add.w	sl, sl, #1
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a38:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3a:	4654      	mov	r4, sl
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a42:	4858      	ldr	r0, [pc, #352]	; (8005ba4 <_vfiprintf_r+0x24c>)
 8005a44:	f7ff fad2 	bl	8004fec <memchr>
 8005a48:	9a04      	ldr	r2, [sp, #16]
 8005a4a:	b9d8      	cbnz	r0, 8005a84 <_vfiprintf_r+0x12c>
 8005a4c:	06d1      	lsls	r1, r2, #27
 8005a4e:	bf44      	itt	mi
 8005a50:	2320      	movmi	r3, #32
 8005a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a56:	0713      	lsls	r3, r2, #28
 8005a58:	bf44      	itt	mi
 8005a5a:	232b      	movmi	r3, #43	; 0x2b
 8005a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a60:	f89a 3000 	ldrb.w	r3, [sl]
 8005a64:	2b2a      	cmp	r3, #42	; 0x2a
 8005a66:	d015      	beq.n	8005a94 <_vfiprintf_r+0x13c>
 8005a68:	4654      	mov	r4, sl
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f04f 0c0a 	mov.w	ip, #10
 8005a70:	9a07      	ldr	r2, [sp, #28]
 8005a72:	4621      	mov	r1, r4
 8005a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d94e      	bls.n	8005b1c <_vfiprintf_r+0x1c4>
 8005a7e:	b1b0      	cbz	r0, 8005aae <_vfiprintf_r+0x156>
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	e014      	b.n	8005aae <_vfiprintf_r+0x156>
 8005a84:	eba0 0308 	sub.w	r3, r0, r8
 8005a88:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	46a2      	mov	sl, r4
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	e7d2      	b.n	8005a3a <_vfiprintf_r+0xe2>
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	1d19      	adds	r1, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	9103      	str	r1, [sp, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfbb      	ittet	lt
 8005aa0:	425b      	neglt	r3, r3
 8005aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa6:	9307      	strge	r3, [sp, #28]
 8005aa8:	9307      	strlt	r3, [sp, #28]
 8005aaa:	bfb8      	it	lt
 8005aac:	9204      	strlt	r2, [sp, #16]
 8005aae:	7823      	ldrb	r3, [r4, #0]
 8005ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab2:	d10c      	bne.n	8005ace <_vfiprintf_r+0x176>
 8005ab4:	7863      	ldrb	r3, [r4, #1]
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	d135      	bne.n	8005b26 <_vfiprintf_r+0x1ce>
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	3402      	adds	r4, #2
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfb8      	it	lt
 8005ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005ba8 <_vfiprintf_r+0x250>
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	4650      	mov	r0, sl
 8005ad6:	7821      	ldrb	r1, [r4, #0]
 8005ad8:	f7ff fa88 	bl	8004fec <memchr>
 8005adc:	b140      	cbz	r0, 8005af0 <_vfiprintf_r+0x198>
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	eba0 000a 	sub.w	r0, r0, sl
 8005ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	3401      	adds	r4, #1
 8005aec:	4303      	orrs	r3, r0
 8005aee:	9304      	str	r3, [sp, #16]
 8005af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af4:	2206      	movs	r2, #6
 8005af6:	482d      	ldr	r0, [pc, #180]	; (8005bac <_vfiprintf_r+0x254>)
 8005af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005afc:	f7ff fa76 	bl	8004fec <memchr>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d03f      	beq.n	8005b84 <_vfiprintf_r+0x22c>
 8005b04:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <_vfiprintf_r+0x258>)
 8005b06:	bb1b      	cbnz	r3, 8005b50 <_vfiprintf_r+0x1f8>
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	3307      	adds	r3, #7
 8005b0c:	f023 0307 	bic.w	r3, r3, #7
 8005b10:	3308      	adds	r3, #8
 8005b12:	9303      	str	r3, [sp, #12]
 8005b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b16:	443b      	add	r3, r7
 8005b18:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1a:	e767      	b.n	80059ec <_vfiprintf_r+0x94>
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	2001      	movs	r0, #1
 8005b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b24:	e7a5      	b.n	8005a72 <_vfiprintf_r+0x11a>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f04f 0c0a 	mov.w	ip, #10
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	3401      	adds	r4, #1
 8005b30:	9305      	str	r3, [sp, #20]
 8005b32:	4620      	mov	r0, r4
 8005b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b38:	3a30      	subs	r2, #48	; 0x30
 8005b3a:	2a09      	cmp	r2, #9
 8005b3c:	d903      	bls.n	8005b46 <_vfiprintf_r+0x1ee>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0c5      	beq.n	8005ace <_vfiprintf_r+0x176>
 8005b42:	9105      	str	r1, [sp, #20]
 8005b44:	e7c3      	b.n	8005ace <_vfiprintf_r+0x176>
 8005b46:	4604      	mov	r4, r0
 8005b48:	2301      	movs	r3, #1
 8005b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b4e:	e7f0      	b.n	8005b32 <_vfiprintf_r+0x1da>
 8005b50:	ab03      	add	r3, sp, #12
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	462a      	mov	r2, r5
 8005b56:	4630      	mov	r0, r6
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <_vfiprintf_r+0x25c>)
 8005b5a:	a904      	add	r1, sp, #16
 8005b5c:	f7fd fc94 	bl	8003488 <_printf_float>
 8005b60:	4607      	mov	r7, r0
 8005b62:	1c78      	adds	r0, r7, #1
 8005b64:	d1d6      	bne.n	8005b14 <_vfiprintf_r+0x1bc>
 8005b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b68:	07d9      	lsls	r1, r3, #31
 8005b6a:	d405      	bmi.n	8005b78 <_vfiprintf_r+0x220>
 8005b6c:	89ab      	ldrh	r3, [r5, #12]
 8005b6e:	059a      	lsls	r2, r3, #22
 8005b70:	d402      	bmi.n	8005b78 <_vfiprintf_r+0x220>
 8005b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b74:	f7ff f9cc 	bl	8004f10 <__retarget_lock_release_recursive>
 8005b78:	89ab      	ldrh	r3, [r5, #12]
 8005b7a:	065b      	lsls	r3, r3, #25
 8005b7c:	f53f af12 	bmi.w	80059a4 <_vfiprintf_r+0x4c>
 8005b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b82:	e711      	b.n	80059a8 <_vfiprintf_r+0x50>
 8005b84:	ab03      	add	r3, sp, #12
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	462a      	mov	r2, r5
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <_vfiprintf_r+0x25c>)
 8005b8e:	a904      	add	r1, sp, #16
 8005b90:	f7fd ff16 	bl	80039c0 <_printf_i>
 8005b94:	e7e4      	b.n	8005b60 <_vfiprintf_r+0x208>
 8005b96:	bf00      	nop
 8005b98:	08006148 	.word	0x08006148
 8005b9c:	08006168 	.word	0x08006168
 8005ba0:	08006128 	.word	0x08006128
 8005ba4:	080062e4 	.word	0x080062e4
 8005ba8:	080062ea 	.word	0x080062ea
 8005bac:	080062ee 	.word	0x080062ee
 8005bb0:	08003489 	.word	0x08003489
 8005bb4:	08005933 	.word	0x08005933

08005bb8 <_sbrk_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4d05      	ldr	r5, [pc, #20]	; (8005bd4 <_sbrk_r+0x1c>)
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fb ff8a 	bl	8001adc <_sbrk>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_sbrk_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_sbrk_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000310 	.word	0x20000310

08005bd8 <__sread>:
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	f000 f8e2 	bl	8005da8 <_read_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	bfab      	itete	ge
 8005be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bea:	89a3      	ldrhlt	r3, [r4, #12]
 8005bec:	181b      	addge	r3, r3, r0
 8005bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bf2:	bfac      	ite	ge
 8005bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bf6:	81a3      	strhlt	r3, [r4, #12]
 8005bf8:	bd10      	pop	{r4, pc}

08005bfa <__swrite>:
 8005bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfe:	461f      	mov	r7, r3
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	4605      	mov	r5, r0
 8005c04:	05db      	lsls	r3, r3, #23
 8005c06:	460c      	mov	r4, r1
 8005c08:	4616      	mov	r6, r2
 8005c0a:	d505      	bpl.n	8005c18 <__swrite+0x1e>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c14:	f000 f898 	bl	8005d48 <_lseek_r>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	4632      	mov	r2, r6
 8005c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	4628      	mov	r0, r5
 8005c24:	463b      	mov	r3, r7
 8005c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2e:	f000 b817 	b.w	8005c60 <_write_r>

08005c32 <__sseek>:
 8005c32:	b510      	push	{r4, lr}
 8005c34:	460c      	mov	r4, r1
 8005c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3a:	f000 f885 	bl	8005d48 <_lseek_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	bf15      	itete	ne
 8005c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c4e:	81a3      	strheq	r3, [r4, #12]
 8005c50:	bf18      	it	ne
 8005c52:	81a3      	strhne	r3, [r4, #12]
 8005c54:	bd10      	pop	{r4, pc}

08005c56 <__sclose>:
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 b831 	b.w	8005cc0 <_close_r>
	...

08005c60 <_write_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4d05      	ldr	r5, [pc, #20]	; (8005c80 <_write_r+0x20>)
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7fb fee8 	bl	8001a44 <_write>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_write_r+0x1e>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_write_r+0x1e>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20000310 	.word	0x20000310

08005c84 <__assert_func>:
 8005c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c86:	4614      	mov	r4, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <__assert_func+0x2c>)
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68d8      	ldr	r0, [r3, #12]
 8005c92:	b14c      	cbz	r4, 8005ca8 <__assert_func+0x24>
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <__assert_func+0x30>)
 8005c96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c9a:	9100      	str	r1, [sp, #0]
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	4906      	ldr	r1, [pc, #24]	; (8005cb8 <__assert_func+0x34>)
 8005ca0:	f000 f81e 	bl	8005ce0 <fiprintf>
 8005ca4:	f000 f89f 	bl	8005de6 <abort>
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <__assert_func+0x38>)
 8005caa:	461c      	mov	r4, r3
 8005cac:	e7f3      	b.n	8005c96 <__assert_func+0x12>
 8005cae:	bf00      	nop
 8005cb0:	2000000c 	.word	0x2000000c
 8005cb4:	080062f5 	.word	0x080062f5
 8005cb8:	08006302 	.word	0x08006302
 8005cbc:	08006330 	.word	0x08006330

08005cc0 <_close_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4d05      	ldr	r5, [pc, #20]	; (8005cdc <_close_r+0x1c>)
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	4608      	mov	r0, r1
 8005cca:	602b      	str	r3, [r5, #0]
 8005ccc:	f7fb fed6 	bl	8001a7c <_close>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d102      	bne.n	8005cda <_close_r+0x1a>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b103      	cbz	r3, 8005cda <_close_r+0x1a>
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	20000310 	.word	0x20000310

08005ce0 <fiprintf>:
 8005ce0:	b40e      	push	{r1, r2, r3}
 8005ce2:	b503      	push	{r0, r1, lr}
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	ab03      	add	r3, sp, #12
 8005ce8:	4805      	ldr	r0, [pc, #20]	; (8005d00 <fiprintf+0x20>)
 8005cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cee:	6800      	ldr	r0, [r0, #0]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	f7ff fe31 	bl	8005958 <_vfiprintf_r>
 8005cf6:	b002      	add	sp, #8
 8005cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cfc:	b003      	add	sp, #12
 8005cfe:	4770      	bx	lr
 8005d00:	2000000c 	.word	0x2000000c

08005d04 <_fstat_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	2300      	movs	r3, #0
 8005d08:	4d06      	ldr	r5, [pc, #24]	; (8005d24 <_fstat_r+0x20>)
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	f7fb febe 	bl	8001a92 <_fstat>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	d102      	bne.n	8005d20 <_fstat_r+0x1c>
 8005d1a:	682b      	ldr	r3, [r5, #0]
 8005d1c:	b103      	cbz	r3, 8005d20 <_fstat_r+0x1c>
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	bd38      	pop	{r3, r4, r5, pc}
 8005d22:	bf00      	nop
 8005d24:	20000310 	.word	0x20000310

08005d28 <_isatty_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4d05      	ldr	r5, [pc, #20]	; (8005d44 <_isatty_r+0x1c>)
 8005d2e:	4604      	mov	r4, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	f7fb febc 	bl	8001ab0 <_isatty>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_isatty_r+0x1a>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_isatty_r+0x1a>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000310 	.word	0x20000310

08005d48 <_lseek_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	2200      	movs	r2, #0
 8005d52:	4d05      	ldr	r5, [pc, #20]	; (8005d68 <_lseek_r+0x20>)
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f7fb feb4 	bl	8001ac4 <_lseek>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_lseek_r+0x1e>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_lseek_r+0x1e>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	20000310 	.word	0x20000310

08005d6c <__ascii_mbtowc>:
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	b901      	cbnz	r1, 8005d72 <__ascii_mbtowc+0x6>
 8005d70:	a901      	add	r1, sp, #4
 8005d72:	b142      	cbz	r2, 8005d86 <__ascii_mbtowc+0x1a>
 8005d74:	b14b      	cbz	r3, 8005d8a <__ascii_mbtowc+0x1e>
 8005d76:	7813      	ldrb	r3, [r2, #0]
 8005d78:	600b      	str	r3, [r1, #0]
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	1e10      	subs	r0, r2, #0
 8005d7e:	bf18      	it	ne
 8005d80:	2001      	movne	r0, #1
 8005d82:	b002      	add	sp, #8
 8005d84:	4770      	bx	lr
 8005d86:	4610      	mov	r0, r2
 8005d88:	e7fb      	b.n	8005d82 <__ascii_mbtowc+0x16>
 8005d8a:	f06f 0001 	mvn.w	r0, #1
 8005d8e:	e7f8      	b.n	8005d82 <__ascii_mbtowc+0x16>

08005d90 <__malloc_lock>:
 8005d90:	4801      	ldr	r0, [pc, #4]	; (8005d98 <__malloc_lock+0x8>)
 8005d92:	f7ff b8bc 	b.w	8004f0e <__retarget_lock_acquire_recursive>
 8005d96:	bf00      	nop
 8005d98:	20000304 	.word	0x20000304

08005d9c <__malloc_unlock>:
 8005d9c:	4801      	ldr	r0, [pc, #4]	; (8005da4 <__malloc_unlock+0x8>)
 8005d9e:	f7ff b8b7 	b.w	8004f10 <__retarget_lock_release_recursive>
 8005da2:	bf00      	nop
 8005da4:	20000304 	.word	0x20000304

08005da8 <_read_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	2200      	movs	r2, #0
 8005db2:	4d05      	ldr	r5, [pc, #20]	; (8005dc8 <_read_r+0x20>)
 8005db4:	602a      	str	r2, [r5, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f7fb fe27 	bl	8001a0a <_read>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_read_r+0x1e>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_read_r+0x1e>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000310 	.word	0x20000310

08005dcc <__ascii_wctomb>:
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4608      	mov	r0, r1
 8005dd0:	b141      	cbz	r1, 8005de4 <__ascii_wctomb+0x18>
 8005dd2:	2aff      	cmp	r2, #255	; 0xff
 8005dd4:	d904      	bls.n	8005de0 <__ascii_wctomb+0x14>
 8005dd6:	228a      	movs	r2, #138	; 0x8a
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	4770      	bx	lr
 8005de0:	2001      	movs	r0, #1
 8005de2:	700a      	strb	r2, [r1, #0]
 8005de4:	4770      	bx	lr

08005de6 <abort>:
 8005de6:	2006      	movs	r0, #6
 8005de8:	b508      	push	{r3, lr}
 8005dea:	f000 f82b 	bl	8005e44 <raise>
 8005dee:	2001      	movs	r0, #1
 8005df0:	f7fb fe01 	bl	80019f6 <_exit>

08005df4 <_raise_r>:
 8005df4:	291f      	cmp	r1, #31
 8005df6:	b538      	push	{r3, r4, r5, lr}
 8005df8:	4604      	mov	r4, r0
 8005dfa:	460d      	mov	r5, r1
 8005dfc:	d904      	bls.n	8005e08 <_raise_r+0x14>
 8005dfe:	2316      	movs	r3, #22
 8005e00:	6003      	str	r3, [r0, #0]
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e0a:	b112      	cbz	r2, 8005e12 <_raise_r+0x1e>
 8005e0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e10:	b94b      	cbnz	r3, 8005e26 <_raise_r+0x32>
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 f830 	bl	8005e78 <_getpid_r>
 8005e18:	462a      	mov	r2, r5
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e22:	f000 b817 	b.w	8005e54 <_kill_r>
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d00a      	beq.n	8005e40 <_raise_r+0x4c>
 8005e2a:	1c59      	adds	r1, r3, #1
 8005e2c:	d103      	bne.n	8005e36 <_raise_r+0x42>
 8005e2e:	2316      	movs	r3, #22
 8005e30:	6003      	str	r3, [r0, #0]
 8005e32:	2001      	movs	r0, #1
 8005e34:	e7e7      	b.n	8005e06 <_raise_r+0x12>
 8005e36:	2400      	movs	r4, #0
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e3e:	4798      	blx	r3
 8005e40:	2000      	movs	r0, #0
 8005e42:	e7e0      	b.n	8005e06 <_raise_r+0x12>

08005e44 <raise>:
 8005e44:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <raise+0xc>)
 8005e46:	4601      	mov	r1, r0
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	f7ff bfd3 	b.w	8005df4 <_raise_r>
 8005e4e:	bf00      	nop
 8005e50:	2000000c 	.word	0x2000000c

08005e54 <_kill_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	2300      	movs	r3, #0
 8005e58:	4d06      	ldr	r5, [pc, #24]	; (8005e74 <_kill_r+0x20>)
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	602b      	str	r3, [r5, #0]
 8005e62:	f7fb fdb8 	bl	80019d6 <_kill>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d102      	bne.n	8005e70 <_kill_r+0x1c>
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	b103      	cbz	r3, 8005e70 <_kill_r+0x1c>
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	bd38      	pop	{r3, r4, r5, pc}
 8005e72:	bf00      	nop
 8005e74:	20000310 	.word	0x20000310

08005e78 <_getpid_r>:
 8005e78:	f7fb bda6 	b.w	80019c8 <_getpid>

08005e7c <_init>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr

08005e88 <_fini>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr
